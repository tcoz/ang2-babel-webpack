!function(e){function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var t={};n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=52)}({3:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},38:function(e,n,t){t(3)(t(68))},39:function(e,n,t){t(3)(t(69))},40:function(e,n,t){t(3)(t(70))},41:function(e,n,t){t(3)(t(71))},42:function(e,n,t){t(3)(t(72))},52:function(e,n,t){"use strict";t(40),t(38),t(39),t(42),t(41)},68:function(e,n){e.exports="(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define('@angular/common', ['exports', '@angular/core'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('@angular/core'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.ng.core);\n        global.ng = global.ng || {};\n        global.ng.common = mod.exports;\n    }\n})(this, function (exports, _core) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.ɵd = exports.ɵb = exports.ɵa = exports.ɵc = exports.Location = exports.PathLocationStrategy = exports.HashLocationStrategy = exports.APP_BASE_HREF = exports.LocationStrategy = exports.PlatformLocation = exports.VERSION = exports.isPlatformWorkerUi = exports.isPlatformWorkerApp = exports.isPlatformServer = exports.isPlatformBrowser = exports.ɵPLATFORM_WORKER_UI_ID = exports.ɵPLATFORM_WORKER_APP_ID = exports.ɵPLATFORM_SERVER_ID = exports.ɵPLATFORM_BROWSER_ID = exports.TitleCasePipe = exports.UpperCasePipe = exports.SlicePipe = exports.PercentPipe = exports.DecimalPipe = exports.CurrencyPipe = exports.LowerCasePipe = exports.JsonPipe = exports.I18nSelectPipe = exports.I18nPluralPipe = exports.DatePipe = exports.AsyncPipe = exports.NgComponentOutlet = exports.NgTemplateOutlet = exports.NgSwitchDefault = exports.NgSwitchCase = exports.NgSwitch = exports.NgStyle = exports.NgPluralCase = exports.NgPlural = exports.NgIf = exports.NgForOf = exports.NgFor = exports.NgClass = exports.CommonModule = exports.NgLocalization = exports.NgLocaleLocalization = undefined;\n\n    function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n            }\n\n            return arr2;\n        } else {\n            return Array.from(arr);\n        }\n    }\n\n    var _slicedToArray = function () {\n        function sliceIterator(arr, i) {\n            var _arr = [];\n            var _n = true;\n            var _d = false;\n            var _e = undefined;\n\n            try {\n                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                    _arr.push(_s.value);\n\n                    if (i && _arr.length === i) break;\n                }\n            } catch (err) {\n                _d = true;\n                _e = err;\n            } finally {\n                try {\n                    if (!_n && _i[\"return\"]) _i[\"return\"]();\n                } finally {\n                    if (_d) throw _e;\n                }\n            }\n\n            return _arr;\n        }\n\n        return function (arr, i) {\n            if (Array.isArray(arr)) {\n                return arr;\n            } else if (Symbol.iterator in Object(arr)) {\n                return sliceIterator(arr, i);\n            } else {\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n            }\n        };\n    }();\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var PlatformLocation = function () {\n        function PlatformLocation() {\n            _classCallCheck(this, PlatformLocation);\n        }\n\n        _createClass(PlatformLocation, [{\n            key: 'getBaseHrefFromDOM',\n            value: function getBaseHrefFromDOM() {}\n        }, {\n            key: 'onPopState',\n            value: function onPopState(fn) {}\n        }, {\n            key: 'onHashChange',\n            value: function onHashChange(fn) {}\n        }, {\n            key: 'replaceState',\n            value: function replaceState(state, title, url) {}\n        }, {\n            key: 'pushState',\n            value: function pushState(state, title, url) {}\n        }, {\n            key: 'forward',\n            value: function forward() {}\n        }, {\n            key: 'back',\n            value: function back() {}\n        }, {\n            key: 'pathname',\n            get: function get() {\n                return null;\n            }\n        }, {\n            key: 'search',\n            get: function get() {\n                return null;\n            }\n        }, {\n            key: 'hash',\n            get: function get() {\n                return null;\n            }\n        }]);\n\n        return PlatformLocation;\n    }();\n\n    var LocationStrategy = function () {\n        function LocationStrategy() {\n            _classCallCheck(this, LocationStrategy);\n        }\n\n        _createClass(LocationStrategy, [{\n            key: 'path',\n            value: function path(includeHash) {}\n        }, {\n            key: 'prepareExternalUrl',\n            value: function prepareExternalUrl(internal) {}\n        }, {\n            key: 'pushState',\n            value: function pushState(state, title, url, queryParams) {}\n        }, {\n            key: 'replaceState',\n            value: function replaceState(state, title, url, queryParams) {}\n        }, {\n            key: 'forward',\n            value: function forward() {}\n        }, {\n            key: 'back',\n            value: function back() {}\n        }, {\n            key: 'onPopState',\n            value: function onPopState(fn) {}\n        }, {\n            key: 'getBaseHref',\n            value: function getBaseHref() {}\n        }]);\n\n        return LocationStrategy;\n    }();\n\n    /**\n     * The `APP_BASE_HREF` token represents the base href to be used with the\n     * {@link PathLocationStrategy}.\n     *\n     * If you're using {@link PathLocationStrategy}, you must provide a provider to a string\n     * representing the URL prefix that should be preserved when generating and recognizing\n     * URLs.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {Component, NgModule} from '@angular/core';\n     * import {APP_BASE_HREF} from '@angular/common';\n     *\n     * @NgModule({\n     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n     * })\n     * class AppModule {}\n     * ```\n     *\n     * @stable\n     */\n    var /** @type {?} */APP_BASE_HREF = new _core.InjectionToken('appBaseHref');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */globalScope = void 0;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        } else {\n            globalScope = global;\n        }\n    } else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var /** @type {?} */_global = globalScope;\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function getTypeNameForDebugging(type) {\n        return type['name'] || (typeof type === 'undefined' ? 'undefined' : _typeof(type));\n    }\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    _global.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return '' + token.overriddenName;\n        }\n        if (token.name) {\n            return '' + token.name;\n        }\n        var /** @type {?} */res = token.toString();\n        var /** @type {?} */newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n\n    var NumberWrapper = function () {\n        function NumberWrapper() {\n            _classCallCheck(this, NumberWrapper);\n        }\n\n        _createClass(NumberWrapper, null, [{\n            key: 'parseIntAutoRadix',\n            value: function parseIntAutoRadix(text) {\n                var /** @type {?} */result = parseInt(text);\n                if (isNaN(result)) {\n                    throw new Error('Invalid integer literal when parsing ' + text);\n                }\n                return result;\n            }\n        }, {\n            key: 'isNumeric',\n            value: function isNumeric(value) {\n                return !isNaN(value - parseFloat(value));\n            }\n        }]);\n\n        return NumberWrapper;\n    }();\n\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object');\n    }\n    var /** @type {?} */_symbolIterator = null;\n    /**\n     * @return {?}\n     */\n    function getSymbolIterator() {\n        if (!_symbolIterator) {\n            if (globalScope.Symbol && Symbol.iterator) {\n                _symbolIterator = Symbol.iterator;\n            } else {\n                // es6-shim specific logic\n                var /** @type {?} */keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var /** @type {?} */i = 0; i < keys.length; ++i) {\n                    var /** @type {?} */key = keys[i];\n                    if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n\n    /**\n     * \\@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.\n     * \\@description\n     * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\n     * to the URL's path or the URL's hash segment.\n     *\n     * Note: it's better to use {\\@link Router#navigate} service to trigger route changes. Use\n     * `Location` only if you need to interact with or create normalized URLs outside of\n     * routing.\n     *\n     * `Location` is responsible for normalizing the URL against the application's base href.\n     * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n     * trailing slash:\n     * - `/my/app/user/123` is normalized\n     * - `my/app/user/123` **is not** normalized\n     * - `/my/app/user/123/` **is not** normalized\n     *\n     * ### Example\n     * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n     * \\@stable\n     */\n\n    var Location = function () {\n        /**\n         * @param {?} platformStrategy\n         */\n        function Location(platformStrategy) {\n            var _this = this;\n\n            _classCallCheck(this, Location);\n\n            /** @internal */\n            this._subject = new _core.EventEmitter();\n            this._platformStrategy = platformStrategy;\n            var browserBaseHref = this._platformStrategy.getBaseHref();\n            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n            this._platformStrategy.onPopState(function (ev) {\n                _this._subject.emit({\n                    'url': _this.path(true),\n                    'pop': true,\n                    'type': ev.type\n                });\n            });\n        }\n        /**\n         * @param {?=} includeHash\n         * @return {?}\n         */\n\n\n        _createClass(Location, [{\n            key: 'path',\n            value: function path() {\n                var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n                return this.normalize(this._platformStrategy.path(includeHash));\n            }\n        }, {\n            key: 'isCurrentPathEqualTo',\n            value: function isCurrentPathEqualTo(path) {\n                var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n                return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n            }\n        }, {\n            key: 'normalize',\n            value: function normalize(url) {\n                return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n            }\n        }, {\n            key: 'prepareExternalUrl',\n            value: function prepareExternalUrl(url) {\n                if (url && url[0] !== '/') {\n                    url = '/' + url;\n                }\n                return this._platformStrategy.prepareExternalUrl(url);\n            }\n        }, {\n            key: 'go',\n            value: function go(path) {\n                var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n                this._platformStrategy.pushState(null, '', path, query);\n            }\n        }, {\n            key: 'replaceState',\n            value: function replaceState(path) {\n                var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n                this._platformStrategy.replaceState(null, '', path, query);\n            }\n        }, {\n            key: 'forward',\n            value: function forward() {\n                this._platformStrategy.forward();\n            }\n        }, {\n            key: 'back',\n            value: function back() {\n                this._platformStrategy.back();\n            }\n        }, {\n            key: 'subscribe',\n            value: function subscribe(onNext) {\n                var onThrow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                var onReturn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n            }\n        }], [{\n            key: 'normalizeQueryParams',\n            value: function normalizeQueryParams(params) {\n                return params && params[0] !== '?' ? '?' + params : params;\n            }\n        }, {\n            key: 'joinWithSlash',\n            value: function joinWithSlash(start, end) {\n                if (start.length == 0) {\n                    return end;\n                }\n                if (end.length == 0) {\n                    return start;\n                }\n                var /** @type {?} */slashes = 0;\n                if (start.endsWith('/')) {\n                    slashes++;\n                }\n                if (end.startsWith('/')) {\n                    slashes++;\n                }\n                if (slashes == 2) {\n                    return start + end.substring(1);\n                }\n                if (slashes == 1) {\n                    return start + end;\n                }\n                return start + '/' + end;\n            }\n        }, {\n            key: 'stripTrailingSlash',\n            value: function stripTrailingSlash(url) {\n                return url.replace(/\\/$/, '');\n            }\n        }]);\n\n        return Location;\n    }();\n\n    Location.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    Location.ctorParameters = function () {\n        return [{ type: LocationStrategy }];\n    };\n    /**\n     * @param {?} baseHref\n     * @param {?} url\n     * @return {?}\n     */\n    function _stripBaseHref(baseHref, url) {\n        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function _stripIndexHtml(url) {\n        return url.replace(/\\/index.html$/, '');\n    }\n\n    /**\n     * \\@whatItDoes Use URL hash for storing application location data.\n     * \\@description\n     * `HashLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n     * {\\@link Location} service to represent its state in the\n     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n     * of the browser's URL.\n     *\n     * For instance, if you call `location.go('/foo')`, the browser's URL will become\n     * `example.com#/foo`.\n     *\n     * ### Example\n     *\n     * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n     *\n     * \\@stable\n     */\n\n    var HashLocationStrategy = function (_LocationStrategy) {\n        _inherits(HashLocationStrategy, _LocationStrategy);\n\n        /**\n         * @param {?} _platformLocation\n         * @param {?=} _baseHref\n         */\n        function HashLocationStrategy(_platformLocation, _baseHref) {\n            _classCallCheck(this, HashLocationStrategy);\n\n            var _this2 = _possibleConstructorReturn(this, (HashLocationStrategy.__proto__ || Object.getPrototypeOf(HashLocationStrategy)).call(this));\n\n            _this2._platformLocation = _platformLocation;\n            _this2._baseHref = '';\n            if (isPresent(_baseHref)) {\n                _this2._baseHref = _baseHref;\n            }\n            return _this2;\n        }\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n\n\n        _createClass(HashLocationStrategy, [{\n            key: 'onPopState',\n            value: function onPopState(fn) {\n                this._platformLocation.onPopState(fn);\n                this._platformLocation.onHashChange(fn);\n            }\n        }, {\n            key: 'getBaseHref',\n            value: function getBaseHref() {\n                return this._baseHref;\n            }\n        }, {\n            key: 'path',\n            value: function path() {\n                var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n                // the hash value is always prefixed with a `#`\n                // and if it is empty then it will stay empty\n                var /** @type {?} */path = this._platformLocation.hash;\n                if (!isPresent(path)) path = '#';\n                return path.length > 0 ? path.substring(1) : path;\n            }\n        }, {\n            key: 'prepareExternalUrl',\n            value: function prepareExternalUrl(internal) {\n                var /** @type {?} */url = Location.joinWithSlash(this._baseHref, internal);\n                return url.length > 0 ? '#' + url : url;\n            }\n        }, {\n            key: 'pushState',\n            value: function pushState(state, title, path, queryParams) {\n                var /** @type {?} */url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n                if (url.length == 0) {\n                    url = this._platformLocation.pathname;\n                }\n                this._platformLocation.pushState(state, title, url);\n            }\n        }, {\n            key: 'replaceState',\n            value: function replaceState(state, title, path, queryParams) {\n                var /** @type {?} */url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n                if (url.length == 0) {\n                    url = this._platformLocation.pathname;\n                }\n                this._platformLocation.replaceState(state, title, url);\n            }\n        }, {\n            key: 'forward',\n            value: function forward() {\n                this._platformLocation.forward();\n            }\n        }, {\n            key: 'back',\n            value: function back() {\n                this._platformLocation.back();\n            }\n        }]);\n\n        return HashLocationStrategy;\n    }(LocationStrategy);\n\n    HashLocationStrategy.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    HashLocationStrategy.ctorParameters = function () {\n        return [{ type: PlatformLocation }, { type: undefined, decorators: [{ type: _core.Optional }, { type: _core.Inject, args: [APP_BASE_HREF] }] }];\n    };\n\n    /**\n     * \\@whatItDoes Use URL for storing application location data.\n     * \\@description\n     * `PathLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n     * {\\@link Location} service to represent its state in the\n     * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n     * browser's URL.\n     *\n     * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n     * or add a base element to the document. This URL prefix that will be preserved\n     * when generating and recognizing URLs.\n     *\n     * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n     * `location.go('/foo')`, the browser's URL will become\n     * `example.com/my/app/foo`.\n     *\n     * Similarly, if you add `<base href='/my/app'/>` to the document and call\n     * `location.go('/foo')`, the browser's URL will become\n     * `example.com/my/app/foo`.\n     *\n     * ### Example\n     *\n     * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n     *\n     * \\@stable\n     */\n\n    var PathLocationStrategy = function (_LocationStrategy2) {\n        _inherits(PathLocationStrategy, _LocationStrategy2);\n\n        /**\n         * @param {?} _platformLocation\n         * @param {?=} href\n         */\n        function PathLocationStrategy(_platformLocation, href) {\n            _classCallCheck(this, PathLocationStrategy);\n\n            var _this3 = _possibleConstructorReturn(this, (PathLocationStrategy.__proto__ || Object.getPrototypeOf(PathLocationStrategy)).call(this));\n\n            _this3._platformLocation = _platformLocation;\n            if (isBlank(href)) {\n                href = _this3._platformLocation.getBaseHrefFromDOM();\n            }\n            if (isBlank(href)) {\n                throw new Error('No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.');\n            }\n            _this3._baseHref = href;\n            return _this3;\n        }\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n\n\n        _createClass(PathLocationStrategy, [{\n            key: 'onPopState',\n            value: function onPopState(fn) {\n                this._platformLocation.onPopState(fn);\n                this._platformLocation.onHashChange(fn);\n            }\n        }, {\n            key: 'getBaseHref',\n            value: function getBaseHref() {\n                return this._baseHref;\n            }\n        }, {\n            key: 'prepareExternalUrl',\n            value: function prepareExternalUrl(internal) {\n                return Location.joinWithSlash(this._baseHref, internal);\n            }\n        }, {\n            key: 'path',\n            value: function path() {\n                var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n                var /** @type {?} */pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);\n                var /** @type {?} */hash = this._platformLocation.hash;\n                return hash && includeHash ? '' + pathname + hash : pathname;\n            }\n        }, {\n            key: 'pushState',\n            value: function pushState(state, title, url, queryParams) {\n                var /** @type {?} */externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n                this._platformLocation.pushState(state, title, externalUrl);\n            }\n        }, {\n            key: 'replaceState',\n            value: function replaceState(state, title, url, queryParams) {\n                var /** @type {?} */externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n                this._platformLocation.replaceState(state, title, externalUrl);\n            }\n        }, {\n            key: 'forward',\n            value: function forward() {\n                this._platformLocation.forward();\n            }\n        }, {\n            key: 'back',\n            value: function back() {\n                this._platformLocation.back();\n            }\n        }]);\n\n        return PathLocationStrategy;\n    }(LocationStrategy);\n\n    PathLocationStrategy.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    PathLocationStrategy.ctorParameters = function () {\n        return [{ type: PlatformLocation }, { type: undefined, decorators: [{ type: _core.Optional }, { type: _core.Inject, args: [APP_BASE_HREF] }] }];\n    };\n\n    /**\n     * \\@experimental\n     * @abstract\n     */\n\n    var NgLocalization = function () {\n        function NgLocalization() {\n            _classCallCheck(this, NgLocalization);\n        }\n\n        _createClass(NgLocalization, [{\n            key: 'getPluralCategory',\n            value: function getPluralCategory(value) {}\n        }]);\n\n        return NgLocalization;\n    }();\n\n    /**\n     * Returns the plural category for a given value.\n     * - \"=value\" when the case exists,\n     * - the plural category otherwise\n     *\n     * \\@internal\n     * @param {?} value\n     * @param {?} cases\n     * @param {?} ngLocalization\n     * @return {?}\n     */\n    function getPluralCategory(value, cases, ngLocalization) {\n        var /** @type {?} */key = '=' + value;\n        if (cases.indexOf(key) > -1) {\n            return key;\n        }\n        key = ngLocalization.getPluralCategory(value);\n        if (cases.indexOf(key) > -1) {\n            return key;\n        }\n        if (cases.indexOf('other') > -1) {\n            return 'other';\n        }\n        throw new Error('No plural message found for value \"' + value + '\"');\n    }\n    /**\n     * Returns the plural case based on the locale\n     *\n     * \\@experimental\n     */\n\n    var NgLocaleLocalization = function (_NgLocalization) {\n        _inherits(NgLocaleLocalization, _NgLocalization);\n\n        /**\n         * @param {?} locale\n         */\n        function NgLocaleLocalization(locale) {\n            _classCallCheck(this, NgLocaleLocalization);\n\n            var _this4 = _possibleConstructorReturn(this, (NgLocaleLocalization.__proto__ || Object.getPrototypeOf(NgLocaleLocalization)).call(this));\n\n            _this4.locale = locale;\n            return _this4;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n\n\n        _createClass(NgLocaleLocalization, [{\n            key: 'getPluralCategory',\n            value: function getPluralCategory(value) {\n                var /** @type {?} */plural = getPluralCase(this.locale, value);\n                switch (plural) {\n                    case Plural.Zero:\n                        return 'zero';\n                    case Plural.One:\n                        return 'one';\n                    case Plural.Two:\n                        return 'two';\n                    case Plural.Few:\n                        return 'few';\n                    case Plural.Many:\n                        return 'many';\n                    default:\n                        return 'other';\n                }\n            }\n        }]);\n\n        return NgLocaleLocalization;\n    }(NgLocalization);\n\n    NgLocaleLocalization.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    NgLocaleLocalization.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [_core.LOCALE_ID] }] }];\n    };\n    var Plural = {};\n    Plural.Zero = 0;\n    Plural.One = 1;\n    Plural.Two = 2;\n    Plural.Few = 3;\n    Plural.Many = 4;\n    Plural.Other = 5;\n    Plural[Plural.Zero] = \"Zero\";\n    Plural[Plural.One] = \"One\";\n    Plural[Plural.Two] = \"Two\";\n    Plural[Plural.Few] = \"Few\";\n    Plural[Plural.Many] = \"Many\";\n    Plural[Plural.Other] = \"Other\";\n    /**\n     * Returns the plural case based on the locale\n     *\n     * \\@experimental\n     * @param {?} locale\n     * @param {?} nLike\n     * @return {?}\n     */\n    function getPluralCase(locale, nLike) {\n        // TODO(vicb): lazy compute\n        if (typeof nLike === 'string') {\n            nLike = parseInt( /** @type {?} */nLike, 10);\n        }\n        var /** @type {?} */n = nLike;\n        var /** @type {?} */nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n        var /** @type {?} */i = Math.floor(Math.abs(n));\n        var /** @type {?} */v = nDecimal.length;\n        var /** @type {?} */f = parseInt(nDecimal, 10);\n        var /** @type {?} */t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n        var /** @type {?} */lang = locale.split('-')[0].toLowerCase();\n        switch (lang) {\n            case 'af':\n            case 'asa':\n            case 'az':\n            case 'bem':\n            case 'bez':\n            case 'bg':\n            case 'brx':\n            case 'ce':\n            case 'cgg':\n            case 'chr':\n            case 'ckb':\n            case 'ee':\n            case 'el':\n            case 'eo':\n            case 'es':\n            case 'eu':\n            case 'fo':\n            case 'fur':\n            case 'gsw':\n            case 'ha':\n            case 'haw':\n            case 'hu':\n            case 'jgo':\n            case 'jmc':\n            case 'ka':\n            case 'kk':\n            case 'kkj':\n            case 'kl':\n            case 'ks':\n            case 'ksb':\n            case 'ky':\n            case 'lb':\n            case 'lg':\n            case 'mas':\n            case 'mgo':\n            case 'ml':\n            case 'mn':\n            case 'nb':\n            case 'nd':\n            case 'ne':\n            case 'nn':\n            case 'nnh':\n            case 'nyn':\n            case 'om':\n            case 'or':\n            case 'os':\n            case 'ps':\n            case 'rm':\n            case 'rof':\n            case 'rwk':\n            case 'saq':\n            case 'seh':\n            case 'sn':\n            case 'so':\n            case 'sq':\n            case 'ta':\n            case 'te':\n            case 'teo':\n            case 'tk':\n            case 'tr':\n            case 'ug':\n            case 'uz':\n            case 'vo':\n            case 'vun':\n            case 'wae':\n            case 'xog':\n                if (n === 1) return Plural.One;\n                return Plural.Other;\n            case 'agq':\n            case 'bas':\n            case 'cu':\n            case 'dav':\n            case 'dje':\n            case 'dua':\n            case 'dyo':\n            case 'ebu':\n            case 'ewo':\n            case 'guz':\n            case 'kam':\n            case 'khq':\n            case 'ki':\n            case 'kln':\n            case 'kok':\n            case 'ksf':\n            case 'lrc':\n            case 'lu':\n            case 'luo':\n            case 'luy':\n            case 'mer':\n            case 'mfe':\n            case 'mgh':\n            case 'mua':\n            case 'mzn':\n            case 'nmg':\n            case 'nus':\n            case 'qu':\n            case 'rn':\n            case 'rw':\n            case 'sbp':\n            case 'twq':\n            case 'vai':\n            case 'yav':\n            case 'yue':\n            case 'zgh':\n            case 'ak':\n            case 'ln':\n            case 'mg':\n            case 'pa':\n            case 'ti':\n                if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;\n                return Plural.Other;\n            case 'am':\n            case 'as':\n            case 'bn':\n            case 'fa':\n            case 'gu':\n            case 'hi':\n            case 'kn':\n            case 'mr':\n            case 'zu':\n                if (i === 0 || n === 1) return Plural.One;\n                return Plural.Other;\n            case 'ar':\n                if (n === 0) return Plural.Zero;\n                if (n === 1) return Plural.One;\n                if (n === 2) return Plural.Two;\n                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;\n                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;\n                return Plural.Other;\n            case 'ast':\n            case 'ca':\n            case 'de':\n            case 'en':\n            case 'et':\n            case 'fi':\n            case 'fy':\n            case 'gl':\n            case 'it':\n            case 'nl':\n            case 'sv':\n            case 'sw':\n            case 'ur':\n            case 'yi':\n                if (i === 1 && v === 0) return Plural.One;\n                return Plural.Other;\n            case 'be':\n                if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;\n                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14)) return Plural.Few;\n                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14) return Plural.Many;\n                return Plural.Other;\n            case 'br':\n                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;\n                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;\n                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99)) return Plural.Few;\n                if (!(n === 0) && n % 1e6 === 0) return Plural.Many;\n                return Plural.Other;\n            case 'bs':\n            case 'hr':\n            case 'sr':\n                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11)) return Plural.One;\n                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14)) return Plural.Few;\n                return Plural.Other;\n            case 'cs':\n            case 'sk':\n                if (i === 1 && v === 0) return Plural.One;\n                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;\n                if (!(v === 0)) return Plural.Many;\n                return Plural.Other;\n            case 'cy':\n                if (n === 0) return Plural.Zero;\n                if (n === 1) return Plural.One;\n                if (n === 2) return Plural.Two;\n                if (n === 3) return Plural.Few;\n                if (n === 6) return Plural.Many;\n                return Plural.Other;\n            case 'da':\n                if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;\n                return Plural.Other;\n            case 'dsb':\n            case 'hsb':\n                if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;\n                if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;\n                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4) return Plural.Few;\n                return Plural.Other;\n            case 'ff':\n            case 'fr':\n            case 'hy':\n            case 'kab':\n                if (i === 0 || i === 1) return Plural.One;\n                return Plural.Other;\n            case 'fil':\n                if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9)) return Plural.One;\n                return Plural.Other;\n            case 'ga':\n                if (n === 1) return Plural.One;\n                if (n === 2) return Plural.Two;\n                if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;\n                if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;\n                return Plural.Other;\n            case 'gd':\n                if (n === 1 || n === 11) return Plural.One;\n                if (n === 2 || n === 12) return Plural.Two;\n                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;\n                return Plural.Other;\n            case 'gv':\n                if (v === 0 && i % 10 === 1) return Plural.One;\n                if (v === 0 && i % 10 === 2) return Plural.Two;\n                if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80)) return Plural.Few;\n                if (!(v === 0)) return Plural.Many;\n                return Plural.Other;\n            case 'he':\n                if (i === 1 && v === 0) return Plural.One;\n                if (i === 2 && v === 0) return Plural.Two;\n                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;\n                return Plural.Other;\n            case 'is':\n                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;\n                return Plural.Other;\n            case 'ksh':\n                if (n === 0) return Plural.Zero;\n                if (n === 1) return Plural.One;\n                return Plural.Other;\n            case 'kw':\n            case 'naq':\n            case 'se':\n            case 'smn':\n                if (n === 1) return Plural.One;\n                if (n === 2) return Plural.Two;\n                return Plural.Other;\n            case 'lag':\n                if (n === 0) return Plural.Zero;\n                if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;\n                return Plural.Other;\n            case 'lt':\n                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;\n                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.Few;\n                if (!(f === 0)) return Plural.Many;\n                return Plural.Other;\n            case 'lv':\n            case 'prg':\n                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19) return Plural.Zero;\n                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1) return Plural.One;\n                return Plural.Other;\n            case 'mk':\n                if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;\n                return Plural.Other;\n            case 'mt':\n                if (n === 1) return Plural.One;\n                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10) return Plural.Few;\n                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;\n                return Plural.Other;\n            case 'pl':\n                if (i === 1 && v === 0) return Plural.One;\n                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;\n                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14) return Plural.Many;\n                return Plural.Other;\n            case 'pt':\n                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;\n                return Plural.Other;\n            case 'ro':\n                if (i === 1 && v === 0) return Plural.One;\n                if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19) return Plural.Few;\n                return Plural.Other;\n            case 'ru':\n            case 'uk':\n                if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;\n                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;\n                if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14) return Plural.Many;\n                return Plural.Other;\n            case 'shi':\n                if (i === 0 || n === 1) return Plural.One;\n                if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;\n                return Plural.Other;\n            case 'si':\n                if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;\n                return Plural.Other;\n            case 'sl':\n                if (v === 0 && i % 100 === 1) return Plural.One;\n                if (v === 0 && i % 100 === 2) return Plural.Two;\n                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0)) return Plural.Few;\n                return Plural.Other;\n            case 'tzm':\n                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99) return Plural.One;\n                return Plural.Other;\n            default:\n                return Plural.Other;\n        }\n    }\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj)) return false;\n        return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop\n    }\n\n    /**\n     * \\@ngModule CommonModule\n     *\n     * \\@whatItDoes Adds and removes CSS classes on an HTML element.\n     *\n     * \\@howToUse\n     * ```\n     *     <some-element [ngClass]=\"'first second'\">...</some-element>\n     *\n     *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n     *\n     *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n     *\n     *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n     *\n     *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n     * ```\n     *\n     * \\@description\n     *\n     * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n     * - `string` - the CSS classes listed in the string (space delimited) are added,\n     * - `Array` - the CSS classes declared as Array elements are added,\n     * - `Object` - keys are CSS classes that get added when the expression given in the value\n     *              evaluates to a truthy value, otherwise they are removed.\n     *\n     * \\@stable\n     */\n\n    var NgClass = function () {\n        /**\n         * @param {?} _iterableDiffers\n         * @param {?} _keyValueDiffers\n         * @param {?} _ngEl\n         * @param {?} _renderer\n         */\n        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {\n            _classCallCheck(this, NgClass);\n\n            this._iterableDiffers = _iterableDiffers;\n            this._keyValueDiffers = _keyValueDiffers;\n            this._ngEl = _ngEl;\n            this._renderer = _renderer;\n            this._initialClasses = [];\n        }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n\n\n        _createClass(NgClass, [{\n            key: 'ngDoCheck',\n            value: function ngDoCheck() {\n                if (this._iterableDiffer) {\n                    var /** @type {?} */iterableChanges = this._iterableDiffer.diff( /** @type {?} */this._rawClass);\n                    if (iterableChanges) {\n                        this._applyIterableChanges(iterableChanges);\n                    }\n                } else if (this._keyValueDiffer) {\n                    var /** @type {?} */keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */this._rawClass);\n                    if (keyValueChanges) {\n                        this._applyKeyValueChanges(keyValueChanges);\n                    }\n                }\n            }\n        }, {\n            key: '_cleanupClasses',\n            value: function _cleanupClasses(rawClassVal) {\n                this._applyClasses(rawClassVal, true);\n                this._applyInitialClasses(false);\n            }\n        }, {\n            key: '_applyKeyValueChanges',\n            value: function _applyKeyValueChanges(changes) {\n                var _this5 = this;\n\n                changes.forEachAddedItem(function (record) {\n                    return _this5._toggleClass(record.key, record.currentValue);\n                });\n                changes.forEachChangedItem(function (record) {\n                    return _this5._toggleClass(record.key, record.currentValue);\n                });\n                changes.forEachRemovedItem(function (record) {\n                    if (record.previousValue) {\n                        _this5._toggleClass(record.key, false);\n                    }\n                });\n            }\n        }, {\n            key: '_applyIterableChanges',\n            value: function _applyIterableChanges(changes) {\n                var _this6 = this;\n\n                changes.forEachAddedItem(function (record) {\n                    if (typeof record.item === 'string') {\n                        _this6._toggleClass(record.item, true);\n                    } else {\n                        throw new Error('NgClass can only toggle CSS classes expressed as strings, got ' + stringify(record.item));\n                    }\n                });\n                changes.forEachRemovedItem(function (record) {\n                    return _this6._toggleClass(record.item, false);\n                });\n            }\n        }, {\n            key: '_applyInitialClasses',\n            value: function _applyInitialClasses(isCleanup) {\n                var _this7 = this;\n\n                this._initialClasses.forEach(function (klass) {\n                    return _this7._toggleClass(klass, !isCleanup);\n                });\n            }\n        }, {\n            key: '_applyClasses',\n            value: function _applyClasses(rawClassVal, isCleanup) {\n                var _this8 = this;\n\n                if (rawClassVal) {\n                    if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                        rawClassVal.forEach(function (klass) {\n                            return _this8._toggleClass(klass, !isCleanup);\n                        });\n                    } else {\n                        Object.keys(rawClassVal).forEach(function (klass) {\n                            if (rawClassVal[klass] != null) _this8._toggleClass(klass, !isCleanup);\n                        });\n                    }\n                }\n            }\n        }, {\n            key: '_toggleClass',\n            value: function _toggleClass(klass, enabled) {\n                var _this9 = this;\n\n                klass = klass.trim();\n                if (klass) {\n                    klass.split(/\\s+/g).forEach(function (klass) {\n                        _this9._renderer.setElementClass(_this9._ngEl.nativeElement, klass, !!enabled);\n                    });\n                }\n            }\n        }, {\n            key: 'klass',\n            set: function set(v) {\n                this._applyInitialClasses(true);\n                this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n                this._applyInitialClasses(false);\n                this._applyClasses(this._rawClass, false);\n            }\n        }, {\n            key: 'ngClass',\n            set: function set(v) {\n                this._cleanupClasses(this._rawClass);\n                this._iterableDiffer = null;\n                this._keyValueDiffer = null;\n                this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n                if (this._rawClass) {\n                    if (isListLikeIterable(this._rawClass)) {\n                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n                    } else {\n                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n                    }\n                }\n            }\n        }]);\n\n        return NgClass;\n    }();\n\n    NgClass.decorators = [{ type: _core.Directive, args: [{ selector: '[ngClass]' }] }];\n    /** @nocollapse */\n    NgClass.ctorParameters = function () {\n        return [{ type: _core.IterableDiffers }, { type: _core.KeyValueDiffers }, { type: _core.ElementRef }, { type: _core.Renderer }];\n    };\n    NgClass.propDecorators = {\n        'klass': [{ type: _core.Input, args: ['class'] }],\n        'ngClass': [{ type: _core.Input }]\n    };\n\n    /**\n     * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n     * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n     *\n     * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n     * any existing component will get destroyed.\n     *\n     * ### Fine tune control\n     *\n     * You can control the component creation process by using the following optional attributes:\n     *\n     * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n     * the Component. Defaults to the injector of the current view container.\n     *\n     * * `ngComponentOutletProviders`: Optional injectable objects ({\\@link Provider}) that are visible\n     * to the component.\n     *\n     * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n     * section of the component, if exists.\n     *\n     * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n     * module, then load a component from that module.\n     *\n     * ### Syntax\n     *\n     * Simple\n     * ```\n     * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n     * ```\n     *\n     * Customized injector/content\n     * ```\n     * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n     *                                   injector: injectorExpression;\n     *                                   content: contentNodesExpression;\">\n     * </ng-container>\n     * ```\n     *\n     * Customized ngModuleFactory\n     * ```\n     * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n     *                                   ngModuleFactory: moduleFactory;\">\n     * </ng-container>\n     * ```\n     * # Example\n     *\n     * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n     *\n     * A more complete example with additional options:\n     *\n     * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n     * A more complete example with ngModuleFactory:\n     *\n     * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n     *\n     * \\@experimental\n     */\n\n    var NgComponentOutlet = function () {\n        /**\n         * @param {?} _viewContainerRef\n         */\n        function NgComponentOutlet(_viewContainerRef) {\n            _classCallCheck(this, NgComponentOutlet);\n\n            this._viewContainerRef = _viewContainerRef;\n            this._componentRef = null;\n            this._moduleRef = null;\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n\n\n        _createClass(NgComponentOutlet, [{\n            key: 'ngOnChanges',\n            value: function ngOnChanges(changes) {\n                if (this._componentRef) {\n                    this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));\n                }\n                this._viewContainerRef.clear();\n                this._componentRef = null;\n                if (this.ngComponentOutlet) {\n                    var /** @type {?} */injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n                    if (changes.ngComponentOutletNgModuleFactory) {\n                        if (this._moduleRef) this._moduleRef.destroy();\n                        if (this.ngComponentOutletNgModuleFactory) {\n                            this._moduleRef = this.ngComponentOutletNgModuleFactory.create(injector);\n                        } else {\n                            this._moduleRef = null;\n                        }\n                    }\n                    if (this._moduleRef) {\n                        injector = this._moduleRef.injector;\n                    }\n                    var /** @type {?} */componentFactory = injector.get(_core.ComponentFactoryResolver).resolveComponentFactory(this.ngComponentOutlet);\n                    this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, injector, this.ngComponentOutletContent);\n                }\n            }\n        }, {\n            key: 'ngOnDestroy',\n            value: function ngOnDestroy() {\n                if (this._moduleRef) this._moduleRef.destroy();\n            }\n        }]);\n\n        return NgComponentOutlet;\n    }();\n\n    NgComponentOutlet.decorators = [{ type: _core.Directive, args: [{ selector: '[ngComponentOutlet]' }] }];\n    /** @nocollapse */\n    NgComponentOutlet.ctorParameters = function () {\n        return [{ type: _core.ViewContainerRef }];\n    };\n    NgComponentOutlet.propDecorators = {\n        'ngComponentOutlet': [{ type: _core.Input }],\n        'ngComponentOutletInjector': [{ type: _core.Input }],\n        'ngComponentOutletContent': [{ type: _core.Input }],\n        'ngComponentOutletNgModuleFactory': [{ type: _core.Input }]\n    };\n\n    var NgForOfRow = function () {\n        /**\n         * @param {?} $implicit\n         * @param {?} index\n         * @param {?} count\n         */\n        function NgForOfRow($implicit, index, count) {\n            _classCallCheck(this, NgForOfRow);\n\n            this.$implicit = $implicit;\n            this.index = index;\n            this.count = count;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(NgForOfRow, [{\n            key: 'first',\n            get: function get() {\n                return this.index === 0;\n            }\n        }, {\n            key: 'last',\n            get: function get() {\n                return this.index === this.count - 1;\n            }\n        }, {\n            key: 'even',\n            get: function get() {\n                return this.index % 2 === 0;\n            }\n        }, {\n            key: 'odd',\n            get: function get() {\n                return !this.even;\n            }\n        }]);\n\n        return NgForOfRow;\n    }();\n\n    var NgForOf = function () {\n        /**\n         * @param {?} _viewContainer\n         * @param {?} _template\n         * @param {?} _differs\n         */\n        function NgForOf(_viewContainer, _template, _differs) {\n            _classCallCheck(this, NgForOf);\n\n            this._viewContainer = _viewContainer;\n            this._template = _template;\n            this._differs = _differs;\n            this._differ = null;\n        }\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n\n\n        _createClass(NgForOf, [{\n            key: 'ngOnChanges',\n            value: function ngOnChanges(changes) {\n                if ('ngForOf' in changes) {\n                    // React on ngForOf changes only once all inputs have been initialized\n                    var /** @type {?} */value = changes['ngForOf'].currentValue;\n                    if (!this._differ && value) {\n                        try {\n                            this._differ = this._differs.find(value).create(this.ngForTrackBy);\n                        } catch (e) {\n                            throw new Error('Cannot find a differ supporting object \\'' + value + '\\' of type \\'' + getTypeNameForDebugging(value) + '\\'. NgFor only supports binding to Iterables such as Arrays.');\n                        }\n                    }\n                }\n            }\n        }, {\n            key: 'ngDoCheck',\n            value: function ngDoCheck() {\n                if (this._differ) {\n                    var /** @type {?} */changes = this._differ.diff(this.ngForOf);\n                    if (changes) this._applyChanges(changes);\n                }\n            }\n        }, {\n            key: '_applyChanges',\n            value: function _applyChanges(changes) {\n                var _this10 = this;\n\n                var /** @type {?} */insertTuples = [];\n                changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n                    if (item.previousIndex == null) {\n                        var /** @type {?} */view = _this10._viewContainer.createEmbeddedView(_this10._template, new NgForOfRow(null, null, null), currentIndex);\n                        var /** @type {?} */tuple = new RecordViewTuple(item, view);\n                        insertTuples.push(tuple);\n                    } else if (currentIndex == null) {\n                        _this10._viewContainer.remove(adjustedPreviousIndex);\n                    } else {\n                        var /** @type {?} */_view = _this10._viewContainer.get(adjustedPreviousIndex);\n                        _this10._viewContainer.move(_view, currentIndex);\n                        var /** @type {?} */_tuple = new RecordViewTuple(item, /** @type {?} */_view);\n                        insertTuples.push(_tuple);\n                    }\n                });\n                for (var /** @type {?} */i = 0; i < insertTuples.length; i++) {\n                    this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n                }\n                for (var /** @type {?} */_i = 0, /** @type {?} */ilen = this._viewContainer.length; _i < ilen; _i++) {\n                    var /** @type {?} */viewRef = this._viewContainer.get(_i);\n                    viewRef.context.index = _i;\n                    viewRef.context.count = ilen;\n                }\n                changes.forEachIdentityChange(function (record) {\n                    var /** @type {?} */viewRef = _this10._viewContainer.get(record.currentIndex);\n                    viewRef.context.$implicit = record.item;\n                });\n            }\n        }, {\n            key: '_perViewChange',\n            value: function _perViewChange(view, record) {\n                view.context.$implicit = record.item;\n            }\n        }, {\n            key: 'ngForTrackBy',\n            set: function set(fn) {\n                if ((0, _core.isDevMode)() && fn != null && typeof fn !== 'function') {\n                    // TODO(vicb): use a log service once there is a public one available\n                    if (console && console.warn) {\n                        console.warn('trackBy must be a function, but received ' + JSON.stringify(fn) + '. ' + 'See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.');\n                    }\n                }\n                this._trackByFn = fn;\n            },\n            get: function get() {\n                return this._trackByFn;\n            }\n        }, {\n            key: 'ngForTemplate',\n            set: function set(value) {\n                // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n                // The current type is too restrictive; a template that just uses index, for example,\n                // should be acceptable.\n                if (value) {\n                    this._template = value;\n                }\n            }\n        }]);\n\n        return NgForOf;\n    }();\n\n    NgForOf.decorators = [{ type: _core.Directive, args: [{ selector: '[ngFor][ngForOf]' }] }];\n    /** @nocollapse */\n    NgForOf.ctorParameters = function () {\n        return [{ type: _core.ViewContainerRef }, { type: _core.TemplateRef }, { type: _core.IterableDiffers }];\n    };\n    NgForOf.propDecorators = {\n        'ngForOf': [{ type: _core.Input }],\n        'ngForTrackBy': [{ type: _core.Input }],\n        'ngForTemplate': [{ type: _core.Input }]\n    };\n\n    var RecordViewTuple =\n    /**\n     * @param {?} record\n     * @param {?} view\n     */\n    function RecordViewTuple(record, view) {\n        _classCallCheck(this, RecordViewTuple);\n\n        this.record = record;\n        this.view = view;\n    };\n\n    /**\n     * @deprecated from v4.0.0 - Use NgForOf instead.\n     */\n    var /** @type {?} */NgFor = NgForOf;\n\n    /**\n     * Conditionally includes a template based on the value of an `expression`.\n     *\n     * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n     * when expression is truthy or falsy respectively. Typically the:\n     *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n     *  - `else` template is blank unless it is bound.\n     *\n     * # Most common usage\n     *\n     * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n     * seen in this example:\n     * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n     *\n     * # Showing an alternative template using `else`\n     *\n     * If it is necessary to display a template when the `expression` is falsy use the `else` template\n     * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n     * The template can be defined anywhere in the component view but is typically placed right after\n     * `ngIf` for readability.\n     *\n     * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n     *\n     * # Using non-inlined `then` template\n     *\n     * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n     * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n     * change at runtime as shown in this example.\n     *\n     * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n     *\n     * # Storing conditional result in a variable\n     *\n     * A common pattern is that we need to show a set of properties from the same object. If the\n     * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n     * dereferencing a `null` value. This is especially the case when waiting on async data such as\n     * when using the `async` pipe as shown in folowing example:\n     *\n     * ```\n     * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n     * ```\n     *\n     * There are several inefficiencies in the above example:\n     *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n     *    example above.\n     *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n     *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n     *  - We have to place the `async` pipe in parenthesis.\n     *\n     * A better way to do this is to use `ngIf` and store the result of the condition in a local\n     * variable as shown in the the example below:\n     *\n     * {\\@example common/ngIf/ts/module.ts region='NgIfLet'}\n     *\n     * Notice that:\n     *  - We use only one `async` pipe and hence only one subscription gets created.\n     *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n     *  - The local `user` can then be bound repeatedly in a more efficient way.\n     *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n     *    display the data if `userStream` returns a value.\n     *  - We can display an alternative template while waiting for the data.\n     *\n     * ### Syntax\n     *\n     * Simple form:\n     * - `<div *ngIf=\"condition\">...</div>`\n     * - `<div template=\"ngIf condition\">...</div>`\n     * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n     *\n     * Form with an else block:\n     * ```\n     * <div *ngIf=\"condition; else elseBlock\">...</div>\n     * <ng-template #elseBlock>...</ng-template>\n     * ```\n     *\n     * Form with a `then` and `else` block:\n     * ```\n     * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n     * <ng-template #thenBlock>...</ng-template>\n     * <ng-template #elseBlock>...</ng-template>\n     * ```\n     *\n     * Form with storing the value locally:\n     * ```\n     * <div *ngIf=\"condition; else elseBlock; let value\">{{value}}</div>\n     * <ng-template #elseBlock>...</ng-template>\n     * ```\n     *\n     * \\@stable\n     */\n\n    var NgIf = function () {\n        /**\n         * @param {?} _viewContainer\n         * @param {?} templateRef\n         */\n        function NgIf(_viewContainer, templateRef) {\n            _classCallCheck(this, NgIf);\n\n            this._viewContainer = _viewContainer;\n            this._context = new NgIfContext();\n            this._thenTemplateRef = null;\n            this._elseTemplateRef = null;\n            this._thenViewRef = null;\n            this._elseViewRef = null;\n            this._thenTemplateRef = templateRef;\n        }\n        /**\n         * @param {?} condition\n         * @return {?}\n         */\n\n\n        _createClass(NgIf, [{\n            key: '_updateView',\n            value: function _updateView() {\n                if (this._context.$implicit) {\n                    if (!this._thenViewRef) {\n                        this._viewContainer.clear();\n                        this._elseViewRef = null;\n                        if (this._thenTemplateRef) {\n                            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                        }\n                    }\n                } else {\n                    if (!this._elseViewRef) {\n                        this._viewContainer.clear();\n                        this._thenViewRef = null;\n                        if (this._elseTemplateRef) {\n                            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                        }\n                    }\n                }\n            }\n        }, {\n            key: 'ngIf',\n            set: function set(condition) {\n                this._context.$implicit = condition;\n                this._updateView();\n            }\n        }, {\n            key: 'ngIfThen',\n            set: function set(templateRef) {\n                this._thenTemplateRef = templateRef;\n                this._thenViewRef = null; // clear previous view if any.\n                this._updateView();\n            }\n        }, {\n            key: 'ngIfElse',\n            set: function set(templateRef) {\n                this._elseTemplateRef = templateRef;\n                this._elseViewRef = null; // clear previous view if any.\n                this._updateView();\n            }\n        }]);\n\n        return NgIf;\n    }();\n\n    NgIf.decorators = [{ type: _core.Directive, args: [{ selector: '[ngIf]' }] }];\n    /** @nocollapse */\n    NgIf.ctorParameters = function () {\n        return [{ type: _core.ViewContainerRef }, { type: _core.TemplateRef }];\n    };\n    NgIf.propDecorators = {\n        'ngIf': [{ type: _core.Input }],\n        'ngIfThen': [{ type: _core.Input }],\n        'ngIfElse': [{ type: _core.Input }]\n    };\n\n    var NgIfContext = function NgIfContext() {\n        _classCallCheck(this, NgIfContext);\n\n        this.$implicit = null;\n    };\n\n    var SwitchView = function () {\n        /**\n         * @param {?} _viewContainerRef\n         * @param {?} _templateRef\n         */\n        function SwitchView(_viewContainerRef, _templateRef) {\n            _classCallCheck(this, SwitchView);\n\n            this._viewContainerRef = _viewContainerRef;\n            this._templateRef = _templateRef;\n            this._created = false;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(SwitchView, [{\n            key: 'create',\n            value: function create() {\n                this._created = true;\n                this._viewContainerRef.createEmbeddedView(this._templateRef);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this._created = false;\n                this._viewContainerRef.clear();\n            }\n        }, {\n            key: 'enforceState',\n            value: function enforceState(created) {\n                if (created && !this._created) {\n                    this.create();\n                } else if (!created && this._created) {\n                    this.destroy();\n                }\n            }\n        }]);\n\n        return SwitchView;\n    }();\n\n    var NgSwitch = function () {\n        function NgSwitch() {\n            _classCallCheck(this, NgSwitch);\n\n            this._defaultUsed = false;\n            this._caseCount = 0;\n            this._lastCaseCheckIndex = 0;\n            this._lastCasesMatched = false;\n        }\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n\n\n        _createClass(NgSwitch, [{\n            key: '_addCase',\n            value: function _addCase() {\n                return this._caseCount++;\n            }\n        }, {\n            key: '_addDefault',\n            value: function _addDefault(view) {\n                if (!this._defaultViews) {\n                    this._defaultViews = [];\n                }\n                this._defaultViews.push(view);\n            }\n        }, {\n            key: '_matchCase',\n            value: function _matchCase(value) {\n                var /** @type {?} */matched = value == this._ngSwitch;\n                this._lastCasesMatched = this._lastCasesMatched || matched;\n                this._lastCaseCheckIndex++;\n                if (this._lastCaseCheckIndex === this._caseCount) {\n                    this._updateDefaultCases(!this._lastCasesMatched);\n                    this._lastCaseCheckIndex = 0;\n                    this._lastCasesMatched = false;\n                }\n                return matched;\n            }\n        }, {\n            key: '_updateDefaultCases',\n            value: function _updateDefaultCases(useDefault) {\n                if (this._defaultViews && useDefault !== this._defaultUsed) {\n                    this._defaultUsed = useDefault;\n                    for (var /** @type {?} */i = 0; i < this._defaultViews.length; i++) {\n                        var /** @type {?} */defaultView = this._defaultViews[i];\n                        defaultView.enforceState(useDefault);\n                    }\n                }\n            }\n        }, {\n            key: 'ngSwitch',\n            set: function set(newValue) {\n                this._ngSwitch = newValue;\n                if (this._caseCount === 0) {\n                    this._updateDefaultCases(true);\n                }\n            }\n        }]);\n\n        return NgSwitch;\n    }();\n\n    NgSwitch.decorators = [{ type: _core.Directive, args: [{ selector: '[ngSwitch]' }] }];\n    /** @nocollapse */\n    NgSwitch.ctorParameters = function () {\n        return [];\n    };\n    NgSwitch.propDecorators = {\n        'ngSwitch': [{ type: _core.Input }]\n    };\n    /**\n     * \\@ngModule CommonModule\n     *\n     * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\n     *             given expression evaluate to respectively the same/different value as the switch\n     *             expression.\n     *\n     * \\@howToUse\n     * ```\n     * <container-element [ngSwitch]=\"switch_expression\">\n     *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n     * </container-element>\n     * ```\n     * \\@description\n     *\n     * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n     * expression.\n     *\n     * If multiple match expressions match the switch expression value, all of them are displayed.\n     *\n     * See {\\@link NgSwitch} for more details and example.\n     *\n     * \\@stable\n     */\n\n    var NgSwitchCase = function () {\n        /**\n         * @param {?} viewContainer\n         * @param {?} templateRef\n         * @param {?} ngSwitch\n         */\n        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {\n            _classCallCheck(this, NgSwitchCase);\n\n            this.ngSwitch = ngSwitch;\n            ngSwitch._addCase();\n            this._view = new SwitchView(viewContainer, templateRef);\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(NgSwitchCase, [{\n            key: 'ngDoCheck',\n            value: function ngDoCheck() {\n                this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));\n            }\n        }]);\n\n        return NgSwitchCase;\n    }();\n\n    NgSwitchCase.decorators = [{ type: _core.Directive, args: [{ selector: '[ngSwitchCase]' }] }];\n    /** @nocollapse */\n    NgSwitchCase.ctorParameters = function () {\n        return [{ type: _core.ViewContainerRef }, { type: _core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _core.Host }] }];\n    };\n    NgSwitchCase.propDecorators = {\n        'ngSwitchCase': [{ type: _core.Input }]\n    };\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\n     * match the\n     *             switch expression.\n     *\n     * \\@howToUse\n     * ```\n     * <container-element [ngSwitch]=\"switch_expression\">\n     *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n     *   <some-other-element *ngSwitchDefault>...</some-other-element>\n     * </container-element>\n     * ```\n     *\n     * \\@description\n     *\n     * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n     * expression.\n     *\n     * See {\\@link NgSwitch} for more details and example.\n     *\n     * \\@stable\n     */\n\n    var NgSwitchDefault =\n    /**\n     * @param {?} viewContainer\n     * @param {?} templateRef\n     * @param {?} ngSwitch\n     */\n    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {\n        _classCallCheck(this, NgSwitchDefault);\n\n        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n    };\n\n    NgSwitchDefault.decorators = [{ type: _core.Directive, args: [{ selector: '[ngSwitchDefault]' }] }];\n    /** @nocollapse */\n    NgSwitchDefault.ctorParameters = function () {\n        return [{ type: _core.ViewContainerRef }, { type: _core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _core.Host }] }];\n    };\n\n    /**\n     * \\@ngModule CommonModule\n     *\n     * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n     *\n     * \\@howToUse\n     * ```\n     * <some-element [ngPlural]=\"value\">\n     *   <template ngPluralCase=\"=0\">there is nothing</template>\n     *   <template ngPluralCase=\"=1\">there is one</template>\n     *   <template ngPluralCase=\"few\">there are a few</template>\n     * </some-element>\n     * ```\n     *\n     * \\@description\n     *\n     * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n     * that match the switch expression's pluralization category.\n     *\n     * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n     * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n     * expression:\n     * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n     *   matches the switch expression exactly,\n     * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n     *   value matches aren't found and the value maps to its category for the defined locale.\n     *\n     * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n     *\n     * \\@experimental\n     */\n\n    var NgPlural = function () {\n        /**\n         * @param {?} _localization\n         */\n        function NgPlural(_localization) {\n            _classCallCheck(this, NgPlural);\n\n            this._localization = _localization;\n            this._caseViews = {};\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n\n\n        _createClass(NgPlural, [{\n            key: 'addCase',\n            value: function addCase(value, switchView) {\n                this._caseViews[value] = switchView;\n            }\n        }, {\n            key: '_updateView',\n            value: function _updateView() {\n                this._clearViews();\n                var /** @type {?} */cases = Object.keys(this._caseViews);\n                var /** @type {?} */key = getPluralCategory(this._switchValue, cases, this._localization);\n                this._activateView(this._caseViews[key]);\n            }\n        }, {\n            key: '_clearViews',\n            value: function _clearViews() {\n                if (this._activeView) this._activeView.destroy();\n            }\n        }, {\n            key: '_activateView',\n            value: function _activateView(view) {\n                if (view) {\n                    this._activeView = view;\n                    this._activeView.create();\n                }\n            }\n        }, {\n            key: 'ngPlural',\n            set: function set(value) {\n                this._switchValue = value;\n                this._updateView();\n            }\n        }]);\n\n        return NgPlural;\n    }();\n\n    NgPlural.decorators = [{ type: _core.Directive, args: [{ selector: '[ngPlural]' }] }];\n    /** @nocollapse */\n    NgPlural.ctorParameters = function () {\n        return [{ type: NgLocalization }];\n    };\n    NgPlural.propDecorators = {\n        'ngPlural': [{ type: _core.Input }]\n    };\n    /**\n     * \\@ngModule CommonModule\n     *\n     * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n     *             given expression matches the plural expression according to CLDR rules.\n     *\n     * \\@howToUse\n     * ```\n     * <some-element [ngPlural]=\"value\">\n     *   <template ngPluralCase=\"=0\">...</template>\n     *   <template ngPluralCase=\"other\">...</template>\n     * </some-element>\n     * ```\n     *\n     * See {\\@link NgPlural} for more details and example.\n     *\n     * \\@experimental\n     */\n\n    var NgPluralCase =\n    /**\n     * @param {?} value\n     * @param {?} template\n     * @param {?} viewContainer\n     * @param {?} ngPlural\n     */\n    function NgPluralCase(value, template, viewContainer, ngPlural) {\n        _classCallCheck(this, NgPluralCase);\n\n        this.value = value;\n        var isANumber = !isNaN(Number(value));\n        ngPlural.addCase(isANumber ? '=' + value : value, new SwitchView(viewContainer, template));\n    };\n\n    NgPluralCase.decorators = [{ type: _core.Directive, args: [{ selector: '[ngPluralCase]' }] }];\n    /** @nocollapse */\n    NgPluralCase.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Attribute, args: ['ngPluralCase'] }] }, { type: _core.TemplateRef }, { type: _core.ViewContainerRef }, { type: NgPlural, decorators: [{ type: _core.Host }] }];\n    };\n\n    /**\n     * \\@ngModule CommonModule\n     *\n     * \\@whatItDoes Update an HTML element styles.\n     *\n     * \\@howToUse\n     * ```\n     * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n     *\n     * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n     *\n     * <some-element [ngStyle]=\"objExp\">...</some-element>\n     * ```\n     *\n     * \\@description\n     *\n     * The styles are updated according to the value of the expression evaluation:\n     * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n     * - values are the values assigned to those properties (expressed in the given unit).\n     *\n     * \\@stable\n     */\n\n    var NgStyle = function () {\n        /**\n         * @param {?} _differs\n         * @param {?} _ngEl\n         * @param {?} _renderer\n         */\n        function NgStyle(_differs, _ngEl, _renderer) {\n            _classCallCheck(this, NgStyle);\n\n            this._differs = _differs;\n            this._ngEl = _ngEl;\n            this._renderer = _renderer;\n        }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n\n\n        _createClass(NgStyle, [{\n            key: 'ngDoCheck',\n            value: function ngDoCheck() {\n                if (this._differ) {\n                    var /** @type {?} */changes = this._differ.diff(this._ngStyle);\n                    if (changes) {\n                        this._applyChanges(changes);\n                    }\n                }\n            }\n        }, {\n            key: '_applyChanges',\n            value: function _applyChanges(changes) {\n                var _this11 = this;\n\n                changes.forEachRemovedItem(function (record) {\n                    return _this11._setStyle(record.key, null);\n                });\n                changes.forEachAddedItem(function (record) {\n                    return _this11._setStyle(record.key, record.currentValue);\n                });\n                changes.forEachChangedItem(function (record) {\n                    return _this11._setStyle(record.key, record.currentValue);\n                });\n            }\n        }, {\n            key: '_setStyle',\n            value: function _setStyle(nameAndUnit, value) {\n                var _nameAndUnit$split = nameAndUnit.split('.'),\n                    _nameAndUnit$split2 = _slicedToArray(_nameAndUnit$split, 2),\n                    name = _nameAndUnit$split2[0],\n                    unit = _nameAndUnit$split2[1];\n\n                value = value != null && unit ? '' + value + unit : value;\n                this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */value);\n            }\n        }, {\n            key: 'ngStyle',\n            set: function set(v) {\n                this._ngStyle = v;\n                if (!this._differ && v) {\n                    this._differ = this._differs.find(v).create();\n                }\n            }\n        }]);\n\n        return NgStyle;\n    }();\n\n    NgStyle.decorators = [{ type: _core.Directive, args: [{ selector: '[ngStyle]' }] }];\n    /** @nocollapse */\n    NgStyle.ctorParameters = function () {\n        return [{ type: _core.KeyValueDiffers }, { type: _core.ElementRef }, { type: _core.Renderer }];\n    };\n    NgStyle.propDecorators = {\n        'ngStyle': [{ type: _core.Input }]\n    };\n\n    /**\n     * \\@ngModule CommonModule\n     *\n     * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n     *\n     * \\@howToUse\n     * ```\n     * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n     * ```\n     *\n     * \\@description\n     *\n     * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n     * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n     * by the local template `let` declarations.\n     *\n     * Note: using the key `$implicit` in the context object will set it's value as default.\n     *\n     * # Example\n     *\n     * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n     *\n     * \\@experimental\n     */\n\n    var NgTemplateOutlet = function () {\n        /**\n         * @param {?} _viewContainerRef\n         */\n        function NgTemplateOutlet(_viewContainerRef) {\n            _classCallCheck(this, NgTemplateOutlet);\n\n            this._viewContainerRef = _viewContainerRef;\n        }\n        /**\n         * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.\n         * @param {?} context\n         * @return {?}\n         */\n\n\n        _createClass(NgTemplateOutlet, [{\n            key: 'ngOnChanges',\n            value: function ngOnChanges(changes) {\n                if (this._viewRef) {\n                    this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n                }\n                if (this.ngTemplateOutlet) {\n                    this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);\n                }\n            }\n        }, {\n            key: 'ngOutletContext',\n            set: function set(context) {\n                this.ngTemplateOutletContext = context;\n            }\n        }]);\n\n        return NgTemplateOutlet;\n    }();\n\n    NgTemplateOutlet.decorators = [{ type: _core.Directive, args: [{ selector: '[ngTemplateOutlet]' }] }];\n    /** @nocollapse */\n    NgTemplateOutlet.ctorParameters = function () {\n        return [{ type: _core.ViewContainerRef }];\n    };\n    NgTemplateOutlet.propDecorators = {\n        'ngTemplateOutletContext': [{ type: _core.Input }],\n        'ngTemplateOutlet': [{ type: _core.Input }],\n        'ngOutletContext': [{ type: _core.Input }]\n    };\n\n    /**\n     * A collection of Angular directives that are likely to be used in each and every Angular\n     * application.\n     */\n    var /** @type {?} */COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];\n\n    /**\n     * @param {?} type\n     * @param {?} value\n     * @return {?}\n     */\n    function invalidPipeArgumentError(type, value) {\n        return Error('InvalidPipeArgument: \\'' + value + '\\' for pipe \\'' + stringify(type) + '\\'');\n    }\n\n    var ObservableStrategy = function () {\n        function ObservableStrategy() {\n            _classCallCheck(this, ObservableStrategy);\n        }\n\n        _createClass(ObservableStrategy, [{\n            key: 'createSubscription',\n            value: function createSubscription(async, updateLatestValue) {\n                return async.subscribe({ next: updateLatestValue, error: function error(e) {\n                        throw e;\n                    } });\n            }\n        }, {\n            key: 'dispose',\n            value: function dispose(subscription) {\n                subscription.unsubscribe();\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(subscription) {\n                subscription.unsubscribe();\n            }\n        }]);\n\n        return ObservableStrategy;\n    }();\n\n    var PromiseStrategy = function () {\n        function PromiseStrategy() {\n            _classCallCheck(this, PromiseStrategy);\n        }\n\n        _createClass(PromiseStrategy, [{\n            key: 'createSubscription',\n            value: function createSubscription(async, updateLatestValue) {\n                return async.then(updateLatestValue, function (e) {\n                    throw e;\n                });\n            }\n        }, {\n            key: 'dispose',\n            value: function dispose(subscription) {}\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(subscription) {}\n        }]);\n\n        return PromiseStrategy;\n    }();\n\n    var /** @type {?} */_promiseStrategy = new PromiseStrategy();\n    var /** @type {?} */_observableStrategy = new ObservableStrategy();\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n     * \\@howToUse `observable_or_promise_expression | async`\n     * \\@description\n     * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n     * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n     * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n     * potential memory leaks.\n     *\n     *\n     * ## Examples\n     *\n     * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n     * promise.\n     *\n     * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n     *\n     * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n     * to the view. The Observable continuously updates the view with the current time.\n     *\n     * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n     *\n     * \\@stable\n     */\n\n    var AsyncPipe = function () {\n        /**\n         * @param {?} _ref\n         */\n        function AsyncPipe(_ref) {\n            _classCallCheck(this, AsyncPipe);\n\n            this._ref = _ref;\n            this._latestValue = null;\n            this._latestReturnedValue = null;\n            this._subscription = null;\n            this._obj = null;\n            this._strategy = null;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(AsyncPipe, [{\n            key: 'ngOnDestroy',\n            value: function ngOnDestroy() {\n                if (this._subscription) {\n                    this._dispose();\n                }\n            }\n        }, {\n            key: 'transform',\n            value: function transform(obj) {\n                if (!this._obj) {\n                    if (obj) {\n                        this._subscribe(obj);\n                    }\n                    this._latestReturnedValue = this._latestValue;\n                    return this._latestValue;\n                }\n                if (obj !== this._obj) {\n                    this._dispose();\n                    return this.transform( /** @type {?} */obj);\n                }\n                if (this._latestValue === this._latestReturnedValue) {\n                    return this._latestReturnedValue;\n                }\n                this._latestReturnedValue = this._latestValue;\n                return _core.WrappedValue.wrap(this._latestValue);\n            }\n        }, {\n            key: '_subscribe',\n            value: function _subscribe(obj) {\n                var _this12 = this;\n\n                this._obj = obj;\n                this._strategy = this._selectStrategy(obj);\n                this._subscription = this._strategy.createSubscription(obj, function (value) {\n                    return _this12._updateLatestValue(obj, value);\n                });\n            }\n        }, {\n            key: '_selectStrategy',\n            value: function _selectStrategy(obj) {\n                if ((0, _core.ɵisPromise)(obj)) {\n                    return _promiseStrategy;\n                }\n                if ((0, _core.ɵisObservable)(obj)) {\n                    return _observableStrategy;\n                }\n                throw invalidPipeArgumentError(AsyncPipe, obj);\n            }\n        }, {\n            key: '_dispose',\n            value: function _dispose() {\n                this._strategy.dispose(this._subscription);\n                this._latestValue = null;\n                this._latestReturnedValue = null;\n                this._subscription = null;\n                this._obj = null;\n            }\n        }, {\n            key: '_updateLatestValue',\n            value: function _updateLatestValue(async, value) {\n                if (async === this._obj) {\n                    this._latestValue = value;\n                    this._ref.markForCheck();\n                }\n            }\n        }]);\n\n        return AsyncPipe;\n    }();\n\n    AsyncPipe.decorators = [{ type: _core.Pipe, args: [{ name: 'async', pure: false }] }];\n    /** @nocollapse */\n    AsyncPipe.ctorParameters = function () {\n        return [{ type: _core.ChangeDetectorRef }];\n    };\n\n    /**\n     * Transforms text to lowercase.\n     *\n     * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n     *\n     * \\@stable\n     */\n\n    var LowerCasePipe = function () {\n        function LowerCasePipe() {\n            _classCallCheck(this, LowerCasePipe);\n        }\n\n        _createClass(LowerCasePipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                if (!value) return value;\n                if (typeof value !== 'string') {\n                    throw invalidPipeArgumentError(LowerCasePipe, value);\n                }\n                return value.toLowerCase();\n            }\n        }]);\n\n        return LowerCasePipe;\n    }();\n\n    LowerCasePipe.decorators = [{ type: _core.Pipe, args: [{ name: 'lowercase' }] }];\n    /** @nocollapse */\n    LowerCasePipe.ctorParameters = function () {\n        return [];\n    };\n    /**\n     * Helper method to transform a single word to titlecase.\n     *\n     * \\@stable\n     * @param {?} word\n     * @return {?}\n     */\n    function titleCaseWord(word) {\n        if (!word) return word;\n        return word[0].toUpperCase() + word.substr(1).toLowerCase();\n    }\n    /**\n     * Transforms text to titlecase.\n     *\n     * \\@stable\n     */\n\n    var TitleCasePipe = function () {\n        function TitleCasePipe() {\n            _classCallCheck(this, TitleCasePipe);\n        }\n\n        _createClass(TitleCasePipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                if (!value) return value;\n                if (typeof value !== 'string') {\n                    throw invalidPipeArgumentError(TitleCasePipe, value);\n                }\n                return value.split(/\\b/g).map(function (word) {\n                    return titleCaseWord(word);\n                }).join('');\n            }\n        }]);\n\n        return TitleCasePipe;\n    }();\n\n    TitleCasePipe.decorators = [{ type: _core.Pipe, args: [{ name: 'titlecase' }] }];\n    /** @nocollapse */\n    TitleCasePipe.ctorParameters = function () {\n        return [];\n    };\n    /**\n     * Transforms text to uppercase.\n     *\n     * \\@stable\n     */\n\n    var UpperCasePipe = function () {\n        function UpperCasePipe() {\n            _classCallCheck(this, UpperCasePipe);\n        }\n\n        _createClass(UpperCasePipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                if (!value) return value;\n                if (typeof value !== 'string') {\n                    throw invalidPipeArgumentError(UpperCasePipe, value);\n                }\n                return value.toUpperCase();\n            }\n        }]);\n\n        return UpperCasePipe;\n    }();\n\n    UpperCasePipe.decorators = [{ type: _core.Pipe, args: [{ name: 'uppercase' }] }];\n    /** @nocollapse */\n    UpperCasePipe.ctorParameters = function () {\n        return [];\n    };\n\n    var NumberFormatStyle = {};\n    NumberFormatStyle.Decimal = 0;\n    NumberFormatStyle.Percent = 1;\n    NumberFormatStyle.Currency = 2;\n    NumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\n    NumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\n    NumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\n\n    var NumberFormatter = function () {\n        function NumberFormatter() {\n            _classCallCheck(this, NumberFormatter);\n        }\n\n        _createClass(NumberFormatter, null, [{\n            key: 'format',\n            value: function format(num, locale, style) {\n                var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n                    minimumIntegerDigits = _ref2.minimumIntegerDigits,\n                    minimumFractionDigits = _ref2.minimumFractionDigits,\n                    maximumFractionDigits = _ref2.maximumFractionDigits,\n                    currency = _ref2.currency,\n                    _ref2$currencyAsSymbo = _ref2.currencyAsSymbol,\n                    currencyAsSymbol = _ref2$currencyAsSymbo === undefined ? false : _ref2$currencyAsSymbo;\n\n                var /** @type {?} */options = {\n                    minimumIntegerDigits: minimumIntegerDigits,\n                    minimumFractionDigits: minimumFractionDigits,\n                    maximumFractionDigits: maximumFractionDigits,\n                    style: NumberFormatStyle[style].toLowerCase()\n                };\n                if (style == NumberFormatStyle.Currency) {\n                    options.currency = currency;\n                    options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n                }\n                return new Intl.NumberFormat(locale, options).format(num);\n            }\n        }]);\n\n        return NumberFormatter;\n    }();\n\n    var /** @type {?} */DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n    var /** @type {?} */PATTERN_ALIASES = {\n        // Keys are quoted so they do not get renamed during closure compilation.\n        'yMMMdjms': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),\n        'yMdjm': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),\n        'yMMMMEEEEd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),\n        'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n        'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n        'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n        'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n        'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n    };\n    var /** @type {?} */DATE_FORMATS = {\n        // Keys are quoted so they do not get renamed.\n        'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n        'yy': datePartGetterFactory(digitCondition('year', 2)),\n        'y': datePartGetterFactory(digitCondition('year', 1)),\n        'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n        'MMM': datePartGetterFactory(nameCondition('month', 3)),\n        'MM': datePartGetterFactory(digitCondition('month', 2)),\n        'M': datePartGetterFactory(digitCondition('month', 1)),\n        'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n        'L': datePartGetterFactory(nameCondition('month', 1)),\n        'dd': datePartGetterFactory(digitCondition('day', 2)),\n        'd': datePartGetterFactory(digitCondition('day', 1)),\n        'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n        'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n        'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n        'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n        'jj': datePartGetterFactory(digitCondition('hour', 2)),\n        'j': datePartGetterFactory(digitCondition('hour', 1)),\n        'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n        'm': datePartGetterFactory(digitCondition('minute', 1)),\n        'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n        's': datePartGetterFactory(digitCondition('second', 1)),\n        // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n        // we can be just safely rely on using `sss` since we currently don't support single or two digit\n        // fractions\n        'sss': datePartGetterFactory(digitCondition('second', 3)),\n        'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n        'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n        'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n        'E': datePartGetterFactory(nameCondition('weekday', 1)),\n        'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n        'Z': timeZoneGetter('short'),\n        'z': timeZoneGetter('long'),\n        'ww': datePartGetterFactory({}),\n        // first Thursday of the year. not support ?\n        'w': datePartGetterFactory({}),\n        // of the year not support ?\n        'G': datePartGetterFactory(nameCondition('era', 1)),\n        'GG': datePartGetterFactory(nameCondition('era', 2)),\n        'GGG': datePartGetterFactory(nameCondition('era', 3)),\n        'GGGG': datePartGetterFactory(nameCondition('era', 4))\n    };\n    /**\n     * @param {?} inner\n     * @return {?}\n     */\n    function digitModifier(inner) {\n        return function (date, locale) {\n            var /** @type {?} */result = inner(date, locale);\n            return result.length == 1 ? '0' + result : result;\n        };\n    }\n    /**\n     * @param {?} inner\n     * @return {?}\n     */\n    function hourClockExtractor(inner) {\n        return function (date, locale) {\n            return inner(date, locale).split(' ')[1];\n        };\n    }\n    /**\n     * @param {?} inner\n     * @return {?}\n     */\n    function hourExtractor(inner) {\n        return function (date, locale) {\n            return inner(date, locale).split(' ')[0];\n        };\n    }\n    /**\n     * @param {?} date\n     * @param {?} locale\n     * @param {?} options\n     * @return {?}\n     */\n    function intlDateFormat(date, locale, options) {\n        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n    }\n    /**\n     * @param {?} timezone\n     * @return {?}\n     */\n    function timeZoneGetter(timezone) {\n        // To workaround `Intl` API restriction for single timezone let format with 24 hours\n        var /** @type {?} */options = { hour: '2-digit', hour12: false, timeZoneName: timezone };\n        return function (date, locale) {\n            var /** @type {?} */result = intlDateFormat(date, locale, options);\n            // Then extract first 3 letters that related to hours\n            return result ? result.substring(3) : '';\n        };\n    }\n    /**\n     * @param {?} options\n     * @param {?} value\n     * @return {?}\n     */\n    function hour12Modify(options, value) {\n        options.hour12 = value;\n        return options;\n    }\n    /**\n     * @param {?} prop\n     * @param {?} len\n     * @return {?}\n     */\n    function digitCondition(prop, len) {\n        var /** @type {?} */result = {};\n        result[prop] = len === 2 ? '2-digit' : 'numeric';\n        return result;\n    }\n    /**\n     * @param {?} prop\n     * @param {?} len\n     * @return {?}\n     */\n    function nameCondition(prop, len) {\n        var /** @type {?} */result = {};\n        if (len < 4) {\n            result[prop] = len > 1 ? 'short' : 'narrow';\n        } else {\n            result[prop] = 'long';\n        }\n        return result;\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    function combine(options) {\n        return Object.assign.apply(Object, [{}].concat(_toConsumableArray(options)));\n    }\n    /**\n     * @param {?} ret\n     * @return {?}\n     */\n    function datePartGetterFactory(ret) {\n        return function (date, locale) {\n            return intlDateFormat(date, locale, ret);\n        };\n    }\n    var /** @type {?} */DATE_FORMATTER_CACHE = new Map();\n    /**\n     * @param {?} format\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function dateFormatter(format, date, locale) {\n        var /** @type {?} */fn = PATTERN_ALIASES[format];\n        if (fn) return fn(date, locale);\n        var /** @type {?} */cacheKey = format;\n        var /** @type {?} */parts = DATE_FORMATTER_CACHE.get(cacheKey);\n        if (!parts) {\n            parts = [];\n            var /** @type {?} */match = void 0;\n            DATE_FORMATS_SPLIT.exec(format);\n            while (format) {\n                match = DATE_FORMATS_SPLIT.exec(format);\n                if (match) {\n                    parts = parts.concat(match.slice(1));\n                    format = parts.pop();\n                } else {\n                    parts.push(format);\n                    format = null;\n                }\n            }\n            DATE_FORMATTER_CACHE.set(cacheKey, parts);\n        }\n        return parts.reduce(function (text, part) {\n            var /** @type {?} */fn = DATE_FORMATS[part];\n            return text + (fn ? fn(date, locale) : partToTime(part));\n        }, '');\n    }\n    /**\n     * @param {?} part\n     * @return {?}\n     */\n    function partToTime(part) {\n        return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n    }\n\n    var DateFormatter = function () {\n        function DateFormatter() {\n            _classCallCheck(this, DateFormatter);\n        }\n\n        _createClass(DateFormatter, null, [{\n            key: 'format',\n            value: function format(date, locale, pattern) {\n                return dateFormatter(pattern, date, locale);\n            }\n        }]);\n\n        return DateFormatter;\n    }();\n\n    var /** @type {?} */ISO8601_DATE_REGEX = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Formats a date according to locale rules.\n     * \\@howToUse `date_expression | date[:format]`\n     * \\@description\n     *\n     * Where:\n     * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n     * (https://www.w3.org/TR/NOTE-datetime).\n     * - `format` indicates which date/time components to include. The format can be predefined as\n     *   shown below or custom as shown in the table.\n     *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n     *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n     *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n     *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n     *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n     *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n     *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n     *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n     *\n     *\n     *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n     *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n     *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n     *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n     *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n     *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n     *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n     *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n     *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n     *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n     *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n     *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n     *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n     *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n     *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n     *\n     * In javascript, only the components specified will be respected (not the ordering,\n     * punctuations, ...) and details of the formatting will be dependent on the locale.\n     *\n     * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n     *\n     * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n     * applied and the formatted text will have the same day, month and year of the expression.\n     *\n     * WARNINGS:\n     * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n     *   Instead users should treat the date as an immutable object and change the reference when the\n     *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n     *   which would be an expensive operation).\n     * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n     *   browsers.\n     *\n     * ### Examples\n     *\n     * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\n     * in the _local_ time and locale is 'en-US':\n     *\n     * ```\n     *     {{ dateObj | date }}               // output is 'Jun 15, 2015'\n     *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n     *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n     *     {{ dateObj | date:'mmss' }}        // output is '43:11'\n     * ```\n     *\n     * {\\@example common/pipes/ts/date_pipe.ts region='DatePipe'}\n     *\n     * \\@stable\n     */\n\n    var DatePipe = function () {\n        /**\n         * @param {?} _locale\n         */\n        function DatePipe(_locale) {\n            _classCallCheck(this, DatePipe);\n\n            this._locale = _locale;\n        }\n        /**\n         * @param {?} value\n         * @param {?=} pattern\n         * @return {?}\n         */\n\n\n        _createClass(DatePipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mediumDate';\n\n                var /** @type {?} */date = void 0;\n                if (isBlank$1(value) || value !== value) return null;\n                if (typeof value === 'string') {\n                    value = value.trim();\n                }\n                if (isDate(value)) {\n                    date = value;\n                } else if (NumberWrapper.isNumeric(value)) {\n                    date = new Date(parseFloat(value));\n                } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n                    var _value$split$map = value.split('-').map(function (val) {\n                        return parseInt(val, 10);\n                    }),\n                        _value$split$map2 = _slicedToArray(_value$split$map, 3),\n                        y = _value$split$map2[0],\n                        m = _value$split$map2[1],\n                        d = _value$split$map2[2];\n\n                    date = new Date(y, m - 1, d);\n                } else {\n                    date = new Date(value);\n                }\n                if (!isDate(date)) {\n                    var /** @type {?} */match = void 0;\n                    if (typeof value === 'string' && (match = value.match(ISO8601_DATE_REGEX))) {\n                        date = isoStringToDate(match);\n                    } else {\n                        throw invalidPipeArgumentError(DatePipe, value);\n                    }\n                }\n                return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);\n            }\n        }]);\n\n        return DatePipe;\n    }();\n\n    /** @internal */\n    DatePipe._ALIASES = {\n        'medium': 'yMMMdjms',\n        'short': 'yMdjm',\n        'fullDate': 'yMMMMEEEEd',\n        'longDate': 'yMMMMd',\n        'mediumDate': 'yMMMd',\n        'shortDate': 'yMd',\n        'mediumTime': 'jms',\n        'shortTime': 'jm'\n    };\n    DatePipe.decorators = [{ type: _core.Pipe, args: [{ name: 'date', pure: true }] }];\n    /** @nocollapse */\n    DatePipe.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [_core.LOCALE_ID] }] }];\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank$1(obj) {\n        return obj == null || obj === '';\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isDate(obj) {\n        return obj instanceof Date && !isNaN(obj.valueOf());\n    }\n    /**\n     * @param {?} match\n     * @return {?}\n     */\n    function isoStringToDate(match) {\n        var /** @type {?} */date = new Date(0);\n        var /** @type {?} */tzHour = 0;\n        var /** @type {?} */tzMin = 0;\n        var /** @type {?} */dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n        var /** @type {?} */timeSetter = match[8] ? date.setUTCHours : date.setHours;\n        if (match[9]) {\n            tzHour = toInt(match[9] + match[10]);\n            tzMin = toInt(match[9] + match[11]);\n        }\n        dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n        var /** @type {?} */h = toInt(match[4] || '0') - tzHour;\n        var /** @type {?} */m = toInt(match[5] || '0') - tzMin;\n        var /** @type {?} */s = toInt(match[6] || '0');\n        var /** @type {?} */ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n        timeSetter.call(date, h, m, s, ms);\n        return date;\n    }\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    function toInt(str) {\n        return parseInt(str, 10);\n    }\n\n    var /** @type {?} */_INTERPOLATION_REGEXP = /#/g;\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n     * \\@howToUse `expression | i18nPlural:mapping`\n     * \\@description\n     *\n     *  Where:\n     *  - `expression` is a number.\n     *  - `mapping` is an object that mimics the ICU format, see\n     *    http://userguide.icu-project.org/formatparse/messages\n     *\n     *  ## Example\n     *\n     * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n     *\n     * \\@experimental\n     */\n\n    var I18nPluralPipe = function () {\n        /**\n         * @param {?} _localization\n         */\n        function I18nPluralPipe(_localization) {\n            _classCallCheck(this, I18nPluralPipe);\n\n            this._localization = _localization;\n        }\n        /**\n         * @param {?} value\n         * @param {?} pluralMap\n         * @return {?}\n         */\n\n\n        _createClass(I18nPluralPipe, [{\n            key: 'transform',\n            value: function transform(value, pluralMap) {\n                if (value == null) return '';\n                if ((typeof pluralMap === 'undefined' ? 'undefined' : _typeof(pluralMap)) !== 'object' || pluralMap === null) {\n                    throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n                }\n                var /** @type {?} */key = getPluralCategory(value, Object.keys(pluralMap), this._localization);\n                return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n            }\n        }]);\n\n        return I18nPluralPipe;\n    }();\n\n    I18nPluralPipe.decorators = [{ type: _core.Pipe, args: [{ name: 'i18nPlural', pure: true }] }];\n    /** @nocollapse */\n    I18nPluralPipe.ctorParameters = function () {\n        return [{ type: NgLocalization }];\n    };\n\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Generic selector that displays the string that matches the current value.\n     * \\@howToUse `expression | i18nSelect:mapping`\n     * \\@description\n     *\n     *  Where `mapping` is an object that indicates the text that should be displayed\n     *  for different values of the provided `expression`.\n     *  If none of the keys of the mapping match the value of the `expression`, then the content\n     *  of the `other` key is returned when present, otherwise an empty string is returned.\n     *\n     *  ## Example\n     *\n     * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n     *\n     *  \\@experimental\n     */\n\n    var I18nSelectPipe = function () {\n        function I18nSelectPipe() {\n            _classCallCheck(this, I18nSelectPipe);\n        }\n\n        _createClass(I18nSelectPipe, [{\n            key: 'transform',\n            value: function transform(value, mapping) {\n                if (value == null) return '';\n                if ((typeof mapping === 'undefined' ? 'undefined' : _typeof(mapping)) !== 'object' || typeof value !== 'string') {\n                    throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n                }\n                if (mapping.hasOwnProperty(value)) {\n                    return mapping[value];\n                }\n                if (mapping.hasOwnProperty('other')) {\n                    return mapping['other'];\n                }\n                return '';\n            }\n        }]);\n\n        return I18nSelectPipe;\n    }();\n\n    I18nSelectPipe.decorators = [{ type: _core.Pipe, args: [{ name: 'i18nSelect', pure: true }] }];\n    /** @nocollapse */\n    I18nSelectPipe.ctorParameters = function () {\n        return [];\n    };\n\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Converts value into JSON string.\n     * \\@howToUse `expression | json`\n     * \\@description\n     *\n     * Converts value into string using `JSON.stringify`. Useful for debugging.\n     *\n     * ### Example\n     * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n     *\n     * \\@stable\n     */\n\n    var JsonPipe = function () {\n        function JsonPipe() {\n            _classCallCheck(this, JsonPipe);\n        }\n\n        _createClass(JsonPipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                return JSON.stringify(value, null, 2);\n            }\n        }]);\n\n        return JsonPipe;\n    }();\n\n    JsonPipe.decorators = [{ type: _core.Pipe, args: [{ name: 'json', pure: false }] }];\n    /** @nocollapse */\n    JsonPipe.ctorParameters = function () {\n        return [];\n    };\n\n    var /** @type {?} */_NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n    /**\n     * @param {?} pipe\n     * @param {?} locale\n     * @param {?} value\n     * @param {?} style\n     * @param {?} digits\n     * @param {?=} currency\n     * @param {?=} currencyAsSymbol\n     * @return {?}\n     */\n    function formatNumber(pipe, locale, value, style, digits) {\n        var currency = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n        var currencyAsSymbol = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n        if (value == null) return null;\n        // Convert strings to numbers\n        value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;\n        if (typeof value !== 'number') {\n            throw invalidPipeArgumentError(pipe, value);\n        }\n        var /** @type {?} */minInt = void 0;\n        var /** @type {?} */minFraction = void 0;\n        var /** @type {?} */maxFraction = void 0;\n        if (style !== NumberFormatStyle.Currency) {\n            // rely on Intl default for currency\n            minInt = 1;\n            minFraction = 0;\n            maxFraction = 3;\n        }\n        if (digits) {\n            var /** @type {?} */parts = digits.match(_NUMBER_FORMAT_REGEXP);\n            if (parts === null) {\n                throw new Error(digits + ' is not a valid digit info for number pipes');\n            }\n            if (parts[1] != null) {\n                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n            }\n            if (parts[3] != null) {\n                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n            }\n            if (parts[5] != null) {\n                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n            }\n        }\n        return NumberFormatter.format( /** @type {?} */value, locale, style, {\n            minimumIntegerDigits: minInt,\n            minimumFractionDigits: minFraction,\n            maximumFractionDigits: maxFraction,\n            currency: currency,\n            currencyAsSymbol: currencyAsSymbol\n        });\n    }\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Formats a number according to locale rules.\n     * \\@howToUse `number_expression | number[:digitInfo]`\n     *\n     * Formats a number as text. Group sizing and separator and other locale-specific\n     * configurations are based on the active locale.\n     *\n     * where `expression` is a number:\n     *  - `digitInfo` is a `string` which has a following format: <br>\n     *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n     *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n     *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n     *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n     *\n     * For more information on the acceptable range for each of these numbers and other\n     * details see your native internationalization library.\n     *\n     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n     * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n     *\n     * ### Example\n     *\n     * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n     *\n     * \\@stable\n     */\n\n    var DecimalPipe = function () {\n        /**\n         * @param {?} _locale\n         */\n        function DecimalPipe(_locale) {\n            _classCallCheck(this, DecimalPipe);\n\n            this._locale = _locale;\n        }\n        /**\n         * @param {?} value\n         * @param {?=} digits\n         * @return {?}\n         */\n\n\n        _createClass(DecimalPipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n            }\n        }]);\n\n        return DecimalPipe;\n    }();\n\n    DecimalPipe.decorators = [{ type: _core.Pipe, args: [{ name: 'number' }] }];\n    /** @nocollapse */\n    DecimalPipe.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [_core.LOCALE_ID] }] }];\n    };\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Formats a number as a percentage according to locale rules.\n     * \\@howToUse `number_expression | percent[:digitInfo]`\n     *\n     * \\@description\n     *\n     * Formats a number as percentage.\n     *\n     * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n     *\n     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n     * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n     *\n     * ### Example\n     *\n     * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n     *\n     * \\@stable\n     */\n\n    var PercentPipe = function () {\n        /**\n         * @param {?} _locale\n         */\n        function PercentPipe(_locale) {\n            _classCallCheck(this, PercentPipe);\n\n            this._locale = _locale;\n        }\n        /**\n         * @param {?} value\n         * @param {?=} digits\n         * @return {?}\n         */\n\n\n        _createClass(PercentPipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n            }\n        }]);\n\n        return PercentPipe;\n    }();\n\n    PercentPipe.decorators = [{ type: _core.Pipe, args: [{ name: 'percent' }] }];\n    /** @nocollapse */\n    PercentPipe.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [_core.LOCALE_ID] }] }];\n    };\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Formats a number as currency using locale rules.\n     * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n     * \\@description\n     *\n     * Use `currency` to format a number as currency.\n     *\n     * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n     *    as `USD` for the US dollar and `EUR` for the euro.\n     * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n     *   - `true`: use symbol (e.g. `$`).\n     *   - `false`(default): use code (e.g. `USD`).\n     * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n     *\n     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n     * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n     *\n     * ### Example\n     *\n     * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n     *\n     * \\@stable\n     */\n\n    var CurrencyPipe = function () {\n        /**\n         * @param {?} _locale\n         */\n        function CurrencyPipe(_locale) {\n            _classCallCheck(this, CurrencyPipe);\n\n            this._locale = _locale;\n        }\n        /**\n         * @param {?} value\n         * @param {?=} currencyCode\n         * @param {?=} symbolDisplay\n         * @param {?=} digits\n         * @return {?}\n         */\n\n\n        _createClass(CurrencyPipe, [{\n            key: 'transform',\n            value: function transform(value) {\n                var currencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n                var symbolDisplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var digits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n                return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n            }\n        }]);\n\n        return CurrencyPipe;\n    }();\n\n    CurrencyPipe.decorators = [{ type: _core.Pipe, args: [{ name: 'currency' }] }];\n    /** @nocollapse */\n    CurrencyPipe.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [_core.LOCALE_ID] }] }];\n    };\n\n    /**\n     * \\@ngModule CommonModule\n     * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\n     * \\@howToUse `array_or_string_expression | slice:start[:end]`\n     * \\@description\n     *\n     * Where the input expression is a `List` or `String`, and:\n     * - `start`: The starting index of the subset to return.\n     *   - **a positive integer**: return the item at `start` index and all items after\n     *     in the list or string expression.\n     *   - **a negative integer**: return the item at `start` index from the end and all items after\n     *     in the list or string expression.\n     *   - **if positive and greater than the size of the expression**: return an empty list or string.\n     *   - **if negative and greater than the size of the expression**: return entire list or string.\n     * - `end`: The ending index of the subset to return.\n     *   - **omitted**: return all items until the end.\n     *   - **if positive**: return all items before `end` index of the list or string.\n     *   - **if negative**: return all items before `end` index from the end of the list or string.\n     *\n     * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n     * and `String.prototype.slice()`.\n     *\n     * When operating on a [List], the returned list is always a copy even when all\n     * the elements are being returned.\n     *\n     * When operating on a blank value, the pipe returns the blank value.\n     *\n     * ## List Example\n     *\n     * This `ngFor` example:\n     *\n     * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n     *\n     * produces the following:\n     *\n     *     <li>b</li>\n     *     <li>c</li>\n     *\n     * ## String Examples\n     *\n     * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n     *\n     * \\@stable\n     */\n\n    var SlicePipe = function () {\n        function SlicePipe() {\n            _classCallCheck(this, SlicePipe);\n        }\n\n        _createClass(SlicePipe, [{\n            key: 'transform',\n            value: function transform(value, start, end) {\n                if (value == null) return value;\n                if (!this.supports(value)) {\n                    throw invalidPipeArgumentError(SlicePipe, value);\n                }\n                return value.slice(start, end);\n            }\n        }, {\n            key: 'supports',\n            value: function supports(obj) {\n                return typeof obj === 'string' || Array.isArray(obj);\n            }\n        }]);\n\n        return SlicePipe;\n    }();\n\n    SlicePipe.decorators = [{ type: _core.Pipe, args: [{ name: 'slice', pure: false }] }];\n    /** @nocollapse */\n    SlicePipe.ctorParameters = function () {\n        return [];\n    };\n\n    /**\n     * A collection of Angular pipes that are likely to be used in each and every application.\n     */\n    var /** @type {?} */COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe];\n\n    /**\n     * The module that includes all the basic Angular directives like {\\@link NgIf}, {\\@link NgForOf}, ...\n     *\n     * \\@stable\n     */\n\n    var CommonModule = function CommonModule() {\n        _classCallCheck(this, CommonModule);\n    };\n\n    CommonModule.decorators = [{ type: _core.NgModule, args: [{\n            declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n            exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n            providers: [{ provide: NgLocalization, useClass: NgLocaleLocalization }]\n        }] }];\n    /** @nocollapse */\n    CommonModule.ctorParameters = function () {\n        return [];\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */var /** @type {?} */PLATFORM_BROWSER_ID = 'browser';\n    var /** @type {?} */PLATFORM_SERVER_ID = 'server';\n    var /** @type {?} */PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\n    var /** @type {?} */PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n    /**\n     * Returns whether a platform id represents a browser platform.\n     * \\@experimental\n     * @param {?} platformId\n     * @return {?}\n     */\n    function isPlatformBrowser(platformId) {\n        return platformId === PLATFORM_BROWSER_ID;\n    }\n    /**\n     * Returns whether a platform id represents a server platform.\n     * \\@experimental\n     * @param {?} platformId\n     * @return {?}\n     */\n    function isPlatformServer(platformId) {\n        return platformId === PLATFORM_SERVER_ID;\n    }\n    /**\n     * Returns whether a platform id represents a web worker app platform.\n     * \\@experimental\n     * @param {?} platformId\n     * @return {?}\n     */\n    function isPlatformWorkerApp(platformId) {\n        return platformId === PLATFORM_WORKER_APP_ID;\n    }\n    /**\n     * Returns whether a platform id represents a web worker UI platform.\n     * \\@experimental\n     * @param {?} platformId\n     * @return {?}\n     */\n    function isPlatformWorkerUi(platformId) {\n        return platformId === PLATFORM_WORKER_UI_ID;\n    }\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */VERSION = new _core.Version('4.0.0-rc.1');\n\n    exports.NgLocaleLocalization = NgLocaleLocalization;\n    exports.NgLocalization = NgLocalization;\n    exports.CommonModule = CommonModule;\n    exports.NgClass = NgClass;\n    exports.NgFor = NgFor;\n    exports.NgForOf = NgForOf;\n    exports.NgIf = NgIf;\n    exports.NgPlural = NgPlural;\n    exports.NgPluralCase = NgPluralCase;\n    exports.NgStyle = NgStyle;\n    exports.NgSwitch = NgSwitch;\n    exports.NgSwitchCase = NgSwitchCase;\n    exports.NgSwitchDefault = NgSwitchDefault;\n    exports.NgTemplateOutlet = NgTemplateOutlet;\n    exports.NgComponentOutlet = NgComponentOutlet;\n    exports.AsyncPipe = AsyncPipe;\n    exports.DatePipe = DatePipe;\n    exports.I18nPluralPipe = I18nPluralPipe;\n    exports.I18nSelectPipe = I18nSelectPipe;\n    exports.JsonPipe = JsonPipe;\n    exports.LowerCasePipe = LowerCasePipe;\n    exports.CurrencyPipe = CurrencyPipe;\n    exports.DecimalPipe = DecimalPipe;\n    exports.PercentPipe = PercentPipe;\n    exports.SlicePipe = SlicePipe;\n    exports.UpperCasePipe = UpperCasePipe;\n    exports.TitleCasePipe = TitleCasePipe;\n    exports.ɵPLATFORM_BROWSER_ID = PLATFORM_BROWSER_ID;\n    exports.ɵPLATFORM_SERVER_ID = PLATFORM_SERVER_ID;\n    exports.ɵPLATFORM_WORKER_APP_ID = PLATFORM_WORKER_APP_ID;\n    exports.ɵPLATFORM_WORKER_UI_ID = PLATFORM_WORKER_UI_ID;\n    exports.isPlatformBrowser = isPlatformBrowser;\n    exports.isPlatformServer = isPlatformServer;\n    exports.isPlatformWorkerApp = isPlatformWorkerApp;\n    exports.isPlatformWorkerUi = isPlatformWorkerUi;\n    exports.VERSION = VERSION;\n    exports.PlatformLocation = PlatformLocation;\n    exports.LocationStrategy = LocationStrategy;\n    exports.APP_BASE_HREF = APP_BASE_HREF;\n    exports.HashLocationStrategy = HashLocationStrategy;\n    exports.PathLocationStrategy = PathLocationStrategy;\n    exports.Location = Location;\n    exports.ɵc = COMMON_DIRECTIVES;\n    exports.ɵa = NgForOfRow;\n    exports.ɵb = NgIfContext;\n    exports.ɵd = COMMON_PIPES;\n});\n"},69:function(e,n){e.exports="(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n  typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :\n  (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));\n}(this, function (exports,_angular_core) { 'use strict';\n\n  /**\n   * @stable\n   */\n  var VERSION = new _angular_core.Version('4.0.0-rc.1');\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * A segment of text within the template.\n   */\n  var TextAst = (function () {\n      function TextAst(value, ngContentIndex, sourceSpan) {\n          this.value = value;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };\n      return TextAst;\n  }());\n  /**\n   * A bound expression within the text of a template.\n   */\n  var BoundTextAst = (function () {\n      function BoundTextAst(value, ngContentIndex, sourceSpan) {\n          this.value = value;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundTextAst.prototype.visit = function (visitor, context) {\n          return visitor.visitBoundText(this, context);\n      };\n      return BoundTextAst;\n  }());\n  /**\n   * A plain attribute on an element.\n   */\n  var AttrAst = (function () {\n      function AttrAst(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };\n      return AttrAst;\n  }());\n  /**\n   * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n   * `[@trigger]=\"stateExp\"`)\n   */\n  var BoundElementPropertyAst = (function () {\n      function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {\n          this.name = name;\n          this.type = type;\n          this.securityContext = securityContext;\n          this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;\n          this.value = value;\n          this.unit = unit;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundElementPropertyAst.prototype.visit = function (visitor, context) {\n          return visitor.visitElementProperty(this, context);\n      };\n      Object.defineProperty(BoundElementPropertyAst.prototype, \"isAnimation\", {\n          get: function () { return this.type === exports.PropertyBindingType.Animation; },\n          enumerable: true,\n          configurable: true\n      });\n      return BoundElementPropertyAst;\n  }());\n  /**\n   * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n   * `(@trigger.phase)=\"callback($event)\"`).\n   */\n  var BoundEventAst = (function () {\n      function BoundEventAst(name, target, phase, handler, sourceSpan) {\n          this.name = name;\n          this.target = target;\n          this.phase = phase;\n          this.handler = handler;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundEventAst.calcFullName = function (name, target, phase) {\n          if (target) {\n              return target + \":\" + name;\n          }\n          else if (phase) {\n              return \"@\" + name + \".\" + phase;\n          }\n          else {\n              return name;\n          }\n      };\n      BoundEventAst.prototype.visit = function (visitor, context) {\n          return visitor.visitEvent(this, context);\n      };\n      Object.defineProperty(BoundEventAst.prototype, \"fullName\", {\n          get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(BoundEventAst.prototype, \"isAnimation\", {\n          get: function () { return !!this.phase; },\n          enumerable: true,\n          configurable: true\n      });\n      return BoundEventAst;\n  }());\n  /**\n   * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n   */\n  var ReferenceAst = (function () {\n      function ReferenceAst(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      ReferenceAst.prototype.visit = function (visitor, context) {\n          return visitor.visitReference(this, context);\n      };\n      return ReferenceAst;\n  }());\n  /**\n   * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n   */\n  var VariableAst = (function () {\n      function VariableAst(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      VariableAst.prototype.visit = function (visitor, context) {\n          return visitor.visitVariable(this, context);\n      };\n      return VariableAst;\n  }());\n  /**\n   * An element declaration in a template.\n   */\n  var ElementAst = (function () {\n      function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {\n          this.name = name;\n          this.attrs = attrs;\n          this.inputs = inputs;\n          this.outputs = outputs;\n          this.references = references;\n          this.directives = directives;\n          this.providers = providers;\n          this.hasViewContainer = hasViewContainer;\n          this.queryMatches = queryMatches;\n          this.children = children;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n          this.endSourceSpan = endSourceSpan;\n      }\n      ElementAst.prototype.visit = function (visitor, context) {\n          return visitor.visitElement(this, context);\n      };\n      return ElementAst;\n  }());\n  /**\n   * A `<ng-template>` element included in an Angular template.\n   */\n  var EmbeddedTemplateAst = (function () {\n      function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {\n          this.attrs = attrs;\n          this.outputs = outputs;\n          this.references = references;\n          this.variables = variables;\n          this.directives = directives;\n          this.providers = providers;\n          this.hasViewContainer = hasViewContainer;\n          this.queryMatches = queryMatches;\n          this.children = children;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      EmbeddedTemplateAst.prototype.visit = function (visitor, context) {\n          return visitor.visitEmbeddedTemplate(this, context);\n      };\n      return EmbeddedTemplateAst;\n  }());\n  /**\n   * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n   */\n  var BoundDirectivePropertyAst = (function () {\n      function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {\n          this.directiveName = directiveName;\n          this.templateName = templateName;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {\n          return visitor.visitDirectiveProperty(this, context);\n      };\n      return BoundDirectivePropertyAst;\n  }());\n  /**\n   * A directive declared on an element.\n   */\n  var DirectiveAst = (function () {\n      function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {\n          this.directive = directive;\n          this.inputs = inputs;\n          this.hostProperties = hostProperties;\n          this.hostEvents = hostEvents;\n          this.contentQueryStartId = contentQueryStartId;\n          this.sourceSpan = sourceSpan;\n      }\n      DirectiveAst.prototype.visit = function (visitor, context) {\n          return visitor.visitDirective(this, context);\n      };\n      return DirectiveAst;\n  }());\n  /**\n   * A provider declared on an element\n   */\n  var ProviderAst = (function () {\n      function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {\n          this.token = token;\n          this.multiProvider = multiProvider;\n          this.eager = eager;\n          this.providers = providers;\n          this.providerType = providerType;\n          this.lifecycleHooks = lifecycleHooks;\n          this.sourceSpan = sourceSpan;\n      }\n      ProviderAst.prototype.visit = function (visitor, context) {\n          // No visit method in the visitor for now...\n          return null;\n      };\n      return ProviderAst;\n  }());\n  exports.ProviderAstType;\n  (function (ProviderAstType) {\n      ProviderAstType[ProviderAstType[\"PublicService\"] = 0] = \"PublicService\";\n      ProviderAstType[ProviderAstType[\"PrivateService\"] = 1] = \"PrivateService\";\n      ProviderAstType[ProviderAstType[\"Component\"] = 2] = \"Component\";\n      ProviderAstType[ProviderAstType[\"Directive\"] = 3] = \"Directive\";\n      ProviderAstType[ProviderAstType[\"Builtin\"] = 4] = \"Builtin\";\n  })(exports.ProviderAstType || (exports.ProviderAstType = {}));\n  /**\n   * Position where content is to be projected (instance of `<ng-content>` in a template).\n   */\n  var NgContentAst = (function () {\n      function NgContentAst(index, ngContentIndex, sourceSpan) {\n          this.index = index;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      NgContentAst.prototype.visit = function (visitor, context) {\n          return visitor.visitNgContent(this, context);\n      };\n      return NgContentAst;\n  }());\n  /**\n   * Enumeration of types of property bindings.\n   */\n  exports.PropertyBindingType;\n  (function (PropertyBindingType) {\n      /**\n       * A normal binding to a property (e.g. `[property]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Property\"] = 0] = \"Property\";\n      /**\n       * A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Attribute\"] = 1] = \"Attribute\";\n      /**\n       * A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Class\"] = 2] = \"Class\";\n      /**\n       * A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Style\"] = 3] = \"Style\";\n      /**\n       * A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Animation\"] = 4] = \"Animation\";\n  })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));\n  /**\n   * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n   */\n  function templateVisitAll(visitor, asts, context) {\n      if (context === void 0) { context = null; }\n      var result = [];\n      var visit = visitor.visit ?\n          function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :\n          function (ast) { return ast.visit(visitor, context); };\n      asts.forEach(function (ast) {\n          var astResult = visit(ast);\n          if (astResult) {\n              result.push(astResult);\n          }\n      });\n      return result;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * A token representing the a reference to a static type.\n   *\n   * This token is unique for a filePath and name and can be used as a hash table key.\n   */\n  var StaticSymbol = (function () {\n      function StaticSymbol(filePath, name, members) {\n          this.filePath = filePath;\n          this.name = name;\n          this.members = members;\n      }\n      StaticSymbol.prototype.assertNoMembers = function () {\n          if (this.members.length) {\n              throw new Error(\"Illegal state: symbol without members expected, but got \" + JSON.stringify(this) + \".\");\n          }\n      };\n      return StaticSymbol;\n  }());\n  /**\n   * A cache of static symbol used by the StaticReflector to return the same symbol for the\n   * same symbol values.\n   */\n  var StaticSymbolCache = (function () {\n      function StaticSymbolCache() {\n          this.cache = new Map();\n      }\n      StaticSymbolCache.prototype.get = function (declarationFile, name, members) {\n          members = members || [];\n          var memberSuffix = members.length ? \".\" + members.join('.') : '';\n          var key = \"\\\"\" + declarationFile + \"\\\".\" + name + memberSuffix;\n          var result = this.cache.get(key);\n          if (!result) {\n              result = new StaticSymbol(declarationFile, name, members);\n              this.cache.set(key, result);\n          }\n          return result;\n      };\n      return StaticSymbolCache;\n  }());\n\n  function isPresent(obj) {\n      return obj != null;\n  }\n  function isBlank(obj) {\n      return obj == null;\n  }\n  var STRING_MAP_PROTO = Object.getPrototypeOf({});\n  function isStrictStringMap(obj) {\n      return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n  }\n  function stringify(token) {\n      if (typeof token === 'string') {\n          return token;\n      }\n      if (token == null) {\n          return '' + token;\n      }\n      if (token.overriddenName) {\n          return \"\" + token.overriddenName;\n      }\n      if (token.name) {\n          return \"\" + token.name;\n      }\n      var res = token.toString();\n      var newLineIndex = res.indexOf('\\n');\n      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n  }\n  var NumberWrapper = (function () {\n      function NumberWrapper() {\n      }\n      NumberWrapper.parseIntAutoRadix = function (text) {\n          var result = parseInt(text);\n          if (isNaN(result)) {\n              throw new Error('Invalid integer literal when parsing ' + text);\n          }\n          return result;\n      };\n      NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n      return NumberWrapper;\n  }());\n  function isJsObject(o) {\n      return o !== null && (typeof o === 'function' || typeof o === 'object');\n  }\n  function isPrimitive(obj) {\n      return !isJsObject(obj);\n  }\n  function escapeRegExp(s) {\n      return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n  }\n\n  /**\n   * Wraps Javascript Objects\n   */\n  var StringMapWrapper = (function () {\n      function StringMapWrapper() {\n      }\n      StringMapWrapper.merge = function (m1, m2) {\n          var m = {};\n          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n              var k = _a[_i];\n              m[k] = m1[k];\n          }\n          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n              var k = _c[_b];\n              m[k] = m2[k];\n          }\n          return m;\n      };\n      StringMapWrapper.equals = function (m1, m2) {\n          var k1 = Object.keys(m1);\n          var k2 = Object.keys(m2);\n          if (k1.length != k2.length) {\n              return false;\n          }\n          for (var i = 0; i < k1.length; i++) {\n              var key = k1[i];\n              if (m1[key] !== m2[key]) {\n                  return false;\n              }\n          }\n          return true;\n      };\n      return StringMapWrapper;\n  }());\n  var ListWrapper = (function () {\n      function ListWrapper() {\n      }\n      ListWrapper.findLast = function (arr, condition) {\n          for (var i = arr.length - 1; i >= 0; i--) {\n              if (condition(arr[i])) {\n                  return arr[i];\n              }\n          }\n          return null;\n      };\n      ListWrapper.removeAll = function (list, items) {\n          for (var i = 0; i < items.length; ++i) {\n              var index = list.indexOf(items[i]);\n              if (index > -1) {\n                  list.splice(index, 1);\n              }\n          }\n      };\n      ListWrapper.remove = function (list, el) {\n          var index = list.indexOf(el);\n          if (index > -1) {\n              list.splice(index, 1);\n              return true;\n          }\n          return false;\n      };\n      ListWrapper.equals = function (a, b) {\n          if (a.length != b.length)\n              return false;\n          for (var i = 0; i < a.length; ++i) {\n              if (a[i] !== b[i])\n                  return false;\n          }\n          return true;\n      };\n      ListWrapper.flatten = function (list) {\n          return list.reduce(function (flat, item) {\n              var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n              return flat.concat(flatItem);\n          }, []);\n      };\n      return ListWrapper;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */ exports.TagContentType;\n  (function (TagContentType) {\n      TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n      TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n      TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n  })(exports.TagContentType || (exports.TagContentType = {}));\n  function splitNsName(elementName) {\n      if (elementName[0] != ':') {\n          return [null, elementName];\n      }\n      var colonIndex = elementName.indexOf(':', 1);\n      if (colonIndex == -1) {\n          throw new Error(\"Unsupported format \\\"\" + elementName + \"\\\" expecting \\\":namespace:name\\\"\");\n      }\n      return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n  }\n  function getNsPrefix(fullName) {\n      return fullName === null ? null : splitNsName(fullName)[0];\n  }\n  function mergeNsAndName(prefix, localName) {\n      return prefix ? \":\" + prefix + \":\" + localName : localName;\n  }\n  // see http://www.w3.org/TR/html51/syntax.html#named-character-references\n  // see https://html.spec.whatwg.org/multipage/entities.json\n  // This list is not exhaustive to keep the compiler footprint low.\n  // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.\n  var NAMED_ENTITIES = {\n      'Aacute': '\\u00C1',\n      'aacute': '\\u00E1',\n      'Acirc': '\\u00C2',\n      'acirc': '\\u00E2',\n      'acute': '\\u00B4',\n      'AElig': '\\u00C6',\n      'aelig': '\\u00E6',\n      'Agrave': '\\u00C0',\n      'agrave': '\\u00E0',\n      'alefsym': '\\u2135',\n      'Alpha': '\\u0391',\n      'alpha': '\\u03B1',\n      'amp': '&',\n      'and': '\\u2227',\n      'ang': '\\u2220',\n      'apos': '\\u0027',\n      'Aring': '\\u00C5',\n      'aring': '\\u00E5',\n      'asymp': '\\u2248',\n      'Atilde': '\\u00C3',\n      'atilde': '\\u00E3',\n      'Auml': '\\u00C4',\n      'auml': '\\u00E4',\n      'bdquo': '\\u201E',\n      'Beta': '\\u0392',\n      'beta': '\\u03B2',\n      'brvbar': '\\u00A6',\n      'bull': '\\u2022',\n      'cap': '\\u2229',\n      'Ccedil': '\\u00C7',\n      'ccedil': '\\u00E7',\n      'cedil': '\\u00B8',\n      'cent': '\\u00A2',\n      'Chi': '\\u03A7',\n      'chi': '\\u03C7',\n      'circ': '\\u02C6',\n      'clubs': '\\u2663',\n      'cong': '\\u2245',\n      'copy': '\\u00A9',\n      'crarr': '\\u21B5',\n      'cup': '\\u222A',\n      'curren': '\\u00A4',\n      'dagger': '\\u2020',\n      'Dagger': '\\u2021',\n      'darr': '\\u2193',\n      'dArr': '\\u21D3',\n      'deg': '\\u00B0',\n      'Delta': '\\u0394',\n      'delta': '\\u03B4',\n      'diams': '\\u2666',\n      'divide': '\\u00F7',\n      'Eacute': '\\u00C9',\n      'eacute': '\\u00E9',\n      'Ecirc': '\\u00CA',\n      'ecirc': '\\u00EA',\n      'Egrave': '\\u00C8',\n      'egrave': '\\u00E8',\n      'empty': '\\u2205',\n      'emsp': '\\u2003',\n      'ensp': '\\u2002',\n      'Epsilon': '\\u0395',\n      'epsilon': '\\u03B5',\n      'equiv': '\\u2261',\n      'Eta': '\\u0397',\n      'eta': '\\u03B7',\n      'ETH': '\\u00D0',\n      'eth': '\\u00F0',\n      'Euml': '\\u00CB',\n      'euml': '\\u00EB',\n      'euro': '\\u20AC',\n      'exist': '\\u2203',\n      'fnof': '\\u0192',\n      'forall': '\\u2200',\n      'frac12': '\\u00BD',\n      'frac14': '\\u00BC',\n      'frac34': '\\u00BE',\n      'frasl': '\\u2044',\n      'Gamma': '\\u0393',\n      'gamma': '\\u03B3',\n      'ge': '\\u2265',\n      'gt': '>',\n      'harr': '\\u2194',\n      'hArr': '\\u21D4',\n      'hearts': '\\u2665',\n      'hellip': '\\u2026',\n      'Iacute': '\\u00CD',\n      'iacute': '\\u00ED',\n      'Icirc': '\\u00CE',\n      'icirc': '\\u00EE',\n      'iexcl': '\\u00A1',\n      'Igrave': '\\u00CC',\n      'igrave': '\\u00EC',\n      'image': '\\u2111',\n      'infin': '\\u221E',\n      'int': '\\u222B',\n      'Iota': '\\u0399',\n      'iota': '\\u03B9',\n      'iquest': '\\u00BF',\n      'isin': '\\u2208',\n      'Iuml': '\\u00CF',\n      'iuml': '\\u00EF',\n      'Kappa': '\\u039A',\n      'kappa': '\\u03BA',\n      'Lambda': '\\u039B',\n      'lambda': '\\u03BB',\n      'lang': '\\u27E8',\n      'laquo': '\\u00AB',\n      'larr': '\\u2190',\n      'lArr': '\\u21D0',\n      'lceil': '\\u2308',\n      'ldquo': '\\u201C',\n      'le': '\\u2264',\n      'lfloor': '\\u230A',\n      'lowast': '\\u2217',\n      'loz': '\\u25CA',\n      'lrm': '\\u200E',\n      'lsaquo': '\\u2039',\n      'lsquo': '\\u2018',\n      'lt': '<',\n      'macr': '\\u00AF',\n      'mdash': '\\u2014',\n      'micro': '\\u00B5',\n      'middot': '\\u00B7',\n      'minus': '\\u2212',\n      'Mu': '\\u039C',\n      'mu': '\\u03BC',\n      'nabla': '\\u2207',\n      'nbsp': '\\u00A0',\n      'ndash': '\\u2013',\n      'ne': '\\u2260',\n      'ni': '\\u220B',\n      'not': '\\u00AC',\n      'notin': '\\u2209',\n      'nsub': '\\u2284',\n      'Ntilde': '\\u00D1',\n      'ntilde': '\\u00F1',\n      'Nu': '\\u039D',\n      'nu': '\\u03BD',\n      'Oacute': '\\u00D3',\n      'oacute': '\\u00F3',\n      'Ocirc': '\\u00D4',\n      'ocirc': '\\u00F4',\n      'OElig': '\\u0152',\n      'oelig': '\\u0153',\n      'Ograve': '\\u00D2',\n      'ograve': '\\u00F2',\n      'oline': '\\u203E',\n      'Omega': '\\u03A9',\n      'omega': '\\u03C9',\n      'Omicron': '\\u039F',\n      'omicron': '\\u03BF',\n      'oplus': '\\u2295',\n      'or': '\\u2228',\n      'ordf': '\\u00AA',\n      'ordm': '\\u00BA',\n      'Oslash': '\\u00D8',\n      'oslash': '\\u00F8',\n      'Otilde': '\\u00D5',\n      'otilde': '\\u00F5',\n      'otimes': '\\u2297',\n      'Ouml': '\\u00D6',\n      'ouml': '\\u00F6',\n      'para': '\\u00B6',\n      'permil': '\\u2030',\n      'perp': '\\u22A5',\n      'Phi': '\\u03A6',\n      'phi': '\\u03C6',\n      'Pi': '\\u03A0',\n      'pi': '\\u03C0',\n      'piv': '\\u03D6',\n      'plusmn': '\\u00B1',\n      'pound': '\\u00A3',\n      'prime': '\\u2032',\n      'Prime': '\\u2033',\n      'prod': '\\u220F',\n      'prop': '\\u221D',\n      'Psi': '\\u03A8',\n      'psi': '\\u03C8',\n      'quot': '\\u0022',\n      'radic': '\\u221A',\n      'rang': '\\u27E9',\n      'raquo': '\\u00BB',\n      'rarr': '\\u2192',\n      'rArr': '\\u21D2',\n      'rceil': '\\u2309',\n      'rdquo': '\\u201D',\n      'real': '\\u211C',\n      'reg': '\\u00AE',\n      'rfloor': '\\u230B',\n      'Rho': '\\u03A1',\n      'rho': '\\u03C1',\n      'rlm': '\\u200F',\n      'rsaquo': '\\u203A',\n      'rsquo': '\\u2019',\n      'sbquo': '\\u201A',\n      'Scaron': '\\u0160',\n      'scaron': '\\u0161',\n      'sdot': '\\u22C5',\n      'sect': '\\u00A7',\n      'shy': '\\u00AD',\n      'Sigma': '\\u03A3',\n      'sigma': '\\u03C3',\n      'sigmaf': '\\u03C2',\n      'sim': '\\u223C',\n      'spades': '\\u2660',\n      'sub': '\\u2282',\n      'sube': '\\u2286',\n      'sum': '\\u2211',\n      'sup': '\\u2283',\n      'sup1': '\\u00B9',\n      'sup2': '\\u00B2',\n      'sup3': '\\u00B3',\n      'supe': '\\u2287',\n      'szlig': '\\u00DF',\n      'Tau': '\\u03A4',\n      'tau': '\\u03C4',\n      'there4': '\\u2234',\n      'Theta': '\\u0398',\n      'theta': '\\u03B8',\n      'thetasym': '\\u03D1',\n      'thinsp': '\\u2009',\n      'THORN': '\\u00DE',\n      'thorn': '\\u00FE',\n      'tilde': '\\u02DC',\n      'times': '\\u00D7',\n      'trade': '\\u2122',\n      'Uacute': '\\u00DA',\n      'uacute': '\\u00FA',\n      'uarr': '\\u2191',\n      'uArr': '\\u21D1',\n      'Ucirc': '\\u00DB',\n      'ucirc': '\\u00FB',\n      'Ugrave': '\\u00D9',\n      'ugrave': '\\u00F9',\n      'uml': '\\u00A8',\n      'upsih': '\\u03D2',\n      'Upsilon': '\\u03A5',\n      'upsilon': '\\u03C5',\n      'Uuml': '\\u00DC',\n      'uuml': '\\u00FC',\n      'weierp': '\\u2118',\n      'Xi': '\\u039E',\n      'xi': '\\u03BE',\n      'Yacute': '\\u00DD',\n      'yacute': '\\u00FD',\n      'yen': '\\u00A5',\n      'yuml': '\\u00FF',\n      'Yuml': '\\u0178',\n      'Zeta': '\\u0396',\n      'zeta': '\\u03B6',\n      'zwj': '\\u200D',\n      'zwnj': '\\u200C',\n  };\n\n  var HtmlTagDefinition = (function () {\n      function HtmlTagDefinition(_a) {\n          var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? exports.TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;\n          var _this = this;\n          this.closedByChildren = {};\n          this.closedByParent = false;\n          this.canSelfClose = false;\n          if (closedByChildren && closedByChildren.length > 0) {\n              closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });\n          }\n          this.isVoid = isVoid;\n          this.closedByParent = closedByParent || isVoid;\n          if (requiredParents && requiredParents.length > 0) {\n              this.requiredParents = {};\n              // The first parent is the list is automatically when none of the listed parents are present\n              this.parentToAdd = requiredParents[0];\n              requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });\n          }\n          this.implicitNamespacePrefix = implicitNamespacePrefix;\n          this.contentType = contentType;\n          this.ignoreFirstLf = ignoreFirstLf;\n      }\n      HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {\n          if (!this.requiredParents) {\n              return false;\n          }\n          if (!currentParent) {\n              return true;\n          }\n          var lcParent = currentParent.toLowerCase();\n          var isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';\n          return !isParentTemplate && this.requiredParents[lcParent] != true;\n      };\n      HtmlTagDefinition.prototype.isClosedByChild = function (name) {\n          return this.isVoid || name.toLowerCase() in this.closedByChildren;\n      };\n      return HtmlTagDefinition;\n  }());\n  // see http://www.w3.org/TR/html51/syntax.html#optional-tags\n  // This implementation does not fully conform to the HTML5 spec.\n  var TAG_DEFINITIONS = {\n      'base': new HtmlTagDefinition({ isVoid: true }),\n      'meta': new HtmlTagDefinition({ isVoid: true }),\n      'area': new HtmlTagDefinition({ isVoid: true }),\n      'embed': new HtmlTagDefinition({ isVoid: true }),\n      'link': new HtmlTagDefinition({ isVoid: true }),\n      'img': new HtmlTagDefinition({ isVoid: true }),\n      'input': new HtmlTagDefinition({ isVoid: true }),\n      'param': new HtmlTagDefinition({ isVoid: true }),\n      'hr': new HtmlTagDefinition({ isVoid: true }),\n      'br': new HtmlTagDefinition({ isVoid: true }),\n      'source': new HtmlTagDefinition({ isVoid: true }),\n      'track': new HtmlTagDefinition({ isVoid: true }),\n      'wbr': new HtmlTagDefinition({ isVoid: true }),\n      'p': new HtmlTagDefinition({\n          closedByChildren: [\n              'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',\n              'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\n              'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\n          ],\n          closedByParent: true\n      }),\n      'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n      'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n      'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n      'tr': new HtmlTagDefinition({\n          closedByChildren: ['tr'],\n          requiredParents: ['tbody', 'tfoot', 'thead'],\n          closedByParent: true\n      }),\n      'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n      'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n      'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),\n      'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n      'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n      'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n      'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n      'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n      'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n      'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n      'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n      'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n      'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n      'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n      'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\n      'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\n      'style': new HtmlTagDefinition({ contentType: exports.TagContentType.RAW_TEXT }),\n      'script': new HtmlTagDefinition({ contentType: exports.TagContentType.RAW_TEXT }),\n      'title': new HtmlTagDefinition({ contentType: exports.TagContentType.ESCAPABLE_RAW_TEXT }),\n      'textarea': new HtmlTagDefinition({ contentType: exports.TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n  };\n  var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n  function getHtmlTagDefinition(tagName) {\n      return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\n  }\n\n  var _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' +\n      '([-\\\\w]+)|' +\n      '(?:\\\\.([-\\\\w]+))|' +\n      // \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n      '(?:\\\\[([-.\\\\w*]+)(?:=([^\\\\]]*))?\\\\])|' +\n      '(\\\\))|' +\n      '(\\\\s*,\\\\s*)', // \",\"\n  'g');\n  /**\n   * A css selector contains an element name,\n   * css classes and attribute/value pairs with the purpose\n   * of selecting subsets out of them.\n   */\n  var CssSelector = (function () {\n      function CssSelector() {\n          this.element = null;\n          this.classNames = [];\n          this.attrs = [];\n          this.notSelectors = [];\n      }\n      CssSelector.parse = function (selector) {\n          var results = [];\n          var _addResult = function (res, cssSel) {\n              if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n                  cssSel.attrs.length == 0) {\n                  cssSel.element = '*';\n              }\n              res.push(cssSel);\n          };\n          var cssSelector = new CssSelector();\n          var match;\n          var current = cssSelector;\n          var inNot = false;\n          _SELECTOR_REGEXP.lastIndex = 0;\n          while (match = _SELECTOR_REGEXP.exec(selector)) {\n              if (match[1]) {\n                  if (inNot) {\n                      throw new Error('Nesting :not is not allowed in a selector');\n                  }\n                  inNot = true;\n                  current = new CssSelector();\n                  cssSelector.notSelectors.push(current);\n              }\n              if (match[2]) {\n                  current.setElement(match[2]);\n              }\n              if (match[3]) {\n                  current.addClassName(match[3]);\n              }\n              if (match[4]) {\n                  current.addAttribute(match[4], match[5]);\n              }\n              if (match[6]) {\n                  inNot = false;\n                  current = cssSelector;\n              }\n              if (match[7]) {\n                  if (inNot) {\n                      throw new Error('Multiple selectors in :not are not supported');\n                  }\n                  _addResult(results, cssSelector);\n                  cssSelector = current = new CssSelector();\n              }\n          }\n          _addResult(results, cssSelector);\n          return results;\n      };\n      CssSelector.prototype.isElementSelector = function () {\n          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n              this.notSelectors.length === 0;\n      };\n      CssSelector.prototype.hasElementSelector = function () { return !!this.element; };\n      CssSelector.prototype.setElement = function (element) {\n          if (element === void 0) { element = null; }\n          this.element = element;\n      };\n      /** Gets a template string for an element that matches the selector. */\n      CssSelector.prototype.getMatchingElementTemplate = function () {\n          var tagName = this.element || 'div';\n          var classAttr = this.classNames.length > 0 ? \" class=\\\"\" + this.classNames.join(' ') + \"\\\"\" : '';\n          var attrs = '';\n          for (var i = 0; i < this.attrs.length; i += 2) {\n              var attrName = this.attrs[i];\n              var attrValue = this.attrs[i + 1] !== '' ? \"=\\\"\" + this.attrs[i + 1] + \"\\\"\" : '';\n              attrs += \" \" + attrName + attrValue;\n          }\n          return getHtmlTagDefinition(tagName).isVoid ? \"<\" + tagName + classAttr + attrs + \"/>\" :\n              \"<\" + tagName + classAttr + attrs + \"></\" + tagName + \">\";\n      };\n      CssSelector.prototype.addAttribute = function (name, value) {\n          if (value === void 0) { value = ''; }\n          this.attrs.push(name, value && value.toLowerCase() || '');\n      };\n      CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };\n      CssSelector.prototype.toString = function () {\n          var res = this.element || '';\n          if (this.classNames) {\n              this.classNames.forEach(function (klass) { return res += \".\" + klass; });\n          }\n          if (this.attrs) {\n              for (var i = 0; i < this.attrs.length; i += 2) {\n                  var name_1 = this.attrs[i];\n                  var value = this.attrs[i + 1];\n                  res += \"[\" + name_1 + (value ? '=' + value : '') + \"]\";\n              }\n          }\n          this.notSelectors.forEach(function (notSelector) { return res += \":not(\" + notSelector + \")\"; });\n          return res;\n      };\n      return CssSelector;\n  }());\n  /**\n   * Reads a list of CssSelectors and allows to calculate which ones\n   * are contained in a given CssSelector.\n   */\n  var SelectorMatcher = (function () {\n      function SelectorMatcher() {\n          this._elementMap = new Map();\n          this._elementPartialMap = new Map();\n          this._classMap = new Map();\n          this._classPartialMap = new Map();\n          this._attrValueMap = new Map();\n          this._attrValuePartialMap = new Map();\n          this._listContexts = [];\n      }\n      SelectorMatcher.createNotMatcher = function (notSelectors) {\n          var notMatcher = new SelectorMatcher();\n          notMatcher.addSelectables(notSelectors, null);\n          return notMatcher;\n      };\n      SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {\n          var listContext = null;\n          if (cssSelectors.length > 1) {\n              listContext = new SelectorListContext(cssSelectors);\n              this._listContexts.push(listContext);\n          }\n          for (var i = 0; i < cssSelectors.length; i++) {\n              this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n          }\n      };\n      /**\n       * Add an object that can be found later on by calling `match`.\n       * @param cssSelector A css selector\n       * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n       */\n      SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {\n          var matcher = this;\n          var element = cssSelector.element;\n          var classNames = cssSelector.classNames;\n          var attrs = cssSelector.attrs;\n          var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n          if (element) {\n              var isTerminal = attrs.length === 0 && classNames.length === 0;\n              if (isTerminal) {\n                  this._addTerminal(matcher._elementMap, element, selectable);\n              }\n              else {\n                  matcher = this._addPartial(matcher._elementPartialMap, element);\n              }\n          }\n          if (classNames) {\n              for (var i = 0; i < classNames.length; i++) {\n                  var isTerminal = attrs.length === 0 && i === classNames.length - 1;\n                  var className = classNames[i];\n                  if (isTerminal) {\n                      this._addTerminal(matcher._classMap, className, selectable);\n                  }\n                  else {\n                      matcher = this._addPartial(matcher._classPartialMap, className);\n                  }\n              }\n          }\n          if (attrs) {\n              for (var i = 0; i < attrs.length; i += 2) {\n                  var isTerminal = i === attrs.length - 2;\n                  var name_2 = attrs[i];\n                  var value = attrs[i + 1];\n                  if (isTerminal) {\n                      var terminalMap = matcher._attrValueMap;\n                      var terminalValuesMap = terminalMap.get(name_2);\n                      if (!terminalValuesMap) {\n                          terminalValuesMap = new Map();\n                          terminalMap.set(name_2, terminalValuesMap);\n                      }\n                      this._addTerminal(terminalValuesMap, value, selectable);\n                  }\n                  else {\n                      var partialMap = matcher._attrValuePartialMap;\n                      var partialValuesMap = partialMap.get(name_2);\n                      if (!partialValuesMap) {\n                          partialValuesMap = new Map();\n                          partialMap.set(name_2, partialValuesMap);\n                      }\n                      matcher = this._addPartial(partialValuesMap, value);\n                  }\n              }\n          }\n      };\n      SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {\n          var terminalList = map.get(name);\n          if (!terminalList) {\n              terminalList = [];\n              map.set(name, terminalList);\n          }\n          terminalList.push(selectable);\n      };\n      SelectorMatcher.prototype._addPartial = function (map, name) {\n          var matcher = map.get(name);\n          if (!matcher) {\n              matcher = new SelectorMatcher();\n              map.set(name, matcher);\n          }\n          return matcher;\n      };\n      /**\n       * Find the objects that have been added via `addSelectable`\n       * whose css selector is contained in the given css selector.\n       * @param cssSelector A css selector\n       * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n       * @return boolean true if a match was found\n      */\n      SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {\n          var result = false;\n          var element = cssSelector.element;\n          var classNames = cssSelector.classNames;\n          var attrs = cssSelector.attrs;\n          for (var i = 0; i < this._listContexts.length; i++) {\n              this._listContexts[i].alreadyMatched = false;\n          }\n          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n              result;\n          if (classNames) {\n              for (var i = 0; i < classNames.length; i++) {\n                  var className = classNames[i];\n                  result =\n                      this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n                  result =\n                      this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n                          result;\n              }\n          }\n          if (attrs) {\n              for (var i = 0; i < attrs.length; i += 2) {\n                  var name_3 = attrs[i];\n                  var value = attrs[i + 1];\n                  var terminalValuesMap = this._attrValueMap.get(name_3);\n                  if (value) {\n                      result =\n                          this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n                  }\n                  result =\n                      this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n                  var partialValuesMap = this._attrValuePartialMap.get(name_3);\n                  if (value) {\n                      result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n                  }\n                  result =\n                      this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n              }\n          }\n          return result;\n      };\n      /** @internal */\n      SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {\n          if (!map || typeof name !== 'string') {\n              return false;\n          }\n          var selectables = map.get(name) || [];\n          var starSelectables = map.get('*');\n          if (starSelectables) {\n              selectables = selectables.concat(starSelectables);\n          }\n          if (selectables.length === 0) {\n              return false;\n          }\n          var selectable;\n          var result = false;\n          for (var i = 0; i < selectables.length; i++) {\n              selectable = selectables[i];\n              result = selectable.finalize(cssSelector, matchedCallback) || result;\n          }\n          return result;\n      };\n      /** @internal */\n      SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {\n          if (!map || typeof name !== 'string') {\n              return false;\n          }\n          var nestedSelector = map.get(name);\n          if (!nestedSelector) {\n              return false;\n          }\n          // TODO(perf): get rid of recursion and measure again\n          // TODO(perf): don't pass the whole selector into the recursion,\n          // but only the not processed parts\n          return nestedSelector.match(cssSelector, matchedCallback);\n      };\n      return SelectorMatcher;\n  }());\n  var SelectorListContext = (function () {\n      function SelectorListContext(selectors) {\n          this.selectors = selectors;\n          this.alreadyMatched = false;\n      }\n      return SelectorListContext;\n  }());\n  // Store context to pass back selector and context when a selector is matched\n  var SelectorContext = (function () {\n      function SelectorContext(selector, cbContext, listContext) {\n          this.selector = selector;\n          this.cbContext = cbContext;\n          this.listContext = listContext;\n          this.notSelectors = selector.notSelectors;\n      }\n      SelectorContext.prototype.finalize = function (cssSelector, callback) {\n          var result = true;\n          if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n              var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n              result = !notMatcher.match(cssSelector, null);\n          }\n          if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n              if (this.listContext) {\n                  this.listContext.alreadyMatched = true;\n              }\n              callback(this.selector, this.cbContext);\n          }\n          return result;\n      };\n      return SelectorContext;\n  }());\n\n  var MODULE_SUFFIX = '';\n  var DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n  function dashCaseToCamelCase(input) {\n      return input.replace(DASH_CASE_REGEXP, function () {\n          var m = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              m[_i] = arguments[_i];\n          }\n          return m[1].toUpperCase();\n      });\n  }\n  function splitAtColon(input, defaultValues) {\n      return _splitAt(input, ':', defaultValues);\n  }\n  function splitAtPeriod(input, defaultValues) {\n      return _splitAt(input, '.', defaultValues);\n  }\n  function _splitAt(input, character, defaultValues) {\n      var characterIndex = input.indexOf(character);\n      if (characterIndex == -1)\n          return defaultValues;\n      return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n  }\n  function visitValue(value, visitor, context) {\n      if (Array.isArray(value)) {\n          return visitor.visitArray(value, context);\n      }\n      if (isStrictStringMap(value)) {\n          return visitor.visitStringMap(value, context);\n      }\n      if (value == null || isPrimitive(value)) {\n          return visitor.visitPrimitive(value, context);\n      }\n      return visitor.visitOther(value, context);\n  }\n  var ValueTransformer = (function () {\n      function ValueTransformer() {\n      }\n      ValueTransformer.prototype.visitArray = function (arr, context) {\n          var _this = this;\n          return arr.map(function (value) { return visitValue(value, _this, context); });\n      };\n      ValueTransformer.prototype.visitStringMap = function (map, context) {\n          var _this = this;\n          var result = {};\n          Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });\n          return result;\n      };\n      ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };\n      ValueTransformer.prototype.visitOther = function (value, context) { return value; };\n      return ValueTransformer;\n  }());\n  var SyncAsyncResult = (function () {\n      function SyncAsyncResult(syncResult, asyncResult) {\n          if (asyncResult === void 0) { asyncResult = null; }\n          this.syncResult = syncResult;\n          this.asyncResult = asyncResult;\n          if (!asyncResult) {\n              this.asyncResult = Promise.resolve(syncResult);\n          }\n      }\n      return SyncAsyncResult;\n  }());\n  function syntaxError(msg) {\n      var error = Error(msg);\n      error[ERROR_SYNTAX_ERROR] = true;\n      return error;\n  }\n  var ERROR_SYNTAX_ERROR = 'ngSyntaxError';\n  function isSyntaxError(error) {\n      return error[ERROR_SYNTAX_ERROR];\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$1 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  // group 0: \"[prop] or (event) or @trigger\"\n  // group 1: \"prop\" from \"[prop]\"\n  // group 2: \"event\" from \"(event)\"\n  // group 3: \"@trigger\" from \"@trigger\"\n  var HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n  var CompileAnimationEntryMetadata = (function () {\n      function CompileAnimationEntryMetadata(name, definitions) {\n          if (name === void 0) { name = null; }\n          if (definitions === void 0) { definitions = null; }\n          this.name = name;\n          this.definitions = definitions;\n      }\n      return CompileAnimationEntryMetadata;\n  }());\n  var CompileAnimationStateMetadata = (function () {\n      function CompileAnimationStateMetadata() {\n      }\n      return CompileAnimationStateMetadata;\n  }());\n  var CompileAnimationStateDeclarationMetadata = (function (_super) {\n      __extends$1(CompileAnimationStateDeclarationMetadata, _super);\n      function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {\n          var _this = _super.call(this) || this;\n          _this.stateNameExpr = stateNameExpr;\n          _this.styles = styles;\n          return _this;\n      }\n      return CompileAnimationStateDeclarationMetadata;\n  }(CompileAnimationStateMetadata));\n  var CompileAnimationStateTransitionMetadata = (function (_super) {\n      __extends$1(CompileAnimationStateTransitionMetadata, _super);\n      function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {\n          var _this = _super.call(this) || this;\n          _this.stateChangeExpr = stateChangeExpr;\n          _this.steps = steps;\n          return _this;\n      }\n      return CompileAnimationStateTransitionMetadata;\n  }(CompileAnimationStateMetadata));\n  var CompileAnimationMetadata = (function () {\n      function CompileAnimationMetadata() {\n      }\n      return CompileAnimationMetadata;\n  }());\n  var CompileAnimationKeyframesSequenceMetadata = (function (_super) {\n      __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);\n      function CompileAnimationKeyframesSequenceMetadata(steps) {\n          if (steps === void 0) { steps = []; }\n          var _this = _super.call(this) || this;\n          _this.steps = steps;\n          return _this;\n      }\n      return CompileAnimationKeyframesSequenceMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationStyleMetadata = (function (_super) {\n      __extends$1(CompileAnimationStyleMetadata, _super);\n      function CompileAnimationStyleMetadata(offset, styles) {\n          if (styles === void 0) { styles = null; }\n          var _this = _super.call(this) || this;\n          _this.offset = offset;\n          _this.styles = styles;\n          return _this;\n      }\n      return CompileAnimationStyleMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationAnimateMetadata = (function (_super) {\n      __extends$1(CompileAnimationAnimateMetadata, _super);\n      function CompileAnimationAnimateMetadata(timings, styles) {\n          if (timings === void 0) { timings = 0; }\n          if (styles === void 0) { styles = null; }\n          var _this = _super.call(this) || this;\n          _this.timings = timings;\n          _this.styles = styles;\n          return _this;\n      }\n      return CompileAnimationAnimateMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationWithStepsMetadata = (function (_super) {\n      __extends$1(CompileAnimationWithStepsMetadata, _super);\n      function CompileAnimationWithStepsMetadata(steps) {\n          if (steps === void 0) { steps = null; }\n          var _this = _super.call(this) || this;\n          _this.steps = steps;\n          return _this;\n      }\n      return CompileAnimationWithStepsMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationSequenceMetadata = (function (_super) {\n      __extends$1(CompileAnimationSequenceMetadata, _super);\n      function CompileAnimationSequenceMetadata(steps) {\n          if (steps === void 0) { steps = null; }\n          return _super.call(this, steps) || this;\n      }\n      return CompileAnimationSequenceMetadata;\n  }(CompileAnimationWithStepsMetadata));\n  var CompileAnimationGroupMetadata = (function (_super) {\n      __extends$1(CompileAnimationGroupMetadata, _super);\n      function CompileAnimationGroupMetadata(steps) {\n          if (steps === void 0) { steps = null; }\n          return _super.call(this, steps) || this;\n      }\n      return CompileAnimationGroupMetadata;\n  }(CompileAnimationWithStepsMetadata));\n  function _sanitizeIdentifier(name) {\n      return name.replace(/\\W/g, '_');\n  }\n  var _anonymousTypeIndex = 0;\n  function identifierName(compileIdentifier) {\n      if (!compileIdentifier || !compileIdentifier.reference) {\n          return null;\n      }\n      var ref = compileIdentifier.reference;\n      if (ref instanceof StaticSymbol) {\n          return ref.name;\n      }\n      if (ref['__anonymousType']) {\n          return ref['__anonymousType'];\n      }\n      var identifier = stringify(ref);\n      if (identifier.indexOf('(') >= 0) {\n          // case: anonymous functions!\n          identifier = \"anonymous_\" + _anonymousTypeIndex++;\n          ref['__anonymousType'] = identifier;\n      }\n      else {\n          identifier = _sanitizeIdentifier(identifier);\n      }\n      return identifier;\n  }\n  function identifierModuleUrl(compileIdentifier) {\n      var ref = compileIdentifier.reference;\n      if (ref instanceof StaticSymbol) {\n          return ref.filePath;\n      }\n      return _angular_core.ɵreflector.importUri(ref);\n  }\n  function viewClassName(compType, embeddedTemplateIndex) {\n      return \"View_\" + identifierName({ reference: compType }) + \"_\" + embeddedTemplateIndex;\n  }\n  function rendererTypeName(compType) {\n      return \"RenderType_\" + identifierName({ reference: compType });\n  }\n  function hostViewClassName(compType) {\n      return \"HostView_\" + identifierName({ reference: compType });\n  }\n  function dirWrapperClassName(dirType) {\n      return \"Wrapper_\" + identifierName({ reference: dirType });\n  }\n  function componentFactoryName(compType) {\n      return identifierName({ reference: compType }) + \"NgFactory\";\n  }\n  exports.CompileSummaryKind;\n  (function (CompileSummaryKind) {\n      CompileSummaryKind[CompileSummaryKind[\"Pipe\"] = 0] = \"Pipe\";\n      CompileSummaryKind[CompileSummaryKind[\"Directive\"] = 1] = \"Directive\";\n      CompileSummaryKind[CompileSummaryKind[\"NgModule\"] = 2] = \"NgModule\";\n      CompileSummaryKind[CompileSummaryKind[\"Injectable\"] = 3] = \"Injectable\";\n  })(exports.CompileSummaryKind || (exports.CompileSummaryKind = {}));\n  function tokenName(token) {\n      return isPresent(token.value) ? _sanitizeIdentifier(token.value) :\n          identifierName(token.identifier);\n  }\n  function tokenReference(token) {\n      if (isPresent(token.identifier)) {\n          return token.identifier.reference;\n      }\n      else {\n          return token.value;\n      }\n  }\n  /**\n   * Metadata about a stylesheet\n   */\n  var CompileStylesheetMetadata = (function () {\n      function CompileStylesheetMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;\n          this.moduleUrl = moduleUrl;\n          this.styles = _normalizeArray(styles);\n          this.styleUrls = _normalizeArray(styleUrls);\n      }\n      return CompileStylesheetMetadata;\n  }());\n  /**\n   * Metadata regarding compilation of a template.\n   */\n  var CompileTemplateMetadata = (function () {\n      function CompileTemplateMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;\n          this.encapsulation = encapsulation;\n          this.template = template;\n          this.templateUrl = templateUrl;\n          this.styles = _normalizeArray(styles);\n          this.styleUrls = _normalizeArray(styleUrls);\n          this.externalStylesheets = _normalizeArray(externalStylesheets);\n          this.animations = animations ? ListWrapper.flatten(animations) : [];\n          this.ngContentSelectors = ngContentSelectors || [];\n          if (interpolation && interpolation.length != 2) {\n              throw new Error(\"'interpolation' should have a start and an end symbol.\");\n          }\n          this.interpolation = interpolation;\n      }\n      CompileTemplateMetadata.prototype.toSummary = function () {\n          return {\n              animations: this.animations.map(function (anim) { return anim.name; }),\n              ngContentSelectors: this.ngContentSelectors,\n              encapsulation: this.encapsulation,\n          };\n      };\n      return CompileTemplateMetadata;\n  }());\n  /**\n   * Metadata regarding compilation of a directive.\n   */\n  var CompileDirectiveMetadata = (function () {\n      function CompileDirectiveMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template, wrapperType = _b.wrapperType, componentViewType = _b.componentViewType, rendererType = _b.rendererType, componentFactory = _b.componentFactory;\n          this.isHost = !!isHost;\n          this.type = type;\n          this.isComponent = isComponent;\n          this.selector = selector;\n          this.exportAs = exportAs;\n          this.changeDetection = changeDetection;\n          this.inputs = inputs;\n          this.outputs = outputs;\n          this.hostListeners = hostListeners;\n          this.hostProperties = hostProperties;\n          this.hostAttributes = hostAttributes;\n          this.providers = _normalizeArray(providers);\n          this.viewProviders = _normalizeArray(viewProviders);\n          this.queries = _normalizeArray(queries);\n          this.viewQueries = _normalizeArray(viewQueries);\n          this.entryComponents = _normalizeArray(entryComponents);\n          this.template = template;\n          this.wrapperType = wrapperType;\n          this.componentViewType = componentViewType;\n          this.rendererType = rendererType;\n          this.componentFactory = componentFactory;\n      }\n      CompileDirectiveMetadata.create = function (_a) {\n          var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template, wrapperType = _b.wrapperType, componentViewType = _b.componentViewType, rendererType = _b.rendererType, componentFactory = _b.componentFactory;\n          var hostListeners = {};\n          var hostProperties = {};\n          var hostAttributes = {};\n          if (isPresent(host)) {\n              Object.keys(host).forEach(function (key) {\n                  var value = host[key];\n                  var matches = key.match(HOST_REG_EXP);\n                  if (matches === null) {\n                      hostAttributes[key] = value;\n                  }\n                  else if (isPresent(matches[1])) {\n                      hostProperties[matches[1]] = value;\n                  }\n                  else if (isPresent(matches[2])) {\n                      hostListeners[matches[2]] = value;\n                  }\n              });\n          }\n          var inputsMap = {};\n          if (isPresent(inputs)) {\n              inputs.forEach(function (bindConfig) {\n                  // canonical syntax: `dirProp: elProp`\n                  // if there is no `:`, use dirProp = elProp\n                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                  inputsMap[parts[0]] = parts[1];\n              });\n          }\n          var outputsMap = {};\n          if (isPresent(outputs)) {\n              outputs.forEach(function (bindConfig) {\n                  // canonical syntax: `dirProp: elProp`\n                  // if there is no `:`, use dirProp = elProp\n                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                  outputsMap[parts[0]] = parts[1];\n              });\n          }\n          return new CompileDirectiveMetadata({\n              isHost: isHost,\n              type: type,\n              isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,\n              inputs: inputsMap,\n              outputs: outputsMap,\n              hostListeners: hostListeners,\n              hostProperties: hostProperties,\n              hostAttributes: hostAttributes,\n              providers: providers,\n              viewProviders: viewProviders,\n              queries: queries,\n              viewQueries: viewQueries,\n              entryComponents: entryComponents,\n              template: template,\n              wrapperType: wrapperType,\n              componentViewType: componentViewType,\n              rendererType: rendererType,\n              componentFactory: componentFactory,\n          });\n      };\n      CompileDirectiveMetadata.prototype.toSummary = function () {\n          return {\n              summaryKind: exports.CompileSummaryKind.Directive,\n              type: this.type,\n              isComponent: this.isComponent,\n              selector: this.selector,\n              exportAs: this.exportAs,\n              inputs: this.inputs,\n              outputs: this.outputs,\n              hostListeners: this.hostListeners,\n              hostProperties: this.hostProperties,\n              hostAttributes: this.hostAttributes,\n              providers: this.providers,\n              viewProviders: this.viewProviders,\n              queries: this.queries,\n              viewQueries: this.viewQueries,\n              entryComponents: this.entryComponents,\n              changeDetection: this.changeDetection,\n              template: this.template && this.template.toSummary(),\n              wrapperType: this.wrapperType,\n              componentViewType: this.componentViewType,\n              rendererType: this.rendererType,\n              componentFactory: this.componentFactory\n          };\n      };\n      return CompileDirectiveMetadata;\n  }());\n  /**\n   * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.\n   */\n  function createHostComponentMeta(hostTypeReference, compMeta, hostViewType) {\n      var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();\n      return CompileDirectiveMetadata.create({\n          isHost: true,\n          type: { reference: hostTypeReference, diDeps: [], lifecycleHooks: [] },\n          template: new CompileTemplateMetadata({\n              encapsulation: _angular_core.ViewEncapsulation.None,\n              template: template,\n              templateUrl: '',\n              styles: [],\n              styleUrls: [],\n              ngContentSelectors: [],\n              animations: []\n          }),\n          changeDetection: _angular_core.ChangeDetectionStrategy.Default,\n          inputs: [],\n          outputs: [],\n          host: {},\n          isComponent: true,\n          selector: '*',\n          providers: [],\n          viewProviders: [],\n          queries: [],\n          viewQueries: [],\n          componentViewType: hostViewType,\n          rendererType: { id: '__Host__', encapsulation: _angular_core.ViewEncapsulation.None, styles: [], data: {} }\n      });\n  }\n  var CompilePipeMetadata = (function () {\n      function CompilePipeMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;\n          this.type = type;\n          this.name = name;\n          this.pure = !!pure;\n      }\n      CompilePipeMetadata.prototype.toSummary = function () {\n          return {\n              summaryKind: exports.CompileSummaryKind.Pipe,\n              type: this.type,\n              name: this.name,\n              pure: this.pure\n          };\n      };\n      return CompilePipeMetadata;\n  }());\n  /**\n   * Metadata regarding compilation of a module.\n   */\n  var CompileNgModuleMetadata = (function () {\n      function CompileNgModuleMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;\n          this.type = type;\n          this.declaredDirectives = _normalizeArray(declaredDirectives);\n          this.exportedDirectives = _normalizeArray(exportedDirectives);\n          this.declaredPipes = _normalizeArray(declaredPipes);\n          this.exportedPipes = _normalizeArray(exportedPipes);\n          this.providers = _normalizeArray(providers);\n          this.entryComponents = _normalizeArray(entryComponents);\n          this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n          this.importedModules = _normalizeArray(importedModules);\n          this.exportedModules = _normalizeArray(exportedModules);\n          this.schemas = _normalizeArray(schemas);\n          this.id = id;\n          this.transitiveModule = transitiveModule;\n      }\n      CompileNgModuleMetadata.prototype.toSummary = function () {\n          return {\n              summaryKind: exports.CompileSummaryKind.NgModule,\n              type: this.type,\n              entryComponents: this.transitiveModule.entryComponents,\n              providers: this.transitiveModule.providers,\n              modules: this.transitiveModule.modules,\n              exportedDirectives: this.transitiveModule.exportedDirectives,\n              exportedPipes: this.transitiveModule.exportedPipes\n          };\n      };\n      return CompileNgModuleMetadata;\n  }());\n  var TransitiveCompileNgModuleMetadata = (function () {\n      function TransitiveCompileNgModuleMetadata() {\n          this.directivesSet = new Set();\n          this.directives = [];\n          this.exportedDirectivesSet = new Set();\n          this.exportedDirectives = [];\n          this.pipesSet = new Set();\n          this.pipes = [];\n          this.exportedPipesSet = new Set();\n          this.exportedPipes = [];\n          this.modulesSet = new Set();\n          this.modules = [];\n          this.entryComponentsSet = new Set();\n          this.entryComponents = [];\n          this.providers = [];\n      }\n      TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {\n          this.providers.push({ provider: provider, module: module });\n      };\n      TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {\n          if (!this.directivesSet.has(id.reference)) {\n              this.directivesSet.add(id.reference);\n              this.directives.push(id);\n          }\n      };\n      TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {\n          if (!this.exportedDirectivesSet.has(id.reference)) {\n              this.exportedDirectivesSet.add(id.reference);\n              this.exportedDirectives.push(id);\n          }\n      };\n      TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {\n          if (!this.pipesSet.has(id.reference)) {\n              this.pipesSet.add(id.reference);\n              this.pipes.push(id);\n          }\n      };\n      TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {\n          if (!this.exportedPipesSet.has(id.reference)) {\n              this.exportedPipesSet.add(id.reference);\n              this.exportedPipes.push(id);\n          }\n      };\n      TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {\n          if (!this.modulesSet.has(id.reference)) {\n              this.modulesSet.add(id.reference);\n              this.modules.push(id);\n          }\n      };\n      TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (ec) {\n          if (!this.entryComponentsSet.has(ec.componentType)) {\n              this.entryComponentsSet.add(ec.componentType);\n              this.entryComponents.push(ec);\n          }\n      };\n      return TransitiveCompileNgModuleMetadata;\n  }());\n  function _normalizeArray(obj) {\n      return obj || [];\n  }\n  var ProviderMeta = (function () {\n      function ProviderMeta(token, _a) {\n          var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;\n          this.token = token;\n          this.useClass = useClass;\n          this.useValue = useValue;\n          this.useExisting = useExisting;\n          this.useFactory = useFactory;\n          this.dependencies = deps;\n          this.multi = !!multi;\n      }\n      return ProviderMeta;\n  }());\n\n  var CORE = assetUrl('core');\n  var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');\n  var Identifiers = (function () {\n      function Identifiers() {\n      }\n      return Identifiers;\n  }());\n  Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n      name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n      moduleUrl: CORE,\n      runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS\n  };\n  Identifiers.ViewUtils = { name: 'ɵViewUtils', moduleUrl: CORE, runtime: _angular_core.ɵViewUtils };\n  Identifiers.AppView = { name: 'ɵAppView', moduleUrl: CORE, runtime: _angular_core.ɵAppView };\n  Identifiers.DebugAppView = { name: 'ɵDebugAppView', moduleUrl: CORE, runtime: _angular_core.ɵDebugAppView };\n  Identifiers.ViewContainer = { name: 'ɵViewContainer', moduleUrl: CORE, runtime: _angular_core.ɵViewContainer };\n  Identifiers.ElementRef = { name: 'ElementRef', moduleUrl: CORE, runtime: _angular_core.ElementRef };\n  Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleUrl: CORE, runtime: _angular_core.ViewContainerRef };\n  Identifiers.ChangeDetectorRef = { name: 'ChangeDetectorRef', moduleUrl: CORE, runtime: _angular_core.ChangeDetectorRef };\n  Identifiers.RenderComponentType = { name: 'RenderComponentType', moduleUrl: CORE, runtime: _angular_core.RenderComponentType };\n  Identifiers.QueryList = { name: 'QueryList', moduleUrl: CORE, runtime: _angular_core.QueryList };\n  Identifiers.TemplateRef = { name: 'TemplateRef', moduleUrl: CORE, runtime: _angular_core.TemplateRef };\n  Identifiers.TemplateRef_ = { name: 'ɵTemplateRef_', moduleUrl: CORE, runtime: _angular_core.ɵTemplateRef_ };\n  Identifiers.CodegenComponentFactoryResolver = {\n      name: 'ɵCodegenComponentFactoryResolver',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵCodegenComponentFactoryResolver\n  };\n  Identifiers.ComponentFactoryResolver = {\n      name: 'ComponentFactoryResolver',\n      moduleUrl: CORE,\n      runtime: _angular_core.ComponentFactoryResolver\n  };\n  Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleUrl: CORE, runtime: _angular_core.ComponentFactory };\n  Identifiers.ComponentRef_ = {\n      name: 'ɵComponentRef_',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵComponentRef_,\n  };\n  Identifiers.ComponentRef = { name: 'ComponentRef', moduleUrl: CORE, runtime: _angular_core.ComponentRef };\n  Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleUrl: CORE, runtime: _angular_core.NgModuleFactory };\n  Identifiers.NgModuleInjector = {\n      name: 'ɵNgModuleInjector',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵNgModuleInjector,\n  };\n  Identifiers.RegisterModuleFactoryFn = {\n      name: 'ɵregisterModuleFactory',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵregisterModuleFactory,\n  };\n  Identifiers.ValueUnwrapper = { name: 'ɵValueUnwrapper', moduleUrl: CORE, runtime: _angular_core.ɵValueUnwrapper };\n  Identifiers.Injector = { name: 'Injector', moduleUrl: CORE, runtime: _angular_core.Injector };\n  Identifiers.ViewEncapsulation = { name: 'ViewEncapsulation', moduleUrl: CORE, runtime: _angular_core.ViewEncapsulation };\n  Identifiers.ViewType = { name: 'ɵViewType', moduleUrl: CORE, runtime: _angular_core.ɵViewType };\n  Identifiers.ChangeDetectionStrategy = {\n      name: 'ChangeDetectionStrategy',\n      moduleUrl: CORE,\n      runtime: _angular_core.ChangeDetectionStrategy\n  };\n  Identifiers.StaticNodeDebugInfo = {\n      name: 'ɵStaticNodeDebugInfo',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵStaticNodeDebugInfo\n  };\n  Identifiers.DebugContext = { name: 'ɵDebugContext', moduleUrl: CORE, runtime: _angular_core.ɵDebugContext };\n  Identifiers.Renderer = { name: 'Renderer', moduleUrl: CORE, runtime: _angular_core.Renderer };\n  Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CORE, runtime: _angular_core.SimpleChange };\n  Identifiers.ChangeDetectorStatus = {\n      name: 'ɵChangeDetectorStatus',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵChangeDetectorStatus\n  };\n  Identifiers.checkBinding = { name: 'ɵcheckBinding', moduleUrl: CORE, runtime: _angular_core.ɵcheckBinding };\n  Identifiers.checkBindingChange = { name: 'ɵcheckBindingChange', moduleUrl: CORE, runtime: _angular_core.ɵcheckBindingChange };\n  Identifiers.checkRenderText = { name: 'ɵcheckRenderText', moduleUrl: CORE, runtime: _angular_core.ɵcheckRenderText };\n  Identifiers.checkRenderProperty = {\n      name: 'ɵcheckRenderProperty',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵcheckRenderProperty\n  };\n  Identifiers.checkRenderAttribute = {\n      name: 'ɵcheckRenderAttribute',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵcheckRenderAttribute\n  };\n  Identifiers.checkRenderClass = { name: 'ɵcheckRenderClass', moduleUrl: CORE, runtime: _angular_core.ɵcheckRenderClass };\n  Identifiers.checkRenderStyle = { name: 'ɵcheckRenderStyle', moduleUrl: CORE, runtime: _angular_core.ɵcheckRenderStyle };\n  Identifiers.devModeEqual = { name: 'ɵdevModeEqual', moduleUrl: CORE, runtime: _angular_core.ɵdevModeEqual };\n  Identifiers.inlineInterpolate = { name: 'ɵinlineInterpolate', moduleUrl: CORE, runtime: _angular_core.ɵinlineInterpolate };\n  Identifiers.interpolate = { name: 'ɵinterpolate', moduleUrl: CORE, runtime: _angular_core.ɵinterpolate };\n  Identifiers.castByValue = { name: 'ɵcastByValue', moduleUrl: CORE, runtime: _angular_core.ɵcastByValue };\n  Identifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_ARRAY };\n  Identifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_MAP };\n  Identifiers.createRenderElement = {\n      name: 'ɵcreateRenderElement',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵcreateRenderElement\n  };\n  Identifiers.selectOrCreateRenderHostElement = {\n      name: 'ɵselectOrCreateRenderHostElement',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵselectOrCreateRenderHostElement\n  };\n  Identifiers.pureProxies = [\n      null,\n      { name: 'ɵpureProxy1', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy1 },\n      { name: 'ɵpureProxy2', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy2 },\n      { name: 'ɵpureProxy3', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy3 },\n      { name: 'ɵpureProxy4', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy4 },\n      { name: 'ɵpureProxy5', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy5 },\n      { name: 'ɵpureProxy6', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy6 },\n      { name: 'ɵpureProxy7', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy7 },\n      { name: 'ɵpureProxy8', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy8 },\n      { name: 'ɵpureProxy9', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy9 },\n      { name: 'ɵpureProxy10', moduleUrl: CORE, runtime: _angular_core.ɵpureProxy10 },\n  ];\n  Identifiers.SecurityContext = {\n      name: 'SecurityContext',\n      moduleUrl: CORE,\n      runtime: _angular_core.SecurityContext,\n  };\n  Identifiers.AnimationKeyframe = { name: 'ɵAnimationKeyframe', moduleUrl: CORE, runtime: _angular_core.ɵAnimationKeyframe };\n  Identifiers.AnimationStyles = { name: 'ɵAnimationStyles', moduleUrl: CORE, runtime: _angular_core.ɵAnimationStyles };\n  Identifiers.NoOpAnimationPlayer = {\n      name: 'ɵNoOpAnimationPlayer',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵNoOpAnimationPlayer\n  };\n  Identifiers.AnimationGroupPlayer = {\n      name: 'ɵAnimationGroupPlayer',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵAnimationGroupPlayer\n  };\n  Identifiers.AnimationSequencePlayer = {\n      name: 'ɵAnimationSequencePlayer',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵAnimationSequencePlayer\n  };\n  Identifiers.prepareFinalAnimationStyles = {\n      name: 'ɵprepareFinalAnimationStyles',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵprepareFinalAnimationStyles\n  };\n  Identifiers.balanceAnimationKeyframes = {\n      name: 'ɵbalanceAnimationKeyframes',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵbalanceAnimationKeyframes\n  };\n  Identifiers.clearStyles = { name: 'ɵclearStyles', moduleUrl: CORE, runtime: _angular_core.ɵclearStyles };\n  Identifiers.renderStyles = { name: 'ɵrenderStyles', moduleUrl: CORE, runtime: _angular_core.ɵrenderStyles };\n  Identifiers.collectAndResolveStyles = {\n      name: 'ɵcollectAndResolveStyles',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵcollectAndResolveStyles\n  };\n  Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleUrl: CORE, runtime: _angular_core.LOCALE_ID };\n  Identifiers.TRANSLATIONS_FORMAT = { name: 'TRANSLATIONS_FORMAT', moduleUrl: CORE, runtime: _angular_core.TRANSLATIONS_FORMAT };\n  Identifiers.setBindingDebugInfo = {\n      name: 'ɵsetBindingDebugInfo',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵsetBindingDebugInfo\n  };\n  Identifiers.setBindingDebugInfoForChanges = {\n      name: 'ɵsetBindingDebugInfoForChanges',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵsetBindingDebugInfoForChanges\n  };\n  Identifiers.AnimationTransition = {\n      name: 'ɵAnimationTransition',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵAnimationTransition\n  };\n  // This is just the interface!\n  Identifiers.InlineArray = { name: 'InlineArray', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: null };\n  Identifiers.inlineArrays = [\n      { name: 'ɵInlineArray2', moduleUrl: CORE, runtime: _angular_core.ɵInlineArray2 },\n      { name: 'ɵInlineArray2', moduleUrl: CORE, runtime: _angular_core.ɵInlineArray2 },\n      { name: 'ɵInlineArray4', moduleUrl: CORE, runtime: _angular_core.ɵInlineArray4 },\n      { name: 'ɵInlineArray8', moduleUrl: CORE, runtime: _angular_core.ɵInlineArray8 },\n      { name: 'ɵInlineArray16', moduleUrl: CORE, runtime: _angular_core.ɵInlineArray16 },\n  ];\n  Identifiers.EMPTY_INLINE_ARRAY = { name: 'ɵEMPTY_INLINE_ARRAY', moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_INLINE_ARRAY };\n  Identifiers.InlineArrayDynamic = { name: 'ɵInlineArrayDynamic', moduleUrl: CORE, runtime: _angular_core.ɵInlineArrayDynamic };\n  Identifiers.subscribeToRenderElement = {\n      name: 'ɵsubscribeToRenderElement',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵsubscribeToRenderElement\n  };\n  Identifiers.createRenderComponentType = {\n      name: 'ɵcreateRenderComponentType',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵcreateRenderComponentType\n  };\n  Identifiers.noop = { name: 'ɵnoop', moduleUrl: CORE, runtime: _angular_core.ɵnoop };\n  Identifiers.viewDef = { name: 'ɵviewDef', moduleUrl: CORE, runtime: _angular_core.ɵviewDef };\n  Identifiers.elementDef = { name: 'ɵelementDef', moduleUrl: CORE, runtime: _angular_core.ɵelementDef };\n  Identifiers.anchorDef = { name: 'ɵanchorDef', moduleUrl: CORE, runtime: _angular_core.ɵanchorDef };\n  Identifiers.textDef = { name: 'ɵtextDef', moduleUrl: CORE, runtime: _angular_core.ɵtextDef };\n  Identifiers.directiveDef = { name: 'ɵdirectiveDef', moduleUrl: CORE, runtime: _angular_core.ɵdirectiveDef };\n  Identifiers.providerDef = { name: 'ɵproviderDef', moduleUrl: CORE, runtime: _angular_core.ɵproviderDef };\n  Identifiers.queryDef = { name: 'ɵqueryDef', moduleUrl: CORE, runtime: _angular_core.ɵqueryDef };\n  Identifiers.pureArrayDef = { name: 'ɵpureArrayDef', moduleUrl: CORE, runtime: _angular_core.ɵpureArrayDef };\n  Identifiers.pureObjectDef = { name: 'ɵpureObjectDef', moduleUrl: CORE, runtime: _angular_core.ɵpureObjectDef };\n  Identifiers.purePipeDef = { name: 'ɵpurePipeDef', moduleUrl: CORE, runtime: _angular_core.ɵpurePipeDef };\n  Identifiers.pipeDef = { name: 'ɵpipeDef', moduleUrl: CORE, runtime: _angular_core.ɵpipeDef };\n  Identifiers.nodeValue = { name: 'ɵnodeValue', moduleUrl: CORE, runtime: _angular_core.ɵnodeValue };\n  Identifiers.ngContentDef = { name: 'ɵngContentDef', moduleUrl: CORE, runtime: _angular_core.ɵngContentDef };\n  Identifiers.unwrapValue = { name: 'ɵunwrapValue', moduleUrl: CORE, runtime: _angular_core.ɵunwrapValue };\n  Identifiers.createRendererTypeV2 = {\n      name: 'ɵcreateRendererTypeV2',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵcreateRendererTypeV2\n  };\n  Identifiers.RendererTypeV2 = {\n      name: 'RendererTypeV2',\n      moduleUrl: CORE,\n      // type only\n      runtime: null\n  };\n  Identifiers.ViewDefinition = {\n      name: 'ɵViewDefinition',\n      moduleUrl: CORE,\n      // type only\n      runtime: null\n  };\n  Identifiers.createComponentFactory = {\n      name: 'ɵcreateComponentFactory',\n      moduleUrl: CORE,\n      runtime: _angular_core.ɵcreateComponentFactory\n  };\n  function assetUrl(pkg, path, type) {\n      if (path === void 0) { path = null; }\n      if (type === void 0) { type = 'src'; }\n      if (path == null) {\n          return \"@angular/\" + pkg;\n      }\n      else {\n          return \"@angular/\" + pkg + \"/\" + type + \"/\" + path;\n      }\n  }\n  function resolveIdentifier(identifier) {\n      var name = identifier.name;\n      return _angular_core.ɵreflector.resolveIdentifier(name, identifier.moduleUrl, null, identifier.runtime);\n  }\n  function createIdentifier(identifier) {\n      return { reference: resolveIdentifier(identifier) };\n  }\n  function identifierToken(identifier) {\n      return { identifier: identifier };\n  }\n  function createIdentifierToken(identifier) {\n      return identifierToken(createIdentifier(identifier));\n  }\n  function createEnumIdentifier(enumType, name) {\n      var resolvedEnum = _angular_core.ɵreflector.resolveEnum(resolveIdentifier(enumType), name);\n      return { reference: resolvedEnum };\n  }\n\n  /**\n   * Temporal switch for the compiler to use the new view engine,\n   * until it is fully integrated.\n   *\n   * Only works in Jit for now.\n   */\n  var USE_VIEW_ENGINE = new _angular_core.InjectionToken('UseViewEngine');\n  var CompilerConfig = (function () {\n      function CompilerConfig(_a) {\n          var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e, missingTranslation = _b.missingTranslation, useViewEngine = _b.useViewEngine, enableLegacyTemplate = _b.enableLegacyTemplate;\n          this.renderTypes = renderTypes;\n          this.defaultEncapsulation = defaultEncapsulation;\n          this._genDebugInfo = genDebugInfo;\n          this._logBindingUpdate = logBindingUpdate;\n          this.useJit = useJit;\n          this.missingTranslation = missingTranslation;\n          this.useViewEngine = true;\n          this.enableLegacyTemplate = enableLegacyTemplate !== false;\n      }\n      Object.defineProperty(CompilerConfig.prototype, \"genDebugInfo\", {\n          get: function () {\n              return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(CompilerConfig.prototype, \"logBindingUpdate\", {\n          get: function () {\n              return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      return CompilerConfig;\n  }());\n  /**\n   * Types used for the renderer.\n   * Can be replaced to specialize the generated output to a specific renderer\n   * to help tree shaking.\n   */\n  var RenderTypes = (function () {\n      function RenderTypes() {\n      }\n      return RenderTypes;\n  }());\n  var DefaultRenderTypes = (function () {\n      function DefaultRenderTypes() {\n          this.renderText = null;\n          this.renderElement = null;\n          this.renderComment = null;\n          this.renderNode = null;\n          this.renderEvent = null;\n      }\n      Object.defineProperty(DefaultRenderTypes.prototype, \"renderer\", {\n          get: function () { return createIdentifier(Identifiers.Renderer); },\n          enumerable: true,\n          configurable: true\n      });\n      ;\n      return DefaultRenderTypes;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$2 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var ParserError = (function () {\n      function ParserError(message, input, errLocation, ctxLocation) {\n          this.input = input;\n          this.errLocation = errLocation;\n          this.ctxLocation = ctxLocation;\n          this.message = \"Parser Error: \" + message + \" \" + errLocation + \" [\" + input + \"] in \" + ctxLocation;\n      }\n      return ParserError;\n  }());\n  var ParseSpan = (function () {\n      function ParseSpan(start, end) {\n          this.start = start;\n          this.end = end;\n      }\n      return ParseSpan;\n  }());\n  var AST = (function () {\n      function AST(span) {\n          this.span = span;\n      }\n      AST.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return null;\n      };\n      AST.prototype.toString = function () { return 'AST'; };\n      return AST;\n  }());\n  /**\n   * Represents a quoted expression of the form:\n   *\n   * quote = prefix `:` uninterpretedExpression\n   * prefix = identifier\n   * uninterpretedExpression = arbitrary string\n   *\n   * A quoted expression is meant to be pre-processed by an AST transformer that\n   * converts it into another AST that no longer contains quoted expressions.\n   * It is meant to allow third-party developers to extend Angular template\n   * expression language. The `uninterpretedExpression` part of the quote is\n   * therefore not interpreted by the Angular's own expression parser.\n   */\n  var Quote = (function (_super) {\n      __extends$2(Quote, _super);\n      function Quote(span, prefix, uninterpretedExpression, location) {\n          var _this = _super.call(this, span) || this;\n          _this.prefix = prefix;\n          _this.uninterpretedExpression = uninterpretedExpression;\n          _this.location = location;\n          return _this;\n      }\n      Quote.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitQuote(this, context);\n      };\n      Quote.prototype.toString = function () { return 'Quote'; };\n      return Quote;\n  }(AST));\n  var EmptyExpr = (function (_super) {\n      __extends$2(EmptyExpr, _super);\n      function EmptyExpr() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      EmptyExpr.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          // do nothing\n      };\n      return EmptyExpr;\n  }(AST));\n  var ImplicitReceiver = (function (_super) {\n      __extends$2(ImplicitReceiver, _super);\n      function ImplicitReceiver() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      ImplicitReceiver.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitImplicitReceiver(this, context);\n      };\n      return ImplicitReceiver;\n  }(AST));\n  /**\n   * Multiple expressions separated by a semicolon.\n   */\n  var Chain = (function (_super) {\n      __extends$2(Chain, _super);\n      function Chain(span, expressions) {\n          var _this = _super.call(this, span) || this;\n          _this.expressions = expressions;\n          return _this;\n      }\n      Chain.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitChain(this, context);\n      };\n      return Chain;\n  }(AST));\n  var Conditional = (function (_super) {\n      __extends$2(Conditional, _super);\n      function Conditional(span, condition, trueExp, falseExp) {\n          var _this = _super.call(this, span) || this;\n          _this.condition = condition;\n          _this.trueExp = trueExp;\n          _this.falseExp = falseExp;\n          return _this;\n      }\n      Conditional.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitConditional(this, context);\n      };\n      return Conditional;\n  }(AST));\n  var PropertyRead = (function (_super) {\n      __extends$2(PropertyRead, _super);\n      function PropertyRead(span, receiver, name) {\n          var _this = _super.call(this, span) || this;\n          _this.receiver = receiver;\n          _this.name = name;\n          return _this;\n      }\n      PropertyRead.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPropertyRead(this, context);\n      };\n      return PropertyRead;\n  }(AST));\n  var PropertyWrite = (function (_super) {\n      __extends$2(PropertyWrite, _super);\n      function PropertyWrite(span, receiver, name, value) {\n          var _this = _super.call(this, span) || this;\n          _this.receiver = receiver;\n          _this.name = name;\n          _this.value = value;\n          return _this;\n      }\n      PropertyWrite.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPropertyWrite(this, context);\n      };\n      return PropertyWrite;\n  }(AST));\n  var SafePropertyRead = (function (_super) {\n      __extends$2(SafePropertyRead, _super);\n      function SafePropertyRead(span, receiver, name) {\n          var _this = _super.call(this, span) || this;\n          _this.receiver = receiver;\n          _this.name = name;\n          return _this;\n      }\n      SafePropertyRead.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitSafePropertyRead(this, context);\n      };\n      return SafePropertyRead;\n  }(AST));\n  var KeyedRead = (function (_super) {\n      __extends$2(KeyedRead, _super);\n      function KeyedRead(span, obj, key) {\n          var _this = _super.call(this, span) || this;\n          _this.obj = obj;\n          _this.key = key;\n          return _this;\n      }\n      KeyedRead.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitKeyedRead(this, context);\n      };\n      return KeyedRead;\n  }(AST));\n  var KeyedWrite = (function (_super) {\n      __extends$2(KeyedWrite, _super);\n      function KeyedWrite(span, obj, key, value) {\n          var _this = _super.call(this, span) || this;\n          _this.obj = obj;\n          _this.key = key;\n          _this.value = value;\n          return _this;\n      }\n      KeyedWrite.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitKeyedWrite(this, context);\n      };\n      return KeyedWrite;\n  }(AST));\n  var BindingPipe = (function (_super) {\n      __extends$2(BindingPipe, _super);\n      function BindingPipe(span, exp, name, args) {\n          var _this = _super.call(this, span) || this;\n          _this.exp = exp;\n          _this.name = name;\n          _this.args = args;\n          return _this;\n      }\n      BindingPipe.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPipe(this, context);\n      };\n      return BindingPipe;\n  }(AST));\n  var LiteralPrimitive = (function (_super) {\n      __extends$2(LiteralPrimitive, _super);\n      function LiteralPrimitive(span, value) {\n          var _this = _super.call(this, span) || this;\n          _this.value = value;\n          return _this;\n      }\n      LiteralPrimitive.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitLiteralPrimitive(this, context);\n      };\n      return LiteralPrimitive;\n  }(AST));\n  var LiteralArray = (function (_super) {\n      __extends$2(LiteralArray, _super);\n      function LiteralArray(span, expressions) {\n          var _this = _super.call(this, span) || this;\n          _this.expressions = expressions;\n          return _this;\n      }\n      LiteralArray.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitLiteralArray(this, context);\n      };\n      return LiteralArray;\n  }(AST));\n  var LiteralMap = (function (_super) {\n      __extends$2(LiteralMap, _super);\n      function LiteralMap(span, keys, values) {\n          var _this = _super.call(this, span) || this;\n          _this.keys = keys;\n          _this.values = values;\n          return _this;\n      }\n      LiteralMap.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitLiteralMap(this, context);\n      };\n      return LiteralMap;\n  }(AST));\n  var Interpolation = (function (_super) {\n      __extends$2(Interpolation, _super);\n      function Interpolation(span, strings, expressions) {\n          var _this = _super.call(this, span) || this;\n          _this.strings = strings;\n          _this.expressions = expressions;\n          return _this;\n      }\n      Interpolation.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitInterpolation(this, context);\n      };\n      return Interpolation;\n  }(AST));\n  var Binary = (function (_super) {\n      __extends$2(Binary, _super);\n      function Binary(span, operation, left, right) {\n          var _this = _super.call(this, span) || this;\n          _this.operation = operation;\n          _this.left = left;\n          _this.right = right;\n          return _this;\n      }\n      Binary.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitBinary(this, context);\n      };\n      return Binary;\n  }(AST));\n  var PrefixNot = (function (_super) {\n      __extends$2(PrefixNot, _super);\n      function PrefixNot(span, expression) {\n          var _this = _super.call(this, span) || this;\n          _this.expression = expression;\n          return _this;\n      }\n      PrefixNot.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPrefixNot(this, context);\n      };\n      return PrefixNot;\n  }(AST));\n  var MethodCall = (function (_super) {\n      __extends$2(MethodCall, _super);\n      function MethodCall(span, receiver, name, args) {\n          var _this = _super.call(this, span) || this;\n          _this.receiver = receiver;\n          _this.name = name;\n          _this.args = args;\n          return _this;\n      }\n      MethodCall.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitMethodCall(this, context);\n      };\n      return MethodCall;\n  }(AST));\n  var SafeMethodCall = (function (_super) {\n      __extends$2(SafeMethodCall, _super);\n      function SafeMethodCall(span, receiver, name, args) {\n          var _this = _super.call(this, span) || this;\n          _this.receiver = receiver;\n          _this.name = name;\n          _this.args = args;\n          return _this;\n      }\n      SafeMethodCall.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitSafeMethodCall(this, context);\n      };\n      return SafeMethodCall;\n  }(AST));\n  var FunctionCall = (function (_super) {\n      __extends$2(FunctionCall, _super);\n      function FunctionCall(span, target, args) {\n          var _this = _super.call(this, span) || this;\n          _this.target = target;\n          _this.args = args;\n          return _this;\n      }\n      FunctionCall.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitFunctionCall(this, context);\n      };\n      return FunctionCall;\n  }(AST));\n  var ASTWithSource = (function (_super) {\n      __extends$2(ASTWithSource, _super);\n      function ASTWithSource(ast, source, location, errors) {\n          var _this = _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length)) || this;\n          _this.ast = ast;\n          _this.source = source;\n          _this.location = location;\n          _this.errors = errors;\n          return _this;\n      }\n      ASTWithSource.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return this.ast.visit(visitor, context);\n      };\n      ASTWithSource.prototype.toString = function () { return this.source + \" in \" + this.location; };\n      return ASTWithSource;\n  }(AST));\n  var TemplateBinding = (function () {\n      function TemplateBinding(span, key, keyIsVar, name, expression) {\n          this.span = span;\n          this.key = key;\n          this.keyIsVar = keyIsVar;\n          this.name = name;\n          this.expression = expression;\n      }\n      return TemplateBinding;\n  }());\n  var RecursiveAstVisitor = (function () {\n      function RecursiveAstVisitor() {\n      }\n      RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {\n          ast.left.visit(this);\n          ast.right.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };\n      RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {\n          ast.condition.visit(this);\n          ast.trueExp.visit(this);\n          ast.falseExp.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {\n          ast.exp.visit(this);\n          this.visitAll(ast.args, context);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {\n          ast.target.visit(this);\n          this.visitAll(ast.args, context);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };\n      RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {\n          return this.visitAll(ast.expressions, context);\n      };\n      RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {\n          ast.obj.visit(this);\n          ast.key.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {\n          ast.obj.visit(this);\n          ast.key.visit(this);\n          ast.value.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {\n          return this.visitAll(ast.expressions, context);\n      };\n      RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };\n      RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };\n      RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {\n          ast.receiver.visit(this);\n          return this.visitAll(ast.args, context);\n      };\n      RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {\n          ast.expression.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {\n          ast.receiver.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {\n          ast.receiver.visit(this);\n          ast.value.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {\n          ast.receiver.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {\n          ast.receiver.visit(this);\n          return this.visitAll(ast.args, context);\n      };\n      RecursiveAstVisitor.prototype.visitAll = function (asts, context) {\n          var _this = this;\n          asts.forEach(function (ast) { return ast.visit(_this, context); });\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };\n      return RecursiveAstVisitor;\n  }());\n  var AstTransformer = (function () {\n      function AstTransformer() {\n      }\n      AstTransformer.prototype.visitImplicitReceiver = function (ast, context) { return ast; };\n      AstTransformer.prototype.visitInterpolation = function (ast, context) {\n          return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n      };\n      AstTransformer.prototype.visitLiteralPrimitive = function (ast, context) {\n          return new LiteralPrimitive(ast.span, ast.value);\n      };\n      AstTransformer.prototype.visitPropertyRead = function (ast, context) {\n          return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n      };\n      AstTransformer.prototype.visitPropertyWrite = function (ast, context) {\n          return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);\n      };\n      AstTransformer.prototype.visitSafePropertyRead = function (ast, context) {\n          return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n      };\n      AstTransformer.prototype.visitMethodCall = function (ast, context) {\n          return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n      };\n      AstTransformer.prototype.visitSafeMethodCall = function (ast, context) {\n          return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n      };\n      AstTransformer.prototype.visitFunctionCall = function (ast, context) {\n          return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));\n      };\n      AstTransformer.prototype.visitLiteralArray = function (ast, context) {\n          return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n      };\n      AstTransformer.prototype.visitLiteralMap = function (ast, context) {\n          return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n      };\n      AstTransformer.prototype.visitBinary = function (ast, context) {\n          return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n      };\n      AstTransformer.prototype.visitPrefixNot = function (ast, context) {\n          return new PrefixNot(ast.span, ast.expression.visit(this));\n      };\n      AstTransformer.prototype.visitConditional = function (ast, context) {\n          return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n      };\n      AstTransformer.prototype.visitPipe = function (ast, context) {\n          return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n      };\n      AstTransformer.prototype.visitKeyedRead = function (ast, context) {\n          return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n      };\n      AstTransformer.prototype.visitKeyedWrite = function (ast, context) {\n          return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n      };\n      AstTransformer.prototype.visitAll = function (asts) {\n          var res = new Array(asts.length);\n          for (var i = 0; i < asts.length; ++i) {\n              res[i] = asts[i].visit(this);\n          }\n          return res;\n      };\n      AstTransformer.prototype.visitChain = function (ast, context) {\n          return new Chain(ast.span, this.visitAll(ast.expressions));\n      };\n      AstTransformer.prototype.visitQuote = function (ast, context) {\n          return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n      };\n      return AstTransformer;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */ var $EOF = 0;\n  var $TAB = 9;\n  var $LF = 10;\n  var $VTAB = 11;\n  var $FF = 12;\n  var $CR = 13;\n  var $SPACE = 32;\n  var $BANG = 33;\n  var $DQ = 34;\n  var $HASH = 35;\n  var $$ = 36;\n  var $PERCENT = 37;\n  var $AMPERSAND = 38;\n  var $SQ = 39;\n  var $LPAREN = 40;\n  var $RPAREN = 41;\n  var $STAR = 42;\n  var $PLUS = 43;\n  var $COMMA = 44;\n  var $MINUS = 45;\n  var $PERIOD = 46;\n  var $SLASH = 47;\n  var $COLON = 58;\n  var $SEMICOLON = 59;\n  var $LT = 60;\n  var $EQ = 61;\n  var $GT = 62;\n  var $QUESTION = 63;\n  var $0 = 48;\n  var $9 = 57;\n  var $A = 65;\n  var $E = 69;\n  var $F = 70;\n  var $X = 88;\n  var $Z = 90;\n  var $LBRACKET = 91;\n  var $BACKSLASH = 92;\n  var $RBRACKET = 93;\n  var $CARET = 94;\n  var $_ = 95;\n  var $a = 97;\n  var $e = 101;\n  var $f = 102;\n  var $n = 110;\n  var $r = 114;\n  var $t = 116;\n  var $u = 117;\n  var $v = 118;\n  var $x = 120;\n  var $z = 122;\n  var $LBRACE = 123;\n  var $BAR = 124;\n  var $RBRACE = 125;\n  var $NBSP = 160;\n  var $BT = 96;\n  function isWhitespace(code) {\n      return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n  }\n  function isDigit(code) {\n      return $0 <= code && code <= $9;\n  }\n  function isAsciiLetter(code) {\n      return code >= $a && code <= $z || code >= $A && code <= $Z;\n  }\n  function isAsciiHexDigit(code) {\n      return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * A replacement for @Injectable to be used in the compiler, so that\n   * we don't try to evaluate the metadata in the compiler during AoT.\n   * This decorator is enough to make the compiler work with the ReflectiveInjector though.\n   * @Annotation\n   */\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */ function CompilerInjectable() {\n      return function (x) { return x; };\n  }\n\n  function assertArrayOfStrings(identifier, value) {\n      if (!_angular_core.isDevMode() || isBlank(value)) {\n          return;\n      }\n      if (!Array.isArray(value)) {\n          throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n      }\n      for (var i = 0; i < value.length; i += 1) {\n          if (typeof value[i] !== 'string') {\n              throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n          }\n      }\n  }\n  var INTERPOLATION_BLACKLIST_REGEXPS = [\n      /^\\s*$/,\n      /[<>]/,\n      /^[{}]$/,\n      /&(#|[a-z])/i,\n      /^\\/\\//,\n  ];\n  function assertInterpolationSymbols(identifier, value) {\n      if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {\n          throw new Error(\"Expected '\" + identifier + \"' to be an array, [start, end].\");\n      }\n      else if (_angular_core.isDevMode() && !isBlank(value)) {\n          var start_1 = value[0];\n          var end_1 = value[1];\n          // black list checking\n          INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {\n              if (regexp.test(start_1) || regexp.test(end_1)) {\n                  throw new Error(\"['\" + start_1 + \"', '\" + end_1 + \"'] contains unusable interpolation symbol.\");\n              }\n          });\n      }\n  }\n\n  var InterpolationConfig = (function () {\n      function InterpolationConfig(start, end) {\n          this.start = start;\n          this.end = end;\n      }\n      InterpolationConfig.fromArray = function (markers) {\n          if (!markers) {\n              return DEFAULT_INTERPOLATION_CONFIG;\n          }\n          assertInterpolationSymbols('interpolation', markers);\n          return new InterpolationConfig(markers[0], markers[1]);\n      };\n      ;\n      return InterpolationConfig;\n  }());\n  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\n\n  exports.TokenType;\n  (function (TokenType) {\n      TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n      TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n      TokenType[TokenType[\"Keyword\"] = 2] = \"Keyword\";\n      TokenType[TokenType[\"String\"] = 3] = \"String\";\n      TokenType[TokenType[\"Operator\"] = 4] = \"Operator\";\n      TokenType[TokenType[\"Number\"] = 5] = \"Number\";\n      TokenType[TokenType[\"Error\"] = 6] = \"Error\";\n  })(exports.TokenType || (exports.TokenType = {}));\n  var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\n  var Lexer = (function () {\n      function Lexer() {\n      }\n      Lexer.prototype.tokenize = function (text) {\n          var scanner = new _Scanner(text);\n          var tokens = [];\n          var token = scanner.scanToken();\n          while (token != null) {\n              tokens.push(token);\n              token = scanner.scanToken();\n          }\n          return tokens;\n      };\n      return Lexer;\n  }());\n  Lexer.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  Lexer.ctorParameters = function () { return []; };\n  var Token = (function () {\n      function Token(index, type, numValue, strValue) {\n          this.index = index;\n          this.type = type;\n          this.numValue = numValue;\n          this.strValue = strValue;\n      }\n      Token.prototype.isCharacter = function (code) {\n          return this.type == exports.TokenType.Character && this.numValue == code;\n      };\n      Token.prototype.isNumber = function () { return this.type == exports.TokenType.Number; };\n      Token.prototype.isString = function () { return this.type == exports.TokenType.String; };\n      Token.prototype.isOperator = function (operater) {\n          return this.type == exports.TokenType.Operator && this.strValue == operater;\n      };\n      Token.prototype.isIdentifier = function () { return this.type == exports.TokenType.Identifier; };\n      Token.prototype.isKeyword = function () { return this.type == exports.TokenType.Keyword; };\n      Token.prototype.isKeywordLet = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'let'; };\n      Token.prototype.isKeywordNull = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'null'; };\n      Token.prototype.isKeywordUndefined = function () {\n          return this.type == exports.TokenType.Keyword && this.strValue == 'undefined';\n      };\n      Token.prototype.isKeywordTrue = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'true'; };\n      Token.prototype.isKeywordFalse = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'false'; };\n      Token.prototype.isKeywordThis = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'this'; };\n      Token.prototype.isError = function () { return this.type == exports.TokenType.Error; };\n      Token.prototype.toNumber = function () { return this.type == exports.TokenType.Number ? this.numValue : -1; };\n      Token.prototype.toString = function () {\n          switch (this.type) {\n              case exports.TokenType.Character:\n              case exports.TokenType.Identifier:\n              case exports.TokenType.Keyword:\n              case exports.TokenType.Operator:\n              case exports.TokenType.String:\n              case exports.TokenType.Error:\n                  return this.strValue;\n              case exports.TokenType.Number:\n                  return this.numValue.toString();\n              default:\n                  return null;\n          }\n      };\n      return Token;\n  }());\n  function newCharacterToken(index, code) {\n      return new Token(index, exports.TokenType.Character, code, String.fromCharCode(code));\n  }\n  function newIdentifierToken(index, text) {\n      return new Token(index, exports.TokenType.Identifier, 0, text);\n  }\n  function newKeywordToken(index, text) {\n      return new Token(index, exports.TokenType.Keyword, 0, text);\n  }\n  function newOperatorToken(index, text) {\n      return new Token(index, exports.TokenType.Operator, 0, text);\n  }\n  function newStringToken(index, text) {\n      return new Token(index, exports.TokenType.String, 0, text);\n  }\n  function newNumberToken(index, n) {\n      return new Token(index, exports.TokenType.Number, n, '');\n  }\n  function newErrorToken(index, message) {\n      return new Token(index, exports.TokenType.Error, 0, message);\n  }\n  var EOF = new Token(-1, exports.TokenType.Character, 0, '');\n  var _Scanner = (function () {\n      function _Scanner(input) {\n          this.input = input;\n          this.peek = 0;\n          this.index = -1;\n          this.length = input.length;\n          this.advance();\n      }\n      _Scanner.prototype.advance = function () {\n          this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n      };\n      _Scanner.prototype.scanToken = function () {\n          var input = this.input, length = this.length;\n          var peek = this.peek, index = this.index;\n          // Skip whitespace.\n          while (peek <= $SPACE) {\n              if (++index >= length) {\n                  peek = $EOF;\n                  break;\n              }\n              else {\n                  peek = input.charCodeAt(index);\n              }\n          }\n          this.peek = peek;\n          this.index = index;\n          if (index >= length) {\n              return null;\n          }\n          // Handle identifiers and numbers.\n          if (isIdentifierStart(peek))\n              return this.scanIdentifier();\n          if (isDigit(peek))\n              return this.scanNumber(index);\n          var start = index;\n          switch (peek) {\n              case $PERIOD:\n                  this.advance();\n                  return isDigit(this.peek) ? this.scanNumber(start) :\n                      newCharacterToken(start, $PERIOD);\n              case $LPAREN:\n              case $RPAREN:\n              case $LBRACE:\n              case $RBRACE:\n              case $LBRACKET:\n              case $RBRACKET:\n              case $COMMA:\n              case $COLON:\n              case $SEMICOLON:\n                  return this.scanCharacter(start, peek);\n              case $SQ:\n              case $DQ:\n                  return this.scanString();\n              case $HASH:\n              case $PLUS:\n              case $MINUS:\n              case $STAR:\n              case $SLASH:\n              case $PERCENT:\n              case $CARET:\n                  return this.scanOperator(start, String.fromCharCode(peek));\n              case $QUESTION:\n                  return this.scanComplexOperator(start, '?', $PERIOD, '.');\n              case $LT:\n              case $GT:\n                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\n              case $BANG:\n              case $EQ:\n                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\n              case $AMPERSAND:\n                  return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n              case $BAR:\n                  return this.scanComplexOperator(start, '|', $BAR, '|');\n              case $NBSP:\n                  while (isWhitespace(this.peek))\n                      this.advance();\n                  return this.scanToken();\n          }\n          this.advance();\n          return this.error(\"Unexpected character [\" + String.fromCharCode(peek) + \"]\", 0);\n      };\n      _Scanner.prototype.scanCharacter = function (start, code) {\n          this.advance();\n          return newCharacterToken(start, code);\n      };\n      _Scanner.prototype.scanOperator = function (start, str) {\n          this.advance();\n          return newOperatorToken(start, str);\n      };\n      /**\n       * Tokenize a 2/3 char long operator\n       *\n       * @param start start index in the expression\n       * @param one first symbol (always part of the operator)\n       * @param twoCode code point for the second symbol\n       * @param two second symbol (part of the operator when the second code point matches)\n       * @param threeCode code point for the third symbol\n       * @param three third symbol (part of the operator when provided and matches source expression)\n       * @returns {Token}\n       */\n      _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {\n          this.advance();\n          var str = one;\n          if (this.peek == twoCode) {\n              this.advance();\n              str += two;\n          }\n          if (threeCode != null && this.peek == threeCode) {\n              this.advance();\n              str += three;\n          }\n          return newOperatorToken(start, str);\n      };\n      _Scanner.prototype.scanIdentifier = function () {\n          var start = this.index;\n          this.advance();\n          while (isIdentifierPart(this.peek))\n              this.advance();\n          var str = this.input.substring(start, this.index);\n          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\n              newIdentifierToken(start, str);\n      };\n      _Scanner.prototype.scanNumber = function (start) {\n          var simple = (this.index === start);\n          this.advance(); // Skip initial digit.\n          while (true) {\n              if (isDigit(this.peek)) {\n              }\n              else if (this.peek == $PERIOD) {\n                  simple = false;\n              }\n              else if (isExponentStart(this.peek)) {\n                  this.advance();\n                  if (isExponentSign(this.peek))\n                      this.advance();\n                  if (!isDigit(this.peek))\n                      return this.error('Invalid exponent', -1);\n                  simple = false;\n              }\n              else {\n                  break;\n              }\n              this.advance();\n          }\n          var str = this.input.substring(start, this.index);\n          var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);\n          return newNumberToken(start, value);\n      };\n      _Scanner.prototype.scanString = function () {\n          var start = this.index;\n          var quote = this.peek;\n          this.advance(); // Skip initial quote.\n          var buffer = '';\n          var marker = this.index;\n          var input = this.input;\n          while (this.peek != quote) {\n              if (this.peek == $BACKSLASH) {\n                  buffer += input.substring(marker, this.index);\n                  this.advance();\n                  var unescapedCode = void 0;\n                  // Workaround for TS2.1-introduced type strictness\n                  this.peek = this.peek;\n                  if (this.peek == $u) {\n                      // 4 character hex code for unicode character.\n                      var hex = input.substring(this.index + 1, this.index + 5);\n                      if (/^[0-9a-f]+$/i.test(hex)) {\n                          unescapedCode = parseInt(hex, 16);\n                      }\n                      else {\n                          return this.error(\"Invalid unicode escape [\\\\u\" + hex + \"]\", 0);\n                      }\n                      for (var i = 0; i < 5; i++) {\n                          this.advance();\n                      }\n                  }\n                  else {\n                      unescapedCode = unescape(this.peek);\n                      this.advance();\n                  }\n                  buffer += String.fromCharCode(unescapedCode);\n                  marker = this.index;\n              }\n              else if (this.peek == $EOF) {\n                  return this.error('Unterminated quote', 0);\n              }\n              else {\n                  this.advance();\n              }\n          }\n          var last = input.substring(marker, this.index);\n          this.advance(); // Skip terminating quote.\n          return newStringToken(start, buffer + last);\n      };\n      _Scanner.prototype.error = function (message, offset) {\n          var position = this.index + offset;\n          return newErrorToken(position, \"Lexer Error: \" + message + \" at column \" + position + \" in expression [\" + this.input + \"]\");\n      };\n      return _Scanner;\n  }());\n  function isIdentifierStart(code) {\n      return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\n          (code == $_) || (code == $$);\n  }\n  function isIdentifier(input) {\n      if (input.length == 0)\n          return false;\n      var scanner = new _Scanner(input);\n      if (!isIdentifierStart(scanner.peek))\n          return false;\n      scanner.advance();\n      while (scanner.peek !== $EOF) {\n          if (!isIdentifierPart(scanner.peek))\n              return false;\n          scanner.advance();\n      }\n      return true;\n  }\n  function isIdentifierPart(code) {\n      return isAsciiLetter(code) || isDigit(code) || (code == $_) ||\n          (code == $$);\n  }\n  function isExponentStart(code) {\n      return code == $e || code == $E;\n  }\n  function isExponentSign(code) {\n      return code == $MINUS || code == $PLUS;\n  }\n  function isQuote(code) {\n      return code === $SQ || code === $DQ || code === $BT;\n  }\n  function unescape(code) {\n      switch (code) {\n          case $n:\n              return $LF;\n          case $f:\n              return $FF;\n          case $r:\n              return $CR;\n          case $t:\n              return $TAB;\n          case $v:\n              return $VTAB;\n          default:\n              return code;\n      }\n  }\n\n  var SplitInterpolation = (function () {\n      function SplitInterpolation(strings, expressions, offsets) {\n          this.strings = strings;\n          this.expressions = expressions;\n          this.offsets = offsets;\n      }\n      return SplitInterpolation;\n  }());\n  var TemplateBindingParseResult = (function () {\n      function TemplateBindingParseResult(templateBindings, warnings, errors) {\n          this.templateBindings = templateBindings;\n          this.warnings = warnings;\n          this.errors = errors;\n      }\n      return TemplateBindingParseResult;\n  }());\n  function _createInterpolateRegExp(config) {\n      var pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\n      return new RegExp(pattern, 'g');\n  }\n  var Parser = (function () {\n      function Parser(_lexer) {\n          this._lexer = _lexer;\n          this.errors = [];\n      }\n      Parser.prototype.parseAction = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          this._checkNoInterpolation(input, location, interpolationConfig);\n          var sourceToLex = this._stripComments(input);\n          var tokens = this._lexer.tokenize(this._stripComments(input));\n          var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)\n              .parseChain();\n          return new ASTWithSource(ast, input, location, this.errors);\n      };\n      Parser.prototype.parseBinding = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var ast = this._parseBindingAst(input, location, interpolationConfig);\n          return new ASTWithSource(ast, input, location, this.errors);\n      };\n      Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var ast = this._parseBindingAst(input, location, interpolationConfig);\n          var errors = SimpleExpressionChecker.check(ast);\n          if (errors.length > 0) {\n              this._reportError(\"Host binding expression cannot contain \" + errors.join(' '), input, location);\n          }\n          return new ASTWithSource(ast, input, location, this.errors);\n      };\n      Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {\n          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n      };\n      Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {\n          // Quotes expressions use 3rd-party expression language. We don't want to use\n          // our lexer or parser for that, so we check for that ahead of time.\n          var quote = this._parseQuote(input, location);\n          if (isPresent(quote)) {\n              return quote;\n          }\n          this._checkNoInterpolation(input, location, interpolationConfig);\n          var sourceToLex = this._stripComments(input);\n          var tokens = this._lexer.tokenize(sourceToLex);\n          return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)\n              .parseChain();\n      };\n      Parser.prototype._parseQuote = function (input, location) {\n          if (isBlank(input))\n              return null;\n          var prefixSeparatorIndex = input.indexOf(':');\n          if (prefixSeparatorIndex == -1)\n              return null;\n          var prefix = input.substring(0, prefixSeparatorIndex).trim();\n          if (!isIdentifier(prefix))\n              return null;\n          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\n      };\n      Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {\n          var tokens = this._lexer.tokenize(input);\n          if (prefixToken) {\n              // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).\n              var prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {\n                  t.index = 0;\n                  return t;\n              });\n              tokens.unshift.apply(tokens, prefixTokens);\n          }\n          return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)\n              .parseTemplateBindings();\n      };\n      Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var split = this.splitInterpolation(input, location, interpolationConfig);\n          if (split == null)\n              return null;\n          var expressions = [];\n          for (var i = 0; i < split.expressions.length; ++i) {\n              var expressionText = split.expressions[i];\n              var sourceToLex = this._stripComments(expressionText);\n              var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));\n              var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))\n                  .parseChain();\n              expressions.push(ast);\n          }\n          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);\n      };\n      Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var regexp = _createInterpolateRegExp(interpolationConfig);\n          var parts = input.split(regexp);\n          if (parts.length <= 1) {\n              return null;\n          }\n          var strings = [];\n          var expressions = [];\n          var offsets = [];\n          var offset = 0;\n          for (var i = 0; i < parts.length; i++) {\n              var part = parts[i];\n              if (i % 2 === 0) {\n                  // fixed string\n                  strings.push(part);\n                  offset += part.length;\n              }\n              else if (part.trim().length > 0) {\n                  offset += interpolationConfig.start.length;\n                  expressions.push(part);\n                  offsets.push(offset);\n                  offset += part.length + interpolationConfig.end.length;\n              }\n              else {\n                  this._reportError('Blank expressions are not allowed in interpolated strings', input, \"at column \" + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + \" in\", location);\n                  expressions.push('$implict');\n                  offsets.push(offset);\n              }\n          }\n          return new SplitInterpolation(strings, expressions, offsets);\n      };\n      Parser.prototype.wrapLiteralPrimitive = function (input, location) {\n          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);\n      };\n      Parser.prototype._stripComments = function (input) {\n          var i = this._commentStart(input);\n          return isPresent(i) ? input.substring(0, i).trim() : input;\n      };\n      Parser.prototype._commentStart = function (input) {\n          var outerQuote = null;\n          for (var i = 0; i < input.length - 1; i++) {\n              var char = input.charCodeAt(i);\n              var nextChar = input.charCodeAt(i + 1);\n              if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))\n                  return i;\n              if (outerQuote === char) {\n                  outerQuote = null;\n              }\n              else if (isBlank(outerQuote) && isQuote(char)) {\n                  outerQuote = char;\n              }\n          }\n          return null;\n      };\n      Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {\n          var regexp = _createInterpolateRegExp(interpolationConfig);\n          var parts = input.split(regexp);\n          if (parts.length > 1) {\n              this._reportError(\"Got interpolation (\" + interpolationConfig.start + interpolationConfig.end + \") where expression was expected\", input, \"at column \" + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + \" in\", location);\n          }\n      };\n      Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {\n          var errLocation = '';\n          for (var j = 0; j < partInErrIdx; j++) {\n              errLocation += j % 2 === 0 ?\n                  parts[j] :\n                  \"\" + interpolationConfig.start + parts[j] + interpolationConfig.end;\n          }\n          return errLocation.length;\n      };\n      return Parser;\n  }());\n  Parser.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  Parser.ctorParameters = function () { return [\n      { type: Lexer, },\n  ]; };\n  var _ParseAST = (function () {\n      function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {\n          this.input = input;\n          this.location = location;\n          this.tokens = tokens;\n          this.inputLength = inputLength;\n          this.parseAction = parseAction;\n          this.errors = errors;\n          this.offset = offset;\n          this.rparensExpected = 0;\n          this.rbracketsExpected = 0;\n          this.rbracesExpected = 0;\n          this.index = 0;\n      }\n      _ParseAST.prototype.peek = function (offset) {\n          var i = this.index + offset;\n          return i < this.tokens.length ? this.tokens[i] : EOF;\n      };\n      Object.defineProperty(_ParseAST.prototype, \"next\", {\n          get: function () { return this.peek(0); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(_ParseAST.prototype, \"inputIndex\", {\n          get: function () {\n              return (this.index < this.tokens.length) ? this.next.index + this.offset :\n                  this.inputLength + this.offset;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };\n      _ParseAST.prototype.advance = function () { this.index++; };\n      _ParseAST.prototype.optionalCharacter = function (code) {\n          if (this.next.isCharacter(code)) {\n              this.advance();\n              return true;\n          }\n          else {\n              return false;\n          }\n      };\n      _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };\n      _ParseAST.prototype.expectCharacter = function (code) {\n          if (this.optionalCharacter(code))\n              return;\n          this.error(\"Missing expected \" + String.fromCharCode(code));\n      };\n      _ParseAST.prototype.optionalOperator = function (op) {\n          if (this.next.isOperator(op)) {\n              this.advance();\n              return true;\n          }\n          else {\n              return false;\n          }\n      };\n      _ParseAST.prototype.expectOperator = function (operator) {\n          if (this.optionalOperator(operator))\n              return;\n          this.error(\"Missing expected operator \" + operator);\n      };\n      _ParseAST.prototype.expectIdentifierOrKeyword = function () {\n          var n = this.next;\n          if (!n.isIdentifier() && !n.isKeyword()) {\n              this.error(\"Unexpected token \" + n + \", expected identifier or keyword\");\n              return '';\n          }\n          this.advance();\n          return n.toString();\n      };\n      _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {\n          var n = this.next;\n          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n              this.error(\"Unexpected token \" + n + \", expected identifier, keyword, or string\");\n              return '';\n          }\n          this.advance();\n          return n.toString();\n      };\n      _ParseAST.prototype.parseChain = function () {\n          var exprs = [];\n          var start = this.inputIndex;\n          while (this.index < this.tokens.length) {\n              var expr = this.parsePipe();\n              exprs.push(expr);\n              if (this.optionalCharacter($SEMICOLON)) {\n                  if (!this.parseAction) {\n                      this.error('Binding expression cannot contain chained expression');\n                  }\n                  while (this.optionalCharacter($SEMICOLON)) {\n                  } // read all semicolons\n              }\n              else if (this.index < this.tokens.length) {\n                  this.error(\"Unexpected token '\" + this.next + \"'\");\n              }\n          }\n          if (exprs.length == 0)\n              return new EmptyExpr(this.span(start));\n          if (exprs.length == 1)\n              return exprs[0];\n          return new Chain(this.span(start), exprs);\n      };\n      _ParseAST.prototype.parsePipe = function () {\n          var result = this.parseExpression();\n          if (this.optionalOperator('|')) {\n              if (this.parseAction) {\n                  this.error('Cannot have a pipe in an action expression');\n              }\n              do {\n                  var name_1 = this.expectIdentifierOrKeyword();\n                  var args = [];\n                  while (this.optionalCharacter($COLON)) {\n                      args.push(this.parseExpression());\n                  }\n                  result = new BindingPipe(this.span(result.span.start), result, name_1, args);\n              } while (this.optionalOperator('|'));\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };\n      _ParseAST.prototype.parseConditional = function () {\n          var start = this.inputIndex;\n          var result = this.parseLogicalOr();\n          if (this.optionalOperator('?')) {\n              var yes = this.parsePipe();\n              var no = void 0;\n              if (!this.optionalCharacter($COLON)) {\n                  var end = this.inputIndex;\n                  var expression = this.input.substring(start, end);\n                  this.error(\"Conditional expression \" + expression + \" requires all 3 expressions\");\n                  no = new EmptyExpr(this.span(start));\n              }\n              else {\n                  no = this.parsePipe();\n              }\n              return new Conditional(this.span(start), result, yes, no);\n          }\n          else {\n              return result;\n          }\n      };\n      _ParseAST.prototype.parseLogicalOr = function () {\n          // '||'\n          var result = this.parseLogicalAnd();\n          while (this.optionalOperator('||')) {\n              var right = this.parseLogicalAnd();\n              result = new Binary(this.span(result.span.start), '||', result, right);\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseLogicalAnd = function () {\n          // '&&'\n          var result = this.parseEquality();\n          while (this.optionalOperator('&&')) {\n              var right = this.parseEquality();\n              result = new Binary(this.span(result.span.start), '&&', result, right);\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseEquality = function () {\n          // '==','!=','===','!=='\n          var result = this.parseRelational();\n          while (this.next.type == exports.TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '==':\n                  case '===':\n                  case '!=':\n                  case '!==':\n                      this.advance();\n                      var right = this.parseRelational();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseRelational = function () {\n          // '<', '>', '<=', '>='\n          var result = this.parseAdditive();\n          while (this.next.type == exports.TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '<':\n                  case '>':\n                  case '<=':\n                  case '>=':\n                      this.advance();\n                      var right = this.parseAdditive();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseAdditive = function () {\n          // '+', '-'\n          var result = this.parseMultiplicative();\n          while (this.next.type == exports.TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '+':\n                  case '-':\n                      this.advance();\n                      var right = this.parseMultiplicative();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseMultiplicative = function () {\n          // '*', '%', '/'\n          var result = this.parsePrefix();\n          while (this.next.type == exports.TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '*':\n                  case '%':\n                  case '/':\n                      this.advance();\n                      var right = this.parsePrefix();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parsePrefix = function () {\n          if (this.next.type == exports.TokenType.Operator) {\n              var start = this.inputIndex;\n              var operator = this.next.strValue;\n              var result = void 0;\n              switch (operator) {\n                  case '+':\n                      this.advance();\n                      return this.parsePrefix();\n                  case '-':\n                      this.advance();\n                      result = this.parsePrefix();\n                      return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);\n                  case '!':\n                      this.advance();\n                      result = this.parsePrefix();\n                      return new PrefixNot(this.span(start), result);\n              }\n          }\n          return this.parseCallChain();\n      };\n      _ParseAST.prototype.parseCallChain = function () {\n          var result = this.parsePrimary();\n          while (true) {\n              if (this.optionalCharacter($PERIOD)) {\n                  result = this.parseAccessMemberOrMethodCall(result, false);\n              }\n              else if (this.optionalOperator('?.')) {\n                  result = this.parseAccessMemberOrMethodCall(result, true);\n              }\n              else if (this.optionalCharacter($LBRACKET)) {\n                  this.rbracketsExpected++;\n                  var key = this.parsePipe();\n                  this.rbracketsExpected--;\n                  this.expectCharacter($RBRACKET);\n                  if (this.optionalOperator('=')) {\n                      var value = this.parseConditional();\n                      result = new KeyedWrite(this.span(result.span.start), result, key, value);\n                  }\n                  else {\n                      result = new KeyedRead(this.span(result.span.start), result, key);\n                  }\n              }\n              else if (this.optionalCharacter($LPAREN)) {\n                  this.rparensExpected++;\n                  var args = this.parseCallArguments();\n                  this.rparensExpected--;\n                  this.expectCharacter($RPAREN);\n                  result = new FunctionCall(this.span(result.span.start), result, args);\n              }\n              else {\n                  return result;\n              }\n          }\n      };\n      _ParseAST.prototype.parsePrimary = function () {\n          var start = this.inputIndex;\n          if (this.optionalCharacter($LPAREN)) {\n              this.rparensExpected++;\n              var result = this.parsePipe();\n              this.rparensExpected--;\n              this.expectCharacter($RPAREN);\n              return result;\n          }\n          else if (this.next.isKeywordNull()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), null);\n          }\n          else if (this.next.isKeywordUndefined()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), void 0);\n          }\n          else if (this.next.isKeywordTrue()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), true);\n          }\n          else if (this.next.isKeywordFalse()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), false);\n          }\n          else if (this.next.isKeywordThis()) {\n              this.advance();\n              return new ImplicitReceiver(this.span(start));\n          }\n          else if (this.optionalCharacter($LBRACKET)) {\n              this.rbracketsExpected++;\n              var elements = this.parseExpressionList($RBRACKET);\n              this.rbracketsExpected--;\n              this.expectCharacter($RBRACKET);\n              return new LiteralArray(this.span(start), elements);\n          }\n          else if (this.next.isCharacter($LBRACE)) {\n              return this.parseLiteralMap();\n          }\n          else if (this.next.isIdentifier()) {\n              return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\n          }\n          else if (this.next.isNumber()) {\n              var value = this.next.toNumber();\n              this.advance();\n              return new LiteralPrimitive(this.span(start), value);\n          }\n          else if (this.next.isString()) {\n              var literalValue = this.next.toString();\n              this.advance();\n              return new LiteralPrimitive(this.span(start), literalValue);\n          }\n          else if (this.index >= this.tokens.length) {\n              this.error(\"Unexpected end of expression: \" + this.input);\n              return new EmptyExpr(this.span(start));\n          }\n          else {\n              this.error(\"Unexpected token \" + this.next);\n              return new EmptyExpr(this.span(start));\n          }\n      };\n      _ParseAST.prototype.parseExpressionList = function (terminator) {\n          var result = [];\n          if (!this.next.isCharacter(terminator)) {\n              do {\n                  result.push(this.parsePipe());\n              } while (this.optionalCharacter($COMMA));\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseLiteralMap = function () {\n          var keys = [];\n          var values = [];\n          var start = this.inputIndex;\n          this.expectCharacter($LBRACE);\n          if (!this.optionalCharacter($RBRACE)) {\n              this.rbracesExpected++;\n              do {\n                  var key = this.expectIdentifierOrKeywordOrString();\n                  keys.push(key);\n                  this.expectCharacter($COLON);\n                  values.push(this.parsePipe());\n              } while (this.optionalCharacter($COMMA));\n              this.rbracesExpected--;\n              this.expectCharacter($RBRACE);\n          }\n          return new LiteralMap(this.span(start), keys, values);\n      };\n      _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {\n          if (isSafe === void 0) { isSafe = false; }\n          var start = receiver.span.start;\n          var id = this.expectIdentifierOrKeyword();\n          if (this.optionalCharacter($LPAREN)) {\n              this.rparensExpected++;\n              var args = this.parseCallArguments();\n              this.expectCharacter($RPAREN);\n              this.rparensExpected--;\n              var span = this.span(start);\n              return isSafe ? new SafeMethodCall(span, receiver, id, args) :\n                  new MethodCall(span, receiver, id, args);\n          }\n          else {\n              if (isSafe) {\n                  if (this.optionalOperator('=')) {\n                      this.error('The \\'?.\\' operator cannot be used in the assignment');\n                      return new EmptyExpr(this.span(start));\n                  }\n                  else {\n                      return new SafePropertyRead(this.span(start), receiver, id);\n                  }\n              }\n              else {\n                  if (this.optionalOperator('=')) {\n                      if (!this.parseAction) {\n                          this.error('Bindings cannot contain assignments');\n                          return new EmptyExpr(this.span(start));\n                      }\n                      var value = this.parseConditional();\n                      return new PropertyWrite(this.span(start), receiver, id, value);\n                  }\n                  else {\n                      return new PropertyRead(this.span(start), receiver, id);\n                  }\n              }\n          }\n      };\n      _ParseAST.prototype.parseCallArguments = function () {\n          if (this.next.isCharacter($RPAREN))\n              return [];\n          var positionals = [];\n          do {\n              positionals.push(this.parsePipe());\n          } while (this.optionalCharacter($COMMA));\n          return positionals;\n      };\n      /**\n       * An identifier, a keyword, a string with an optional `-` inbetween.\n       */\n      _ParseAST.prototype.expectTemplateBindingKey = function () {\n          var result = '';\n          var operatorFound = false;\n          do {\n              result += this.expectIdentifierOrKeywordOrString();\n              operatorFound = this.optionalOperator('-');\n              if (operatorFound) {\n                  result += '-';\n              }\n          } while (operatorFound);\n          return result.toString();\n      };\n      _ParseAST.prototype.parseTemplateBindings = function () {\n          var bindings = [];\n          var prefix = null;\n          var warnings = [];\n          while (this.index < this.tokens.length) {\n              var start = this.inputIndex;\n              var keyIsVar = this.peekKeywordLet();\n              if (keyIsVar) {\n                  this.advance();\n              }\n              var key = this.expectTemplateBindingKey();\n              if (!keyIsVar) {\n                  if (prefix == null) {\n                      prefix = key;\n                  }\n                  else {\n                      key = prefix + key[0].toUpperCase() + key.substring(1);\n                  }\n              }\n              this.optionalCharacter($COLON);\n              var name_2 = null;\n              var expression = null;\n              if (keyIsVar) {\n                  if (this.optionalOperator('=')) {\n                      name_2 = this.expectTemplateBindingKey();\n                  }\n                  else {\n                      name_2 = '\\$implicit';\n                  }\n              }\n              else if (this.next !== EOF && !this.peekKeywordLet()) {\n                  var start_1 = this.inputIndex;\n                  var ast = this.parsePipe();\n                  var source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);\n                  expression = new ASTWithSource(ast, source, this.location, this.errors);\n              }\n              bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));\n              if (!this.optionalCharacter($SEMICOLON)) {\n                  this.optionalCharacter($COMMA);\n              }\n          }\n          return new TemplateBindingParseResult(bindings, warnings, this.errors);\n      };\n      _ParseAST.prototype.error = function (message, index) {\n          if (index === void 0) { index = null; }\n          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n          this.skip();\n      };\n      _ParseAST.prototype.locationText = function (index) {\n          if (index === void 0) { index = null; }\n          if (isBlank(index))\n              index = this.index;\n          return (index < this.tokens.length) ? \"at column \" + (this.tokens[index].index + 1) + \" in\" :\n              \"at the end of the expression\";\n      };\n      // Error recovery should skip tokens until it encounters a recovery point. skip() treats\n      // the end of input and a ';' as unconditionally a recovery point. It also treats ')',\n      // '}' and ']' as conditional recovery points if one of calling productions is expecting\n      // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing\n      // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because\n      // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols\n      // must be conditional as they must be skipped if none of the calling productions are not\n      // expecting the closing token else we will never make progress in the case of an\n      // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because\n      // parseChain() is always the root production and it expects a ';'.\n      // If a production expects one of these token it increments the corresponding nesting count,\n      // and then decrements it just prior to checking if the token is in the input.\n      _ParseAST.prototype.skip = function () {\n          var n = this.next;\n          while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&\n              (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&\n              (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&\n              (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {\n              if (this.next.isError()) {\n                  this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n              }\n              this.advance();\n              n = this.next;\n          }\n      };\n      return _ParseAST;\n  }());\n  var SimpleExpressionChecker = (function () {\n      function SimpleExpressionChecker() {\n          this.errors = [];\n      }\n      SimpleExpressionChecker.check = function (ast) {\n          var s = new SimpleExpressionChecker();\n          ast.visit(s);\n          return s.errors;\n      };\n      SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };\n      SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };\n      SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push('pipes'); };\n      SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitAll = function (asts) {\n          var _this = this;\n          return asts.map(function (node) { return node.visit(_this); });\n      };\n      SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };\n      return SimpleExpressionChecker;\n  }());\n\n  var ParseLocation = (function () {\n      function ParseLocation(file, offset, line, col) {\n          this.file = file;\n          this.offset = offset;\n          this.line = line;\n          this.col = col;\n      }\n      ParseLocation.prototype.toString = function () {\n          return isPresent(this.offset) ? this.file.url + \"@\" + this.line + \":\" + this.col : this.file.url;\n      };\n      ParseLocation.prototype.moveBy = function (delta) {\n          var source = this.file.content;\n          var len = source.length;\n          var offset = this.offset;\n          var line = this.line;\n          var col = this.col;\n          while (offset > 0 && delta < 0) {\n              offset--;\n              delta++;\n              var ch = source.charCodeAt(offset);\n              if (ch == $LF) {\n                  line--;\n                  var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\n                  col = priorLine > 0 ? offset - priorLine : offset;\n              }\n              else {\n                  col--;\n              }\n          }\n          while (offset < len && delta > 0) {\n              var ch = source.charCodeAt(offset);\n              offset++;\n              delta--;\n              if (ch == $LF) {\n                  line++;\n                  col = 0;\n              }\n              else {\n                  col++;\n              }\n          }\n          return new ParseLocation(this.file, offset, line, col);\n      };\n      // Return the source around the location\n      // Up to `maxChars` or `maxLines` on each side of the location\n      ParseLocation.prototype.getContext = function (maxChars, maxLines) {\n          var content = this.file.content;\n          var startOffset = this.offset;\n          if (isPresent(startOffset)) {\n              if (startOffset > content.length - 1) {\n                  startOffset = content.length - 1;\n              }\n              var endOffset = startOffset;\n              var ctxChars = 0;\n              var ctxLines = 0;\n              while (ctxChars < maxChars && startOffset > 0) {\n                  startOffset--;\n                  ctxChars++;\n                  if (content[startOffset] == '\\n') {\n                      if (++ctxLines == maxLines) {\n                          break;\n                      }\n                  }\n              }\n              ctxChars = 0;\n              ctxLines = 0;\n              while (ctxChars < maxChars && endOffset < content.length - 1) {\n                  endOffset++;\n                  ctxChars++;\n                  if (content[endOffset] == '\\n') {\n                      if (++ctxLines == maxLines) {\n                          break;\n                      }\n                  }\n              }\n              return {\n                  before: content.substring(startOffset, this.offset),\n                  after: content.substring(this.offset, endOffset + 1),\n              };\n          }\n          return null;\n      };\n      return ParseLocation;\n  }());\n  var ParseSourceFile = (function () {\n      function ParseSourceFile(content, url) {\n          this.content = content;\n          this.url = url;\n      }\n      return ParseSourceFile;\n  }());\n  var ParseSourceSpan = (function () {\n      function ParseSourceSpan(start, end, details) {\n          if (details === void 0) { details = null; }\n          this.start = start;\n          this.end = end;\n          this.details = details;\n      }\n      ParseSourceSpan.prototype.toString = function () {\n          return this.start.file.content.substring(this.start.offset, this.end.offset);\n      };\n      return ParseSourceSpan;\n  }());\n  exports.ParseErrorLevel;\n  (function (ParseErrorLevel) {\n      ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n      ParseErrorLevel[ParseErrorLevel[\"FATAL\"] = 1] = \"FATAL\";\n  })(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));\n  var ParseError = (function () {\n      function ParseError(span, msg, level) {\n          if (level === void 0) { level = exports.ParseErrorLevel.FATAL; }\n          this.span = span;\n          this.msg = msg;\n          this.level = level;\n      }\n      ParseError.prototype.toString = function () {\n          var ctx = this.span.start.getContext(100, 3);\n          var contextStr = ctx ? \" (\\\"\" + ctx.before + \"[ERROR ->]\" + ctx.after + \"\\\")\" : '';\n          var details = this.span.details ? \", \" + this.span.details : '';\n          return \"\" + this.msg + contextStr + \": \" + this.span.start + details;\n      };\n      return ParseError;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var Text = (function () {\n      function Text(value, sourceSpan) {\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };\n      return Text;\n  }());\n  var Expansion = (function () {\n      function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {\n          this.switchValue = switchValue;\n          this.type = type;\n          this.cases = cases;\n          this.sourceSpan = sourceSpan;\n          this.switchValueSourceSpan = switchValueSourceSpan;\n      }\n      Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };\n      return Expansion;\n  }());\n  var ExpansionCase = (function () {\n      function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n          this.value = value;\n          this.expression = expression;\n          this.sourceSpan = sourceSpan;\n          this.valueSourceSpan = valueSourceSpan;\n          this.expSourceSpan = expSourceSpan;\n      }\n      ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };\n      return ExpansionCase;\n  }());\n  var Attribute$1 = (function () {\n      function Attribute(name, value, sourceSpan, valueSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n          this.valueSpan = valueSpan;\n      }\n      Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };\n      return Attribute;\n  }());\n  var Element = (function () {\n      function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {\n          this.name = name;\n          this.attrs = attrs;\n          this.children = children;\n          this.sourceSpan = sourceSpan;\n          this.startSourceSpan = startSourceSpan;\n          this.endSourceSpan = endSourceSpan;\n      }\n      Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };\n      return Element;\n  }());\n  var Comment = (function () {\n      function Comment(value, sourceSpan) {\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };\n      return Comment;\n  }());\n  function visitAll(visitor, nodes, context) {\n      if (context === void 0) { context = null; }\n      var result = [];\n      var visit = visitor.visit ?\n          function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :\n          function (ast) { return ast.visit(visitor, context); };\n      nodes.forEach(function (ast) {\n          var astResult = visit(ast);\n          if (astResult) {\n              result.push(astResult);\n          }\n      });\n      return result;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$4 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var TokenType$1;\n  (function (TokenType) {\n      TokenType[TokenType[\"TAG_OPEN_START\"] = 0] = \"TAG_OPEN_START\";\n      TokenType[TokenType[\"TAG_OPEN_END\"] = 1] = \"TAG_OPEN_END\";\n      TokenType[TokenType[\"TAG_OPEN_END_VOID\"] = 2] = \"TAG_OPEN_END_VOID\";\n      TokenType[TokenType[\"TAG_CLOSE\"] = 3] = \"TAG_CLOSE\";\n      TokenType[TokenType[\"TEXT\"] = 4] = \"TEXT\";\n      TokenType[TokenType[\"ESCAPABLE_RAW_TEXT\"] = 5] = \"ESCAPABLE_RAW_TEXT\";\n      TokenType[TokenType[\"RAW_TEXT\"] = 6] = \"RAW_TEXT\";\n      TokenType[TokenType[\"COMMENT_START\"] = 7] = \"COMMENT_START\";\n      TokenType[TokenType[\"COMMENT_END\"] = 8] = \"COMMENT_END\";\n      TokenType[TokenType[\"CDATA_START\"] = 9] = \"CDATA_START\";\n      TokenType[TokenType[\"CDATA_END\"] = 10] = \"CDATA_END\";\n      TokenType[TokenType[\"ATTR_NAME\"] = 11] = \"ATTR_NAME\";\n      TokenType[TokenType[\"ATTR_VALUE\"] = 12] = \"ATTR_VALUE\";\n      TokenType[TokenType[\"DOC_TYPE\"] = 13] = \"DOC_TYPE\";\n      TokenType[TokenType[\"EXPANSION_FORM_START\"] = 14] = \"EXPANSION_FORM_START\";\n      TokenType[TokenType[\"EXPANSION_CASE_VALUE\"] = 15] = \"EXPANSION_CASE_VALUE\";\n      TokenType[TokenType[\"EXPANSION_CASE_EXP_START\"] = 16] = \"EXPANSION_CASE_EXP_START\";\n      TokenType[TokenType[\"EXPANSION_CASE_EXP_END\"] = 17] = \"EXPANSION_CASE_EXP_END\";\n      TokenType[TokenType[\"EXPANSION_FORM_END\"] = 18] = \"EXPANSION_FORM_END\";\n      TokenType[TokenType[\"EOF\"] = 19] = \"EOF\";\n  })(TokenType$1 || (TokenType$1 = {}));\n  var Token$1 = (function () {\n      function Token(type, parts, sourceSpan) {\n          this.type = type;\n          this.parts = parts;\n          this.sourceSpan = sourceSpan;\n      }\n      return Token;\n  }());\n  var TokenError = (function (_super) {\n      __extends$4(TokenError, _super);\n      function TokenError(errorMsg, tokenType, span) {\n          var _this = _super.call(this, span, errorMsg) || this;\n          _this.tokenType = tokenType;\n          return _this;\n      }\n      return TokenError;\n  }(ParseError));\n  var TokenizeResult = (function () {\n      function TokenizeResult(tokens, errors) {\n          this.tokens = tokens;\n          this.errors = errors;\n      }\n      return TokenizeResult;\n  }());\n  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {\n      if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }\n      if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n      return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)\n          .tokenize();\n  }\n  var _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n  function _unexpectedCharacterErrorMsg(charCode) {\n      var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n      return \"Unexpected character \\\"\" + char + \"\\\"\";\n  }\n  function _unknownEntityErrorMsg(entitySrc) {\n      return \"Unknown entity \\\"\" + entitySrc + \"\\\" - use the \\\"&#<decimal>;\\\" or  \\\"&#x<hex>;\\\" syntax\";\n  }\n  var _ControlFlowError = (function () {\n      function _ControlFlowError(error) {\n          this.error = error;\n      }\n      return _ControlFlowError;\n  }());\n  // See http://www.w3.org/TR/html51/syntax.html#writing\n  var _Tokenizer = (function () {\n      /**\n       * @param _file The html source\n       * @param _getTagDefinition\n       * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\n       * @param _interpolationConfig\n       */\n      function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {\n          if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          this._file = _file;\n          this._getTagDefinition = _getTagDefinition;\n          this._tokenizeIcu = _tokenizeIcu;\n          this._interpolationConfig = _interpolationConfig;\n          // Note: this is always lowercase!\n          this._peek = -1;\n          this._nextPeek = -1;\n          this._index = -1;\n          this._line = 0;\n          this._column = -1;\n          this._expansionCaseStack = [];\n          this._inInterpolation = false;\n          this.tokens = [];\n          this.errors = [];\n          this._input = _file.content;\n          this._length = _file.content.length;\n          this._advance();\n      }\n      _Tokenizer.prototype._processCarriageReturns = function (content) {\n          // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n          // In order to keep the original position in the source, we can not\n          // pre-process it.\n          // Instead CRs are processed right before instantiating the tokens.\n          return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n      };\n      _Tokenizer.prototype.tokenize = function () {\n          while (this._peek !== $EOF) {\n              var start = this._getLocation();\n              try {\n                  if (this._attemptCharCode($LT)) {\n                      if (this._attemptCharCode($BANG)) {\n                          if (this._attemptCharCode($LBRACKET)) {\n                              this._consumeCdata(start);\n                          }\n                          else if (this._attemptCharCode($MINUS)) {\n                              this._consumeComment(start);\n                          }\n                          else {\n                              this._consumeDocType(start);\n                          }\n                      }\n                      else if (this._attemptCharCode($SLASH)) {\n                          this._consumeTagClose(start);\n                      }\n                      else {\n                          this._consumeTagOpen(start);\n                      }\n                  }\n                  else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n                      this._consumeText();\n                  }\n              }\n              catch (e) {\n                  if (e instanceof _ControlFlowError) {\n                      this.errors.push(e.error);\n                  }\n                  else {\n                      throw e;\n                  }\n              }\n          }\n          this._beginToken(TokenType$1.EOF);\n          this._endToken([]);\n          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n      };\n      /**\n       * @returns {boolean} whether an ICU token has been created\n       * @internal\n       */\n      _Tokenizer.prototype._tokenizeExpansionForm = function () {\n          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n              this._consumeExpansionFormStart();\n              return true;\n          }\n          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\n              this._consumeExpansionCaseStart();\n              return true;\n          }\n          if (this._peek === $RBRACE) {\n              if (this._isInExpansionCase()) {\n                  this._consumeExpansionCaseEnd();\n                  return true;\n              }\n              if (this._isInExpansionForm()) {\n                  this._consumeExpansionFormEnd();\n                  return true;\n              }\n          }\n          return false;\n      };\n      _Tokenizer.prototype._getLocation = function () {\n          return new ParseLocation(this._file, this._index, this._line, this._column);\n      };\n      _Tokenizer.prototype._getSpan = function (start, end) {\n          if (start === void 0) { start = this._getLocation(); }\n          if (end === void 0) { end = this._getLocation(); }\n          return new ParseSourceSpan(start, end);\n      };\n      _Tokenizer.prototype._beginToken = function (type, start) {\n          if (start === void 0) { start = this._getLocation(); }\n          this._currentTokenStart = start;\n          this._currentTokenType = type;\n      };\n      _Tokenizer.prototype._endToken = function (parts, end) {\n          if (end === void 0) { end = this._getLocation(); }\n          var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n          this.tokens.push(token);\n          this._currentTokenStart = null;\n          this._currentTokenType = null;\n          return token;\n      };\n      _Tokenizer.prototype._createError = function (msg, span) {\n          if (this._isInExpansionForm()) {\n              msg += \" (Do you have an unescaped \\\"{\\\" in your template? Use \\\"{{ '{' }}\\\") to escape it.)\";\n          }\n          var error = new TokenError(msg, this._currentTokenType, span);\n          this._currentTokenStart = null;\n          this._currentTokenType = null;\n          return new _ControlFlowError(error);\n      };\n      _Tokenizer.prototype._advance = function () {\n          if (this._index >= this._length) {\n              throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());\n          }\n          if (this._peek === $LF) {\n              this._line++;\n              this._column = 0;\n          }\n          else if (this._peek !== $LF && this._peek !== $CR) {\n              this._column++;\n          }\n          this._index++;\n          this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);\n          this._nextPeek =\n              this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);\n      };\n      _Tokenizer.prototype._attemptCharCode = function (charCode) {\n          if (this._peek === charCode) {\n              this._advance();\n              return true;\n          }\n          return false;\n      };\n      _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {\n          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n              this._advance();\n              return true;\n          }\n          return false;\n      };\n      _Tokenizer.prototype._requireCharCode = function (charCode) {\n          var location = this._getLocation();\n          if (!this._attemptCharCode(charCode)) {\n              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n          }\n      };\n      _Tokenizer.prototype._attemptStr = function (chars) {\n          var len = chars.length;\n          if (this._index + len > this._length) {\n              return false;\n          }\n          var initialPosition = this._savePosition();\n          for (var i = 0; i < len; i++) {\n              if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                  // If attempting to parse the string fails, we want to reset the parser\n                  // to where it was before the attempt\n                  this._restorePosition(initialPosition);\n                  return false;\n              }\n          }\n          return true;\n      };\n      _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {\n          for (var i = 0; i < chars.length; i++) {\n              if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                  return false;\n              }\n          }\n          return true;\n      };\n      _Tokenizer.prototype._requireStr = function (chars) {\n          var location = this._getLocation();\n          if (!this._attemptStr(chars)) {\n              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n          }\n      };\n      _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {\n          while (!predicate(this._peek)) {\n              this._advance();\n          }\n      };\n      _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {\n          var start = this._getLocation();\n          this._attemptCharCodeUntilFn(predicate);\n          if (this._index - start.offset < len) {\n              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n          }\n      };\n      _Tokenizer.prototype._attemptUntilChar = function (char) {\n          while (this._peek !== char) {\n              this._advance();\n          }\n      };\n      _Tokenizer.prototype._readChar = function (decodeEntities) {\n          if (decodeEntities && this._peek === $AMPERSAND) {\n              return this._decodeEntity();\n          }\n          else {\n              var index = this._index;\n              this._advance();\n              return this._input[index];\n          }\n      };\n      _Tokenizer.prototype._decodeEntity = function () {\n          var start = this._getLocation();\n          this._advance();\n          if (this._attemptCharCode($HASH)) {\n              var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n              var numberStart = this._getLocation().offset;\n              this._attemptCharCodeUntilFn(isDigitEntityEnd);\n              if (this._peek != $SEMICOLON) {\n                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n              }\n              this._advance();\n              var strNum = this._input.substring(numberStart, this._index - 1);\n              try {\n                  var charCode = parseInt(strNum, isHex ? 16 : 10);\n                  return String.fromCharCode(charCode);\n              }\n              catch (e) {\n                  var entity = this._input.substring(start.offset + 1, this._index - 1);\n                  throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\n              }\n          }\n          else {\n              var startPosition = this._savePosition();\n              this._attemptCharCodeUntilFn(isNamedEntityEnd);\n              if (this._peek != $SEMICOLON) {\n                  this._restorePosition(startPosition);\n                  return '&';\n              }\n              this._advance();\n              var name_1 = this._input.substring(start.offset + 1, this._index - 1);\n              var char = NAMED_ENTITIES[name_1];\n              if (!char) {\n                  throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));\n              }\n              return char;\n          }\n      };\n      _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {\n          var tagCloseStart;\n          var textStart = this._getLocation();\n          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);\n          var parts = [];\n          while (true) {\n              tagCloseStart = this._getLocation();\n              if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n                  break;\n              }\n              if (this._index > tagCloseStart.offset) {\n                  // add the characters consumed by the previous if statement to the output\n                  parts.push(this._input.substring(tagCloseStart.offset, this._index));\n              }\n              while (this._peek !== firstCharOfEnd) {\n                  parts.push(this._readChar(decodeEntities));\n              }\n          }\n          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\n      };\n      _Tokenizer.prototype._consumeComment = function (start) {\n          var _this = this;\n          this._beginToken(TokenType$1.COMMENT_START, start);\n          this._requireCharCode($MINUS);\n          this._endToken([]);\n          var textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });\n          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);\n          this._endToken([]);\n      };\n      _Tokenizer.prototype._consumeCdata = function (start) {\n          var _this = this;\n          this._beginToken(TokenType$1.CDATA_START, start);\n          this._requireStr('CDATA[');\n          this._endToken([]);\n          var textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });\n          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);\n          this._endToken([]);\n      };\n      _Tokenizer.prototype._consumeDocType = function (start) {\n          this._beginToken(TokenType$1.DOC_TYPE, start);\n          this._attemptUntilChar($GT);\n          this._advance();\n          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n      };\n      _Tokenizer.prototype._consumePrefixAndName = function () {\n          var nameOrPrefixStart = this._index;\n          var prefix = null;\n          while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {\n              this._advance();\n          }\n          var nameStart;\n          if (this._peek === $COLON) {\n              this._advance();\n              prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n              nameStart = this._index;\n          }\n          else {\n              nameStart = nameOrPrefixStart;\n          }\n          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n          var name = this._input.substring(nameStart, this._index);\n          return [prefix, name];\n      };\n      _Tokenizer.prototype._consumeTagOpen = function (start) {\n          var savedPos = this._savePosition();\n          var tagName;\n          var lowercaseTagName;\n          try {\n              if (!isAsciiLetter(this._peek)) {\n                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n              }\n              var nameStart = this._index;\n              this._consumeTagOpenStart(start);\n              tagName = this._input.substring(nameStart, this._index);\n              lowercaseTagName = tagName.toLowerCase();\n              this._attemptCharCodeUntilFn(isNotWhitespace);\n              while (this._peek !== $SLASH && this._peek !== $GT) {\n                  this._consumeAttributeName();\n                  this._attemptCharCodeUntilFn(isNotWhitespace);\n                  if (this._attemptCharCode($EQ)) {\n                      this._attemptCharCodeUntilFn(isNotWhitespace);\n                      this._consumeAttributeValue();\n                  }\n                  this._attemptCharCodeUntilFn(isNotWhitespace);\n              }\n              this._consumeTagOpenEnd();\n          }\n          catch (e) {\n              if (e instanceof _ControlFlowError) {\n                  // When the start tag is invalid, assume we want a \"<\"\n                  this._restorePosition(savedPos);\n                  // Back to back text tokens are merged at the end\n                  this._beginToken(TokenType$1.TEXT, start);\n                  this._endToken(['<']);\n                  return;\n              }\n              throw e;\n          }\n          var contentTokenType = this._getTagDefinition(tagName).contentType;\n          if (contentTokenType === exports.TagContentType.RAW_TEXT) {\n              this._consumeRawTextWithTagClose(lowercaseTagName, false);\n          }\n          else if (contentTokenType === exports.TagContentType.ESCAPABLE_RAW_TEXT) {\n              this._consumeRawTextWithTagClose(lowercaseTagName, true);\n          }\n      };\n      _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {\n          var _this = this;\n          var textToken = this._consumeRawText(decodeEntities, $LT, function () {\n              if (!_this._attemptCharCode($SLASH))\n                  return false;\n              _this._attemptCharCodeUntilFn(isNotWhitespace);\n              if (!_this._attemptStrCaseInsensitive(lowercaseTagName))\n                  return false;\n              _this._attemptCharCodeUntilFn(isNotWhitespace);\n              return _this._attemptCharCode($GT);\n          });\n          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);\n          this._endToken([null, lowercaseTagName]);\n      };\n      _Tokenizer.prototype._consumeTagOpenStart = function (start) {\n          this._beginToken(TokenType$1.TAG_OPEN_START, start);\n          var parts = this._consumePrefixAndName();\n          this._endToken(parts);\n      };\n      _Tokenizer.prototype._consumeAttributeName = function () {\n          this._beginToken(TokenType$1.ATTR_NAME);\n          var prefixAndName = this._consumePrefixAndName();\n          this._endToken(prefixAndName);\n      };\n      _Tokenizer.prototype._consumeAttributeValue = function () {\n          this._beginToken(TokenType$1.ATTR_VALUE);\n          var value;\n          if (this._peek === $SQ || this._peek === $DQ) {\n              var quoteChar = this._peek;\n              this._advance();\n              var parts = [];\n              while (this._peek !== quoteChar) {\n                  parts.push(this._readChar(true));\n              }\n              value = parts.join('');\n              this._advance();\n          }\n          else {\n              var valueStart = this._index;\n              this._requireCharCodeUntilFn(isNameEnd, 1);\n              value = this._input.substring(valueStart, this._index);\n          }\n          this._endToken([this._processCarriageReturns(value)]);\n      };\n      _Tokenizer.prototype._consumeTagOpenEnd = function () {\n          var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;\n          this._beginToken(tokenType);\n          this._requireCharCode($GT);\n          this._endToken([]);\n      };\n      _Tokenizer.prototype._consumeTagClose = function (start) {\n          this._beginToken(TokenType$1.TAG_CLOSE, start);\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          var prefixAndName = this._consumePrefixAndName();\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._requireCharCode($GT);\n          this._endToken(prefixAndName);\n      };\n      _Tokenizer.prototype._consumeExpansionFormStart = function () {\n          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());\n          this._requireCharCode($LBRACE);\n          this._endToken([]);\n          this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);\n          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());\n          var condition = this._readUntil($COMMA);\n          this._endToken([condition], this._getLocation());\n          this._requireCharCode($COMMA);\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());\n          var type = this._readUntil($COMMA);\n          this._endToken([type], this._getLocation());\n          this._requireCharCode($COMMA);\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n      };\n      _Tokenizer.prototype._consumeExpansionCaseStart = function () {\n          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());\n          var value = this._readUntil($LBRACE).trim();\n          this._endToken([value], this._getLocation());\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());\n          this._requireCharCode($LBRACE);\n          this._endToken([], this._getLocation());\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);\n      };\n      _Tokenizer.prototype._consumeExpansionCaseEnd = function () {\n          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());\n          this._requireCharCode($RBRACE);\n          this._endToken([], this._getLocation());\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._expansionCaseStack.pop();\n      };\n      _Tokenizer.prototype._consumeExpansionFormEnd = function () {\n          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());\n          this._requireCharCode($RBRACE);\n          this._endToken([]);\n          this._expansionCaseStack.pop();\n      };\n      _Tokenizer.prototype._consumeText = function () {\n          var start = this._getLocation();\n          this._beginToken(TokenType$1.TEXT, start);\n          var parts = [];\n          do {\n              if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                  parts.push(this._interpolationConfig.start);\n                  this._inInterpolation = true;\n              }\n              else if (this._interpolationConfig && this._inInterpolation &&\n                  this._attemptStr(this._interpolationConfig.end)) {\n                  parts.push(this._interpolationConfig.end);\n                  this._inInterpolation = false;\n              }\n              else {\n                  parts.push(this._readChar(true));\n              }\n          } while (!this._isTextEnd());\n          this._endToken([this._processCarriageReturns(parts.join(''))]);\n      };\n      _Tokenizer.prototype._isTextEnd = function () {\n          if (this._peek === $LT || this._peek === $EOF) {\n              return true;\n          }\n          if (this._tokenizeIcu && !this._inInterpolation) {\n              if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n                  // start of an expansion form\n                  return true;\n              }\n              if (this._peek === $RBRACE && this._isInExpansionCase()) {\n                  // end of and expansion case\n                  return true;\n              }\n          }\n          return false;\n      };\n      _Tokenizer.prototype._savePosition = function () {\n          return [this._peek, this._index, this._column, this._line, this.tokens.length];\n      };\n      _Tokenizer.prototype._readUntil = function (char) {\n          var start = this._index;\n          this._attemptUntilChar(char);\n          return this._input.substring(start, this._index);\n      };\n      _Tokenizer.prototype._restorePosition = function (position) {\n          this._peek = position[0];\n          this._index = position[1];\n          this._column = position[2];\n          this._line = position[3];\n          var nbTokens = position[4];\n          if (nbTokens < this.tokens.length) {\n              // remove any extra tokens\n              this.tokens = this.tokens.slice(0, nbTokens);\n          }\n      };\n      _Tokenizer.prototype._isInExpansionCase = function () {\n          return this._expansionCaseStack.length > 0 &&\n              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                  TokenType$1.EXPANSION_CASE_EXP_START;\n      };\n      _Tokenizer.prototype._isInExpansionForm = function () {\n          return this._expansionCaseStack.length > 0 &&\n              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                  TokenType$1.EXPANSION_FORM_START;\n      };\n      return _Tokenizer;\n  }());\n  function isNotWhitespace(code) {\n      return !isWhitespace(code) || code === $EOF;\n  }\n  function isNameEnd(code) {\n      return isWhitespace(code) || code === $GT || code === $SLASH ||\n          code === $SQ || code === $DQ || code === $EQ;\n  }\n  function isPrefixEnd(code) {\n      return (code < $a || $z < code) && (code < $A || $Z < code) &&\n          (code < $0 || code > $9);\n  }\n  function isDigitEntityEnd(code) {\n      return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);\n  }\n  function isNamedEntityEnd(code) {\n      return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);\n  }\n  function isExpansionFormStart(input, offset, interpolationConfig) {\n      var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;\n      return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;\n  }\n  function isExpansionCaseStart(peek) {\n      return peek === $EQ || isAsciiLetter(peek);\n  }\n  function compareCharCodeCaseInsensitive(code1, code2) {\n      return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n  }\n  function toUpperCaseCharCode(code) {\n      return code >= $a && code <= $z ? code - $a + $A : code;\n  }\n  function mergeTextTokens(srcTokens) {\n      var dstTokens = [];\n      var lastDstToken;\n      for (var i = 0; i < srcTokens.length; i++) {\n          var token = srcTokens[i];\n          if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {\n              lastDstToken.parts[0] += token.parts[0];\n              lastDstToken.sourceSpan.end = token.sourceSpan.end;\n          }\n          else {\n              lastDstToken = token;\n              dstTokens.push(lastDstToken);\n          }\n      }\n      return dstTokens;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$3 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var TreeError = (function (_super) {\n      __extends$3(TreeError, _super);\n      function TreeError(elementName, span, msg) {\n          var _this = _super.call(this, span, msg) || this;\n          _this.elementName = elementName;\n          return _this;\n      }\n      TreeError.create = function (elementName, span, msg) {\n          return new TreeError(elementName, span, msg);\n      };\n      return TreeError;\n  }(ParseError));\n  var ParseTreeResult = (function () {\n      function ParseTreeResult(rootNodes, errors) {\n          this.rootNodes = rootNodes;\n          this.errors = errors;\n      }\n      return ParseTreeResult;\n  }());\n  var Parser$1 = (function () {\n      function Parser(getTagDefinition) {\n          this.getTagDefinition = getTagDefinition;\n      }\n      Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);\n          var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\n          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));\n      };\n      return Parser;\n  }());\n  var _TreeBuilder = (function () {\n      function _TreeBuilder(tokens, getTagDefinition) {\n          this.tokens = tokens;\n          this.getTagDefinition = getTagDefinition;\n          this._index = -1;\n          this._rootNodes = [];\n          this._errors = [];\n          this._elementStack = [];\n          this._advance();\n      }\n      _TreeBuilder.prototype.build = function () {\n          while (this._peek.type !== TokenType$1.EOF) {\n              if (this._peek.type === TokenType$1.TAG_OPEN_START) {\n                  this._consumeStartTag(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.TAG_CLOSE) {\n                  this._consumeEndTag(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.CDATA_START) {\n                  this._closeVoidElement();\n                  this._consumeCdata(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.COMMENT_START) {\n                  this._closeVoidElement();\n                  this._consumeComment(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||\n                  this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {\n                  this._closeVoidElement();\n                  this._consumeText(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {\n                  this._consumeExpansion(this._advance());\n              }\n              else {\n                  // Skip all other tokens...\n                  this._advance();\n              }\n          }\n          return new ParseTreeResult(this._rootNodes, this._errors);\n      };\n      _TreeBuilder.prototype._advance = function () {\n          var prev = this._peek;\n          if (this._index < this.tokens.length - 1) {\n              // Note: there is always an EOF token at the end\n              this._index++;\n          }\n          this._peek = this.tokens[this._index];\n          return prev;\n      };\n      _TreeBuilder.prototype._advanceIf = function (type) {\n          if (this._peek.type === type) {\n              return this._advance();\n          }\n          return null;\n      };\n      _TreeBuilder.prototype._consumeCdata = function (startToken) {\n          this._consumeText(this._advance());\n          this._advanceIf(TokenType$1.CDATA_END);\n      };\n      _TreeBuilder.prototype._consumeComment = function (token) {\n          var text = this._advanceIf(TokenType$1.RAW_TEXT);\n          this._advanceIf(TokenType$1.COMMENT_END);\n          var value = isPresent(text) ? text.parts[0].trim() : null;\n          this._addToParent(new Comment(value, token.sourceSpan));\n      };\n      _TreeBuilder.prototype._consumeExpansion = function (token) {\n          var switchValue = this._advance();\n          var type = this._advance();\n          var cases = [];\n          // read =\n          while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {\n              var expCase = this._parseExpansionCase();\n              if (!expCase)\n                  return; // error\n              cases.push(expCase);\n          }\n          // read the final }\n          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {\n              this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n              return;\n          }\n          var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\n          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n          this._advance();\n      };\n      _TreeBuilder.prototype._parseExpansionCase = function () {\n          var value = this._advance();\n          // read {\n          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {\n              this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '{'.\"));\n              return null;\n          }\n          // read until }\n          var start = this._advance();\n          var exp = this._collectExpansionExpTokens(start);\n          if (!exp)\n              return null;\n          var end = this._advance();\n          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));\n          // parse everything in between { and }\n          var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\n          if (parsedExp.errors.length > 0) {\n              this._errors = this._errors.concat(parsedExp.errors);\n              return null;\n          }\n          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\n          var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\n          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n      };\n      _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {\n          var exp = [];\n          var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];\n          while (true) {\n              if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||\n                  this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {\n                  expansionFormStack.push(this._peek.type);\n              }\n              if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {\n                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {\n                      expansionFormStack.pop();\n                      if (expansionFormStack.length == 0)\n                          return exp;\n                  }\n                  else {\n                      this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                      return null;\n                  }\n              }\n              if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {\n                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {\n                      expansionFormStack.pop();\n                  }\n                  else {\n                      this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                      return null;\n                  }\n              }\n              if (this._peek.type === TokenType$1.EOF) {\n                  this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                  return null;\n              }\n              exp.push(this._advance());\n          }\n      };\n      _TreeBuilder.prototype._consumeText = function (token) {\n          var text = token.parts[0];\n          if (text.length > 0 && text[0] == '\\n') {\n              var parent_1 = this._getParentElement();\n              if (isPresent(parent_1) && parent_1.children.length == 0 &&\n                  this.getTagDefinition(parent_1.name).ignoreFirstLf) {\n                  text = text.substring(1);\n              }\n          }\n          if (text.length > 0) {\n              this._addToParent(new Text(text, token.sourceSpan));\n          }\n      };\n      _TreeBuilder.prototype._closeVoidElement = function () {\n          if (this._elementStack.length > 0) {\n              var el = this._elementStack[this._elementStack.length - 1];\n              if (this.getTagDefinition(el.name).isVoid) {\n                  this._elementStack.pop();\n              }\n          }\n      };\n      _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {\n          var prefix = startTagToken.parts[0];\n          var name = startTagToken.parts[1];\n          var attrs = [];\n          while (this._peek.type === TokenType$1.ATTR_NAME) {\n              attrs.push(this._consumeAttr(this._advance()));\n          }\n          var fullName = this._getElementFullName(prefix, name, this._getParentElement());\n          var selfClosing = false;\n          // Note: There could have been a tokenizer error\n          // so that we don't get a token for the end tag...\n          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {\n              this._advance();\n              selfClosing = true;\n              var tagDef = this.getTagDefinition(fullName);\n              if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                  this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, \"Only void and foreign elements can be self closed \\\"\" + startTagToken.parts[1] + \"\\\"\"));\n              }\n          }\n          else if (this._peek.type === TokenType$1.TAG_OPEN_END) {\n              this._advance();\n              selfClosing = false;\n          }\n          var end = this._peek.sourceSpan.start;\n          var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\n          var el = new Element(fullName, attrs, [], span, span, null);\n          this._pushElement(el);\n          if (selfClosing) {\n              this._popElement(fullName);\n              el.endSourceSpan = span;\n          }\n      };\n      _TreeBuilder.prototype._pushElement = function (el) {\n          if (this._elementStack.length > 0) {\n              var parentEl = this._elementStack[this._elementStack.length - 1];\n              if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n                  this._elementStack.pop();\n              }\n          }\n          var tagDef = this.getTagDefinition(el.name);\n          var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;\n          if (parent && tagDef.requireExtraParent(parent.name)) {\n              var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n              this._insertBeforeContainer(parent, container, newParent);\n          }\n          this._addToParent(el);\n          this._elementStack.push(el);\n      };\n      _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {\n          var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n          if (this._getParentElement()) {\n              this._getParentElement().endSourceSpan = endTagToken.sourceSpan;\n          }\n          if (this.getTagDefinition(fullName).isVoid) {\n              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Void elements do not have end tags \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n          }\n          else if (!this._popElement(fullName)) {\n              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Unexpected closing tag \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n          }\n      };\n      _TreeBuilder.prototype._popElement = function (fullName) {\n          for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n              var el = this._elementStack[stackIndex];\n              if (el.name == fullName) {\n                  this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n                  return true;\n              }\n              if (!this.getTagDefinition(el.name).closedByParent) {\n                  return false;\n              }\n          }\n          return false;\n      };\n      _TreeBuilder.prototype._consumeAttr = function (attrName) {\n          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n          var end = attrName.sourceSpan.end;\n          var value = '';\n          var valueSpan;\n          if (this._peek.type === TokenType$1.ATTR_VALUE) {\n              var valueToken = this._advance();\n              value = valueToken.parts[0];\n              end = valueToken.sourceSpan.end;\n              valueSpan = valueToken.sourceSpan;\n          }\n          return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);\n      };\n      _TreeBuilder.prototype._getParentElement = function () {\n          return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n      };\n      /**\n       * Returns the parent in the DOM and the container.\n       *\n       * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n       */\n      _TreeBuilder.prototype._getParentElementSkippingContainers = function () {\n          var container = null;\n          for (var i = this._elementStack.length - 1; i >= 0; i--) {\n              if (this._elementStack[i].name !== 'ng-container') {\n                  return { parent: this._elementStack[i], container: container };\n              }\n              container = this._elementStack[i];\n          }\n          return { parent: this._elementStack[this._elementStack.length - 1], container: container };\n      };\n      _TreeBuilder.prototype._addToParent = function (node) {\n          var parent = this._getParentElement();\n          if (isPresent(parent)) {\n              parent.children.push(node);\n          }\n          else {\n              this._rootNodes.push(node);\n          }\n      };\n      /**\n       * Insert a node between the parent and the container.\n       * When no container is given, the node is appended as a child of the parent.\n       * Also updates the element stack accordingly.\n       *\n       * @internal\n       */\n      _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {\n          if (!container) {\n              this._addToParent(node);\n              this._elementStack.push(node);\n          }\n          else {\n              if (parent) {\n                  // replace the container with the new node in the children\n                  var index = parent.children.indexOf(container);\n                  parent.children[index] = node;\n              }\n              else {\n                  this._rootNodes.push(node);\n              }\n              node.children.push(container);\n              this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\n          }\n      };\n      _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {\n          if (isBlank(prefix)) {\n              prefix = this.getTagDefinition(localName).implicitNamespacePrefix;\n              if (isBlank(prefix) && isPresent(parentElement)) {\n                  prefix = getNsPrefix(parentElement.name);\n              }\n          }\n          return mergeNsAndName(prefix, localName);\n      };\n      return _TreeBuilder;\n  }());\n  function lastOnStack(stack, element) {\n      return stack.length > 0 && stack[stack.length - 1] === element;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var Message = (function () {\n      /**\n       * @param nodes message AST\n       * @param placeholders maps placeholder names to static content\n       * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n       * @param meaning\n       * @param description\n       * @param id\n       */\n      function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {\n          this.nodes = nodes;\n          this.placeholders = placeholders;\n          this.placeholderToMessage = placeholderToMessage;\n          this.meaning = meaning;\n          this.description = description;\n          this.id = id;\n      }\n      return Message;\n  }());\n  var Text$1 = (function () {\n      function Text(value, sourceSpan) {\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };\n      return Text;\n  }());\n  // TODO(vicb): do we really need this node (vs an array) ?\n  var Container = (function () {\n      function Container(children, sourceSpan) {\n          this.children = children;\n          this.sourceSpan = sourceSpan;\n      }\n      Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };\n      return Container;\n  }());\n  var Icu = (function () {\n      function Icu(expression, type, cases, sourceSpan) {\n          this.expression = expression;\n          this.type = type;\n          this.cases = cases;\n          this.sourceSpan = sourceSpan;\n      }\n      Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };\n      return Icu;\n  }());\n  var TagPlaceholder = (function () {\n      function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {\n          this.tag = tag;\n          this.attrs = attrs;\n          this.startName = startName;\n          this.closeName = closeName;\n          this.children = children;\n          this.isVoid = isVoid;\n          this.sourceSpan = sourceSpan;\n      }\n      TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };\n      return TagPlaceholder;\n  }());\n  var Placeholder = (function () {\n      function Placeholder(value, name, sourceSpan) {\n          this.value = value;\n          this.name = name;\n          this.sourceSpan = sourceSpan;\n      }\n      Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };\n      return Placeholder;\n  }());\n  var IcuPlaceholder = (function () {\n      function IcuPlaceholder(value, name, sourceSpan) {\n          this.value = value;\n          this.name = name;\n          this.sourceSpan = sourceSpan;\n      }\n      IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };\n      return IcuPlaceholder;\n  }());\n  // Clone the AST\n  var CloneVisitor = (function () {\n      function CloneVisitor() {\n      }\n      CloneVisitor.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };\n      CloneVisitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          var children = container.children.map(function (n) { return n.visit(_this, context); });\n          return new Container(children, container.sourceSpan);\n      };\n      CloneVisitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          var cases = {};\n          Object.keys(icu.cases).forEach(function (key) { return cases[key] = icu.cases[key].visit(_this, context); });\n          var msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);\n          msg.expressionPlaceholder = icu.expressionPlaceholder;\n          return msg;\n      };\n      CloneVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var _this = this;\n          var children = ph.children.map(function (n) { return n.visit(_this, context); });\n          return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);\n      };\n      CloneVisitor.prototype.visitPlaceholder = function (ph, context) {\n          return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n      };\n      CloneVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n      };\n      return CloneVisitor;\n  }());\n  // Visit all the nodes recursively\n  var RecurseVisitor = (function () {\n      function RecurseVisitor() {\n      }\n      RecurseVisitor.prototype.visitText = function (text, context) { };\n      ;\n      RecurseVisitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          container.children.forEach(function (child) { return child.visit(_this); });\n      };\n      RecurseVisitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          Object.keys(icu.cases).forEach(function (k) { icu.cases[k].visit(_this); });\n      };\n      RecurseVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var _this = this;\n          ph.children.forEach(function (child) { return child.visit(_this); });\n      };\n      RecurseVisitor.prototype.visitPlaceholder = function (ph, context) { };\n      ;\n      RecurseVisitor.prototype.visitIcuPlaceholder = function (ph, context) { };\n      ;\n      return RecurseVisitor;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var TAG_TO_PLACEHOLDER_NAMES = {\n      'A': 'LINK',\n      'B': 'BOLD_TEXT',\n      'BR': 'LINE_BREAK',\n      'EM': 'EMPHASISED_TEXT',\n      'H1': 'HEADING_LEVEL1',\n      'H2': 'HEADING_LEVEL2',\n      'H3': 'HEADING_LEVEL3',\n      'H4': 'HEADING_LEVEL4',\n      'H5': 'HEADING_LEVEL5',\n      'H6': 'HEADING_LEVEL6',\n      'HR': 'HORIZONTAL_RULE',\n      'I': 'ITALIC_TEXT',\n      'LI': 'LIST_ITEM',\n      'LINK': 'MEDIA_LINK',\n      'OL': 'ORDERED_LIST',\n      'P': 'PARAGRAPH',\n      'Q': 'QUOTATION',\n      'S': 'STRIKETHROUGH_TEXT',\n      'SMALL': 'SMALL_TEXT',\n      'SUB': 'SUBSTRIPT',\n      'SUP': 'SUPERSCRIPT',\n      'TBODY': 'TABLE_BODY',\n      'TD': 'TABLE_CELL',\n      'TFOOT': 'TABLE_FOOTER',\n      'TH': 'TABLE_HEADER_CELL',\n      'THEAD': 'TABLE_HEADER',\n      'TR': 'TABLE_ROW',\n      'TT': 'MONOSPACED_TEXT',\n      'U': 'UNDERLINED_TEXT',\n      'UL': 'UNORDERED_LIST',\n  };\n  /**\n   * Creates unique names for placeholder with different content.\n   *\n   * Returns the same placeholder name when the content is identical.\n   *\n   * @internal\n   */\n  var PlaceholderRegistry = (function () {\n      function PlaceholderRegistry() {\n          // Count the occurrence of the base name top generate a unique name\n          this._placeHolderNameCounts = {};\n          // Maps signature to placeholder names\n          this._signatureToName = {};\n      }\n      PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {\n          var signature = this._hashTag(tag, attrs, isVoid);\n          if (this._signatureToName[signature]) {\n              return this._signatureToName[signature];\n          }\n          var upperTag = tag.toUpperCase();\n          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n          var name = this._generateUniqueName(isVoid ? baseName : \"START_\" + baseName);\n          this._signatureToName[signature] = name;\n          return name;\n      };\n      PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {\n          var signature = this._hashClosingTag(tag);\n          if (this._signatureToName[signature]) {\n              return this._signatureToName[signature];\n          }\n          var upperTag = tag.toUpperCase();\n          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n          var name = this._generateUniqueName(\"CLOSE_\" + baseName);\n          this._signatureToName[signature] = name;\n          return name;\n      };\n      PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {\n          var upperName = name.toUpperCase();\n          var signature = \"PH: \" + upperName + \"=\" + content;\n          if (this._signatureToName[signature]) {\n              return this._signatureToName[signature];\n          }\n          var uniqueName = this._generateUniqueName(upperName);\n          this._signatureToName[signature] = uniqueName;\n          return uniqueName;\n      };\n      PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {\n          return this._generateUniqueName(name.toUpperCase());\n      };\n      // Generate a hash for a tag - does not take attribute order into account\n      PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {\n          var start = \"<\" + tag;\n          var strAttrs = Object.keys(attrs).sort().map(function (name) { return \" \" + name + \"=\" + attrs[name]; }).join('');\n          var end = isVoid ? '/>' : \"></\" + tag + \">\";\n          return start + strAttrs + end;\n      };\n      PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag(\"/\" + tag, {}, false); };\n      PlaceholderRegistry.prototype._generateUniqueName = function (base) {\n          var seen = this._placeHolderNameCounts.hasOwnProperty(base);\n          if (!seen) {\n              this._placeHolderNameCounts[base] = 1;\n              return base;\n          }\n          var id = this._placeHolderNameCounts[base];\n          this._placeHolderNameCounts[base] = id + 1;\n          return base + \"_\" + id;\n      };\n      return PlaceholderRegistry;\n  }());\n\n  var _expParser = new Parser(new Lexer());\n  /**\n   * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n   */\n  function createI18nMessageFactory(interpolationConfig) {\n      var visitor = new _I18nVisitor(_expParser, interpolationConfig);\n      return function (nodes, meaning, description, id) {\n          return visitor.toI18nMessage(nodes, meaning, description, id);\n      };\n  }\n  var _I18nVisitor = (function () {\n      function _I18nVisitor(_expressionParser, _interpolationConfig) {\n          this._expressionParser = _expressionParser;\n          this._interpolationConfig = _interpolationConfig;\n      }\n      _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description, id) {\n          this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;\n          this._icuDepth = 0;\n          this._placeholderRegistry = new PlaceholderRegistry();\n          this._placeholderToContent = {};\n          this._placeholderToMessage = {};\n          var i18nodes = visitAll(this, nodes, {});\n          return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n      };\n      _I18nVisitor.prototype.visitElement = function (el, context) {\n          var children = visitAll(this, el.children);\n          var attrs = {};\n          el.attrs.forEach(function (attr) {\n              // Do not visit the attributes, translatable ones are top-level ASTs\n              attrs[attr.name] = attr.value;\n          });\n          var isVoid = getHtmlTagDefinition(el.name).isVoid;\n          var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n          this._placeholderToContent[startPhName] = el.sourceSpan.toString();\n          var closePhName = '';\n          if (!isVoid) {\n              closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n              this._placeholderToContent[closePhName] = \"</\" + el.name + \">\";\n          }\n          return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitAttribute = function (attribute, context) {\n          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitText = function (text, context) {\n          return this._visitTextWithInterpolation(text.value, text.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };\n      _I18nVisitor.prototype.visitExpansion = function (icu, context) {\n          var _this = this;\n          this._icuDepth++;\n          var i18nIcuCases = {};\n          var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n          icu.cases.forEach(function (caze) {\n              i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);\n          });\n          this._icuDepth--;\n          if (this._isIcu || this._icuDepth > 0) {\n              // Returns an ICU node when:\n              // - the message (vs a part of the message) is an ICU message, or\n              // - the ICU message is nested.\n              var expPh = this._placeholderRegistry.getUniquePlaceholder(\"VAR_\" + icu.type);\n              i18nIcu.expressionPlaceholder = expPh;\n              this._placeholderToContent[expPh] = icu.switchValue;\n              return i18nIcu;\n          }\n          // Else returns a placeholder\n          // ICU placeholders should not be replaced with their original content but with the their\n          // translations. We need to create a new visitor (they are not re-entrant) to compute the\n          // message id.\n          // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n          var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n          var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n          this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\n          return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {\n          throw new Error('Unreachable code');\n      };\n      _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {\n          var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);\n          if (!splitInterpolation) {\n              // No expression, return a single text\n              return new Text$1(text, sourceSpan);\n          }\n          // Return a group of text + expressions\n          var nodes = [];\n          var container = new Container(nodes, sourceSpan);\n          var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;\n          for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {\n              var expression = splitInterpolation.expressions[i];\n              var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n              var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n              if (splitInterpolation.strings[i].length) {\n                  // No need to add empty strings\n                  nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));\n              }\n              nodes.push(new Placeholder(expression, phName, sourceSpan));\n              this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n          }\n          // The last index contains no expression\n          var lastStringIdx = splitInterpolation.strings.length - 1;\n          if (splitInterpolation.strings[lastStringIdx].length) {\n              nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));\n          }\n          return container;\n      };\n      return _I18nVisitor;\n  }());\n  var _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*\"([\\s\\S]*?)\"[\\s\\S]*\\)/g;\n  function _extractPlaceholderName(input) {\n      return input.split(_CUSTOM_PH_EXP)[1];\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$5 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  /**\n   * An i18n error.\n   */\n  var I18nError = (function (_super) {\n      __extends$5(I18nError, _super);\n      function I18nError(span, msg) {\n          return _super.call(this, span, msg) || this;\n      }\n      return I18nError;\n  }(ParseError));\n\n  var _I18N_ATTR = 'i18n';\n  var _I18N_ATTR_PREFIX = 'i18n-';\n  var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\n  var MEANING_SEPARATOR = '|';\n  var ID_SEPARATOR = '@@';\n  /**\n   * Extract translatable messages from an html AST\n   */\n  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n      var visitor = new _Visitor(implicitTags, implicitAttrs);\n      return visitor.extract(nodes, interpolationConfig);\n  }\n  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n      var visitor = new _Visitor(implicitTags, implicitAttrs);\n      return visitor.merge(nodes, translations, interpolationConfig);\n  }\n  var ExtractionResult = (function () {\n      function ExtractionResult(messages, errors) {\n          this.messages = messages;\n          this.errors = errors;\n      }\n      return ExtractionResult;\n  }());\n  var _VisitorMode;\n  (function (_VisitorMode) {\n      _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n      _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n  })(_VisitorMode || (_VisitorMode = {}));\n  /**\n   * This Visitor is used:\n   * 1. to extract all the translatable strings from an html AST (see `extract()`),\n   * 2. to replace the translatable strings with the actual translations (see `merge()`)\n   *\n   * @internal\n   */\n  var _Visitor = (function () {\n      function _Visitor(_implicitTags, _implicitAttrs) {\n          this._implicitTags = _implicitTags;\n          this._implicitAttrs = _implicitAttrs;\n      }\n      /**\n       * Extracts the messages from the tree\n       */\n      _Visitor.prototype.extract = function (nodes, interpolationConfig) {\n          var _this = this;\n          this._init(_VisitorMode.Extract, interpolationConfig);\n          nodes.forEach(function (node) { return node.visit(_this, null); });\n          if (this._inI18nBlock) {\n              this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n          }\n          return new ExtractionResult(this._messages, this._errors);\n      };\n      /**\n       * Returns a tree where all translatable nodes are translated\n       */\n      _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {\n          this._init(_VisitorMode.Merge, interpolationConfig);\n          this._translations = translations;\n          // Construct a single fake root element\n          var wrapper = new Element('wrapper', [], nodes, null, null, null);\n          var translatedNode = wrapper.visit(this, null);\n          if (this._inI18nBlock) {\n              this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n          }\n          return new ParseTreeResult(translatedNode.children, this._errors);\n      };\n      _Visitor.prototype.visitExpansionCase = function (icuCase, context) {\n          // Parse cases for translatable html attributes\n          var expression = visitAll(this, icuCase.expression, context);\n          if (this._mode === _VisitorMode.Merge) {\n              return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n          }\n      };\n      _Visitor.prototype.visitExpansion = function (icu, context) {\n          this._mayBeAddBlockChildren(icu);\n          var wasInIcu = this._inIcu;\n          if (!this._inIcu) {\n              // nested ICU messages should not be extracted but top-level translated as a whole\n              if (this._isInTranslatableSection) {\n                  this._addMessage([icu]);\n              }\n              this._inIcu = true;\n          }\n          var cases = visitAll(this, icu.cases, context);\n          if (this._mode === _VisitorMode.Merge) {\n              icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n          }\n          this._inIcu = wasInIcu;\n          return icu;\n      };\n      _Visitor.prototype.visitComment = function (comment, context) {\n          var isOpening = _isOpeningComment(comment);\n          if (isOpening && this._isInTranslatableSection) {\n              this._reportError(comment, 'Could not start a block inside a translatable section');\n              return;\n          }\n          var isClosing = _isClosingComment(comment);\n          if (isClosing && !this._inI18nBlock) {\n              this._reportError(comment, 'Trying to close an unopened block');\n              return;\n          }\n          if (!this._inI18nNode && !this._inIcu) {\n              if (!this._inI18nBlock) {\n                  if (isOpening) {\n                      this._inI18nBlock = true;\n                      this._blockStartDepth = this._depth;\n                      this._blockChildren = [];\n                      this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n                      this._openTranslatableSection(comment);\n                  }\n              }\n              else {\n                  if (isClosing) {\n                      if (this._depth == this._blockStartDepth) {\n                          this._closeTranslatableSection(comment, this._blockChildren);\n                          this._inI18nBlock = false;\n                          var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);\n                          // merge attributes in sections\n                          var nodes = this._translateMessage(comment, message);\n                          return visitAll(this, nodes);\n                      }\n                      else {\n                          this._reportError(comment, 'I18N blocks should not cross element boundaries');\n                          return;\n                      }\n                  }\n              }\n          }\n      };\n      _Visitor.prototype.visitText = function (text, context) {\n          if (this._isInTranslatableSection) {\n              this._mayBeAddBlockChildren(text);\n          }\n          return text;\n      };\n      _Visitor.prototype.visitElement = function (el, context) {\n          var _this = this;\n          this._mayBeAddBlockChildren(el);\n          this._depth++;\n          var wasInI18nNode = this._inI18nNode;\n          var wasInImplicitNode = this._inImplicitNode;\n          var childNodes = [];\n          var translatedChildNodes;\n          // Extract:\n          // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n          // - ICU messages\n          var i18nAttr = _getI18nAttr(el);\n          var i18nMeta = i18nAttr ? i18nAttr.value : '';\n          var isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&\n              !this._isInTranslatableSection;\n          var isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n          this._inImplicitNode = wasInImplicitNode || isImplicit;\n          if (!this._isInTranslatableSection && !this._inIcu) {\n              if (i18nAttr || isTopLevelImplicit) {\n                  this._inI18nNode = true;\n                  var message = this._addMessage(el.children, i18nMeta);\n                  translatedChildNodes = this._translateMessage(el, message);\n              }\n              if (this._mode == _VisitorMode.Extract) {\n                  var isTranslatable = i18nAttr || isTopLevelImplicit;\n                  if (isTranslatable)\n                      this._openTranslatableSection(el);\n                  visitAll(this, el.children);\n                  if (isTranslatable)\n                      this._closeTranslatableSection(el, el.children);\n              }\n          }\n          else {\n              if (i18nAttr || isTopLevelImplicit) {\n                  this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n              }\n              if (this._mode == _VisitorMode.Extract) {\n                  // Descend into child nodes for extraction\n                  visitAll(this, el.children);\n              }\n          }\n          if (this._mode === _VisitorMode.Merge) {\n              var visitNodes = translatedChildNodes || el.children;\n              visitNodes.forEach(function (child) {\n                  var visited = child.visit(_this, context);\n                  if (visited && !_this._isInTranslatableSection) {\n                      // Do not add the children from translatable sections (= i18n blocks here)\n                      // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n                      childNodes = childNodes.concat(visited);\n                  }\n              });\n          }\n          this._visitAttributesOf(el);\n          this._depth--;\n          this._inI18nNode = wasInI18nNode;\n          this._inImplicitNode = wasInImplicitNode;\n          if (this._mode === _VisitorMode.Merge) {\n              var translatedAttrs = this._translateAttributes(el);\n              return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n          }\n      };\n      _Visitor.prototype.visitAttribute = function (attribute, context) {\n          throw new Error('unreachable code');\n      };\n      _Visitor.prototype._init = function (mode, interpolationConfig) {\n          this._mode = mode;\n          this._inI18nBlock = false;\n          this._inI18nNode = false;\n          this._depth = 0;\n          this._inIcu = false;\n          this._msgCountAtSectionStart = void 0;\n          this._errors = [];\n          this._messages = [];\n          this._inImplicitNode = false;\n          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n      };\n      // looks for translatable attributes\n      _Visitor.prototype._visitAttributesOf = function (el) {\n          var _this = this;\n          var explicitAttrNameToValue = {};\n          var implicitAttrNames = this._implicitAttrs[el.name] || [];\n          el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })\n              .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n              attr.value; });\n          el.attrs.forEach(function (attr) {\n              if (attr.name in explicitAttrNameToValue) {\n                  _this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n              }\n              else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {\n                  _this._addMessage([attr]);\n              }\n          });\n      };\n      // add a translatable message\n      _Visitor.prototype._addMessage = function (ast, msgMeta) {\n          if (ast.length == 0 ||\n              ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {\n              // Do not create empty messages\n              return;\n          }\n          var _a = _parseMessageMeta(msgMeta), meaning = _a.meaning, description = _a.description, id = _a.id;\n          var message = this._createI18nMessage(ast, meaning, description, id);\n          this._messages.push(message);\n          return message;\n      };\n      // Translates the given message given the `TranslationBundle`\n      // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n      // no-op when called in extraction mode (returns [])\n      _Visitor.prototype._translateMessage = function (el, message) {\n          if (message && this._mode === _VisitorMode.Merge) {\n              var nodes = this._translations.get(message);\n              if (nodes) {\n                  return nodes;\n              }\n              this._reportError(el, \"Translation unavailable for message id=\\\"\" + this._translations.digest(message) + \"\\\"\");\n          }\n          return [];\n      };\n      // translate the attributes of an element and remove i18n specific attributes\n      _Visitor.prototype._translateAttributes = function (el) {\n          var _this = this;\n          var attributes = el.attrs;\n          var i18nAttributeMeanings = {};\n          attributes.forEach(function (attr) {\n              if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                  i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                      _parseMessageMeta(attr.value).meaning;\n              }\n          });\n          var translatedAttributes = [];\n          attributes.forEach(function (attr) {\n              if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                  // strip i18n specific attributes\n                  return;\n              }\n              if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {\n                  var meaning = i18nAttributeMeanings[attr.name];\n                  var message = _this._createI18nMessage([attr], meaning, '', '');\n                  var nodes = _this._translations.get(message);\n                  if (nodes) {\n                      if (nodes.length == 0) {\n                          translatedAttributes.push(new Attribute$1(attr.name, '', attr.sourceSpan));\n                      }\n                      else if (nodes[0] instanceof Text) {\n                          var value = nodes[0].value;\n                          translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));\n                      }\n                      else {\n                          _this._reportError(el, \"Unexpected translation for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + _this._translations.digest(message) + \"\\\")\");\n                      }\n                  }\n                  else {\n                      _this._reportError(el, \"Translation unavailable for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + _this._translations.digest(message) + \"\\\")\");\n                  }\n              }\n              else {\n                  translatedAttributes.push(attr);\n              }\n          });\n          return translatedAttributes;\n      };\n      /**\n       * Add the node as a child of the block when:\n       * - we are in a block,\n       * - we are not inside a ICU message (those are handled separately),\n       * - the node is a \"direct child\" of the block\n       */\n      _Visitor.prototype._mayBeAddBlockChildren = function (node) {\n          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n              this._blockChildren.push(node);\n          }\n      };\n      /**\n       * Marks the start of a section, see `_closeTranslatableSection`\n       */\n      _Visitor.prototype._openTranslatableSection = function (node) {\n          if (this._isInTranslatableSection) {\n              this._reportError(node, 'Unexpected section start');\n          }\n          else {\n              this._msgCountAtSectionStart = this._messages.length;\n          }\n      };\n      Object.defineProperty(_Visitor.prototype, \"_isInTranslatableSection\", {\n          /**\n           * A translatable section could be:\n           * - the content of translatable element,\n           * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n           */\n          get: function () {\n              return this._msgCountAtSectionStart !== void 0;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      /**\n       * Terminates a section.\n       *\n       * If a section has only one significant children (comments not significant) then we should not\n       * keep the message from this children:\n       *\n       * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n       * - one for the <p> content with meaning and description,\n       * - another one for the ICU message.\n       *\n       * In this case the last message is discarded as it contains less information (the AST is\n       * otherwise identical).\n       *\n       * Note that we should still keep messages extracted from attributes inside the section (ie in the\n       * ICU message here)\n       */\n      _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {\n          if (!this._isInTranslatableSection) {\n              this._reportError(node, 'Unexpected section end');\n              return;\n          }\n          var startIndex = this._msgCountAtSectionStart;\n          var significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);\n          if (significantChildren == 1) {\n              for (var i = this._messages.length - 1; i >= startIndex; i--) {\n                  var ast = this._messages[i].nodes;\n                  if (!(ast.length == 1 && ast[0] instanceof Text$1)) {\n                      this._messages.splice(i, 1);\n                      break;\n                  }\n              }\n          }\n          this._msgCountAtSectionStart = void 0;\n      };\n      _Visitor.prototype._reportError = function (node, msg) {\n          this._errors.push(new I18nError(node.sourceSpan, msg));\n      };\n      return _Visitor;\n  }());\n  function _isOpeningComment(n) {\n      return n instanceof Comment && n.value && n.value.startsWith('i18n');\n  }\n  function _isClosingComment(n) {\n      return n instanceof Comment && n.value && n.value === '/i18n';\n  }\n  function _getI18nAttr(p) {\n      return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;\n  }\n  function _parseMessageMeta(i18n) {\n      if (!i18n)\n          return { meaning: '', description: '', id: '' };\n      var idIndex = i18n.indexOf(ID_SEPARATOR);\n      var descIndex = i18n.indexOf(MEANING_SEPARATOR);\n      var _a = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], meaningAndDesc = _a[0], id = _a[1];\n      var _b = (descIndex > -1) ?\n          [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n          ['', meaningAndDesc], meaning = _b[0], description = _b[1];\n      return { meaning: meaning, description: description, id: id };\n  }\n\n  var XmlTagDefinition = (function () {\n      function XmlTagDefinition() {\n          this.closedByParent = false;\n          this.contentType = exports.TagContentType.PARSABLE_DATA;\n          this.isVoid = false;\n          this.ignoreFirstLf = false;\n          this.canSelfClose = true;\n      }\n      XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };\n      XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };\n      return XmlTagDefinition;\n  }());\n  var _TAG_DEFINITION = new XmlTagDefinition();\n  function getXmlTagDefinition(tagName) {\n      return _TAG_DEFINITION;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$7 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var XmlParser = (function (_super) {\n      __extends$7(XmlParser, _super);\n      function XmlParser() {\n          return _super.call(this, getXmlTagDefinition) || this;\n      }\n      XmlParser.prototype.parse = function (source, url, parseExpansionForms) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);\n      };\n      return XmlParser;\n  }(Parser$1));\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$8 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  function digest(message) {\n      return message.id || sha1(serializeNodes(message.nodes).join('') + (\"[\" + message.meaning + \"]\"));\n  }\n  function decimalDigest(message) {\n      if (message.id) {\n          return message.id;\n      }\n      var visitor = new _SerializerIgnoreIcuExpVisitor();\n      var parts = message.nodes.map(function (a) { return a.visit(visitor, null); });\n      return computeMsgId(parts.join(''), message.meaning);\n  }\n  /**\n   * Serialize the i18n ast to something xml-like in order to generate an UID.\n   *\n   * The visitor is also used in the i18n parser tests\n   *\n   * @internal\n   */\n  var _SerializerVisitor = (function () {\n      function _SerializerVisitor() {\n      }\n      _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };\n      _SerializerVisitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          return \"[\" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + \"]\";\n      };\n      _SerializerVisitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          var strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n          return \"{\" + icu.expression + \", \" + icu.type + \", \" + strCases.join(', ') + \"}\";\n      };\n      _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var _this = this;\n          return ph.isVoid ?\n              \"<ph tag name=\\\"\" + ph.startName + \"\\\"/>\" :\n              \"<ph tag name=\\\"\" + ph.startName + \"\\\">\" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + \"</ph name=\\\"\" + ph.closeName + \"\\\">\";\n      };\n      _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {\n          return ph.value ? \"<ph name=\\\"\" + ph.name + \"\\\">\" + ph.value + \"</ph>\" : \"<ph name=\\\"\" + ph.name + \"\\\"/>\";\n      };\n      _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          return \"<ph icu name=\\\"\" + ph.name + \"\\\">\" + ph.value.visit(this) + \"</ph>\";\n      };\n      return _SerializerVisitor;\n  }());\n  var serializerVisitor = new _SerializerVisitor();\n  function serializeNodes(nodes) {\n      return nodes.map(function (a) { return a.visit(serializerVisitor, null); });\n  }\n  /**\n   * Serialize the i18n ast to something xml-like in order to generate an UID.\n   *\n   * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n   *\n   * @internal\n   */\n  var _SerializerIgnoreIcuExpVisitor = (function (_super) {\n      __extends$8(_SerializerIgnoreIcuExpVisitor, _super);\n      function _SerializerIgnoreIcuExpVisitor() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          var strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n          // Do not take the expression into account\n          return \"{\" + icu.type + \", \" + strCases.join(', ') + \"}\";\n      };\n      return _SerializerIgnoreIcuExpVisitor;\n  }(_SerializerVisitor));\n  /**\n   * Compute the SHA1 of the given string\n   *\n   * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n   *\n   * WARNING: this function has not been designed not tested with security in mind.\n   *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n   */\n  function sha1(str) {\n      var utf8 = utf8Encode(str);\n      var words32 = stringToWords32(utf8, Endian.Big);\n      var len = utf8.length * 8;\n      var w = new Array(80);\n      var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];\n      words32[len >> 5] |= 0x80 << (24 - len % 32);\n      words32[((len + 64 >> 9) << 4) + 15] = len;\n      for (var i = 0; i < words32.length; i += 16) {\n          var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];\n          for (var j = 0; j < 80; j++) {\n              if (j < 16) {\n                  w[j] = words32[i + j];\n              }\n              else {\n                  w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n              }\n              var _c = fk(j, b, c, d), f = _c[0], k = _c[1];\n              var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n              _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];\n          }\n          _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];\n      }\n      return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n      var _d, _e;\n  }\n  function fk(index, b, c, d) {\n      if (index < 20) {\n          return [(b & c) | (~b & d), 0x5a827999];\n      }\n      if (index < 40) {\n          return [b ^ c ^ d, 0x6ed9eba1];\n      }\n      if (index < 60) {\n          return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n      }\n      return [b ^ c ^ d, 0xca62c1d6];\n  }\n  /**\n   * Compute the fingerprint of the given string\n   *\n   * The output is 64 bit number encoded as a decimal string\n   *\n   * based on:\n   * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n   */\n  function fingerprint(str) {\n      var utf8 = utf8Encode(str);\n      var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];\n      if (hi == 0 && (lo == 0 || lo == 1)) {\n          hi = hi ^ 0x130f9bef;\n          lo = lo ^ -0x6b5f56d8;\n      }\n      return [hi, lo];\n  }\n  function computeMsgId(msg, meaning) {\n      var _a = fingerprint(msg), hi = _a[0], lo = _a[1];\n      if (meaning) {\n          var _b = fingerprint(meaning), him = _b[0], lom = _b[1];\n          _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];\n      }\n      return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n      var _c;\n  }\n  function hash32(str, c) {\n      var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];\n      var i;\n      var len = str.length;\n      for (i = 0; i + 12 <= len; i += 12) {\n          a = add32(a, wordAt(str, i, Endian.Little));\n          b = add32(b, wordAt(str, i + 4, Endian.Little));\n          c = add32(c, wordAt(str, i + 8, Endian.Little));\n          _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];\n      }\n      a = add32(a, wordAt(str, i, Endian.Little));\n      b = add32(b, wordAt(str, i + 4, Endian.Little));\n      // the first byte of c is reserved for the length\n      c = add32(c, len);\n      c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n      return mix([a, b, c])[2];\n      var _b;\n  }\n  // clang-format off\n  function mix(_a) {\n      var a = _a[0], b = _a[1], c = _a[2];\n      a = sub32(a, b);\n      a = sub32(a, c);\n      a ^= c >>> 13;\n      b = sub32(b, c);\n      b = sub32(b, a);\n      b ^= a << 8;\n      c = sub32(c, a);\n      c = sub32(c, b);\n      c ^= b >>> 13;\n      a = sub32(a, b);\n      a = sub32(a, c);\n      a ^= c >>> 12;\n      b = sub32(b, c);\n      b = sub32(b, a);\n      b ^= a << 16;\n      c = sub32(c, a);\n      c = sub32(c, b);\n      c ^= b >>> 5;\n      a = sub32(a, b);\n      a = sub32(a, c);\n      a ^= c >>> 3;\n      b = sub32(b, c);\n      b = sub32(b, a);\n      b ^= a << 10;\n      c = sub32(c, a);\n      c = sub32(c, b);\n      c ^= b >>> 15;\n      return [a, b, c];\n  }\n  // clang-format on\n  // Utils\n  var Endian;\n  (function (Endian) {\n      Endian[Endian[\"Little\"] = 0] = \"Little\";\n      Endian[Endian[\"Big\"] = 1] = \"Big\";\n  })(Endian || (Endian = {}));\n  function utf8Encode(str) {\n      var encoded = '';\n      for (var index = 0; index < str.length; index++) {\n          var codePoint = decodeSurrogatePairs(str, index);\n          if (codePoint <= 0x7f) {\n              encoded += String.fromCharCode(codePoint);\n          }\n          else if (codePoint <= 0x7ff) {\n              encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);\n          }\n          else if (codePoint <= 0xffff) {\n              encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);\n          }\n          else if (codePoint <= 0x1fffff) {\n              encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);\n          }\n      }\n      return encoded;\n  }\n  // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n  function decodeSurrogatePairs(str, index) {\n      if (index < 0 || index >= str.length) {\n          throw new Error(\"index=\" + index + \" is out of range in \\\"\" + str + \"\\\"\");\n      }\n      var high = str.charCodeAt(index);\n      if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {\n          var low = byteAt(str, index + 1);\n          if (low >= 0xdc00 && low <= 0xdfff) {\n              return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;\n          }\n      }\n      return high;\n  }\n  function add32(a, b) {\n      return add32to64(a, b)[1];\n  }\n  function add32to64(a, b) {\n      var low = (a & 0xffff) + (b & 0xffff);\n      var high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n      return [high >>> 16, (high << 16) | (low & 0xffff)];\n  }\n  function add64(_a, _b) {\n      var ah = _a[0], al = _a[1];\n      var bh = _b[0], bl = _b[1];\n      var _c = add32to64(al, bl), carry = _c[0], l = _c[1];\n      var h = add32(add32(ah, bh), carry);\n      return [h, l];\n  }\n  function sub32(a, b) {\n      var low = (a & 0xffff) - (b & 0xffff);\n      var high = (a >> 16) - (b >> 16) + (low >> 16);\n      return (high << 16) | (low & 0xffff);\n  }\n  // Rotate a 32b number left `count` position\n  function rol32(a, count) {\n      return (a << count) | (a >>> (32 - count));\n  }\n  // Rotate a 64b number left `count` position\n  function rol64(_a, count) {\n      var hi = _a[0], lo = _a[1];\n      var h = (hi << count) | (lo >>> (32 - count));\n      var l = (lo << count) | (hi >>> (32 - count));\n      return [h, l];\n  }\n  function stringToWords32(str, endian) {\n      var words32 = Array((str.length + 3) >>> 2);\n      for (var i = 0; i < words32.length; i++) {\n          words32[i] = wordAt(str, i * 4, endian);\n      }\n      return words32;\n  }\n  function byteAt(str, index) {\n      return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n  }\n  function wordAt(str, index, endian) {\n      var word = 0;\n      if (endian === Endian.Big) {\n          for (var i = 0; i < 4; i++) {\n              word += byteAt(str, index + i) << (24 - 8 * i);\n          }\n      }\n      else {\n          for (var i = 0; i < 4; i++) {\n              word += byteAt(str, index + i) << 8 * i;\n          }\n      }\n      return word;\n  }\n  function words32ToByteString(words32) {\n      return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');\n  }\n  function word32ToByteString(word) {\n      var str = '';\n      for (var i = 0; i < 4; i++) {\n          str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n      }\n      return str;\n  }\n  function byteStringToHexString(str) {\n      var hex = '';\n      for (var i = 0; i < str.length; i++) {\n          var b = byteAt(str, i);\n          hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n      }\n      return hex.toLowerCase();\n  }\n  // based on http://www.danvk.org/hex2dec.html (JS can not handle more than 56b)\n  function byteStringToDecString(str) {\n      var decimal = '';\n      var toThePower = '1';\n      for (var i = str.length - 1; i >= 0; i--) {\n          decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n          toThePower = numberTimesBigInt(256, toThePower);\n      }\n      return decimal.split('').reverse().join('');\n  }\n  // x and y decimal, lowest significant digit first\n  function addBigInt(x, y) {\n      var sum = '';\n      var len = Math.max(x.length, y.length);\n      for (var i = 0, carry = 0; i < len || carry; i++) {\n          var tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n          if (tmpSum >= 10) {\n              carry = 1;\n              sum += tmpSum - 10;\n          }\n          else {\n              carry = 0;\n              sum += tmpSum;\n          }\n      }\n      return sum;\n  }\n  function numberTimesBigInt(num, b) {\n      var product = '';\n      var bToThePower = b;\n      for (; num !== 0; num = num >>> 1) {\n          if (num & 1)\n              product = addBigInt(product, bToThePower);\n          bToThePower = addBigInt(bToThePower, bToThePower);\n      }\n      return product;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$9 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var Serializer = (function () {\n      function Serializer() {\n      }\n      // Creates a name mapper, see `PlaceholderMapper`\n      // Returning `null` means that no name mapping is used.\n      Serializer.prototype.createNameMapper = function (message) { return null; };\n      return Serializer;\n  }());\n  /**\n   * A simple mapper that take a function to transform an internal name to a public name\n   */\n  var SimplePlaceholderMapper = (function (_super) {\n      __extends$9(SimplePlaceholderMapper, _super);\n      // create a mapping from the message\n      function SimplePlaceholderMapper(message, mapName) {\n          var _this = _super.call(this) || this;\n          _this.mapName = mapName;\n          _this.internalToPublic = {};\n          _this.publicToNextId = {};\n          _this.publicToInternal = {};\n          message.nodes.forEach(function (node) { return node.visit(_this); });\n          return _this;\n      }\n      SimplePlaceholderMapper.prototype.toPublicName = function (internalName) {\n          return this.internalToPublic.hasOwnProperty(internalName) ?\n              this.internalToPublic[internalName] :\n              null;\n      };\n      SimplePlaceholderMapper.prototype.toInternalName = function (publicName) {\n          return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n              null;\n      };\n      SimplePlaceholderMapper.prototype.visitText = function (text, context) { return null; };\n      SimplePlaceholderMapper.prototype.visitTagPlaceholder = function (ph, context) {\n          this.visitPlaceholderName(ph.startName);\n          _super.prototype.visitTagPlaceholder.call(this, ph, context);\n          this.visitPlaceholderName(ph.closeName);\n      };\n      SimplePlaceholderMapper.prototype.visitPlaceholder = function (ph, context) { this.visitPlaceholderName(ph.name); };\n      SimplePlaceholderMapper.prototype.visitIcuPlaceholder = function (ph, context) {\n          this.visitPlaceholderName(ph.name);\n      };\n      // XMB placeholders could only contains A-Z, 0-9 and _\n      SimplePlaceholderMapper.prototype.visitPlaceholderName = function (internalName) {\n          if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n              return;\n          }\n          var publicName = this.mapName(internalName);\n          if (this.publicToInternal.hasOwnProperty(publicName)) {\n              // Create a new XMB when it has already been used\n              var nextId = this.publicToNextId[publicName];\n              this.publicToNextId[publicName] = nextId + 1;\n              publicName = publicName + \"_\" + nextId;\n          }\n          else {\n              this.publicToNextId[publicName] = 1;\n          }\n          this.internalToPublic[internalName] = publicName;\n          this.publicToInternal[publicName] = internalName;\n      };\n      return SimplePlaceholderMapper;\n  }(RecurseVisitor));\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$10 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _Visitor$1 = (function () {\n      function _Visitor() {\n      }\n      _Visitor.prototype.visitTag = function (tag) {\n          var _this = this;\n          var strAttrs = this._serializeAttributes(tag.attrs);\n          if (tag.children.length == 0) {\n              return \"<\" + tag.name + strAttrs + \"/>\";\n          }\n          var strChildren = tag.children.map(function (node) { return node.visit(_this); });\n          return \"<\" + tag.name + strAttrs + \">\" + strChildren.join('') + \"</\" + tag.name + \">\";\n      };\n      _Visitor.prototype.visitText = function (text) { return text.value; };\n      _Visitor.prototype.visitDeclaration = function (decl) {\n          return \"<?xml\" + this._serializeAttributes(decl.attrs) + \" ?>\";\n      };\n      _Visitor.prototype._serializeAttributes = function (attrs) {\n          var strAttrs = Object.keys(attrs).map(function (name) { return name + \"=\\\"\" + attrs[name] + \"\\\"\"; }).join(' ');\n          return strAttrs.length > 0 ? ' ' + strAttrs : '';\n      };\n      _Visitor.prototype.visitDoctype = function (doctype) {\n          return \"<!DOCTYPE \" + doctype.rootTag + \" [\\n\" + doctype.dtd + \"\\n]>\";\n      };\n      return _Visitor;\n  }());\n  var _visitor = new _Visitor$1();\n  function serialize(nodes) {\n      return nodes.map(function (node) { return node.visit(_visitor); }).join('');\n  }\n  var Declaration = (function () {\n      function Declaration(unescapedAttrs) {\n          var _this = this;\n          this.attrs = {};\n          Object.keys(unescapedAttrs).forEach(function (k) {\n              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);\n          });\n      }\n      Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };\n      return Declaration;\n  }());\n  var Doctype = (function () {\n      function Doctype(rootTag, dtd) {\n          this.rootTag = rootTag;\n          this.dtd = dtd;\n      }\n      ;\n      Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };\n      return Doctype;\n  }());\n  var Tag = (function () {\n      function Tag(name, unescapedAttrs, children) {\n          if (unescapedAttrs === void 0) { unescapedAttrs = {}; }\n          if (children === void 0) { children = []; }\n          var _this = this;\n          this.name = name;\n          this.children = children;\n          this.attrs = {};\n          Object.keys(unescapedAttrs).forEach(function (k) {\n              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);\n          });\n      }\n      Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };\n      return Tag;\n  }());\n  var Text$2 = (function () {\n      function Text(unescapedValue) {\n          this.value = _escapeXml(unescapedValue);\n      }\n      ;\n      Text.prototype.visit = function (visitor) { return visitor.visitText(this); };\n      return Text;\n  }());\n  var CR = (function (_super) {\n      __extends$10(CR, _super);\n      function CR(ws) {\n          if (ws === void 0) { ws = 0; }\n          return _super.call(this, \"\\n\" + new Array(ws + 1).join(' ')) || this;\n      }\n      return CR;\n  }(Text$2));\n  var _ESCAPED_CHARS = [\n      [/&/g, '&amp;'],\n      [/\"/g, '&quot;'],\n      [/'/g, '&apos;'],\n      [/</g, '&lt;'],\n      [/>/g, '&gt;'],\n  ];\n  function _escapeXml(text) {\n      return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$6 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _VERSION = '1.2';\n  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';\n  // TODO(vicb): make this a param (s/_/-/)\n  var _DEFAULT_SOURCE_LANG = 'en';\n  var _PLACEHOLDER_TAG = 'x';\n  var _FILE_TAG = 'file';\n  var _SOURCE_TAG = 'source';\n  var _TARGET_TAG = 'target';\n  var _UNIT_TAG = 'trans-unit';\n  // http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n  // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\n  var Xliff = (function (_super) {\n      __extends$6(Xliff, _super);\n      function Xliff() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      Xliff.prototype.write = function (messages, locale) {\n          var visitor = new _WriteVisitor();\n          var transUnits = [];\n          messages.forEach(function (message) {\n              var transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });\n              transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));\n              if (message.description) {\n                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));\n              }\n              if (message.meaning) {\n                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));\n              }\n              transUnit.children.push(new CR(6));\n              transUnits.push(new CR(6), transUnit);\n          });\n          var body = new Tag('body', {}, transUnits.concat([new CR(4)]));\n          var file = new Tag('file', {\n              'source-language': locale || _DEFAULT_SOURCE_LANG,\n              datatype: 'plaintext',\n              original: 'ng2.template',\n          }, [new CR(4), body, new CR(2)]);\n          var xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);\n          return serialize([\n              new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\n          ]);\n      };\n      Xliff.prototype.load = function (content, url) {\n          // xliff to xml nodes\n          var xliffParser = new XliffParser();\n          var _a = xliffParser.parse(content, url), locale = _a.locale, mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;\n          // xml nodes to i18n nodes\n          var i18nNodesByMsgId = {};\n          var converter = new XmlToI18n();\n          Object.keys(mlNodesByMsgId).forEach(function (msgId) {\n              var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;\n              errors.push.apply(errors, e);\n              i18nNodesByMsgId[msgId] = i18nNodes;\n          });\n          if (errors.length) {\n              throw new Error(\"xliff parse errors:\\n\" + errors.join('\\n'));\n          }\n          return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };\n      };\n      Xliff.prototype.digest = function (message) { return digest(message); };\n      return Xliff;\n  }(Serializer));\n  var _WriteVisitor = (function () {\n      function _WriteVisitor() {\n      }\n      _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };\n      _WriteVisitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          var nodes = [];\n          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n          return nodes;\n      };\n      _WriteVisitor.prototype.visitIcu = function (icu, context) {\n          if (this._isInIcu) {\n              // nested ICU is not supported\n              throw new Error('xliff does not support nested ICU messages');\n          }\n          this._isInIcu = true;\n          // TODO(vicb): support ICU messages\n          // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html\n          // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html\n          var nodes = [];\n          this._isInIcu = false;\n          return nodes;\n      };\n      _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var ctype = getCtypeForTag(ph.tag);\n          var startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });\n          if (ph.isVoid) {\n              // void tags have no children nor closing tags\n              return [startTagPh];\n          }\n          var closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });\n          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n      };\n      _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];\n      };\n      _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];\n      };\n      _WriteVisitor.prototype.serialize = function (nodes) {\n          var _this = this;\n          this._isInIcu = false;\n          return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n      };\n      return _WriteVisitor;\n  }());\n  // TODO(vicb): add error management (structure)\n  // Extract messages as xml nodes from the xliff file\n  var XliffParser = (function () {\n      function XliffParser() {\n          this._locale = null;\n      }\n      XliffParser.prototype.parse = function (xliff, url) {\n          this._unitMlNodes = [];\n          this._mlNodesByMsgId = {};\n          var xml = new XmlParser().parse(xliff, url, false);\n          this._errors = xml.errors;\n          visitAll(this, xml.rootNodes, null);\n          return {\n              mlNodesByMsgId: this._mlNodesByMsgId,\n              errors: this._errors,\n              locale: this._locale,\n          };\n      };\n      XliffParser.prototype.visitElement = function (element, context) {\n          switch (element.name) {\n              case _UNIT_TAG:\n                  this._unitMlNodes = null;\n                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                  if (!idAttr) {\n                      this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n                  }\n                  else {\n                      var id = idAttr.value;\n                      if (this._mlNodesByMsgId.hasOwnProperty(id)) {\n                          this._addError(element, \"Duplicated translations for msg \" + id);\n                      }\n                      else {\n                          visitAll(this, element.children, null);\n                          if (this._unitMlNodes) {\n                              this._mlNodesByMsgId[id] = this._unitMlNodes;\n                          }\n                          else {\n                              this._addError(element, \"Message \" + id + \" misses a translation\");\n                          }\n                      }\n                  }\n                  break;\n              case _SOURCE_TAG:\n                  // ignore source message\n                  break;\n              case _TARGET_TAG:\n                  this._unitMlNodes = element.children;\n                  break;\n              case _FILE_TAG:\n                  var localeAttr = element.attrs.find(function (attr) { return attr.name === 'target-language'; });\n                  if (localeAttr) {\n                      this._locale = localeAttr.value;\n                  }\n                  visitAll(this, element.children, null);\n                  break;\n              default:\n                  // TODO(vicb): assert file structure, xliff version\n                  // For now only recurse on unhandled nodes\n                  visitAll(this, element.children, null);\n          }\n      };\n      XliffParser.prototype.visitAttribute = function (attribute, context) { };\n      XliffParser.prototype.visitText = function (text, context) { };\n      XliffParser.prototype.visitComment = function (comment, context) { };\n      XliffParser.prototype.visitExpansion = function (expansion, context) { };\n      XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { };\n      XliffParser.prototype._addError = function (node, message) {\n          this._errors.push(new I18nError(node.sourceSpan, message));\n      };\n      return XliffParser;\n  }());\n  // Convert ml nodes (xliff syntax) to i18n nodes\n  var XmlToI18n = (function () {\n      function XmlToI18n() {\n      }\n      XmlToI18n.prototype.convert = function (nodes) {\n          this._errors = [];\n          return {\n              i18nNodes: visitAll(this, nodes),\n              errors: this._errors,\n          };\n      };\n      XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };\n      XmlToI18n.prototype.visitElement = function (el, context) {\n          if (el.name === _PLACEHOLDER_TAG) {\n              var nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });\n              if (nameAttr) {\n                  return new Placeholder('', nameAttr.value, el.sourceSpan);\n              }\n              this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"id\\\" attribute\");\n          }\n          else {\n              this._addError(el, \"Unexpected tag\");\n          }\n      };\n      XmlToI18n.prototype.visitExpansion = function (icu, context) { };\n      XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) { };\n      XmlToI18n.prototype.visitComment = function (comment, context) { };\n      XmlToI18n.prototype.visitAttribute = function (attribute, context) { };\n      XmlToI18n.prototype._addError = function (node, message) {\n          this._errors.push(new I18nError(node.sourceSpan, message));\n      };\n      return XmlToI18n;\n  }());\n  function getCtypeForTag(tag) {\n      switch (tag.toLowerCase()) {\n          case 'br':\n              return 'lb';\n          case 'img':\n              return 'image';\n          default:\n              return \"x-\" + tag;\n      }\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$11 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _MESSAGES_TAG = 'messagebundle';\n  var _MESSAGE_TAG = 'msg';\n  var _PLACEHOLDER_TAG$1 = 'ph';\n  var _EXEMPLE_TAG = 'ex';\n  var _DOCTYPE = \"<!ELEMENT messagebundle (msg)*>\\n<!ATTLIST messagebundle class CDATA #IMPLIED>\\n\\n<!ELEMENT msg (#PCDATA|ph|source)*>\\n<!ATTLIST msg id CDATA #IMPLIED>\\n<!ATTLIST msg seq CDATA #IMPLIED>\\n<!ATTLIST msg name CDATA #IMPLIED>\\n<!ATTLIST msg desc CDATA #IMPLIED>\\n<!ATTLIST msg meaning CDATA #IMPLIED>\\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\\n<!ATTLIST msg xml:space (default|preserve) \\\"default\\\">\\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\\n\\n<!ELEMENT source (#PCDATA)>\\n\\n<!ELEMENT ph (#PCDATA|ex)*>\\n<!ATTLIST ph name CDATA #REQUIRED>\\n\\n<!ELEMENT ex (#PCDATA)>\";\n  var Xmb = (function (_super) {\n      __extends$11(Xmb, _super);\n      function Xmb() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      Xmb.prototype.write = function (messages, locale) {\n          var exampleVisitor = new ExampleVisitor();\n          var visitor = new _Visitor$2();\n          var rootNode = new Tag(_MESSAGES_TAG);\n          messages.forEach(function (message) {\n              var attrs = { id: message.id };\n              if (message.description) {\n                  attrs['desc'] = message.description;\n              }\n              if (message.meaning) {\n                  attrs['meaning'] = message.meaning;\n              }\n              rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));\n          });\n          rootNode.children.push(new CR());\n          return serialize([\n              new Declaration({ version: '1.0', encoding: 'UTF-8' }),\n              new CR(),\n              new Doctype(_MESSAGES_TAG, _DOCTYPE),\n              new CR(),\n              exampleVisitor.addDefaultExamples(rootNode),\n              new CR(),\n          ]);\n      };\n      Xmb.prototype.load = function (content, url) {\n          throw new Error('Unsupported');\n      };\n      Xmb.prototype.digest = function (message) { return digest$1(message); };\n      Xmb.prototype.createNameMapper = function (message) {\n          return new SimplePlaceholderMapper(message, toPublicName);\n      };\n      return Xmb;\n  }(Serializer));\n  var _Visitor$2 = (function () {\n      function _Visitor() {\n      }\n      _Visitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };\n      _Visitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          var nodes = [];\n          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n          return nodes;\n      };\n      _Visitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          var nodes = [new Text$2(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n          Object.keys(icu.cases).forEach(function (c) {\n              nodes.push.apply(nodes, [new Text$2(c + \" {\")].concat(icu.cases[c].visit(_this), [new Text$2(\"} \")]));\n          });\n          nodes.push(new Text$2(\"}\"));\n          return nodes;\n      };\n      _Visitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(\"<\" + ph.tag + \">\")]);\n          var startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);\n          if (ph.isVoid) {\n              // void tags have no children nor closing tags\n              return [startTagPh];\n          }\n          var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(\"</\" + ph.tag + \">\")]);\n          var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);\n          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n      };\n      _Visitor.prototype.visitPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];\n      };\n      _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];\n      };\n      _Visitor.prototype.serialize = function (nodes) {\n          var _this = this;\n          return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n      };\n      return _Visitor;\n  }());\n  function digest$1(message) {\n      return decimalDigest(message);\n  }\n  // TC requires at least one non-empty example on placeholders\n  var ExampleVisitor = (function () {\n      function ExampleVisitor() {\n      }\n      ExampleVisitor.prototype.addDefaultExamples = function (node) {\n          node.visit(this);\n          return node;\n      };\n      ExampleVisitor.prototype.visitTag = function (tag) {\n          var _this = this;\n          if (tag.name === _PLACEHOLDER_TAG$1) {\n              if (!tag.children || tag.children.length == 0) {\n                  var exText = new Text$2(tag.attrs['name'] || '...');\n                  tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];\n              }\n          }\n          else if (tag.children) {\n              tag.children.forEach(function (node) { return node.visit(_this); });\n          }\n      };\n      ExampleVisitor.prototype.visitText = function (text) { };\n      ExampleVisitor.prototype.visitDeclaration = function (decl) { };\n      ExampleVisitor.prototype.visitDoctype = function (doctype) { };\n      return ExampleVisitor;\n  }());\n  // XMB/XTB placeholders can only contain A-Z, 0-9 and _\n  function toPublicName(internalName) {\n      return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$12 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _TRANSLATIONS_TAG = 'translationbundle';\n  var _TRANSLATION_TAG = 'translation';\n  var _PLACEHOLDER_TAG$2 = 'ph';\n  var Xtb = (function (_super) {\n      __extends$12(Xtb, _super);\n      function Xtb() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      Xtb.prototype.write = function (messages, locale) { throw new Error('Unsupported'); };\n      Xtb.prototype.load = function (content, url) {\n          // xtb to xml nodes\n          var xtbParser = new XtbParser();\n          var _a = xtbParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n          // xml nodes to i18n nodes\n          var i18nNodesByMsgId = {};\n          var converter = new XmlToI18n$1();\n          // Because we should be able to load xtb files that rely on features not supported by angular,\n          // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n          // converted\n          Object.keys(msgIdToHtml).forEach(function (msgId) {\n              var valueFn = function () {\n                  var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, errors = _a.errors;\n                  if (errors.length) {\n                      throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n                  }\n                  return i18nNodes;\n              };\n              createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n          });\n          if (errors.length) {\n              throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n          }\n          return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };\n      };\n      Xtb.prototype.digest = function (message) { return digest$1(message); };\n      Xtb.prototype.createNameMapper = function (message) {\n          return new SimplePlaceholderMapper(message, toPublicName);\n      };\n      return Xtb;\n  }(Serializer));\n  function createLazyProperty(messages, id, valueFn) {\n      Object.defineProperty(messages, id, {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n              var value = valueFn();\n              Object.defineProperty(messages, id, { enumerable: true, value: value });\n              return value;\n          },\n          set: function (_) { throw new Error('Could not overwrite an XTB translation'); },\n      });\n  }\n  // Extract messages as xml nodes from the xtb file\n  var XtbParser = (function () {\n      function XtbParser() {\n          this._locale = null;\n      }\n      XtbParser.prototype.parse = function (xtb, url) {\n          this._bundleDepth = 0;\n          this._msgIdToHtml = {};\n          // We can not parse the ICU messages at this point as some messages might not originate\n          // from Angular that could not be lex'd.\n          var xml = new XmlParser().parse(xtb, url, false);\n          this._errors = xml.errors;\n          visitAll(this, xml.rootNodes);\n          return {\n              msgIdToHtml: this._msgIdToHtml,\n              errors: this._errors,\n              locale: this._locale,\n          };\n      };\n      XtbParser.prototype.visitElement = function (element, context) {\n          switch (element.name) {\n              case _TRANSLATIONS_TAG:\n                  this._bundleDepth++;\n                  if (this._bundleDepth > 1) {\n                      this._addError(element, \"<\" + _TRANSLATIONS_TAG + \"> elements can not be nested\");\n                  }\n                  var langAttr = element.attrs.find(function (attr) { return attr.name === 'lang'; });\n                  if (langAttr) {\n                      this._locale = langAttr.value;\n                  }\n                  visitAll(this, element.children, null);\n                  this._bundleDepth--;\n                  break;\n              case _TRANSLATION_TAG:\n                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                  if (!idAttr) {\n                      this._addError(element, \"<\" + _TRANSLATION_TAG + \"> misses the \\\"id\\\" attribute\");\n                  }\n                  else {\n                      var id = idAttr.value;\n                      if (this._msgIdToHtml.hasOwnProperty(id)) {\n                          this._addError(element, \"Duplicated translations for msg \" + id);\n                      }\n                      else {\n                          var innerTextStart = element.startSourceSpan.end.offset;\n                          var innerTextEnd = element.endSourceSpan.start.offset;\n                          var content = element.startSourceSpan.start.file.content;\n                          var innerText = content.slice(innerTextStart, innerTextEnd);\n                          this._msgIdToHtml[id] = innerText;\n                      }\n                  }\n                  break;\n              default:\n                  this._addError(element, 'Unexpected tag');\n          }\n      };\n      XtbParser.prototype.visitAttribute = function (attribute, context) { };\n      XtbParser.prototype.visitText = function (text, context) { };\n      XtbParser.prototype.visitComment = function (comment, context) { };\n      XtbParser.prototype.visitExpansion = function (expansion, context) { };\n      XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { };\n      XtbParser.prototype._addError = function (node, message) {\n          this._errors.push(new I18nError(node.sourceSpan, message));\n      };\n      return XtbParser;\n  }());\n  // Convert ml nodes (xtb syntax) to i18n nodes\n  var XmlToI18n$1 = (function () {\n      function XmlToI18n() {\n      }\n      XmlToI18n.prototype.convert = function (message, url) {\n          var xmlIcu = new XmlParser().parse(message, url, true);\n          this._errors = xmlIcu.errors;\n          var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n              [] :\n              visitAll(this, xmlIcu.rootNodes);\n          return {\n              i18nNodes: i18nNodes,\n              errors: this._errors,\n          };\n      };\n      XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };\n      XmlToI18n.prototype.visitExpansion = function (icu, context) {\n          var caseMap = {};\n          visitAll(this, icu.cases).forEach(function (c) {\n              caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n          });\n          return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n      };\n      XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {\n          return {\n              value: icuCase.value,\n              nodes: visitAll(this, icuCase.expression),\n          };\n      };\n      XmlToI18n.prototype.visitElement = function (el, context) {\n          if (el.name === _PLACEHOLDER_TAG$2) {\n              var nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });\n              if (nameAttr) {\n                  return new Placeholder('', nameAttr.value, el.sourceSpan);\n              }\n              this._addError(el, \"<\" + _PLACEHOLDER_TAG$2 + \"> misses the \\\"name\\\" attribute\");\n          }\n          else {\n              this._addError(el, \"Unexpected tag\");\n          }\n      };\n      XmlToI18n.prototype.visitComment = function (comment, context) { };\n      XmlToI18n.prototype.visitAttribute = function (attribute, context) { };\n      XmlToI18n.prototype._addError = function (node, message) {\n          this._errors.push(new I18nError(node.sourceSpan, message));\n      };\n      return XmlToI18n;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$13 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var HtmlParser = (function (_super) {\n      __extends$13(HtmlParser, _super);\n      function HtmlParser() {\n          return _super.call(this, getHtmlTagDefinition) || this;\n      }\n      HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);\n      };\n      return HtmlParser;\n  }(Parser$1));\n  HtmlParser.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  HtmlParser.ctorParameters = function () { return []; };\n\n  /**\n   * A container for translated messages\n   */\n  var TranslationBundle = (function () {\n      function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {\n          if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }\n          if (missingTranslationStrategy === void 0) { missingTranslationStrategy = _angular_core.MissingTranslationStrategy.Warning; }\n          this._i18nNodesByMsgId = _i18nNodesByMsgId;\n          this.digest = digest;\n          this.mapperFactory = mapperFactory;\n          this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);\n      }\n      // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n      TranslationBundle.load = function (content, url, serializer, missingTranslationStrategy, console) {\n          var _a = serializer.load(content, url), locale = _a.locale, i18nNodesByMsgId = _a.i18nNodesByMsgId;\n          var digestFn = function (m) { return serializer.digest(m); };\n          var mapperFactory = function (m) { return serializer.createNameMapper(m); };\n          return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n      };\n      // Returns the translation as HTML nodes from the given source message.\n      TranslationBundle.prototype.get = function (srcMsg) {\n          var html = this._i18nToHtml.convert(srcMsg);\n          if (html.errors.length) {\n              throw new Error(html.errors.join('\\n'));\n          }\n          return html.nodes;\n      };\n      TranslationBundle.prototype.has = function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };\n      return TranslationBundle;\n  }());\n  var I18nToHtmlVisitor = (function () {\n      function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n          if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }\n          this._i18nNodesByMsgId = _i18nNodesByMsgId;\n          this._locale = _locale;\n          this._digest = _digest;\n          this._mapperFactory = _mapperFactory;\n          this._missingTranslationStrategy = _missingTranslationStrategy;\n          this._console = _console;\n          this._contextStack = [];\n          this._errors = [];\n      }\n      I18nToHtmlVisitor.prototype.convert = function (srcMsg) {\n          this._contextStack.length = 0;\n          this._errors.length = 0;\n          // i18n to text\n          var text = this._convertToText(srcMsg);\n          // text to html\n          var url = srcMsg.nodes[0].sourceSpan.start.file.url;\n          var html = new HtmlParser().parse(text, url, true);\n          return {\n              nodes: html.rootNodes,\n              errors: this._errors.concat(html.errors),\n          };\n      };\n      I18nToHtmlVisitor.prototype.visitText = function (text, context) { return text.value; };\n      I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          return container.children.map(function (n) { return n.visit(_this); }).join('');\n      };\n      I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          var cases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n          // TODO(vicb): Once all format switch to using expression placeholders\n          // we should throw when the placeholder is not in the source message\n          var exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n              this._srcMsg.placeholders[icu.expression] :\n              icu.expression;\n          return \"{\" + exp + \", \" + icu.type + \", \" + cases.join(' ') + \"}\";\n      };\n      I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {\n          var phName = this._mapper(ph.name);\n          if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n              return this._srcMsg.placeholders[phName];\n          }\n          if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n              return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n          }\n          this._addError(ph, \"Unknown placeholder \\\"\" + ph.name + \"\\\"\");\n          return '';\n      };\n      // Loaded message contains only placeholders (vs tag and icu placeholders).\n      // However when a translation can not be found, we need to serialize the source message\n      // which can contain tag placeholders\n      I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var _this = this;\n          var tag = \"\" + ph.tag;\n          var attrs = Object.keys(ph.attrs).map(function (name) { return name + \"=\\\"\" + ph.attrs[name] + \"\\\"\"; }).join(' ');\n          if (ph.isVoid) {\n              return \"<\" + tag + \" \" + attrs + \"/>\";\n          }\n          var children = ph.children.map(function (c) { return c.visit(_this); }).join('');\n          return \"<\" + tag + \" \" + attrs + \">\" + children + \"</\" + tag + \">\";\n      };\n      // Loaded message contains only placeholders (vs tag and icu placeholders).\n      // However when a translation can not be found, we need to serialize the source message\n      // which can contain tag placeholders\n      I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          // An ICU placeholder references the source message to be serialized\n          return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n      };\n      /**\n       * Convert a source message to a translated text string:\n       * - text nodes are replaced with their translation,\n       * - placeholders are replaced with their content,\n       * - ICU nodes are converted to ICU expressions.\n       */\n      I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {\n          var _this = this;\n          var id = this._digest(srcMsg);\n          var mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n          var nodes;\n          this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\n          this._srcMsg = srcMsg;\n          if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n              // When there is a translation use its nodes as the source\n              // And create a mapper to convert serialized placeholder names to internal names\n              nodes = this._i18nNodesByMsgId[id];\n              this._mapper = function (name) { return mapper ? mapper.toInternalName(name) : name; };\n          }\n          else {\n              // When no translation has been found\n              // - report an error / a warning / nothing,\n              // - use the nodes from the original message\n              // - placeholders are already internal and need no mapper\n              if (this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Error) {\n                  var ctx = this._locale ? \" for locale \\\"\" + this._locale + \"\\\"\" : '';\n                  this._addError(srcMsg.nodes[0], \"Missing translation for message \\\"\" + id + \"\\\"\" + ctx);\n              }\n              else if (this._console &&\n                  this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Warning) {\n                  var ctx = this._locale ? \" for locale \\\"\" + this._locale + \"\\\"\" : '';\n                  this._console.warn(\"Missing translation for message \\\"\" + id + \"\\\"\" + ctx);\n              }\n              nodes = srcMsg.nodes;\n              this._mapper = function (name) { return name; };\n          }\n          var text = nodes.map(function (node) { return node.visit(_this); }).join('');\n          var context = this._contextStack.pop();\n          this._srcMsg = context.msg;\n          this._mapper = context.mapper;\n          return text;\n      };\n      I18nToHtmlVisitor.prototype._addError = function (el, msg) {\n          this._errors.push(new I18nError(el.sourceSpan, msg));\n      };\n      return I18nToHtmlVisitor;\n  }());\n\n  var I18NHtmlParser = (function () {\n      function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {\n          if (missingTranslation === void 0) { missingTranslation = _angular_core.MissingTranslationStrategy.Warning; }\n          this._htmlParser = _htmlParser;\n          if (translations) {\n              var serializer = createSerializer(translationsFormat);\n              this._translationBundle =\n                  TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n          }\n      }\n      I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);\n          if (!this._translationBundle) {\n              // Do not enable i18n when no translation bundle is provided\n              return parseResult;\n          }\n          if (parseResult.errors.length) {\n              return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n          }\n          return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n      };\n      return I18NHtmlParser;\n  }());\n  function createSerializer(format) {\n      format = (format || 'xlf').toLowerCase();\n      switch (format) {\n          case 'xmb':\n              return new Xmb();\n          case 'xtb':\n              return new Xtb();\n          case 'xliff':\n          case 'xlf':\n          default:\n              return new Xliff();\n      }\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$14 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  // http://cldr.unicode.org/index/cldr-spec/plural-rules\n  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\n  /**\n   * Expands special forms into elements.\n   *\n   * For example,\n   *\n   * ```\n   * { messages.length, plural,\n   *   =0 {zero}\n   *   =1 {one}\n   *   other {more than one}\n   * }\n   * ```\n   *\n   * will be expanded into\n   *\n   * ```\n   * <ng-container [ngPlural]=\"messages.length\">\n   *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n   *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n   *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n   * </ng-container>\n   * ```\n   */\n  function expandNodes(nodes) {\n      var expander = new _Expander();\n      return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);\n  }\n  var ExpansionResult = (function () {\n      function ExpansionResult(nodes, expanded, errors) {\n          this.nodes = nodes;\n          this.expanded = expanded;\n          this.errors = errors;\n      }\n      return ExpansionResult;\n  }());\n  var ExpansionError = (function (_super) {\n      __extends$14(ExpansionError, _super);\n      function ExpansionError(span, errorMsg) {\n          return _super.call(this, span, errorMsg) || this;\n      }\n      return ExpansionError;\n  }(ParseError));\n  /**\n   * Expand expansion forms (plural, select) to directives\n   *\n   * @internal\n   */\n  var _Expander = (function () {\n      function _Expander() {\n          this.isExpanded = false;\n          this.errors = [];\n      }\n      _Expander.prototype.visitElement = function (element, context) {\n          return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n      };\n      _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };\n      _Expander.prototype.visitText = function (text, context) { return text; };\n      _Expander.prototype.visitComment = function (comment, context) { return comment; };\n      _Expander.prototype.visitExpansion = function (icu, context) {\n          this.isExpanded = true;\n          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n              _expandDefaultForm(icu, this.errors);\n      };\n      _Expander.prototype.visitExpansionCase = function (icuCase, context) {\n          throw new Error('Should not be reached');\n      };\n      return _Expander;\n  }());\n  // Plural forms are expanded to `NgPlural` and `NgPluralCase`s\n  function _expandPluralForm(ast, errors) {\n      var children = ast.cases.map(function (c) {\n          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n              errors.push(new ExpansionError(c.valueSourceSpan, \"Plural cases should be \\\"=<number>\\\" or one of \" + PLURAL_CASES.join(\", \")));\n          }\n          var expansionResult = expandNodes(c.expression);\n          errors.push.apply(errors, expansionResult.errors);\n          return new Element(\"ng-template\", [new Attribute$1('ngPluralCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n      });\n      var switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\n      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n  }\n  // ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitychCase`s\n  function _expandDefaultForm(ast, errors) {\n      var children = ast.cases.map(function (c) {\n          var expansionResult = expandNodes(c.expression);\n          errors.push.apply(errors, expansionResult.errors);\n          if (c.value === 'other') {\n              // other is the default case when no values match\n              return new Element(\"ng-template\", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n          }\n          return new Element(\"ng-template\", [new Attribute$1('ngSwitchCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n      });\n      var switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\n      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$15 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var ProviderError = (function (_super) {\n      __extends$15(ProviderError, _super);\n      function ProviderError(message, span) {\n          return _super.call(this, span, message) || this;\n      }\n      return ProviderError;\n  }(ParseError));\n  var ProviderViewContext = (function () {\n      function ProviderViewContext(component, sourceSpan) {\n          var _this = this;\n          this.component = component;\n          this.sourceSpan = sourceSpan;\n          this.errors = [];\n          this.viewQueries = _getViewQueries(component);\n          this.viewProviders = new Map();\n          component.viewProviders.forEach(function (provider) {\n              if (isBlank(_this.viewProviders.get(tokenReference(provider.token)))) {\n                  _this.viewProviders.set(tokenReference(provider.token), true);\n              }\n          });\n      }\n      return ProviderViewContext;\n  }());\n  var ProviderElementContext = (function () {\n      function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {\n          var _this = this;\n          this.viewContext = viewContext;\n          this._parent = _parent;\n          this._isViewRoot = _isViewRoot;\n          this._directiveAsts = _directiveAsts;\n          this._sourceSpan = _sourceSpan;\n          this._transformedProviders = new Map();\n          this._seenProviders = new Map();\n          this._hasViewContainer = false;\n          this._queriedTokens = new Map();\n          this._attrs = {};\n          attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });\n          var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });\n          this._allProviders =\n              _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n          this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\n          Array.from(this._allProviders.values()).forEach(function (provider) {\n              _this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);\n          });\n          if (isTemplate) {\n              var templateRefId = createIdentifierToken(Identifiers.TemplateRef);\n              this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\n          }\n          refs.forEach(function (refAst) {\n              var defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);\n              _this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this._queriedTokens);\n          });\n          if (this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) {\n              this._hasViewContainer = true;\n          }\n          // create the providers that we know are eager first\n          Array.from(this._allProviders.values()).forEach(function (provider) {\n              var eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));\n              if (eager) {\n                  _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n              }\n          });\n      }\n      ProviderElementContext.prototype.afterElement = function () {\n          var _this = this;\n          // collect lazy providers\n          Array.from(this._allProviders.values()).forEach(function (provider) {\n              _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n          });\n      };\n      Object.defineProperty(ProviderElementContext.prototype, \"transformProviders\", {\n          get: function () {\n              return Array.from(this._transformedProviders.values());\n          },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(ProviderElementContext.prototype, \"transformedDirectiveAsts\", {\n          get: function () {\n              var sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });\n              var sortedDirectives = this._directiveAsts.slice();\n              sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -\n                  sortedProviderTypes.indexOf(dir2.directive.type); });\n              return sortedDirectives;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(ProviderElementContext.prototype, \"transformedHasViewContainer\", {\n          get: function () { return this._hasViewContainer; },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(ProviderElementContext.prototype, \"queryMatches\", {\n          get: function () {\n              var allMatches = [];\n              this._queriedTokens.forEach(function (matches) { allMatches.push.apply(allMatches, matches); });\n              return allMatches;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      ProviderElementContext.prototype._addQueryReadsTo = function (token, defaultValue, queryReadTokens) {\n          this._getQueriesFor(token).forEach(function (query) {\n              var queryValue = query.meta.read || defaultValue;\n              var tokenRef = tokenReference(queryValue);\n              var queryMatches = queryReadTokens.get(tokenRef);\n              if (!queryMatches) {\n                  queryMatches = [];\n                  queryReadTokens.set(tokenRef, queryMatches);\n              }\n              queryMatches.push({ queryId: query.queryId, value: queryValue });\n          });\n      };\n      ProviderElementContext.prototype._getQueriesFor = function (token) {\n          var result = [];\n          var currentEl = this;\n          var distance = 0;\n          var queries;\n          while (currentEl !== null) {\n              queries = currentEl._contentQueries.get(tokenReference(token));\n              if (queries) {\n                  result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));\n              }\n              if (currentEl._directiveAsts.length > 0) {\n                  distance++;\n              }\n              currentEl = currentEl._parent;\n          }\n          queries = this.viewContext.viewQueries.get(tokenReference(token));\n          if (queries) {\n              result.push.apply(result, queries);\n          }\n          return result;\n      };\n      ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {\n          var _this = this;\n          var resolvedProvider = this._allProviders.get(tokenReference(token));\n          if (!resolvedProvider || ((requestingProviderType === exports.ProviderAstType.Directive ||\n              requestingProviderType === exports.ProviderAstType.PublicService) &&\n              resolvedProvider.providerType === exports.ProviderAstType.PrivateService) ||\n              ((requestingProviderType === exports.ProviderAstType.PrivateService ||\n                  requestingProviderType === exports.ProviderAstType.PublicService) &&\n                  resolvedProvider.providerType === exports.ProviderAstType.Builtin)) {\n              return null;\n          }\n          var transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n          if (transformedProviderAst) {\n              return transformedProviderAst;\n          }\n          if (isPresent(this._seenProviders.get(tokenReference(token)))) {\n              this.viewContext.errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + tokenName(token), this._sourceSpan));\n              return null;\n          }\n          this._seenProviders.set(tokenReference(token), true);\n          var transformedProviders = resolvedProvider.providers.map(function (provider) {\n              var transformedUseValue = provider.useValue;\n              var transformedUseExisting = provider.useExisting;\n              var transformedDeps;\n              if (isPresent(provider.useExisting)) {\n                  var existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);\n                  if (isPresent(existingDiDep.token)) {\n                      transformedUseExisting = existingDiDep.token;\n                  }\n                  else {\n                      transformedUseExisting = null;\n                      transformedUseValue = existingDiDep.value;\n                  }\n              }\n              else if (provider.useFactory) {\n                  var deps = provider.deps || provider.useFactory.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });\n              }\n              else if (provider.useClass) {\n                  var deps = provider.deps || provider.useClass.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });\n              }\n              return _transformProvider(provider, {\n                  useExisting: transformedUseExisting,\n                  useValue: transformedUseValue,\n                  deps: transformedDeps\n              });\n          });\n          transformedProviderAst =\n              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n          this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n          return transformedProviderAst;\n      };\n      ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {\n          if (eager === void 0) { eager = null; }\n          if (dep.isAttribute) {\n              var attrValue = this._attrs[dep.token.value];\n              return { isValue: true, value: attrValue == null ? null : attrValue };\n          }\n          if (isPresent(dep.token)) {\n              // access builtints\n              if ((requestingProviderType === exports.ProviderAstType.Directive ||\n                  requestingProviderType === exports.ProviderAstType.Component)) {\n                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||\n                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||\n                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||\n                      tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {\n                      return dep;\n                  }\n                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {\n                      this._hasViewContainer = true;\n                  }\n              }\n              // access the injector\n              if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {\n                  return dep;\n              }\n              // access providers\n              if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {\n                  return dep;\n              }\n          }\n          return null;\n      };\n      ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {\n          if (eager === void 0) { eager = null; }\n          var currElement = this;\n          var currEager = eager;\n          var result = null;\n          if (!dep.isSkipSelf) {\n              result = this._getLocalDependency(requestingProviderType, dep, eager);\n          }\n          if (dep.isSelf) {\n              if (!result && dep.isOptional) {\n                  result = { isValue: true, value: null };\n              }\n          }\n          else {\n              // check parent elements\n              while (!result && currElement._parent) {\n                  var prevElement = currElement;\n                  currElement = currElement._parent;\n                  if (prevElement._isViewRoot) {\n                      currEager = false;\n                  }\n                  result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);\n              }\n              // check @Host restriction\n              if (!result) {\n                  if (!dep.isHost || this.viewContext.component.isHost ||\n                      this.viewContext.component.type.reference === tokenReference(dep.token) ||\n                      isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {\n                      result = dep;\n                  }\n                  else {\n                      result = dep.isOptional ? result = { isValue: true, value: null } : null;\n                  }\n              }\n          }\n          if (!result) {\n              this.viewContext.errors.push(new ProviderError(\"No provider for \" + tokenName(dep.token), this._sourceSpan));\n          }\n          return result;\n      };\n      return ProviderElementContext;\n  }());\n  var NgModuleProviderAnalyzer = (function () {\n      function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {\n          var _this = this;\n          this._transformedProviders = new Map();\n          this._seenProviders = new Map();\n          this._errors = [];\n          this._allProviders = new Map();\n          ngModule.transitiveModule.modules.forEach(function (ngModuleType) {\n              var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };\n              _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);\n          });\n          _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\n      }\n      NgModuleProviderAnalyzer.prototype.parse = function () {\n          var _this = this;\n          Array.from(this._allProviders.values()).forEach(function (provider) {\n              _this._getOrCreateLocalProvider(provider.token, provider.eager);\n          });\n          if (this._errors.length > 0) {\n              var errorString = this._errors.join('\\n');\n              throw new Error(\"Provider parse errors:\\n\" + errorString);\n          }\n          return Array.from(this._transformedProviders.values());\n      };\n      NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {\n          var _this = this;\n          var resolvedProvider = this._allProviders.get(tokenReference(token));\n          if (!resolvedProvider) {\n              return null;\n          }\n          var transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n          if (transformedProviderAst) {\n              return transformedProviderAst;\n          }\n          if (isPresent(this._seenProviders.get(tokenReference(token)))) {\n              this._errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + tokenName(token), resolvedProvider.sourceSpan));\n              return null;\n          }\n          this._seenProviders.set(tokenReference(token), true);\n          var transformedProviders = resolvedProvider.providers.map(function (provider) {\n              var transformedUseValue = provider.useValue;\n              var transformedUseExisting = provider.useExisting;\n              var transformedDeps;\n              if (isPresent(provider.useExisting)) {\n                  var existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);\n                  if (isPresent(existingDiDep.token)) {\n                      transformedUseExisting = existingDiDep.token;\n                  }\n                  else {\n                      transformedUseExisting = null;\n                      transformedUseValue = existingDiDep.value;\n                  }\n              }\n              else if (provider.useFactory) {\n                  var deps = provider.deps || provider.useFactory.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n              }\n              else if (provider.useClass) {\n                  var deps = provider.deps || provider.useClass.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n              }\n              return _transformProvider(provider, {\n                  useExisting: transformedUseExisting,\n                  useValue: transformedUseValue,\n                  deps: transformedDeps\n              });\n          });\n          transformedProviderAst =\n              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n          this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n          return transformedProviderAst;\n      };\n      NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {\n          if (eager === void 0) { eager = null; }\n          var foundLocal = false;\n          if (!dep.isSkipSelf && isPresent(dep.token)) {\n              // access the injector\n              if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||\n                  tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {\n                  foundLocal = true;\n              }\n              else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {\n                  foundLocal = true;\n              }\n          }\n          var result = dep;\n          if (dep.isSelf && !foundLocal) {\n              if (dep.isOptional) {\n                  result = { isValue: true, value: null };\n              }\n              else {\n                  this._errors.push(new ProviderError(\"No provider for \" + tokenName(dep.token), requestorSourceSpan));\n              }\n          }\n          return result;\n      };\n      return NgModuleProviderAnalyzer;\n  }());\n  function _transformProvider(provider, _a) {\n      var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;\n      return {\n          token: provider.token,\n          useClass: provider.useClass,\n          useExisting: useExisting,\n          useFactory: provider.useFactory,\n          useValue: useValue,\n          deps: deps,\n          multi: provider.multi\n      };\n  }\n  function _transformProviderAst(provider, _a) {\n      var eager = _a.eager, providers = _a.providers;\n      return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\n  }\n  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {\n      var providersByToken = new Map();\n      directives.forEach(function (directive) {\n          var dirProvider = { token: { identifier: directive.type }, useClass: directive.type };\n          _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);\n      });\n      // Note: directives need to be able to overwrite providers of a component!\n      var directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));\n      directivesWithComponentFirst.forEach(function (directive) {\n          _resolveProviders(directive.providers, exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);\n          _resolveProviders(directive.viewProviders, exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);\n      });\n      return providersByToken;\n  }\n  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {\n      providers.forEach(function (provider) {\n          var resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n          if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {\n              targetErrors.push(new ProviderError(\"Mixing multi and non multi provider is not possible for token \" + tokenName(resolvedProvider.token), sourceSpan));\n          }\n          if (!resolvedProvider) {\n              var lifecycleHooks = provider.token.identifier &&\n                  provider.token.identifier.lifecycleHooks ?\n                  provider.token.identifier.lifecycleHooks :\n                  [];\n              resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);\n              targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n          }\n          else {\n              if (!provider.multi) {\n                  resolvedProvider.providers.length = 0;\n              }\n              resolvedProvider.providers.push(provider);\n          }\n      });\n  }\n  function _getViewQueries(component) {\n      // Note: queries start with id 1 so we can use the number in a Bloom filter!\n      var viewQueryId = 1;\n      var viewQueries = new Map();\n      if (component.viewQueries) {\n          component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }); });\n      }\n      return viewQueries;\n  }\n  function _getContentQueries(contentQueryStartId, directives) {\n      var contentQueryId = contentQueryStartId;\n      var contentQueries = new Map();\n      directives.forEach(function (directive, directiveIndex) {\n          if (directive.queries) {\n              directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }); });\n          }\n      });\n      return contentQueries;\n  }\n  function _addQueryToTokenMap(map, query) {\n      query.meta.selectors.forEach(function (token) {\n          var entry = map.get(tokenReference(token));\n          if (!entry) {\n              entry = [];\n              map.set(tokenReference(token), entry);\n          }\n          entry.push(query);\n      });\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var ElementSchemaRegistry = (function () {\n      function ElementSchemaRegistry() {\n      }\n      return ElementSchemaRegistry;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var StyleWithImports = (function () {\n      function StyleWithImports(style, styleUrls) {\n          this.style = style;\n          this.styleUrls = styleUrls;\n      }\n      return StyleWithImports;\n  }());\n  function isStyleUrlResolvable(url) {\n      if (url == null || url.length === 0 || url[0] == '/')\n          return false;\n      var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n      return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n  }\n  /**\n   * Rewrites stylesheets by resolving and removing the @import urls that\n   * are either relative or don't have a `package:` scheme\n   */\n  function extractStyleUrls(resolver, baseUrl, cssText) {\n      var foundUrls = [];\n      var modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {\n          var m = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              m[_i] = arguments[_i];\n          }\n          var url = m[1] || m[2];\n          if (!isStyleUrlResolvable(url)) {\n              // Do not attempt to resolve non-package absolute URLs with URI scheme\n              return m[0];\n          }\n          foundUrls.push(resolver.resolve(baseUrl, url));\n          return '';\n      });\n      return new StyleWithImports(modifiedCssText, foundUrls);\n  }\n  var CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\n  var CSS_COMMENT_REGEXP = /\\/\\*.+?\\*\\//g;\n  var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$16 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var PROPERTY_PARTS_SEPARATOR = '.';\n  var ATTRIBUTE_PREFIX = 'attr';\n  var CLASS_PREFIX = 'class';\n  var STYLE_PREFIX = 'style';\n  var ANIMATE_PROP_PREFIX = 'animate-';\n  var BoundPropertyType;\n  (function (BoundPropertyType) {\n      BoundPropertyType[BoundPropertyType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n      BoundPropertyType[BoundPropertyType[\"LITERAL_ATTR\"] = 1] = \"LITERAL_ATTR\";\n      BoundPropertyType[BoundPropertyType[\"ANIMATION\"] = 2] = \"ANIMATION\";\n  })(BoundPropertyType || (BoundPropertyType = {}));\n  /**\n   * Represents a parsed property.\n   */\n  var BoundProperty = (function () {\n      function BoundProperty(name, expression, type, sourceSpan) {\n          this.name = name;\n          this.expression = expression;\n          this.type = type;\n          this.sourceSpan = sourceSpan;\n      }\n      Object.defineProperty(BoundProperty.prototype, \"isLiteral\", {\n          get: function () { return this.type === BoundPropertyType.LITERAL_ATTR; },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(BoundProperty.prototype, \"isAnimation\", {\n          get: function () { return this.type === BoundPropertyType.ANIMATION; },\n          enumerable: true,\n          configurable: true\n      });\n      return BoundProperty;\n  }());\n  /**\n   * Parses bindings in templates and in the directive host area.\n   */\n  var BindingParser = (function () {\n      function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {\n          var _this = this;\n          this._exprParser = _exprParser;\n          this._interpolationConfig = _interpolationConfig;\n          this._schemaRegistry = _schemaRegistry;\n          this._targetErrors = _targetErrors;\n          this.pipesByName = new Map();\n          this._usedPipes = new Map();\n          pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });\n      }\n      BindingParser.prototype.getUsedPipes = function () { return Array.from(this._usedPipes.values()); };\n      BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, elementSelector, sourceSpan) {\n          var _this = this;\n          if (dirMeta.hostProperties) {\n              var boundProps_1 = [];\n              Object.keys(dirMeta.hostProperties).forEach(function (propName) {\n                  var expression = dirMeta.hostProperties[propName];\n                  if (typeof expression === 'string') {\n                      _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);\n                  }\n                  else {\n                      _this._reportError(\"Value of the host property binding \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                  }\n              });\n              return boundProps_1.map(function (prop) { return _this.createElementPropertyAst(elementSelector, prop); });\n          }\n      };\n      BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {\n          var _this = this;\n          if (dirMeta.hostListeners) {\n              var targetEventAsts_1 = [];\n              Object.keys(dirMeta.hostListeners).forEach(function (propName) {\n                  var expression = dirMeta.hostListeners[propName];\n                  if (typeof expression === 'string') {\n                      _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);\n                  }\n                  else {\n                      _this._reportError(\"Value of the host listener \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                  }\n              });\n              return targetEventAsts_1;\n          }\n      };\n      BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);\n              if (ast)\n                  this._reportExpressionParserErrors(ast.errors, sourceSpan);\n              this._checkPipes(ast, sourceSpan);\n              return ast;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n          }\n      };\n      BindingParser.prototype.parseInlineTemplateBinding = function (prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {\n          var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);\n          for (var i = 0; i < bindings.length; i++) {\n              var binding = bindings[i];\n              if (binding.keyIsVar) {\n                  targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));\n              }\n              else if (binding.expression) {\n                  this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\n              }\n              else {\n                  targetMatchableAttrs.push([binding.key, '']);\n                  this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\n              }\n          }\n      };\n      BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {\n          var _this = this;\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);\n              this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n              bindingsResult.templateBindings.forEach(function (binding) {\n                  if (binding.expression) {\n                      _this._checkPipes(binding.expression, sourceSpan);\n                  }\n              });\n              bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, exports.ParseErrorLevel.WARNING); });\n              return bindingsResult.templateBindings;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return [];\n          }\n      };\n      BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n          if (_isAnimationLabel(name)) {\n              name = name.substring(1);\n              if (value) {\n                  this._reportError(\"Assigning animation triggers via @prop=\\\"exp\\\" attributes with an expression is invalid.\" +\n                      \" Use property bindings (e.g. [@prop]=\\\"exp\\\") or use an attribute without a value (e.g. @prop) instead.\", sourceSpan, exports.ParseErrorLevel.FATAL);\n              }\n              this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\n          }\n          else {\n              targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));\n          }\n      };\n      BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {\n          var isAnimationProp = false;\n          if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n              isAnimationProp = true;\n              name = name.substring(ANIMATE_PROP_PREFIX.length);\n          }\n          else if (_isAnimationLabel(name)) {\n              isAnimationProp = true;\n              name = name.substring(1);\n          }\n          if (isAnimationProp) {\n              this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\n          }\n          else {\n              this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);\n          }\n      };\n      BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n          var expr = this.parseInterpolation(value, sourceSpan);\n          if (expr) {\n              this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n              return true;\n          }\n          return false;\n      };\n      BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {\n          targetMatchableAttrs.push([name, ast.source]);\n          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));\n      };\n      BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {\n          // This will occur when a @trigger is not paired with an expression.\n          // For animations it is valid to not have an expression since */void\n          // states will be applied by angular when the element is attached/detached\n          var ast = this._parseBinding(expression || 'null', false, sourceSpan);\n          targetMatchableAttrs.push([name, ast.source]);\n          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));\n      };\n      BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var ast = isHostBinding ?\n                  this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\n                  this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n              if (ast)\n                  this._reportExpressionParserErrors(ast.errors, sourceSpan);\n              this._checkPipes(ast, sourceSpan);\n              return ast;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n          }\n      };\n      BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {\n          if (boundProp.isAnimation) {\n              return new BoundElementPropertyAst(boundProp.name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);\n          }\n          var unit = null;\n          var bindingType;\n          var boundPropertyName = null;\n          var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n          var securityContexts;\n          // Check check for special cases (prefix style, attr, class)\n          if (parts.length > 1) {\n              if (parts[0] == ATTRIBUTE_PREFIX) {\n                  boundPropertyName = parts[1];\n                  this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n                  securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n                  var nsSeparatorIdx = boundPropertyName.indexOf(':');\n                  if (nsSeparatorIdx > -1) {\n                      var ns = boundPropertyName.substring(0, nsSeparatorIdx);\n                      var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);\n                      boundPropertyName = mergeNsAndName(ns, name_1);\n                  }\n                  bindingType = exports.PropertyBindingType.Attribute;\n              }\n              else if (parts[0] == CLASS_PREFIX) {\n                  boundPropertyName = parts[1];\n                  bindingType = exports.PropertyBindingType.Class;\n                  securityContexts = [_angular_core.SecurityContext.NONE];\n              }\n              else if (parts[0] == STYLE_PREFIX) {\n                  unit = parts.length > 2 ? parts[2] : null;\n                  boundPropertyName = parts[1];\n                  bindingType = exports.PropertyBindingType.Style;\n                  securityContexts = [_angular_core.SecurityContext.STYLE];\n              }\n          }\n          // If not a special case, use the full property name\n          if (boundPropertyName === null) {\n              boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);\n              securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);\n              bindingType = exports.PropertyBindingType.Property;\n              this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);\n          }\n          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);\n      };\n      BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n          if (_isAnimationLabel(name)) {\n              name = name.substr(1);\n              this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);\n          }\n          else {\n              this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);\n          }\n      };\n      BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {\n          var matches = splitAtPeriod(name, [name, '']);\n          var eventName = matches[0];\n          var phase = matches[1].toLowerCase();\n          if (phase) {\n              switch (phase) {\n                  case 'start':\n                  case 'done':\n                      var ast = this._parseAction(expression, sourceSpan);\n                      targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));\n                      break;\n                  default:\n                      this._reportError(\"The provided animation output phase value \\\"\" + phase + \"\\\" for \\\"@\" + eventName + \"\\\" is not supported (use start or done)\", sourceSpan);\n                      break;\n              }\n          }\n          else {\n              this._reportError(\"The animation trigger output event (@\" + eventName + \") is missing its phase value name (start or done are currently supported)\", sourceSpan);\n          }\n      };\n      BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n          // long format: 'target: eventName'\n          var _a = splitAtColon(name, [null, name]), target = _a[0], eventName = _a[1];\n          var ast = this._parseAction(expression, sourceSpan);\n          targetMatchableAttrs.push([name, ast.source]);\n          targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));\n          // Don't detect directives for event names for now,\n          // so don't add the event name to the matchableAttrs\n      };\n      BindingParser.prototype._parseAction = function (value, sourceSpan) {\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n              if (ast) {\n                  this._reportExpressionParserErrors(ast.errors, sourceSpan);\n              }\n              if (!ast || ast.ast instanceof EmptyExpr) {\n                  this._reportError(\"Empty expressions are not allowed\", sourceSpan);\n                  return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n              }\n              this._checkPipes(ast, sourceSpan);\n              return ast;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n          }\n      };\n      BindingParser.prototype._reportError = function (message, sourceSpan, level) {\n          if (level === void 0) { level = exports.ParseErrorLevel.FATAL; }\n          this._targetErrors.push(new ParseError(sourceSpan, message, level));\n      };\n      BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {\n          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\n              var error = errors_1[_i];\n              this._reportError(error.message, sourceSpan);\n          }\n      };\n      BindingParser.prototype._checkPipes = function (ast, sourceSpan) {\n          var _this = this;\n          if (ast) {\n              var collector = new PipeCollector();\n              ast.visit(collector);\n              collector.pipes.forEach(function (ast, pipeName) {\n                  var pipeMeta = _this.pipesByName.get(pipeName);\n                  if (!pipeMeta) {\n                      _this._reportError(\"The pipe '\" + pipeName + \"' could not be found\", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n                  }\n                  else {\n                      _this._usedPipes.set(pipeName, pipeMeta);\n                  }\n              });\n          }\n      };\n      /**\n       * @param propName the name of the property / attribute\n       * @param sourceSpan\n       * @param isAttr true when binding to an attribute\n       * @private\n       */\n      BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {\n          var report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n              this._schemaRegistry.validateProperty(propName);\n          if (report.error) {\n              this._reportError(report.msg, sourceSpan, exports.ParseErrorLevel.FATAL);\n          }\n      };\n      return BindingParser;\n  }());\n  var PipeCollector = (function (_super) {\n      __extends$16(PipeCollector, _super);\n      function PipeCollector() {\n          var _this = _super !== null && _super.apply(this, arguments) || this;\n          _this.pipes = new Map();\n          return _this;\n      }\n      PipeCollector.prototype.visitPipe = function (ast, context) {\n          this.pipes.set(ast.name, ast);\n          ast.exp.visit(this);\n          this.visitAll(ast.args, context);\n          return null;\n      };\n      return PipeCollector;\n  }(RecursiveAstVisitor));\n  function _isAnimationLabel(name) {\n      return name[0] == '@';\n  }\n  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n      var ctxs = [];\n      CssSelector.parse(selector).forEach(function (selector) {\n          var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n          var notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })\n              .map(function (selector) { return selector.element; }));\n          var possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });\n          ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));\n      });\n      return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n  }\n\n  var NG_CONTENT_SELECT_ATTR = 'select';\n  var NG_CONTENT_ELEMENT = 'ng-content';\n  var LINK_ELEMENT = 'link';\n  var LINK_STYLE_REL_ATTR = 'rel';\n  var LINK_STYLE_HREF_ATTR = 'href';\n  var LINK_STYLE_REL_VALUE = 'stylesheet';\n  var STYLE_ELEMENT = 'style';\n  var SCRIPT_ELEMENT = 'script';\n  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';\n  var NG_PROJECT_AS = 'ngProjectAs';\n  function preparseElement(ast) {\n      var selectAttr = null;\n      var hrefAttr = null;\n      var relAttr = null;\n      var nonBindable = false;\n      var projectAs = null;\n      ast.attrs.forEach(function (attr) {\n          var lcAttrName = attr.name.toLowerCase();\n          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n              selectAttr = attr.value;\n          }\n          else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n              hrefAttr = attr.value;\n          }\n          else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n              relAttr = attr.value;\n          }\n          else if (attr.name == NG_NON_BINDABLE_ATTR) {\n              nonBindable = true;\n          }\n          else if (attr.name == NG_PROJECT_AS) {\n              if (attr.value.length > 0) {\n                  projectAs = attr.value;\n              }\n          }\n      });\n      selectAttr = normalizeNgContentSelect(selectAttr);\n      var nodeName = ast.name.toLowerCase();\n      var type = PreparsedElementType.OTHER;\n      if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {\n          type = PreparsedElementType.NG_CONTENT;\n      }\n      else if (nodeName == STYLE_ELEMENT) {\n          type = PreparsedElementType.STYLE;\n      }\n      else if (nodeName == SCRIPT_ELEMENT) {\n          type = PreparsedElementType.SCRIPT;\n      }\n      else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n          type = PreparsedElementType.STYLESHEET;\n      }\n      return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n  }\n  var PreparsedElementType;\n  (function (PreparsedElementType) {\n      PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n      PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n      PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n      PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n      PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n  })(PreparsedElementType || (PreparsedElementType = {}));\n  var PreparsedElement = (function () {\n      function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n          this.type = type;\n          this.selectAttr = selectAttr;\n          this.hrefAttr = hrefAttr;\n          this.nonBindable = nonBindable;\n          this.projectAs = projectAs;\n      }\n      return PreparsedElement;\n  }());\n  function normalizeNgContentSelect(selectAttr) {\n      if (selectAttr === null || selectAttr.length === 0) {\n          return '*';\n      }\n      return selectAttr;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n  // Group 1 = \"bind-\"\n  var KW_BIND_IDX = 1;\n  // Group 2 = \"let-\"\n  var KW_LET_IDX = 2;\n  // Group 3 = \"ref-/#\"\n  var KW_REF_IDX = 3;\n  // Group 4 = \"on-\"\n  var KW_ON_IDX = 4;\n  // Group 5 = \"bindon-\"\n  var KW_BINDON_IDX = 5;\n  // Group 6 = \"@\"\n  var KW_AT_IDX = 6;\n  // Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\n  var IDENT_KW_IDX = 7;\n  // Group 8 = identifier inside [()]\n  var IDENT_BANANA_BOX_IDX = 8;\n  // Group 9 = identifier inside []\n  var IDENT_PROPERTY_IDX = 9;\n  // Group 10 = identifier inside ()\n  var IDENT_EVENT_IDX = 10;\n  var NG_TEMPLATE_ELEMENT = 'ng-template';\n  // deprecated in 4.x\n  var TEMPLATE_ELEMENT = 'template';\n  // deprecated in 4.x\n  var TEMPLATE_ATTR = 'template';\n  var TEMPLATE_ATTR_PREFIX = '*';\n  var CLASS_ATTR = 'class';\n  var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\n  /**\n   * Provides an array of {@link TemplateAstVisitor}s which will be used to transform\n   * parsed templates before compilation is invoked, allowing custom expression syntax\n   * and other advanced transformations.\n   *\n   * This is currently an internal-only feature and not meant for general use.\n   */\n  var TEMPLATE_TRANSFORMS = new _angular_core.InjectionToken('TemplateTransforms');\n  var TemplateParseError = (function (_super) {\n      __extends(TemplateParseError, _super);\n      function TemplateParseError(message, span, level) {\n          return _super.call(this, span, message, level) || this;\n      }\n      return TemplateParseError;\n  }(ParseError));\n  var TemplateParseResult = (function () {\n      function TemplateParseResult(templateAst, usedPipes, errors) {\n          this.templateAst = templateAst;\n          this.usedPipes = usedPipes;\n          this.errors = errors;\n      }\n      return TemplateParseResult;\n  }());\n  var TemplateParser = (function () {\n      function TemplateParser(_config, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {\n          this._config = _config;\n          this._exprParser = _exprParser;\n          this._schemaRegistry = _schemaRegistry;\n          this._htmlParser = _htmlParser;\n          this._console = _console;\n          this.transforms = transforms;\n      }\n      TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {\n          var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);\n          var warnings = result.errors.filter(function (error) { return error.level === exports.ParseErrorLevel.WARNING; });\n          var errors = result.errors.filter(function (error) { return error.level === exports.ParseErrorLevel.FATAL; });\n          if (warnings.length > 0) {\n              this._console.warn(\"Template parse warnings:\\n\" + warnings.join('\\n'));\n          }\n          if (errors.length > 0) {\n              var errorString = errors.join('\\n');\n              throw syntaxError(\"Template parse errors:\\n\" + errorString);\n          }\n          return { template: result.templateAst, pipes: result.usedPipes };\n      };\n      TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {\n          return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);\n      };\n      TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {\n          var result;\n          var errors = htmlAstWithErrors.errors;\n          var usedPipes = [];\n          if (htmlAstWithErrors.rootNodes.length > 0) {\n              var uniqDirectives = removeSummaryDuplicates(directives);\n              var uniqPipes = removeSummaryDuplicates(pipes);\n              var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);\n              var interpolationConfig = void 0;\n              if (component.template && component.template.interpolation) {\n                  interpolationConfig = {\n                      start: component.template.interpolation[0],\n                      end: component.template.interpolation[1]\n                  };\n              }\n              var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);\n              var parseVisitor = new TemplateParseVisitor(this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);\n              result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n              errors.push.apply(errors, providerViewContext.errors);\n              usedPipes.push.apply(usedPipes, bindingParser.getUsedPipes());\n          }\n          else {\n              result = [];\n          }\n          this._assertNoReferenceDuplicationOnTemplate(result, errors);\n          if (errors.length > 0) {\n              return new TemplateParseResult(result, usedPipes, errors);\n          }\n          if (this.transforms) {\n              this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });\n          }\n          return new TemplateParseResult(result, usedPipes, errors);\n      };\n      TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {\n          if (forced === void 0) { forced = false; }\n          var errors = htmlAstWithErrors.errors;\n          if (errors.length == 0 || forced) {\n              // Transform ICU messages to angular directives\n              var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n              errors.push.apply(errors, expandedHtmlAst.errors);\n              htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n          }\n          return htmlAstWithErrors;\n      };\n      TemplateParser.prototype.getInterpolationConfig = function (component) {\n          if (component.template) {\n              return InterpolationConfig.fromArray(component.template.interpolation);\n          }\n      };\n      /** @internal */\n      TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {\n          var existingReferences = [];\n          result.filter(function (element) { return !!element.references; })\n              .forEach(function (element) { return element.references.forEach(function (reference) {\n              var name = reference.name;\n              if (existingReferences.indexOf(name) < 0) {\n                  existingReferences.push(name);\n              }\n              else {\n                  var error = new TemplateParseError(\"Reference \\\"#\" + name + \"\\\" is defined several times\", reference.sourceSpan, exports.ParseErrorLevel.FATAL);\n                  errors.push(error);\n              }\n          }); });\n      };\n      return TemplateParser;\n  }());\n  TemplateParser.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  TemplateParser.ctorParameters = function () { return [\n      { type: CompilerConfig, },\n      { type: Parser, },\n      { type: ElementSchemaRegistry, },\n      { type: I18NHtmlParser, },\n      { type: _angular_core.ɵConsole, },\n      { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },\n  ]; };\n  var TemplateParseVisitor = (function () {\n      function TemplateParseVisitor(config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {\n          var _this = this;\n          this.config = config;\n          this.providerViewContext = providerViewContext;\n          this._bindingParser = _bindingParser;\n          this._schemaRegistry = _schemaRegistry;\n          this._schemas = _schemas;\n          this._targetErrors = _targetErrors;\n          this.selectorMatcher = new SelectorMatcher();\n          this.directivesIndex = new Map();\n          this.ngContentCount = 0;\n          // Note: queries start with id 1 so we can use the number in a Bloom filter!\n          this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\n          directives.forEach(function (directive, index) {\n              var selector = CssSelector.parse(directive.selector);\n              _this.selectorMatcher.addSelectables(selector, directive);\n              _this.directivesIndex.set(directive, index);\n          });\n      }\n      TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };\n      TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };\n      TemplateParseVisitor.prototype.visitText = function (text, parent) {\n          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);\n          var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);\n          return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) :\n              new TextAst(text.value, ngContentIndex, text.sourceSpan);\n      };\n      TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {\n          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n      };\n      TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };\n      TemplateParseVisitor.prototype.visitElement = function (element, parent) {\n          var _this = this;\n          var queryStartIndex = this.contentQueryStartId;\n          var nodeName = element.name;\n          var preparsedElement = preparseElement(element);\n          if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n              preparsedElement.type === PreparsedElementType.STYLE) {\n              // Skipping <script> for security reasons\n              // Skipping <style> as we already processed them\n              // in the StyleCompiler\n              return null;\n          }\n          if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n              isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n              // Skipping stylesheets with either relative urls or package scheme as we already processed\n              // them in the StyleCompiler\n              return null;\n          }\n          var matchableAttrs = [];\n          var elementOrDirectiveProps = [];\n          var elementOrDirectiveRefs = [];\n          var elementVars = [];\n          var events = [];\n          var templateElementOrDirectiveProps = [];\n          var templateMatchableAttrs = [];\n          var templateElementVars = [];\n          var hasInlineTemplates = false;\n          var attrs = [];\n          var isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, function (m, span) { return _this._reportError(m, span, exports.ParseErrorLevel.WARNING); });\n          element.attrs.forEach(function (attr) {\n              var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);\n              var templateBindingsSource;\n              var prefixToken;\n              var normalizedName = _this._normalizeAttributeName(attr.name);\n              if (_this.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR) {\n                  _this._reportError(\"The template attribute is deprecated. Use an ng-template element instead.\", attr.sourceSpan, exports.ParseErrorLevel.WARNING);\n                  templateBindingsSource = attr.value;\n              }\n              else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n                  templateBindingsSource = attr.value;\n                  prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';\n              }\n              var hasTemplateBinding = isPresent(templateBindingsSource);\n              if (hasTemplateBinding) {\n                  if (hasInlineTemplates) {\n                      _this._reportError(\"Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *\", attr.sourceSpan);\n                  }\n                  hasInlineTemplates = true;\n                  _this._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);\n              }\n              if (!hasBinding && !hasTemplateBinding) {\n                  // don't include the bindings as attributes as well in the AST\n                  attrs.push(_this.visitAttribute(attr, null));\n                  matchableAttrs.push([attr.name, attr.value]);\n              }\n          });\n          var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);\n          var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;\n          var references = [];\n          var boundDirectivePropNames = new Set();\n          var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);\n          var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);\n          var isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n          var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);\n          var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));\n          providerContext.afterElement();\n          // Override the actual selector when the `ngProjectAs` attribute is provided\n          var projectionSelector = isPresent(preparsedElement.projectAs) ?\n              CssSelector.parse(preparsedElement.projectAs)[0] :\n              elementCssSelector;\n          var ngContentIndex = parent.findNgContentIndex(projectionSelector);\n          var parsedElement;\n          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n              if (element.children && !element.children.every(_isEmptyTextNode)) {\n                  this._reportError(\"<ng-content> element cannot have content.\", element.sourceSpan);\n              }\n              parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n          }\n          else if (isTemplateElement) {\n              this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n              this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);\n              parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n          }\n          else {\n              this._assertElementExists(matchElement, element);\n              this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);\n              var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n              parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);\n              this._findComponentDirectives(directiveAsts)\n                  .forEach(function (componentDirectiveAst) { return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template); });\n              var componentTemplate = providerContext.viewContext.component.template;\n              this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());\n          }\n          if (hasInlineTemplates) {\n              var templateQueryStartIndex = this.contentQueryStartId;\n              var templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);\n              var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateSelector).directives;\n              var templateBoundDirectivePropNames = new Set();\n              var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);\n              var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\n              this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);\n              var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);\n              templateProviderContext.afterElement();\n              parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);\n          }\n          return parsedElement;\n      };\n      TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function (inputs, outputs, template) {\n          var _this = this;\n          if (this.config.useViewEngine)\n              return;\n          var triggerLookup = new Set();\n          template.animations.forEach(function (entry) { triggerLookup.add(entry); });\n          var animationInputs = inputs.filter(function (input) { return input.isAnimation; });\n          animationInputs.forEach(function (input) {\n              var name = input.name;\n              if (!triggerLookup.has(name)) {\n                  _this._reportError(\"Couldn't find an animation entry for \\\"\" + name + \"\\\"\", input.sourceSpan);\n              }\n          });\n          outputs.forEach(function (output) {\n              if (output.isAnimation) {\n                  var found = animationInputs.find(function (input) { return input.name == output.name; });\n                  if (!found) {\n                      _this._reportError(\"Unable to listen on (@\" + output.name + \".\" + output.phase + \") because the animation trigger [@\" + output.name + \"] isn't being used on the same element\", output.sourceSpan);\n                  }\n              }\n          });\n      };\n      TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {\n          var name = this._normalizeAttributeName(attr.name);\n          var value = attr.value;\n          var srcSpan = attr.sourceSpan;\n          var bindParts = name.match(BIND_NAME_REGEXP);\n          var hasBinding = false;\n          if (bindParts !== null) {\n              hasBinding = true;\n              if (isPresent(bindParts[KW_BIND_IDX])) {\n                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n              }\n              else if (bindParts[KW_LET_IDX]) {\n                  if (isTemplateElement) {\n                      var identifier = bindParts[IDENT_KW_IDX];\n                      this._parseVariable(identifier, value, srcSpan, targetVars);\n                  }\n                  else {\n                      this._reportError(\"\\\"let-\\\" is only supported on template elements.\", srcSpan);\n                  }\n              }\n              else if (bindParts[KW_REF_IDX]) {\n                  var identifier = bindParts[IDENT_KW_IDX];\n                  this._parseReference(identifier, value, srcSpan, targetRefs);\n              }\n              else if (bindParts[KW_ON_IDX]) {\n                  this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n              else if (bindParts[KW_BINDON_IDX]) {\n                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                  this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n              else if (bindParts[KW_AT_IDX]) {\n                  this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n              }\n              else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                  this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n              else if (bindParts[IDENT_PROPERTY_IDX]) {\n                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n              }\n              else if (bindParts[IDENT_EVENT_IDX]) {\n                  this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n          }\n          else {\n              hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);\n          }\n          if (!hasBinding) {\n              this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n          }\n          return hasBinding;\n      };\n      TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {\n          return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n      };\n      TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {\n          if (identifier.indexOf('-') > -1) {\n              this._reportError(\"\\\"-\\\" is not allowed in variable names\", sourceSpan);\n          }\n          targetVars.push(new VariableAst(identifier, value, sourceSpan));\n      };\n      TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {\n          if (identifier.indexOf('-') > -1) {\n              this._reportError(\"\\\"-\\\" is not allowed in reference names\", sourceSpan);\n          }\n          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n      };\n      TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n          this._bindingParser.parseEvent(name + \"Change\", expression + \"=$event\", sourceSpan, targetMatchableAttrs, targetEvents);\n      };\n      TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {\n          var _this = this;\n          // Need to sort the directives so that we get consistent results throughout,\n          // as selectorMatcher uses Maps inside.\n          // Also deduplicate directives as they might match more than one time!\n          var directives = new Array(this.directivesIndex.size);\n          // Whether any directive selector matches on the element name\n          var matchElement = false;\n          selectorMatcher.match(elementCssSelector, function (selector, directive) {\n              directives[_this.directivesIndex.get(directive)] = directive;\n              matchElement = matchElement || selector.hasElementSelector();\n          });\n          return {\n              directives: directives.filter(function (dir) { return !!dir; }),\n              matchElement: matchElement,\n          };\n      };\n      TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {\n          var _this = this;\n          var matchedReferences = new Set();\n          var component = null;\n          var directiveAsts = directives.map(function (directive) {\n              var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, \"Directive \" + identifierName(directive.type));\n              if (directive.isComponent) {\n                  component = directive;\n              }\n              var directiveProperties = [];\n              var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, _this.config.useViewEngine ? elementName : directive.selector, sourceSpan);\n              // Note: We need to check the host properties here as well,\n              // as we don't know the element name in the DirectiveWrapperCompiler yet.\n              hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);\n              var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);\n              _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\n              elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n                  if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\n                      (directive.exportAs == elOrDirRef.value)) {\n                      targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));\n                      matchedReferences.add(elOrDirRef.name);\n                  }\n              });\n              var contentQueryStartId = _this.contentQueryStartId;\n              _this.contentQueryStartId += directive.queries.length;\n              return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);\n          });\n          elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n              if (elOrDirRef.value.length > 0) {\n                  if (!matchedReferences.has(elOrDirRef.name)) {\n                      _this._reportError(\"There is no directive with \\\"exportAs\\\" set to \\\"\" + elOrDirRef.value + \"\\\"\", elOrDirRef.sourceSpan);\n                  }\n              }\n              else if (!component) {\n                  var refToken = null;\n                  if (isTemplateElement) {\n                      refToken = createIdentifierToken(Identifiers.TemplateRef);\n                  }\n                  targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));\n              }\n          });\n          return directiveAsts;\n      };\n      TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {\n          if (directiveProperties) {\n              var boundPropsByName_1 = new Map();\n              boundProps.forEach(function (boundProp) {\n                  var prevValue = boundPropsByName_1.get(boundProp.name);\n                  if (!prevValue || prevValue.isLiteral) {\n                      // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n                      boundPropsByName_1.set(boundProp.name, boundProp);\n                  }\n              });\n              Object.keys(directiveProperties).forEach(function (dirProp) {\n                  var elProp = directiveProperties[dirProp];\n                  var boundProp = boundPropsByName_1.get(elProp);\n                  // Bindings are optional, so this binding only needs to be set up if an expression is given.\n                  if (boundProp) {\n                      targetBoundDirectivePropNames.add(boundProp.name);\n                      if (!isEmptyExpression(boundProp.expression)) {\n                          targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n                      }\n                  }\n              });\n          }\n      };\n      TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, boundDirectivePropNames) {\n          var _this = this;\n          var boundElementProps = [];\n          props.forEach(function (prop) {\n              if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\n                  boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));\n              }\n          });\n          return this._checkPropertiesInSchema(elementName, boundElementProps);\n      };\n      TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {\n          return directives.filter(function (directive) { return directive.directive.isComponent; });\n      };\n      TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {\n          return this._findComponentDirectives(directives)\n              .map(function (directive) { return identifierName(directive.directive.type); });\n      };\n      TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {\n          var componentTypeNames = this._findComponentDirectiveNames(directives);\n          if (componentTypeNames.length > 1) {\n              this._reportError(\"More than one component matched on this element.\\n\" +\n                  \"Make sure that only one component's selector can match a given element.\\n\" +\n                  (\"Conflicting components: \" + componentTypeNames.join(',')), sourceSpan);\n          }\n      };\n      /**\n       * Make sure that non-angular tags conform to the schemas.\n       *\n       * Note: An element is considered an angular tag when at least one directive selector matches the\n       * tag name.\n       *\n       * @param matchElement Whether any directive has matched on the tag name\n       * @param element the html element\n       */\n      TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {\n          var elName = element.name.replace(/^:xhtml:/, '');\n          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n              var errorMsg = \"'\" + elName + \"' is not a known element:\\n\";\n              errorMsg +=\n                  \"1. If '\" + elName + \"' is an Angular component, then verify that it is part of this module.\\n\";\n              if (elName.indexOf('-') > -1) {\n                  errorMsg +=\n                      \"2. If '\" + elName + \"' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.\";\n              }\n              else {\n                  errorMsg +=\n                      \"2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n              }\n              this._reportError(errorMsg, element.sourceSpan);\n          }\n      };\n      TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {\n          var _this = this;\n          var componentTypeNames = this._findComponentDirectiveNames(directives);\n          if (componentTypeNames.length > 0) {\n              this._reportError(\"Components on an embedded template: \" + componentTypeNames.join(','), sourceSpan);\n          }\n          elementProps.forEach(function (prop) {\n              _this._reportError(\"Property binding \" + prop.name + \" not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \\\"@NgModule.declarations\\\".\", sourceSpan);\n          });\n      };\n      TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {\n          var _this = this;\n          var allDirectiveEvents = new Set();\n          directives.forEach(function (directive) {\n              Object.keys(directive.directive.outputs).forEach(function (k) {\n                  var eventName = directive.directive.outputs[k];\n                  allDirectiveEvents.add(eventName);\n              });\n          });\n          events.forEach(function (event) {\n              if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {\n                  _this._reportError(\"Event binding \" + event.fullName + \" not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \\\"@NgModule.declarations\\\".\", event.sourceSpan);\n              }\n          });\n      };\n      TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {\n          var _this = this;\n          // Note: We can't filter out empty expressions before this method,\n          // as we still want to validate them!\n          return boundProps.filter(function (boundProp) {\n              if (boundProp.type === exports.PropertyBindingType.Property &&\n                  !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {\n                  var errorMsg = \"Can't bind to '\" + boundProp.name + \"' since it isn't a known property of '\" + elementName + \"'.\";\n                  if (elementName.startsWith('ng-')) {\n                      errorMsg +=\n                          \"\\n1. If '\" + boundProp.name + \"' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.\" +\n                              \"\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n                  }\n                  else if (elementName.indexOf('-') > -1) {\n                      errorMsg +=\n                          \"\\n1. If '\" + elementName + \"' is an Angular component and it has '\" + boundProp.name + \"' input, then verify that it is part of this module.\" +\n                              (\"\\n2. If '\" + elementName + \"' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.\") +\n                              \"\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n                  }\n                  _this._reportError(errorMsg, boundProp.sourceSpan);\n              }\n              return !isEmptyExpression(boundProp.value);\n          });\n      };\n      TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {\n          if (level === void 0) { level = exports.ParseErrorLevel.FATAL; }\n          this._targetErrors.push(new ParseError(sourceSpan, message, level));\n      };\n      return TemplateParseVisitor;\n  }());\n  var NonBindableVisitor = (function () {\n      function NonBindableVisitor() {\n      }\n      NonBindableVisitor.prototype.visitElement = function (ast, parent) {\n          var preparsedElement = preparseElement(ast);\n          if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n              preparsedElement.type === PreparsedElementType.STYLE ||\n              preparsedElement.type === PreparsedElementType.STYLESHEET) {\n              // Skipping <script> for security reasons\n              // Skipping <style> and stylesheets as we already processed them\n              // in the StyleCompiler\n              return null;\n          }\n          var attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });\n          var selector = createElementCssSelector(ast.name, attrNameAndValues);\n          var ngContentIndex = parent.findNgContentIndex(selector);\n          var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\n      };\n      NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };\n      NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {\n          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n      };\n      NonBindableVisitor.prototype.visitText = function (text, parent) {\n          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);\n          return new TextAst(text.value, ngContentIndex, text.sourceSpan);\n      };\n      NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };\n      NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };\n      return NonBindableVisitor;\n  }());\n  var ElementOrDirectiveRef = (function () {\n      function ElementOrDirectiveRef(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      return ElementOrDirectiveRef;\n  }());\n  function splitClasses(classAttrValue) {\n      return classAttrValue.trim().split(/\\s+/g);\n  }\n  var ElementContext = (function () {\n      function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {\n          this.isTemplateElement = isTemplateElement;\n          this._ngContentIndexMatcher = _ngContentIndexMatcher;\n          this._wildcardNgContentIndex = _wildcardNgContentIndex;\n          this.providerContext = providerContext;\n      }\n      ElementContext.create = function (isTemplateElement, directives, providerContext) {\n          var matcher = new SelectorMatcher();\n          var wildcardNgContentIndex = null;\n          var component = directives.find(function (directive) { return directive.directive.isComponent; });\n          if (component) {\n              var ngContentSelectors = component.directive.template.ngContentSelectors;\n              for (var i = 0; i < ngContentSelectors.length; i++) {\n                  var selector = ngContentSelectors[i];\n                  if (selector === '*') {\n                      wildcardNgContentIndex = i;\n                  }\n                  else {\n                      matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n                  }\n              }\n          }\n          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n      };\n      ElementContext.prototype.findNgContentIndex = function (selector) {\n          var ngContentIndices = [];\n          this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });\n          ngContentIndices.sort();\n          if (isPresent(this._wildcardNgContentIndex)) {\n              ngContentIndices.push(this._wildcardNgContentIndex);\n          }\n          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n      };\n      return ElementContext;\n  }());\n  function createElementCssSelector(elementName, attributes) {\n      var cssSelector = new CssSelector();\n      var elNameNoNs = splitNsName(elementName)[1];\n      cssSelector.setElement(elNameNoNs);\n      for (var i = 0; i < attributes.length; i++) {\n          var attrName = attributes[i][0];\n          var attrNameNoNs = splitNsName(attrName)[1];\n          var attrValue = attributes[i][1];\n          cssSelector.addAttribute(attrNameNoNs, attrValue);\n          if (attrName.toLowerCase() == CLASS_ATTR) {\n              var classes = splitClasses(attrValue);\n              classes.forEach(function (className) { return cssSelector.addClassName(className); });\n          }\n      }\n      return cssSelector;\n  }\n  var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\n  var NON_BINDABLE_VISITOR = new NonBindableVisitor();\n  function _isEmptyTextNode(node) {\n      return node instanceof Text && node.value.trim().length == 0;\n  }\n  function removeSummaryDuplicates(items) {\n      var map = new Map();\n      items.forEach(function (item) {\n          if (!map.get(item.type.reference)) {\n              map.set(item.type.reference, item);\n          }\n      });\n      return Array.from(map.values());\n  }\n  function isEmptyExpression(ast) {\n      if (ast instanceof ASTWithSource) {\n          ast = ast.ast;\n      }\n      return ast instanceof EmptyExpr;\n  }\n  // `template` is deprecated in 4.x\n  function isTemplate(el, enableLegacyTemplate, reportDeprecation) {\n      var tagNoNs = splitNsName(el.name)[1];\n      // `<ng-template>` is an angular construct and is lower case\n      if (tagNoNs === NG_TEMPLATE_ELEMENT)\n          return true;\n      // `<template>` is HTML and case insensitive\n      if (tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {\n          if (enableLegacyTemplate && tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {\n              reportDeprecation(\"The <template> element is deprecated. Use <ng-template> instead\", el.sourceSpan);\n              return true;\n          }\n          return false;\n      }\n  }\n\n  var __extends$18 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var AnimationAst = (function () {\n      function AnimationAst() {\n          this.startTime = 0;\n          this.playTime = 0;\n      }\n      return AnimationAst;\n  }());\n  var AnimationStateAst = (function (_super) {\n      __extends$18(AnimationStateAst, _super);\n      function AnimationStateAst() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      return AnimationStateAst;\n  }(AnimationAst));\n  var AnimationEntryAst = (function (_super) {\n      __extends$18(AnimationEntryAst, _super);\n      function AnimationEntryAst(name, stateDeclarations, stateTransitions) {\n          var _this = _super.call(this) || this;\n          _this.name = name;\n          _this.stateDeclarations = stateDeclarations;\n          _this.stateTransitions = stateTransitions;\n          return _this;\n      }\n      AnimationEntryAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationEntry(this, context);\n      };\n      return AnimationEntryAst;\n  }(AnimationAst));\n  var AnimationStateDeclarationAst = (function (_super) {\n      __extends$18(AnimationStateDeclarationAst, _super);\n      function AnimationStateDeclarationAst(stateName, styles) {\n          var _this = _super.call(this) || this;\n          _this.stateName = stateName;\n          _this.styles = styles;\n          return _this;\n      }\n      AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStateDeclaration(this, context);\n      };\n      return AnimationStateDeclarationAst;\n  }(AnimationStateAst));\n  var AnimationStateTransitionExpression = (function () {\n      function AnimationStateTransitionExpression(fromState, toState) {\n          this.fromState = fromState;\n          this.toState = toState;\n      }\n      return AnimationStateTransitionExpression;\n  }());\n  var AnimationStateTransitionFnExpression = (function (_super) {\n      __extends$18(AnimationStateTransitionFnExpression, _super);\n      function AnimationStateTransitionFnExpression(fn) {\n          var _this = _super.call(this, null, null) || this;\n          _this.fn = fn;\n          return _this;\n      }\n      return AnimationStateTransitionFnExpression;\n  }(AnimationStateTransitionExpression));\n  var AnimationStateTransitionAst = (function (_super) {\n      __extends$18(AnimationStateTransitionAst, _super);\n      function AnimationStateTransitionAst(stateChanges, animation) {\n          var _this = _super.call(this) || this;\n          _this.stateChanges = stateChanges;\n          _this.animation = animation;\n          return _this;\n      }\n      AnimationStateTransitionAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStateTransition(this, context);\n      };\n      return AnimationStateTransitionAst;\n  }(AnimationStateAst));\n  var AnimationStepAst = (function (_super) {\n      __extends$18(AnimationStepAst, _super);\n      function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {\n          var _this = _super.call(this) || this;\n          _this.startingStyles = startingStyles;\n          _this.keyframes = keyframes;\n          _this.duration = duration;\n          _this.delay = delay;\n          _this.easing = easing;\n          return _this;\n      }\n      AnimationStepAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStep(this, context);\n      };\n      return AnimationStepAst;\n  }(AnimationAst));\n  var AnimationStylesAst = (function (_super) {\n      __extends$18(AnimationStylesAst, _super);\n      function AnimationStylesAst(styles) {\n          var _this = _super.call(this) || this;\n          _this.styles = styles;\n          return _this;\n      }\n      AnimationStylesAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStyles(this, context);\n      };\n      return AnimationStylesAst;\n  }(AnimationAst));\n  var AnimationKeyframeAst = (function (_super) {\n      __extends$18(AnimationKeyframeAst, _super);\n      function AnimationKeyframeAst(offset, styles) {\n          var _this = _super.call(this) || this;\n          _this.offset = offset;\n          _this.styles = styles;\n          return _this;\n      }\n      AnimationKeyframeAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationKeyframe(this, context);\n      };\n      return AnimationKeyframeAst;\n  }(AnimationAst));\n  var AnimationWithStepsAst = (function (_super) {\n      __extends$18(AnimationWithStepsAst, _super);\n      function AnimationWithStepsAst(steps) {\n          var _this = _super.call(this) || this;\n          _this.steps = steps;\n          return _this;\n      }\n      return AnimationWithStepsAst;\n  }(AnimationAst));\n  var AnimationGroupAst = (function (_super) {\n      __extends$18(AnimationGroupAst, _super);\n      function AnimationGroupAst(steps) {\n          return _super.call(this, steps) || this;\n      }\n      AnimationGroupAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationGroup(this, context);\n      };\n      return AnimationGroupAst;\n  }(AnimationWithStepsAst));\n  var AnimationSequenceAst = (function (_super) {\n      __extends$18(AnimationSequenceAst, _super);\n      function AnimationSequenceAst(steps) {\n          return _super.call(this, steps) || this;\n      }\n      AnimationSequenceAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationSequence(this, context);\n      };\n      return AnimationSequenceAst;\n  }(AnimationWithStepsAst));\n\n  var StylesCollectionEntry = (function () {\n      function StylesCollectionEntry(time, value) {\n          this.time = time;\n          this.value = value;\n      }\n      StylesCollectionEntry.prototype.matches = function (time, value) {\n          return time == this.time && value == this.value;\n      };\n      return StylesCollectionEntry;\n  }());\n  var StylesCollection = (function () {\n      function StylesCollection() {\n          this.styles = {};\n      }\n      StylesCollection.prototype.insertAtTime = function (property, time, value) {\n          var tuple = new StylesCollectionEntry(time, value);\n          var entries = this.styles[property];\n          if (!isPresent(entries)) {\n              entries = this.styles[property] = [];\n          }\n          // insert this at the right stop in the array\n          // this way we can keep it sorted\n          var insertionIndex = 0;\n          for (var i = entries.length - 1; i >= 0; i--) {\n              if (entries[i].time <= time) {\n                  insertionIndex = i + 1;\n                  break;\n              }\n          }\n          entries.splice(insertionIndex, 0, tuple);\n      };\n      StylesCollection.prototype.getByIndex = function (property, index) {\n          var items = this.styles[property];\n          if (isPresent(items)) {\n              return index >= items.length ? null : items[index];\n          }\n          return null;\n      };\n      StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {\n          var entries = this.styles[property];\n          if (isPresent(entries)) {\n              for (var i = entries.length - 1; i >= 0; i--) {\n                  if (entries[i].time <= time)\n                      return i;\n              }\n          }\n          return null;\n      };\n      return StylesCollection;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$17 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _INITIAL_KEYFRAME = 0;\n  var _TERMINAL_KEYFRAME = 1;\n  var _ONE_SECOND = 1000;\n  var AnimationParseError = (function (_super) {\n      __extends$17(AnimationParseError, _super);\n      function AnimationParseError(message) {\n          return _super.call(this, null, message) || this;\n      }\n      AnimationParseError.prototype.toString = function () { return \"\" + this.msg; };\n      return AnimationParseError;\n  }(ParseError));\n  var AnimationEntryParseResult = (function () {\n      function AnimationEntryParseResult(ast, errors) {\n          this.ast = ast;\n          this.errors = errors;\n      }\n      return AnimationEntryParseResult;\n  }());\n  var AnimationParser = (function () {\n      function AnimationParser(_schema) {\n          this._schema = _schema;\n      }\n      AnimationParser.prototype.parseComponent = function (component) {\n          var _this = this;\n          var errors = [];\n          var componentName = identifierName(component.type);\n          var animationTriggerNames = new Set();\n          var asts = component.template.animations.map(function (entry) {\n              var result = _this.parseEntry(entry);\n              var ast = result.ast;\n              var triggerName = ast.name;\n              if (animationTriggerNames.has(triggerName)) {\n                  result.errors.push(new AnimationParseError(\"The animation trigger \\\"\" + triggerName + \"\\\" has already been registered for the \" + componentName + \" component\"));\n              }\n              else {\n                  animationTriggerNames.add(triggerName);\n              }\n              if (result.errors.length > 0) {\n                  var errorMessage_1 = \"- Unable to parse the animation sequence for \\\"\" + triggerName + \"\\\" on the \" + componentName + \" component due to the following errors:\";\n                  result.errors.forEach(function (error) { errorMessage_1 += '\\n-- ' + error.msg; });\n                  errors.push(errorMessage_1);\n              }\n              return ast;\n          });\n          if (errors.length > 0) {\n              var errorString = errors.join('\\n');\n              throw new Error(\"Animation parse errors:\\n\" + errorString);\n          }\n          return asts;\n      };\n      AnimationParser.prototype.parseEntry = function (entry) {\n          var _this = this;\n          var errors = [];\n          var stateStyles = {};\n          var transitions = [];\n          var stateDeclarationAsts = [];\n          entry.definitions.forEach(function (def) {\n              if (def instanceof CompileAnimationStateDeclarationMetadata) {\n                  _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function (ast) {\n                      stateDeclarationAsts.push(ast);\n                      stateStyles[ast.stateName] = ast.styles;\n                  });\n              }\n              else {\n                  transitions.push(def);\n              }\n          });\n          var stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors); });\n          var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);\n          return new AnimationEntryParseResult(ast, errors);\n      };\n      return AnimationParser;\n  }());\n  AnimationParser.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  AnimationParser.ctorParameters = function () { return [\n      { type: ElementSchemaRegistry, },\n  ]; };\n  function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {\n      var normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);\n      var defStyles = new AnimationStylesAst(normalizedStyles);\n      var states = stateMetadata.stateNameExpr.split(/\\s*,\\s*/);\n      return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles); });\n  }\n  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {\n      var styles = new StylesCollection();\n      var transitionExprs = [];\n      var stateChangeExpr = transitionStateMetadata.stateChangeExpr;\n      var transitionStates = typeof stateChangeExpr == 'string' ?\n          stateChangeExpr.split(/\\s*,\\s*/) :\n          [stateChangeExpr];\n      transitionStates.forEach(function (expr) { return transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors)); });\n      var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);\n      var animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);\n      var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);\n      if (errors.length == 0) {\n          _fillAnimationAstStartingKeyframes(animationAst, styles, errors);\n      }\n      var stepsAst = (animationAst instanceof AnimationWithStepsAst) ?\n          animationAst :\n          new AnimationSequenceAst([animationAst]);\n      return new AnimationStateTransitionAst(transitionExprs, stepsAst);\n  }\n  function _parseAnimationAlias(alias, errors) {\n      switch (alias) {\n          case ':enter':\n              return 'void => *';\n          case ':leave':\n              return '* => void';\n          default:\n              errors.push(new AnimationParseError(\"the transition alias value \\\"\" + alias + \"\\\" is not supported\"));\n              return '* => *';\n      }\n  }\n  function _parseAnimationTransitionExpr(transitionValue, errors) {\n      var expressions = [];\n      if (typeof transitionValue == 'string') {\n          var eventStr = transitionValue;\n          if (eventStr[0] == ':') {\n              eventStr = _parseAnimationAlias(eventStr, errors);\n          }\n          var match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n          if (!isPresent(match) || match.length < 4) {\n              errors.push(new AnimationParseError(\"the provided \" + eventStr + \" is not of a supported format\"));\n              return expressions;\n          }\n          var fromState = match[1];\n          var separator = match[2];\n          var toState = match[3];\n          expressions.push(new AnimationStateTransitionExpression(fromState, toState));\n          var isFullAnyStateExpr = fromState == _angular_core.ɵANY_STATE && toState == _angular_core.ɵANY_STATE;\n          if (separator[0] == '<' && !isFullAnyStateExpr) {\n              expressions.push(new AnimationStateTransitionExpression(toState, fromState));\n          }\n      }\n      else {\n          expressions.push(new AnimationStateTransitionFnExpression(transitionValue));\n      }\n      return expressions;\n  }\n  function _normalizeAnimationEntry(entry) {\n      return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;\n  }\n  function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {\n      var offset = entry.offset;\n      if (offset > 1 || offset < 0) {\n          errors.push(new AnimationParseError(\"Offset values for animations must be between 0 and 1\"));\n      }\n      var normalizedStyles = [];\n      entry.styles.forEach(function (styleEntry) {\n          if (typeof styleEntry === 'string') {\n              if (permitStateReferences) {\n                  normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));\n              }\n              else {\n                  errors.push(new AnimationParseError(\"State based animations cannot contain references to other states\"));\n              }\n          }\n          else {\n              var stylesObj_1 = styleEntry;\n              var normalizedStylesObj_1 = {};\n              Object.keys(stylesObj_1).forEach(function (propName) {\n                  var normalizedProp = schema.normalizeAnimationStyleProperty(propName);\n                  var normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);\n                  var normalizationError = normalizedOutput['error'];\n                  if (normalizationError) {\n                      errors.push(new AnimationParseError(normalizationError));\n                  }\n                  normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];\n              });\n              normalizedStyles.push(normalizedStylesObj_1);\n          }\n      });\n      return normalizedStyles;\n  }\n  function _normalizeStyleSteps(entry, stateStyles, schema, errors) {\n      var steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);\n      return (entry instanceof CompileAnimationGroupMetadata) ?\n          new CompileAnimationGroupMetadata(steps) :\n          new CompileAnimationSequenceMetadata(steps);\n  }\n  function _mergeAnimationStyles(stylesList, newItem) {\n      if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {\n          var lastIndex = stylesList.length - 1;\n          var lastItem = stylesList[lastIndex];\n          if (typeof lastItem === 'object' && lastItem !== null) {\n              stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);\n              return;\n          }\n      }\n      stylesList.push(newItem);\n  }\n  function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {\n      var steps;\n      if (entry instanceof CompileAnimationWithStepsMetadata) {\n          steps = entry.steps;\n      }\n      else {\n          return [entry];\n      }\n      var newSteps = [];\n      var combinedStyles;\n      steps.forEach(function (step) {\n          if (step instanceof CompileAnimationStyleMetadata) {\n              // this occurs when a style step is followed by a previous style step\n              // or when the first style step is run. We want to concatenate all subsequent\n              // style steps together into a single style step such that we have the correct\n              // starting keyframe data to pass into the animation player.\n              if (!isPresent(combinedStyles)) {\n                  combinedStyles = [];\n              }\n              _normalizeStyleMetadata(step, stateStyles, schema, errors, true)\n                  .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });\n          }\n          else {\n              // it is important that we create a metadata entry of the combined styles\n              // before we go on an process the animate, sequence or group metadata steps.\n              // This will ensure that the AST will have the previous styles painted on\n              // screen before any further animations that use the styles take place.\n              if (isPresent(combinedStyles)) {\n                  newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));\n                  combinedStyles = null;\n              }\n              if (step instanceof CompileAnimationAnimateMetadata) {\n                  // we do not recurse into CompileAnimationAnimateMetadata since\n                  // those style steps are not going to be squashed\n                  var animateStyleValue = step.styles;\n                  if (animateStyleValue instanceof CompileAnimationStyleMetadata) {\n                      animateStyleValue.styles =\n                          _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);\n                  }\n                  else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {\n                      animateStyleValue.steps.forEach(function (step) {\n                          step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);\n                      });\n                  }\n              }\n              else if (step instanceof CompileAnimationWithStepsMetadata) {\n                  var innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);\n                  step = step instanceof CompileAnimationGroupMetadata ?\n                      new CompileAnimationGroupMetadata(innerSteps) :\n                      new CompileAnimationSequenceMetadata(innerSteps);\n              }\n              newSteps.push(step);\n          }\n      });\n      // this happens when only styles were animated within the sequence\n      if (isPresent(combinedStyles)) {\n          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));\n      }\n      return newSteps;\n  }\n  function _resolveStylesFromState(stateName, stateStyles, errors) {\n      var styles = [];\n      if (stateName[0] != ':') {\n          errors.push(new AnimationParseError(\"Animation states via styles must be prefixed with a \\\":\\\"\"));\n      }\n      else {\n          var normalizedStateName = stateName.substring(1);\n          var value = stateStyles[normalizedStateName];\n          if (!isPresent(value)) {\n              errors.push(new AnimationParseError(\"Unable to apply styles due to missing a state: \\\"\" + normalizedStateName + \"\\\"\"));\n          }\n          else {\n              value.styles.forEach(function (stylesEntry) {\n                  if (typeof stylesEntry === 'object' && stylesEntry !== null) {\n                      styles.push(stylesEntry);\n                  }\n              });\n          }\n      }\n      return styles;\n  }\n  var _AnimationTimings = (function () {\n      function _AnimationTimings(duration, delay, easing) {\n          this.duration = duration;\n          this.delay = delay;\n          this.easing = easing;\n      }\n      return _AnimationTimings;\n  }());\n  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {\n      var totalEntries = keyframeSequence.steps.length;\n      var totalOffsets = 0;\n      keyframeSequence.steps.forEach(function (step) { return totalOffsets += (isPresent(step.offset) ? 1 : 0); });\n      if (totalOffsets > 0 && totalOffsets < totalEntries) {\n          errors.push(new AnimationParseError(\"Not all style() entries contain an offset for the provided keyframe()\"));\n          totalOffsets = totalEntries;\n      }\n      var limit = totalEntries - 1;\n      var margin = totalOffsets == 0 ? (1 / limit) : 0;\n      var rawKeyframes = [];\n      var index = 0;\n      var doSortKeyframes = false;\n      var lastOffset = 0;\n      keyframeSequence.steps.forEach(function (styleMetadata) {\n          var offset = styleMetadata.offset;\n          var keyframeStyles = {};\n          styleMetadata.styles.forEach(function (entry) {\n              Object.keys(entry).forEach(function (prop) {\n                  if (prop != 'offset') {\n                      keyframeStyles[prop] = entry[prop];\n                  }\n              });\n          });\n          if (isPresent(offset)) {\n              doSortKeyframes = doSortKeyframes || (offset < lastOffset);\n          }\n          else {\n              offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);\n          }\n          rawKeyframes.push([offset, keyframeStyles]);\n          lastOffset = offset;\n          index++;\n      });\n      if (doSortKeyframes) {\n          rawKeyframes.sort(function (a, b) { return a[0] <= b[0] ? -1 : 1; });\n      }\n      var firstKeyframe = rawKeyframes[0];\n      if (firstKeyframe[0] != _INITIAL_KEYFRAME) {\n          rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);\n      }\n      var firstKeyframeStyles = firstKeyframe[1];\n      limit = rawKeyframes.length - 1;\n      var lastKeyframe = rawKeyframes[limit];\n      if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {\n          rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);\n          limit++;\n      }\n      var lastKeyframeStyles = lastKeyframe[1];\n      for (var i = 1; i <= limit; i++) {\n          var entry = rawKeyframes[i];\n          var styles = entry[1];\n          Object.keys(styles).forEach(function (prop) {\n              if (!isPresent(firstKeyframeStyles[prop])) {\n                  firstKeyframeStyles[prop] = _angular_core.ɵFILL_STYLE_FLAG;\n              }\n          });\n      }\n      var _loop_1 = function (i) {\n          var entry = rawKeyframes[i];\n          var styles = entry[1];\n          Object.keys(styles).forEach(function (prop) {\n              if (!isPresent(lastKeyframeStyles[prop])) {\n                  lastKeyframeStyles[prop] = styles[prop];\n              }\n          });\n      };\n      for (var i = limit - 1; i >= 0; i--) {\n          _loop_1(i);\n      }\n      return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])); });\n  }\n  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {\n      var ast /** TODO #9100 */;\n      var playTime = 0;\n      var startingTime = currentTime;\n      if (entry instanceof CompileAnimationWithStepsMetadata) {\n          var maxDuration_1 = 0;\n          var steps_1 = [];\n          var isGroup_1 = entry instanceof CompileAnimationGroupMetadata;\n          var previousStyles_1 /** TODO #9100 */;\n          entry.steps.forEach(function (entry) {\n              // these will get picked up by the next step...\n              var time = isGroup_1 ? startingTime : currentTime;\n              if (entry instanceof CompileAnimationStyleMetadata) {\n                  entry.styles.forEach(function (stylesEntry) {\n                      // by this point we know that we only have stringmap values\n                      var map = stylesEntry;\n                      Object.keys(map).forEach(function (prop) { collectedStyles.insertAtTime(prop, time, map[prop]); });\n                  });\n                  previousStyles_1 = entry.styles;\n                  return;\n              }\n              var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);\n              if (isPresent(previousStyles_1)) {\n                  if (entry instanceof CompileAnimationWithStepsMetadata) {\n                      var startingStyles = new AnimationStylesAst(previousStyles_1);\n                      steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));\n                  }\n                  else {\n                      var innerStep = innerAst;\n                      (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);\n                  }\n                  previousStyles_1 = null;\n              }\n              var astDuration = innerAst.playTime;\n              currentTime += astDuration;\n              playTime += astDuration;\n              maxDuration_1 = Math.max(astDuration, maxDuration_1);\n              steps_1.push(innerAst);\n              var _a;\n          });\n          if (isPresent(previousStyles_1)) {\n              var startingStyles = new AnimationStylesAst(previousStyles_1);\n              steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));\n          }\n          if (isGroup_1) {\n              ast = new AnimationGroupAst(steps_1);\n              playTime = maxDuration_1;\n              currentTime = startingTime + playTime;\n          }\n          else {\n              ast = new AnimationSequenceAst(steps_1);\n          }\n      }\n      else if (entry instanceof CompileAnimationAnimateMetadata) {\n          var timings = _parseTimeExpression(entry.timings, errors);\n          var styles = entry.styles;\n          var keyframes = void 0 /** TODO #9100 */;\n          if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {\n              keyframes =\n                  _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);\n          }\n          else {\n              var styleData = styles;\n              var offset = _TERMINAL_KEYFRAME;\n              var styleAst = new AnimationStylesAst(styleData.styles);\n              var keyframe = new AnimationKeyframeAst(offset, styleAst);\n              keyframes = [keyframe];\n          }\n          ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);\n          playTime = timings.duration + timings.delay;\n          currentTime += playTime;\n          keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return Object.keys(entry).forEach(function (prop) { collectedStyles.insertAtTime(prop, currentTime, entry[prop]); }); }); });\n      }\n      else {\n          // if the code reaches this stage then an error\n          // has already been populated within the _normalizeStyleSteps()\n          // operation...\n          ast = new AnimationStepAst(null, [], 0, 0, '');\n      }\n      ast.playTime = playTime;\n      ast.startTime = startingTime;\n      return ast;\n  }\n  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {\n      // steps that only contain style will not be filled\n      if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {\n          var keyframes = ast.keyframes;\n          if (keyframes.length == 1) {\n              var endKeyframe = keyframes[0];\n              var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);\n              ast.keyframes = [startKeyframe, endKeyframe];\n          }\n      }\n      else if (ast instanceof AnimationWithStepsAst) {\n          ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });\n      }\n  }\n  function _parseTimeExpression(exp, errors) {\n      var regex = /^([\\.\\d]+)(m?s)(?:\\s+([\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?/i;\n      var duration;\n      var delay = 0;\n      var easing = null;\n      if (typeof exp === 'string') {\n          var matches = exp.match(regex);\n          if (matches === null) {\n              errors.push(new AnimationParseError(\"The provided timing value \\\"\" + exp + \"\\\" is invalid.\"));\n              return new _AnimationTimings(0, 0, null);\n          }\n          var durationMatch = parseFloat(matches[1]);\n          var durationUnit = matches[2];\n          if (durationUnit == 's') {\n              durationMatch *= _ONE_SECOND;\n          }\n          duration = Math.floor(durationMatch);\n          var delayMatch = matches[3];\n          var delayUnit = matches[4];\n          if (isPresent(delayMatch)) {\n              var delayVal = parseFloat(delayMatch);\n              if (isPresent(delayUnit) && delayUnit == 's') {\n                  delayVal *= _ONE_SECOND;\n              }\n              delay = Math.floor(delayVal);\n          }\n          var easingVal = matches[5];\n          if (!isBlank(easingVal)) {\n              easing = easingVal;\n          }\n      }\n      else {\n          duration = exp;\n      }\n      return new _AnimationTimings(duration, delay, easing);\n  }\n  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {\n      var values = {};\n      var endTime = startTime + duration;\n      endKeyframe.styles.styles.forEach(function (styleData) {\n          Object.keys(styleData).forEach(function (prop) {\n              var val = styleData[prop];\n              if (prop == 'offset')\n                  return;\n              var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);\n              var resultEntry /** TODO #9100 */, nextEntry /** TODO #9100 */, value /** TODO #9100 */;\n              if (isPresent(resultIndex)) {\n                  resultEntry = collectedStyles.getByIndex(prop, resultIndex);\n                  value = resultEntry.value;\n                  nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);\n              }\n              else {\n                  // this is a flag that the runtime code uses to pass\n                  // in a value either from the state declaration styles\n                  // or using the AUTO_STYLE value (e.g. getComputedStyle)\n                  value = _angular_core.ɵFILL_STYLE_FLAG;\n              }\n              if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {\n                  errors.push(new AnimationParseError(\"The animated CSS property \\\"\" + prop + \"\\\" unexpectedly changes between steps \\\"\" + resultEntry.time + \"ms\\\" and \\\"\" + endTime + \"ms\\\" at \\\"\" + nextEntry.time + \"ms\\\"\"));\n              }\n              values[prop] = value;\n          });\n      });\n      return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * An interface for retrieving documents by URL that the compiler uses\n   * to load templates.\n   */\n  var ResourceLoader = (function () {\n      function ResourceLoader() {\n      }\n      ResourceLoader.prototype.get = function (url) { return null; };\n      return ResourceLoader;\n  }());\n\n  /**\n   * Create a {@link UrlResolver} with no package prefix.\n   */\n  function createUrlResolverWithoutPackagePrefix() {\n      return new UrlResolver();\n  }\n  function createOfflineCompileUrlResolver() {\n      return new UrlResolver('.');\n  }\n  /**\n   * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.\n   */\n  var DEFAULT_PACKAGE_URL_PROVIDER = {\n      provide: _angular_core.PACKAGE_ROOT_URL,\n      useValue: '/'\n  };\n  /**\n   * Used by the {@link Compiler} when resolving HTML and CSS template URLs.\n   *\n   * This class can be overridden by the application developer to create custom behavior.\n   *\n   * See {@link Compiler}\n   *\n   * ## Example\n   *\n   * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}\n   *\n   * @security  When compiling templates at runtime, you must\n   * ensure that the entire template comes from a trusted source.\n   * Attacker-controlled data introduced by a template could expose your\n   * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n   */\n  var UrlResolver = (function () {\n      function UrlResolver(_packagePrefix) {\n          if (_packagePrefix === void 0) { _packagePrefix = null; }\n          this._packagePrefix = _packagePrefix;\n      }\n      /**\n       * Resolves the `url` given the `baseUrl`:\n       * - when the `url` is null, the `baseUrl` is returned,\n       * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n       * `baseUrl` and `url`,\n       * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n       * returned as is (ignoring the `baseUrl`)\n       */\n      UrlResolver.prototype.resolve = function (baseUrl, url) {\n          var resolvedUrl = url;\n          if (isPresent(baseUrl) && baseUrl.length > 0) {\n              resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n          }\n          var resolvedParts = _split(resolvedUrl);\n          var prefix = this._packagePrefix;\n          if (isPresent(prefix) && isPresent(resolvedParts) &&\n              resolvedParts[_ComponentIndex.Scheme] == 'package') {\n              var path = resolvedParts[_ComponentIndex.Path];\n              prefix = prefix.replace(/\\/+$/, '');\n              path = path.replace(/^\\/+/, '');\n              return prefix + \"/\" + path;\n          }\n          return resolvedUrl;\n      };\n      return UrlResolver;\n  }());\n  UrlResolver.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  UrlResolver.ctorParameters = function () { return [\n      { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },\n  ]; };\n  /**\n   * Extract the scheme of a URL.\n   */\n  function getUrlScheme(url) {\n      var match = _split(url);\n      return (match && match[_ComponentIndex.Scheme]) || '';\n  }\n  // The code below is adapted from Traceur:\n  // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js\n  /**\n   * Builds a URI string from already-encoded parts.\n   *\n   * No encoding is performed.  Any component may be omitted as either null or\n   * undefined.\n   *\n   * @param opt_scheme The scheme such as 'http'.\n   * @param opt_userInfo The user name before the '@'.\n   * @param opt_domain The domain such as 'www.google.com', already\n   *     URI-encoded.\n   * @param opt_port The port number.\n   * @param opt_path The path, already URI-encoded.  If it is not\n   *     empty, it must begin with a slash.\n   * @param opt_queryData The URI-encoded query data.\n   * @param opt_fragment The URI-encoded fragment identifier.\n   * @return The fully combined URI.\n   */\n  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\n      var out = [];\n      if (isPresent(opt_scheme)) {\n          out.push(opt_scheme + ':');\n      }\n      if (isPresent(opt_domain)) {\n          out.push('//');\n          if (isPresent(opt_userInfo)) {\n              out.push(opt_userInfo + '@');\n          }\n          out.push(opt_domain);\n          if (isPresent(opt_port)) {\n              out.push(':' + opt_port);\n          }\n      }\n      if (isPresent(opt_path)) {\n          out.push(opt_path);\n      }\n      if (isPresent(opt_queryData)) {\n          out.push('?' + opt_queryData);\n      }\n      if (isPresent(opt_fragment)) {\n          out.push('#' + opt_fragment);\n      }\n      return out.join('');\n  }\n  /**\n   * A regular expression for breaking a URI into its component parts.\n   *\n   * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n   * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n   * disambiguation method used by POSIX regular expressions, it is natural and\n   * commonplace to use a regular expression for parsing the potential five\n   * components of a URI reference.\n   *\n   * The following line is the regular expression for breaking-down a\n   * well-formed URI reference into its components.\n   *\n   * <pre>\n   * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n   *  12            3  4          5       6  7        8 9\n   * </pre>\n   *\n   * The numbers in the second line above are only to assist readability; they\n   * indicate the reference points for each subexpression (i.e., each paired\n   * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n   * For example, matching the above expression to\n   * <pre>\n   *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n   * </pre>\n   * results in the following subexpression matches:\n   * <pre>\n   *    $1 = http:\n   *    $2 = http\n   *    $3 = //www.ics.uci.edu\n   *    $4 = www.ics.uci.edu\n   *    $5 = /pub/ietf/uri/\n   *    $6 = <undefined>\n   *    $7 = <undefined>\n   *    $8 = #Related\n   *    $9 = Related\n   * </pre>\n   * where <undefined> indicates that the component is not present, as is the\n   * case for the query component in the above example. Therefore, we can\n   * determine the value of the five components as\n   * <pre>\n   *    scheme    = $2\n   *    authority = $4\n   *    path      = $5\n   *    query     = $7\n   *    fragment  = $9\n   * </pre>\n   *\n   * The regular expression has been modified slightly to expose the\n   * userInfo, domain, and port separately from the authority.\n   * The modified version yields\n   * <pre>\n   *    $1 = http              scheme\n   *    $2 = <undefined>       userInfo -\\\n   *    $3 = www.ics.uci.edu   domain     | authority\n   *    $4 = <undefined>       port     -/\n   *    $5 = /pub/ietf/uri/    path\n   *    $6 = <undefined>       query without ?\n   *    $7 = Related           fragment without #\n   * </pre>\n   * @type {!RegExp}\n   * @internal\n   */\n  var _splitRe = new RegExp('^' +\n      '(?:' +\n      '([^:/?#.]+)' +\n      // used by other URL parts such as :,\n      // ?, /, #, and .\n      ':)?' +\n      '(?://' +\n      '(?:([^/?#]*)@)?' +\n      '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' +\n      // digits, dashes, dots, percent\n      // escapes, and unicode characters.\n      '(?::([0-9]+))?' +\n      ')?' +\n      '([^?#]+)?' +\n      '(?:\\\\?([^#]*))?' +\n      '(?:#(.*))?' +\n      '$');\n  /**\n   * The index of each URI component in the return value of goog.uri.utils.split.\n   * @enum {number}\n   */\n  var _ComponentIndex;\n  (function (_ComponentIndex) {\n      _ComponentIndex[_ComponentIndex[\"Scheme\"] = 1] = \"Scheme\";\n      _ComponentIndex[_ComponentIndex[\"UserInfo\"] = 2] = \"UserInfo\";\n      _ComponentIndex[_ComponentIndex[\"Domain\"] = 3] = \"Domain\";\n      _ComponentIndex[_ComponentIndex[\"Port\"] = 4] = \"Port\";\n      _ComponentIndex[_ComponentIndex[\"Path\"] = 5] = \"Path\";\n      _ComponentIndex[_ComponentIndex[\"QueryData\"] = 6] = \"QueryData\";\n      _ComponentIndex[_ComponentIndex[\"Fragment\"] = 7] = \"Fragment\";\n  })(_ComponentIndex || (_ComponentIndex = {}));\n  /**\n   * Splits a URI into its component parts.\n   *\n   * Each component can be accessed via the component indices; for example:\n   * <pre>\n   * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n   * </pre>\n   *\n   * @param uri The URI string to examine.\n   * @return Each component still URI-encoded.\n   *     Each component that is present will contain the encoded value, whereas\n   *     components that are not present will be undefined or empty, depending\n   *     on the browser's regular expression implementation.  Never null, since\n   *     arbitrary strings may still look like path names.\n   */\n  function _split(uri) {\n      return uri.match(_splitRe);\n  }\n  /**\n    * Removes dot segments in given path component, as described in\n    * RFC 3986, section 5.2.4.\n    *\n    * @param path A non-empty path component.\n    * @return Path component with removed dot segments.\n    */\n  function _removeDotSegments(path) {\n      if (path == '/')\n          return '/';\n      var leadingSlash = path[0] == '/' ? '/' : '';\n      var trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n      var segments = path.split('/');\n      var out = [];\n      var up = 0;\n      for (var pos = 0; pos < segments.length; pos++) {\n          var segment = segments[pos];\n          switch (segment) {\n              case '':\n              case '.':\n                  break;\n              case '..':\n                  if (out.length > 0) {\n                      out.pop();\n                  }\n                  else {\n                      up++;\n                  }\n                  break;\n              default:\n                  out.push(segment);\n          }\n      }\n      if (leadingSlash == '') {\n          while (up-- > 0) {\n              out.unshift('..');\n          }\n          if (out.length === 0)\n              out.push('.');\n      }\n      return leadingSlash + out.join('/') + trailingSlash;\n  }\n  /**\n   * Takes an array of the parts from split and canonicalizes the path part\n   * and then joins all the parts.\n   */\n  function _joinAndCanonicalizePath(parts) {\n      var path = parts[_ComponentIndex.Path];\n      path = isBlank(path) ? '' : _removeDotSegments(path);\n      parts[_ComponentIndex.Path] = path;\n      return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);\n  }\n  /**\n   * Resolves a URL.\n   * @param base The URL acting as the base URL.\n   * @param to The URL to resolve.\n   */\n  function _resolveUrl(base, url) {\n      var parts = _split(encodeURI(url));\n      var baseParts = _split(base);\n      if (isPresent(parts[_ComponentIndex.Scheme])) {\n          return _joinAndCanonicalizePath(parts);\n      }\n      else {\n          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n      }\n      for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n          if (isBlank(parts[i])) {\n              parts[i] = baseParts[i];\n          }\n      }\n      if (parts[_ComponentIndex.Path][0] == '/') {\n          return _joinAndCanonicalizePath(parts);\n      }\n      var path = baseParts[_ComponentIndex.Path];\n      if (isBlank(path))\n          path = '/';\n      var index = path.lastIndexOf('/');\n      path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n      parts[_ComponentIndex.Path] = path;\n      return _joinAndCanonicalizePath(parts);\n  }\n\n  var DirectiveNormalizer = (function () {\n      function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {\n          this._resourceLoader = _resourceLoader;\n          this._urlResolver = _urlResolver;\n          this._htmlParser = _htmlParser;\n          this._config = _config;\n          this._resourceLoaderCache = new Map();\n      }\n      DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };\n      DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {\n          var _this = this;\n          if (!normalizedDirective.isComponent) {\n              return;\n          }\n          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);\n          normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });\n      };\n      DirectiveNormalizer.prototype._fetch = function (url) {\n          var result = this._resourceLoaderCache.get(url);\n          if (!result) {\n              result = this._resourceLoader.get(url);\n              this._resourceLoaderCache.set(url, result);\n          }\n          return result;\n      };\n      DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {\n          var _this = this;\n          var normalizedTemplateSync = null;\n          var normalizedTemplateAsync;\n          if (prenormData.template != null) {\n              if (typeof prenormData.template !== 'string') {\n                  throw syntaxError(\"The template specified for component \" + stringify(prenormData.componentType) + \" is not a string\");\n              }\n              normalizedTemplateSync = this.normalizeTemplateSync(prenormData);\n              normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);\n          }\n          else if (prenormData.templateUrl) {\n              if (typeof prenormData.templateUrl !== 'string') {\n                  throw syntaxError(\"The templateUrl specified for component \" + stringify(prenormData.componentType) + \" is not a string\");\n              }\n              normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);\n          }\n          else {\n              throw syntaxError(\"No template specified for component \" + stringify(prenormData.componentType));\n          }\n          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {\n              // sync case\n              return new SyncAsyncResult(normalizedTemplateSync);\n          }\n          else {\n              // async case\n              return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); }));\n          }\n      };\n      DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {\n          return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);\n      };\n      DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {\n          var _this = this;\n          var templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);\n          return this._fetch(templateUrl)\n              .then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl); });\n      };\n      DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenomData, template, templateAbsUrl) {\n          var interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);\n          var rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), true, interpolationConfig);\n          if (rootNodesAndErrors.errors.length > 0) {\n              var errorString = rootNodesAndErrors.errors.join('\\n');\n              throw syntaxError(\"Template parse errors:\\n\" + errorString);\n          }\n          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({\n              styles: prenomData.styles,\n              styleUrls: prenomData.styleUrls,\n              moduleUrl: prenomData.moduleUrl\n          }));\n          var visitor = new TemplatePreparseVisitor();\n          visitAll(visitor, rootNodesAndErrors.rootNodes);\n          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));\n          var encapsulation = prenomData.encapsulation;\n          if (encapsulation == null) {\n              encapsulation = this._config.defaultEncapsulation;\n          }\n          var styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n          var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n          if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 &&\n              styleUrls.length === 0) {\n              encapsulation = _angular_core.ViewEncapsulation.None;\n          }\n          return new CompileTemplateMetadata({\n              encapsulation: encapsulation,\n              template: template,\n              templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,\n              ngContentSelectors: visitor.ngContentSelectors,\n              animations: prenomData.animations,\n              interpolation: prenomData.interpolation,\n          });\n      };\n      DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {\n          return this._loadMissingExternalStylesheets(templateMeta.styleUrls)\n              .then(function (externalStylesheets) { return new CompileTemplateMetadata({\n              encapsulation: templateMeta.encapsulation,\n              template: templateMeta.template,\n              templateUrl: templateMeta.templateUrl,\n              styles: templateMeta.styles,\n              styleUrls: templateMeta.styleUrls,\n              externalStylesheets: externalStylesheets,\n              ngContentSelectors: templateMeta.ngContentSelectors,\n              animations: templateMeta.animations,\n              interpolation: templateMeta.interpolation\n          }); });\n      };\n      DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {\n          var _this = this;\n          if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }\n          return Promise\n              .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })\n              .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {\n              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));\n              loadedStylesheets.set(styleUrl, stylesheet);\n              return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n          }); }))\n              .then(function (_) { return Array.from(loadedStylesheets.values()); });\n      };\n      DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {\n          var _this = this;\n          var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n              .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });\n          var allStyles = stylesheet.styles.map(function (style) {\n              var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);\n              allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);\n              return styleWithImports.style;\n          });\n          return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });\n      };\n      return DirectiveNormalizer;\n  }());\n  DirectiveNormalizer.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  DirectiveNormalizer.ctorParameters = function () { return [\n      { type: ResourceLoader, },\n      { type: UrlResolver, },\n      { type: HtmlParser, },\n      { type: CompilerConfig, },\n  ]; };\n  var TemplatePreparseVisitor = (function () {\n      function TemplatePreparseVisitor() {\n          this.ngContentSelectors = [];\n          this.styles = [];\n          this.styleUrls = [];\n          this.ngNonBindableStackCount = 0;\n      }\n      TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {\n          var preparsedElement = preparseElement(ast);\n          switch (preparsedElement.type) {\n              case PreparsedElementType.NG_CONTENT:\n                  if (this.ngNonBindableStackCount === 0) {\n                      this.ngContentSelectors.push(preparsedElement.selectAttr);\n                  }\n                  break;\n              case PreparsedElementType.STYLE:\n                  var textContent_1 = '';\n                  ast.children.forEach(function (child) {\n                      if (child instanceof Text) {\n                          textContent_1 += child.value;\n                      }\n                  });\n                  this.styles.push(textContent_1);\n                  break;\n              case PreparsedElementType.STYLESHEET:\n                  this.styleUrls.push(preparsedElement.hrefAttr);\n                  break;\n              default:\n                  break;\n          }\n          if (preparsedElement.nonBindable) {\n              this.ngNonBindableStackCount++;\n          }\n          visitAll(this, ast.children);\n          if (preparsedElement.nonBindable) {\n              this.ngNonBindableStackCount--;\n          }\n          return null;\n      };\n      TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { visitAll(this, ast.cases); };\n      TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {\n          visitAll(this, ast.expression);\n      };\n      TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };\n      TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };\n      TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };\n      return TemplatePreparseVisitor;\n  }());\n\n  /*\n   * Resolve a `Type` for {@link Directive}.\n   *\n   * This interface can be overridden by the application developer to create custom behavior.\n   *\n   * See {@link Compiler}\n   */\n  var DirectiveResolver = (function () {\n      function DirectiveResolver(_reflector) {\n          if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }\n          this._reflector = _reflector;\n      }\n      DirectiveResolver.prototype.isDirective = function (type) {\n          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));\n          return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n      };\n      /**\n       * Return {@link Directive} for a given `Type`.\n       */\n      DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));\n          if (typeMetadata) {\n              var metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);\n              if (metadata) {\n                  var propertyMetadata = this._reflector.propMetadata(type);\n                  return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n              }\n          }\n          if (throwIfNotFound) {\n              throw new Error(\"No Directive annotation found on \" + stringify(type));\n          }\n          return null;\n      };\n      DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {\n          var inputs = [];\n          var outputs = [];\n          var host = {};\n          var queries = {};\n          Object.keys(propertyMetadata).forEach(function (propName) {\n              var input = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Input; });\n              if (input) {\n                  if (input.bindingPropertyName) {\n                      inputs.push(propName + \": \" + input.bindingPropertyName);\n                  }\n                  else {\n                      inputs.push(propName);\n                  }\n              }\n              var output = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Output; });\n              if (output) {\n                  if (output.bindingPropertyName) {\n                      outputs.push(propName + \": \" + output.bindingPropertyName);\n                  }\n                  else {\n                      outputs.push(propName);\n                  }\n              }\n              var hostBindings = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostBinding; });\n              hostBindings.forEach(function (hostBinding) {\n                  if (hostBinding.hostPropertyName) {\n                      var startWith = hostBinding.hostPropertyName[0];\n                      if (startWith === '(') {\n                          throw new Error(\"@HostBinding can not bind to events. Use @HostListener instead.\");\n                      }\n                      else if (startWith === '[') {\n                          throw new Error(\"@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.\");\n                      }\n                      host[\"[\" + hostBinding.hostPropertyName + \"]\"] = propName;\n                  }\n                  else {\n                      host[\"[\" + propName + \"]\"] = propName;\n                  }\n              });\n              var hostListeners = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostListener; });\n              hostListeners.forEach(function (hostListener) {\n                  var args = hostListener.args || [];\n                  host[\"(\" + hostListener.eventName + \")\"] = propName + \"(\" + args.join(',') + \")\";\n              });\n              var query = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Query; });\n              if (query) {\n                  queries[propName] = query;\n              }\n          });\n          return this._merge(dm, inputs, outputs, host, queries, directiveType);\n      };\n      DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };\n      DirectiveResolver.prototype._dedupeBindings = function (bindings) {\n          var names = new Set();\n          var reversedResult = [];\n          // go last to first to allow later entries to overwrite previous entries\n          for (var i = bindings.length - 1; i >= 0; i--) {\n              var binding = bindings[i];\n              var name_1 = this._extractPublicName(binding);\n              if (!names.has(name_1)) {\n                  names.add(name_1);\n                  reversedResult.push(binding);\n              }\n          }\n          return reversedResult.reverse();\n      };\n      DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {\n          var mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n          var mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n          var mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;\n          var mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;\n          if (directive instanceof _angular_core.Component) {\n              return new _angular_core.Component({\n                  selector: directive.selector,\n                  inputs: mergedInputs,\n                  outputs: mergedOutputs,\n                  host: mergedHost,\n                  exportAs: directive.exportAs,\n                  moduleId: directive.moduleId,\n                  queries: mergedQueries,\n                  changeDetection: directive.changeDetection,\n                  providers: directive.providers,\n                  viewProviders: directive.viewProviders,\n                  entryComponents: directive.entryComponents,\n                  template: directive.template,\n                  templateUrl: directive.templateUrl,\n                  styles: directive.styles,\n                  styleUrls: directive.styleUrls,\n                  encapsulation: directive.encapsulation,\n                  animations: directive.animations,\n                  interpolation: directive.interpolation\n              });\n          }\n          else {\n              return new _angular_core.Directive({\n                  selector: directive.selector,\n                  inputs: mergedInputs,\n                  outputs: mergedOutputs,\n                  host: mergedHost,\n                  exportAs: directive.exportAs,\n                  queries: mergedQueries,\n                  providers: directive.providers\n              });\n          }\n      };\n      return DirectiveResolver;\n  }());\n  DirectiveResolver.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  DirectiveResolver.ctorParameters = function () { return [\n      { type: _angular_core.ɵReflectorReader, },\n  ]; };\n  function isDirectiveMetadata(type) {\n      return type instanceof _angular_core.Directive;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$19 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  //// Types\n  var TypeModifier;\n  (function (TypeModifier) {\n      TypeModifier[TypeModifier[\"Const\"] = 0] = \"Const\";\n  })(TypeModifier || (TypeModifier = {}));\n  var Type$1 = (function () {\n      function Type(modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          this.modifiers = modifiers;\n          if (!modifiers) {\n              this.modifiers = [];\n          }\n      }\n      Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };\n      return Type;\n  }());\n  var BuiltinTypeName;\n  (function (BuiltinTypeName) {\n      BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n      BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n      BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n      BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n      BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n      BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n      BuiltinTypeName[BuiltinTypeName[\"Inferred\"] = 6] = \"Inferred\";\n  })(BuiltinTypeName || (BuiltinTypeName = {}));\n  var BuiltinType = (function (_super) {\n      __extends$19(BuiltinType, _super);\n      function BuiltinType(name, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, modifiers) || this;\n          _this.name = name;\n          return _this;\n      }\n      BuiltinType.prototype.visitType = function (visitor, context) {\n          return visitor.visitBuiltintType(this, context);\n      };\n      return BuiltinType;\n  }(Type$1));\n  var ExpressionType = (function (_super) {\n      __extends$19(ExpressionType, _super);\n      function ExpressionType(value, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, modifiers) || this;\n          _this.value = value;\n          return _this;\n      }\n      ExpressionType.prototype.visitType = function (visitor, context) {\n          return visitor.visitExpressionType(this, context);\n      };\n      return ExpressionType;\n  }(Type$1));\n  var ArrayType = (function (_super) {\n      __extends$19(ArrayType, _super);\n      function ArrayType(of, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, modifiers) || this;\n          _this.of = of;\n          return _this;\n      }\n      ArrayType.prototype.visitType = function (visitor, context) {\n          return visitor.visitArrayType(this, context);\n      };\n      return ArrayType;\n  }(Type$1));\n  var MapType = (function (_super) {\n      __extends$19(MapType, _super);\n      function MapType(valueType, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, modifiers) || this;\n          _this.valueType = valueType;\n          return _this;\n      }\n      MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };\n      return MapType;\n  }(Type$1));\n  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\n  var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\n  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\n  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\n  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\n  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\n  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\n  ///// Expressions\n  var BinaryOperator;\n  (function (BinaryOperator) {\n      BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n      BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n      BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n      BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n      BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n      BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n      BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n      BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n      BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n      BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n      BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n      BinaryOperator[BinaryOperator[\"Lower\"] = 11] = \"Lower\";\n      BinaryOperator[BinaryOperator[\"LowerEquals\"] = 12] = \"LowerEquals\";\n      BinaryOperator[BinaryOperator[\"Bigger\"] = 13] = \"Bigger\";\n      BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 14] = \"BiggerEquals\";\n  })(BinaryOperator || (BinaryOperator = {}));\n  var Expression = (function () {\n      function Expression(type, sourceSpan) {\n          this.type = type;\n          this.sourceSpan = sourceSpan;\n      }\n      Expression.prototype.prop = function (name, sourceSpan) {\n          return new ReadPropExpr(this, name, null, sourceSpan);\n      };\n      Expression.prototype.key = function (index, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          return new ReadKeyExpr(this, index, type, sourceSpan);\n      };\n      Expression.prototype.callMethod = function (name, params, sourceSpan) {\n          return new InvokeMethodExpr(this, name, params, null, sourceSpan);\n      };\n      Expression.prototype.callFn = function (params, sourceSpan) {\n          return new InvokeFunctionExpr(this, params, null, sourceSpan);\n      };\n      Expression.prototype.instantiate = function (params, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          return new InstantiateExpr(this, params, type, sourceSpan);\n      };\n      Expression.prototype.conditional = function (trueCase, falseCase, sourceSpan) {\n          if (falseCase === void 0) { falseCase = null; }\n          return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n      };\n      Expression.prototype.equals = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.notEquals = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.identical = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.notIdentical = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.minus = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.plus = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.divide = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.multiply = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.modulo = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.and = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.or = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.lower = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.lowerEquals = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.bigger = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.biggerEquals = function (rhs, sourceSpan) {\n          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n      };\n      Expression.prototype.isBlank = function (sourceSpan) {\n          // Note: We use equals by purpose here to compare to null and undefined in JS.\n          // We use the typed null to allow strictNullChecks to narrow types.\n          return this.equals(TYPED_NULL_EXPR, sourceSpan);\n      };\n      Expression.prototype.cast = function (type, sourceSpan) {\n          return new CastExpr(this, type, sourceSpan);\n      };\n      Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };\n      return Expression;\n  }());\n  var BuiltinVar;\n  (function (BuiltinVar) {\n      BuiltinVar[BuiltinVar[\"This\"] = 0] = \"This\";\n      BuiltinVar[BuiltinVar[\"Super\"] = 1] = \"Super\";\n      BuiltinVar[BuiltinVar[\"CatchError\"] = 2] = \"CatchError\";\n      BuiltinVar[BuiltinVar[\"CatchStack\"] = 3] = \"CatchStack\";\n  })(BuiltinVar || (BuiltinVar = {}));\n  var ReadVarExpr = (function (_super) {\n      __extends$19(ReadVarExpr, _super);\n      function ReadVarExpr(name, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          if (typeof name === 'string') {\n              _this.name = name;\n              _this.builtin = null;\n          }\n          else {\n              _this.name = null;\n              _this.builtin = name;\n          }\n          return _this;\n      }\n      ReadVarExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitReadVarExpr(this, context);\n      };\n      ReadVarExpr.prototype.set = function (value) {\n          return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n      };\n      return ReadVarExpr;\n  }(Expression));\n  var WriteVarExpr = (function (_super) {\n      __extends$19(WriteVarExpr, _super);\n      function WriteVarExpr(name, value, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type || value.type, sourceSpan) || this;\n          _this.name = name;\n          _this.value = value;\n          return _this;\n      }\n      WriteVarExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitWriteVarExpr(this, context);\n      };\n      WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n      };\n      return WriteVarExpr;\n  }(Expression));\n  var WriteKeyExpr = (function (_super) {\n      __extends$19(WriteKeyExpr, _super);\n      function WriteKeyExpr(receiver, index, value, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type || value.type, sourceSpan) || this;\n          _this.receiver = receiver;\n          _this.index = index;\n          _this.value = value;\n          return _this;\n      }\n      WriteKeyExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitWriteKeyExpr(this, context);\n      };\n      return WriteKeyExpr;\n  }(Expression));\n  var WritePropExpr = (function (_super) {\n      __extends$19(WritePropExpr, _super);\n      function WritePropExpr(receiver, name, value, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type || value.type, sourceSpan) || this;\n          _this.receiver = receiver;\n          _this.name = name;\n          _this.value = value;\n          return _this;\n      }\n      WritePropExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitWritePropExpr(this, context);\n      };\n      return WritePropExpr;\n  }(Expression));\n  var BuiltinMethod;\n  (function (BuiltinMethod) {\n      BuiltinMethod[BuiltinMethod[\"ConcatArray\"] = 0] = \"ConcatArray\";\n      BuiltinMethod[BuiltinMethod[\"SubscribeObservable\"] = 1] = \"SubscribeObservable\";\n      BuiltinMethod[BuiltinMethod[\"Bind\"] = 2] = \"Bind\";\n  })(BuiltinMethod || (BuiltinMethod = {}));\n  var InvokeMethodExpr = (function (_super) {\n      __extends$19(InvokeMethodExpr, _super);\n      function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.receiver = receiver;\n          _this.args = args;\n          if (typeof method === 'string') {\n              _this.name = method;\n              _this.builtin = null;\n          }\n          else {\n              _this.name = null;\n              _this.builtin = method;\n          }\n          return _this;\n      }\n      InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitInvokeMethodExpr(this, context);\n      };\n      return InvokeMethodExpr;\n  }(Expression));\n  var InvokeFunctionExpr = (function (_super) {\n      __extends$19(InvokeFunctionExpr, _super);\n      function InvokeFunctionExpr(fn, args, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.fn = fn;\n          _this.args = args;\n          return _this;\n      }\n      InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitInvokeFunctionExpr(this, context);\n      };\n      return InvokeFunctionExpr;\n  }(Expression));\n  var InstantiateExpr = (function (_super) {\n      __extends$19(InstantiateExpr, _super);\n      function InstantiateExpr(classExpr, args, type, sourceSpan) {\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.classExpr = classExpr;\n          _this.args = args;\n          return _this;\n      }\n      InstantiateExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitInstantiateExpr(this, context);\n      };\n      return InstantiateExpr;\n  }(Expression));\n  var LiteralExpr = (function (_super) {\n      __extends$19(LiteralExpr, _super);\n      function LiteralExpr(value, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.value = value;\n          return _this;\n      }\n      LiteralExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitLiteralExpr(this, context);\n      };\n      return LiteralExpr;\n  }(Expression));\n  var ExternalExpr = (function (_super) {\n      __extends$19(ExternalExpr, _super);\n      function ExternalExpr(value, type, typeParams, sourceSpan) {\n          if (type === void 0) { type = null; }\n          if (typeParams === void 0) { typeParams = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.value = value;\n          _this.typeParams = typeParams;\n          return _this;\n      }\n      ExternalExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitExternalExpr(this, context);\n      };\n      return ExternalExpr;\n  }(Expression));\n  var ConditionalExpr = (function (_super) {\n      __extends$19(ConditionalExpr, _super);\n      function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {\n          if (falseCase === void 0) { falseCase = null; }\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;\n          _this.condition = condition;\n          _this.falseCase = falseCase;\n          _this.trueCase = trueCase;\n          return _this;\n      }\n      ConditionalExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitConditionalExpr(this, context);\n      };\n      return ConditionalExpr;\n  }(Expression));\n  var NotExpr = (function (_super) {\n      __extends$19(NotExpr, _super);\n      function NotExpr(condition, sourceSpan) {\n          var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;\n          _this.condition = condition;\n          return _this;\n      }\n      NotExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitNotExpr(this, context);\n      };\n      return NotExpr;\n  }(Expression));\n  var CastExpr = (function (_super) {\n      __extends$19(CastExpr, _super);\n      function CastExpr(value, type, sourceSpan) {\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.value = value;\n          return _this;\n      }\n      CastExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitCastExpr(this, context);\n      };\n      return CastExpr;\n  }(Expression));\n  var FnParam = (function () {\n      function FnParam(name, type) {\n          if (type === void 0) { type = null; }\n          this.name = name;\n          this.type = type;\n      }\n      return FnParam;\n  }());\n  var FunctionExpr = (function (_super) {\n      __extends$19(FunctionExpr, _super);\n      function FunctionExpr(params, statements, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.params = params;\n          _this.statements = statements;\n          return _this;\n      }\n      FunctionExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitFunctionExpr(this, context);\n      };\n      FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n      };\n      return FunctionExpr;\n  }(Expression));\n  var BinaryOperatorExpr = (function (_super) {\n      __extends$19(BinaryOperatorExpr, _super);\n      function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type || lhs.type, sourceSpan) || this;\n          _this.operator = operator;\n          _this.rhs = rhs;\n          _this.lhs = lhs;\n          return _this;\n      }\n      BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitBinaryOperatorExpr(this, context);\n      };\n      return BinaryOperatorExpr;\n  }(Expression));\n  var ReadPropExpr = (function (_super) {\n      __extends$19(ReadPropExpr, _super);\n      function ReadPropExpr(receiver, name, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.receiver = receiver;\n          _this.name = name;\n          return _this;\n      }\n      ReadPropExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitReadPropExpr(this, context);\n      };\n      ReadPropExpr.prototype.set = function (value) {\n          return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n      };\n      return ReadPropExpr;\n  }(Expression));\n  var ReadKeyExpr = (function (_super) {\n      __extends$19(ReadKeyExpr, _super);\n      function ReadKeyExpr(receiver, index, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.receiver = receiver;\n          _this.index = index;\n          return _this;\n      }\n      ReadKeyExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitReadKeyExpr(this, context);\n      };\n      ReadKeyExpr.prototype.set = function (value) {\n          return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n      };\n      return ReadKeyExpr;\n  }(Expression));\n  var LiteralArrayExpr = (function (_super) {\n      __extends$19(LiteralArrayExpr, _super);\n      function LiteralArrayExpr(entries, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.entries = entries;\n          return _this;\n      }\n      LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitLiteralArrayExpr(this, context);\n      };\n      return LiteralArrayExpr;\n  }(Expression));\n  var LiteralMapEntry = (function () {\n      function LiteralMapEntry(key, value, quoted) {\n          if (quoted === void 0) { quoted = false; }\n          this.key = key;\n          this.value = value;\n          this.quoted = quoted;\n      }\n      return LiteralMapEntry;\n  }());\n  var LiteralMapExpr = (function (_super) {\n      __extends$19(LiteralMapExpr, _super);\n      function LiteralMapExpr(entries, type, sourceSpan) {\n          if (type === void 0) { type = null; }\n          var _this = _super.call(this, type, sourceSpan) || this;\n          _this.entries = entries;\n          _this.valueType = null;\n          if (type) {\n              _this.valueType = type.valueType;\n          }\n          return _this;\n      }\n      LiteralMapExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitLiteralMapExpr(this, context);\n      };\n      return LiteralMapExpr;\n  }(Expression));\n  var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);\n  var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);\n  var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);\n  var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);\n  var NULL_EXPR = new LiteralExpr(null, null);\n  var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE);\n  //// Statements\n  var StmtModifier;\n  (function (StmtModifier) {\n      StmtModifier[StmtModifier[\"Final\"] = 0] = \"Final\";\n      StmtModifier[StmtModifier[\"Private\"] = 1] = \"Private\";\n  })(StmtModifier || (StmtModifier = {}));\n  var Statement = (function () {\n      function Statement(modifiers, sourceSpan) {\n          if (modifiers === void 0) { modifiers = null; }\n          this.modifiers = modifiers;\n          this.sourceSpan = sourceSpan;\n          if (!modifiers) {\n              this.modifiers = [];\n          }\n      }\n      Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };\n      return Statement;\n  }());\n  var DeclareVarStmt = (function (_super) {\n      __extends$19(DeclareVarStmt, _super);\n      function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, modifiers, sourceSpan) || this;\n          _this.name = name;\n          _this.value = value;\n          _this.type = type || value.type;\n          return _this;\n      }\n      DeclareVarStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitDeclareVarStmt(this, context);\n      };\n      return DeclareVarStmt;\n  }(Statement));\n  var DeclareFunctionStmt = (function (_super) {\n      __extends$19(DeclareFunctionStmt, _super);\n      function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, modifiers, sourceSpan) || this;\n          _this.name = name;\n          _this.params = params;\n          _this.statements = statements;\n          _this.type = type;\n          return _this;\n      }\n      DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitDeclareFunctionStmt(this, context);\n      };\n      return DeclareFunctionStmt;\n  }(Statement));\n  var ExpressionStatement = (function (_super) {\n      __extends$19(ExpressionStatement, _super);\n      function ExpressionStatement(expr, sourceSpan) {\n          var _this = _super.call(this, null, sourceSpan) || this;\n          _this.expr = expr;\n          return _this;\n      }\n      ExpressionStatement.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitExpressionStmt(this, context);\n      };\n      return ExpressionStatement;\n  }(Statement));\n  var ReturnStatement = (function (_super) {\n      __extends$19(ReturnStatement, _super);\n      function ReturnStatement(value, sourceSpan) {\n          var _this = _super.call(this, null, sourceSpan) || this;\n          _this.value = value;\n          return _this;\n      }\n      ReturnStatement.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitReturnStmt(this, context);\n      };\n      return ReturnStatement;\n  }(Statement));\n  var AbstractClassPart = (function () {\n      function AbstractClassPart(type, modifiers) {\n          if (type === void 0) { type = null; }\n          this.type = type;\n          this.modifiers = modifiers;\n          if (!modifiers) {\n              this.modifiers = [];\n          }\n      }\n      AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };\n      return AbstractClassPart;\n  }());\n  var ClassField = (function (_super) {\n      __extends$19(ClassField, _super);\n      function ClassField(name, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, type, modifiers) || this;\n          _this.name = name;\n          return _this;\n      }\n      return ClassField;\n  }(AbstractClassPart));\n  var ClassMethod = (function (_super) {\n      __extends$19(ClassMethod, _super);\n      function ClassMethod(name, params, body, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, type, modifiers) || this;\n          _this.name = name;\n          _this.params = params;\n          _this.body = body;\n          return _this;\n      }\n      return ClassMethod;\n  }(AbstractClassPart));\n  var ClassGetter = (function (_super) {\n      __extends$19(ClassGetter, _super);\n      function ClassGetter(name, body, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, type, modifiers) || this;\n          _this.name = name;\n          _this.body = body;\n          return _this;\n      }\n      return ClassGetter;\n  }(AbstractClassPart));\n  var ClassStmt = (function (_super) {\n      __extends$19(ClassStmt, _super);\n      function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {\n          if (modifiers === void 0) { modifiers = null; }\n          var _this = _super.call(this, modifiers, sourceSpan) || this;\n          _this.name = name;\n          _this.parent = parent;\n          _this.fields = fields;\n          _this.getters = getters;\n          _this.constructorMethod = constructorMethod;\n          _this.methods = methods;\n          return _this;\n      }\n      ClassStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitDeclareClassStmt(this, context);\n      };\n      return ClassStmt;\n  }(Statement));\n  var IfStmt = (function (_super) {\n      __extends$19(IfStmt, _super);\n      function IfStmt(condition, trueCase, falseCase, sourceSpan) {\n          if (falseCase === void 0) { falseCase = []; }\n          var _this = _super.call(this, null, sourceSpan) || this;\n          _this.condition = condition;\n          _this.trueCase = trueCase;\n          _this.falseCase = falseCase;\n          return _this;\n      }\n      IfStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitIfStmt(this, context);\n      };\n      return IfStmt;\n  }(Statement));\n  var CommentStmt = (function (_super) {\n      __extends$19(CommentStmt, _super);\n      function CommentStmt(comment, sourceSpan) {\n          var _this = _super.call(this, null, sourceSpan) || this;\n          _this.comment = comment;\n          return _this;\n      }\n      CommentStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitCommentStmt(this, context);\n      };\n      return CommentStmt;\n  }(Statement));\n  var TryCatchStmt = (function (_super) {\n      __extends$19(TryCatchStmt, _super);\n      function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {\n          var _this = _super.call(this, null, sourceSpan) || this;\n          _this.bodyStmts = bodyStmts;\n          _this.catchStmts = catchStmts;\n          return _this;\n      }\n      TryCatchStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitTryCatchStmt(this, context);\n      };\n      return TryCatchStmt;\n  }(Statement));\n  var ThrowStmt = (function (_super) {\n      __extends$19(ThrowStmt, _super);\n      function ThrowStmt(error, sourceSpan) {\n          var _this = _super.call(this, null, sourceSpan) || this;\n          _this.error = error;\n          return _this;\n      }\n      ThrowStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitThrowStmt(this, context);\n      };\n      return ThrowStmt;\n  }(Statement));\n  var ExpressionTransformer = (function () {\n      function ExpressionTransformer() {\n      }\n      ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };\n      ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {\n          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {\n          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {\n          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {\n          var method = ast.builtin || ast.name;\n          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {\n          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {\n          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };\n      ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };\n      ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {\n          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {\n          return new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {\n          return new CastExpr(ast.value.visitExpression(this, context), context, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {\n          // Don't descend into nested functions\n          return ast;\n      };\n      ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {\n          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {\n          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {\n          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {\n          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {\n          var _this = this;\n          var entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted); });\n          var mapType = new MapType(ast.valueType);\n          return new LiteralMapExpr(entries, mapType, ast.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {\n          var _this = this;\n          return exprs.map(function (expr) { return expr.visitExpression(_this, context); });\n      };\n      ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {\n          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers, stmt.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {\n          return new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {\n          return new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {\n          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {\n          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {\n          return new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan);\n      };\n      ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };\n      ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {\n          var _this = this;\n          return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });\n      };\n      return ExpressionTransformer;\n  }());\n  var RecursiveExpressionVisitor = (function () {\n      function RecursiveExpressionVisitor() {\n      }\n      RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {\n          expr.value.visitExpression(this, context);\n          return expr;\n      };\n      RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {\n          expr.receiver.visitExpression(this, context);\n          expr.index.visitExpression(this, context);\n          expr.value.visitExpression(this, context);\n          return expr;\n      };\n      RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {\n          expr.receiver.visitExpression(this, context);\n          expr.value.visitExpression(this, context);\n          return expr;\n      };\n      RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {\n          ast.receiver.visitExpression(this, context);\n          this.visitAllExpressions(ast.args, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {\n          ast.fn.visitExpression(this, context);\n          this.visitAllExpressions(ast.args, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {\n          ast.classExpr.visitExpression(this, context);\n          this.visitAllExpressions(ast.args, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {\n          ast.condition.visitExpression(this, context);\n          ast.trueCase.visitExpression(this, context);\n          ast.falseCase.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {\n          ast.condition.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {\n          ast.value.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {\n          ast.lhs.visitExpression(this, context);\n          ast.rhs.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {\n          ast.receiver.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {\n          ast.receiver.visitExpression(this, context);\n          ast.index.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {\n          this.visitAllExpressions(ast.entries, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {\n          var _this = this;\n          ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {\n          var _this = this;\n          exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });\n      };\n      RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {\n          stmt.value.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {\n          stmt.expr.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {\n          stmt.value.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {\n          stmt.condition.visitExpression(this, context);\n          this.visitAllStatements(stmt.trueCase, context);\n          this.visitAllStatements(stmt.falseCase, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {\n          this.visitAllStatements(stmt.bodyStmts, context);\n          this.visitAllStatements(stmt.catchStmts, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {\n          stmt.error.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };\n      RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {\n          var _this = this;\n          stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });\n      };\n      return RecursiveExpressionVisitor;\n  }());\n  function replaceVarInExpression(varName, newValue, expression) {\n      var transformer = new _ReplaceVariableTransformer(varName, newValue);\n      return expression.visitExpression(transformer, null);\n  }\n  var _ReplaceVariableTransformer = (function (_super) {\n      __extends$19(_ReplaceVariableTransformer, _super);\n      function _ReplaceVariableTransformer(_varName, _newValue) {\n          var _this = _super.call(this) || this;\n          _this._varName = _varName;\n          _this._newValue = _newValue;\n          return _this;\n      }\n      _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {\n          return ast.name == this._varName ? this._newValue : ast;\n      };\n      return _ReplaceVariableTransformer;\n  }(ExpressionTransformer));\n  function findReadVarNames(stmts) {\n      var finder = new _VariableFinder();\n      finder.visitAllStatements(stmts, null);\n      return finder.varNames;\n  }\n  var _VariableFinder = (function (_super) {\n      __extends$19(_VariableFinder, _super);\n      function _VariableFinder() {\n          var _this = _super !== null && _super.apply(this, arguments) || this;\n          _this.varNames = new Set();\n          return _this;\n      }\n      _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {\n          this.varNames.add(ast.name);\n          return null;\n      };\n      return _VariableFinder;\n  }(RecursiveExpressionVisitor));\n  function variable(name, type, sourceSpan) {\n      if (type === void 0) { type = null; }\n      return new ReadVarExpr(name, type, sourceSpan);\n  }\n  function importExpr(id, typeParams, sourceSpan) {\n      if (typeParams === void 0) { typeParams = null; }\n      return new ExternalExpr(id, null, typeParams, sourceSpan);\n  }\n  function importType(id, typeParams, typeModifiers) {\n      if (typeParams === void 0) { typeParams = null; }\n      if (typeModifiers === void 0) { typeModifiers = null; }\n      return isPresent(id) ? expressionType(importExpr(id, typeParams), typeModifiers) : null;\n  }\n  function expressionType(expr, typeModifiers) {\n      if (typeModifiers === void 0) { typeModifiers = null; }\n      return isPresent(expr) ? new ExpressionType(expr, typeModifiers) : null;\n  }\n  function literalArr(values, type, sourceSpan) {\n      if (type === void 0) { type = null; }\n      return new LiteralArrayExpr(values, type, sourceSpan);\n  }\n  function literalMap(values, type, quoted) {\n      if (type === void 0) { type = null; }\n      if (quoted === void 0) { quoted = false; }\n      return new LiteralMapExpr(values.map(function (entry) { return new LiteralMapEntry(entry[0], entry[1], quoted); }), type);\n  }\n  function not(expr, sourceSpan) {\n      return new NotExpr(expr, sourceSpan);\n  }\n  function fn(params, body, type, sourceSpan) {\n      if (type === void 0) { type = null; }\n      return new FunctionExpr(params, body, type, sourceSpan);\n  }\n  function literal(value, type, sourceSpan) {\n      if (type === void 0) { type = null; }\n      return new LiteralExpr(value, type, sourceSpan);\n  }\n\n  var CheckBindingField = (function () {\n      function CheckBindingField(expression, bindingId) {\n          this.expression = expression;\n          this.bindingId = bindingId;\n      }\n      return CheckBindingField;\n  }());\n  function createCheckBindingField(builder) {\n      var bindingId = \"\" + builder.fields.length;\n      var fieldExpr = createBindFieldExpr(bindingId);\n      // private is fine here as no child view will reference the cached value...\n      builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));\n      builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(literal(undefined)).toStmt());\n      return new CheckBindingField(fieldExpr, bindingId);\n  }\n  function createBindFieldExpr(bindingId) {\n      return THIS_EXPR.prop(\"_expr_\" + bindingId);\n  }\n  function isFirstViewCheck(view) {\n      return not(view.prop('numberOfChecks'));\n  }\n\n  function createDiTokenExpression(token) {\n      if (isPresent(token.value)) {\n          return literal(token.value);\n      }\n      else {\n          return importExpr(token.identifier);\n      }\n  }\n  function createInlineArray(values) {\n      if (values.length === 0) {\n          return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY));\n      }\n      var log2 = Math.log(values.length) / Math.log(2);\n      var index = Math.ceil(log2);\n      var identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] :\n          Identifiers.InlineArrayDynamic;\n      var identifier = createIdentifier(identifierSpec);\n      return importExpr(identifier).instantiate([\n          literal(values.length)\n      ].concat(values));\n  }\n  function createPureProxy(fn, argCount, pureProxyProp, builder) {\n      builder.fields.push(new ClassField(pureProxyProp.name, null));\n      var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;\n      if (!pureProxyId) {\n          throw new Error(\"Unsupported number of argument for pure functions: \" + argCount);\n      }\n      builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name)\n          .set(importExpr(createIdentifier(pureProxyId)).callFn([fn]))\n          .toStmt());\n  }\n  function createEnumExpression(enumType, enumValue) {\n      var enumName = Object.keys(enumType.runtime).find(function (propName) { return enumType.runtime[propName] === enumValue; });\n      if (!enumName) {\n          throw new Error(\"Unknown enum value \" + enumValue + \" in \" + enumType.name);\n      }\n      return importExpr(createEnumIdentifier(enumType, enumName));\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$20 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var VAL_UNWRAPPER_VAR = variable(\"valUnwrapper\");\n  var EventHandlerVars = (function () {\n      function EventHandlerVars() {\n      }\n      return EventHandlerVars;\n  }());\n  EventHandlerVars.event = variable('$event');\n  var ConvertActionBindingResult = (function () {\n      function ConvertActionBindingResult(stmts, allowDefault) {\n          this.stmts = stmts;\n          this.allowDefault = allowDefault;\n      }\n      return ConvertActionBindingResult;\n  }());\n  /**\n   * Converts the given expression AST into an executable output AST, assuming the expression is\n   * used in an action binding (e.g. an event handler).\n   */\n  function convertActionBinding(localResolver, implicitReceiver, action, bindingId) {\n      if (!localResolver) {\n          localResolver = new DefaultLocalResolver();\n      }\n      var actionWithoutBuiltins = convertPropertyBindingBuiltins({\n          createLiteralArrayConverter: function (argCount) {\n              // Note: no caching for literal arrays in actions.\n              return function (args) { return literalArr(args); };\n          },\n          createLiteralMapConverter: function (keys) {\n              // Note: no caching for literal maps in actions.\n              return function (args) {\n                  return literalMap(keys.map(function (key, i) { return [key, args[i]]; }));\n              };\n          },\n          createPipeConverter: function (name) {\n              throw new Error(\"Illegal State: Actions are not allowed to contain pipes. Pipe: \" + name);\n          }\n      }, action);\n      var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);\n      var actionStmts = [];\n      flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n      prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n      var lastIndex = actionStmts.length - 1;\n      var preventDefaultVar = null;\n      if (lastIndex >= 0) {\n          var lastStatement = actionStmts[lastIndex];\n          var returnExpr = convertStmtIntoExpression(lastStatement);\n          if (returnExpr) {\n              // Note: We need to cast the result of the method call to dynamic,\n              // as it might be a void method!\n              preventDefaultVar = createPreventDefaultVar(bindingId);\n              actionStmts[lastIndex] =\n                  preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))\n                      .toDeclStmt(null, [StmtModifier.Final]);\n          }\n      }\n      return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n  }\n  function convertPropertyBindingBuiltins(converterFactory, ast) {\n      return convertBuiltins(converterFactory, ast);\n  }\n  var ConvertPropertyBindingResult = (function () {\n      function ConvertPropertyBindingResult(stmts, currValExpr) {\n          this.stmts = stmts;\n          this.currValExpr = currValExpr;\n      }\n      return ConvertPropertyBindingResult;\n  }());\n  /**\n   * Converts the given expression AST into an executable output AST, assuming the expression\n   * is used in property binding. The expression has to be preprocessed via\n   * `convertPropertyBindingBuiltins`.\n   */\n  function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {\n      if (!localResolver) {\n          localResolver = new DefaultLocalResolver();\n      }\n      var currValExpr = createCurrValueExpr(bindingId);\n      var stmts = [];\n      var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);\n      var outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n      if (visitor.temporaryCount) {\n          for (var i = 0; i < visitor.temporaryCount; i++) {\n              stmts.push(temporaryDeclaration(bindingId, i));\n          }\n      }\n      stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));\n      return new ConvertPropertyBindingResult(stmts, currValExpr);\n  }\n  var LegacyConvertPropertyBindingResult = (function () {\n      function LegacyConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {\n          this.stmts = stmts;\n          this.currValExpr = currValExpr;\n          this.forceUpdate = forceUpdate;\n      }\n      return LegacyConvertPropertyBindingResult;\n  }());\n  /**\n   * Converts the given expression AST into an executable output AST, assuming the expression is\n   * used in a property binding.\n   */\n  function legacyConvertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {\n      if (!nameResolver) {\n          nameResolver = new LegacyDefaultNameResolver();\n      }\n      var needsValueUnwrapper = false;\n      var expressionWithoutBuiltins = convertBuiltins({\n          createLiteralArrayConverter: function (argCount) {\n              return function (args) { return legacyCreateCachedLiteralArray(builder, args); };\n          },\n          createLiteralMapConverter: function (keys) {\n              return function (args) { return legacyCreateCachedLiteralMap(builder, keys.map(function (key, i) { return [key, args[i]]; })); };\n          },\n          createPipeConverter: function (name) {\n              needsValueUnwrapper = true;\n              return function (args) { return VAL_UNWRAPPER_VAR.callMethod('unwrap', [nameResolver.callPipe(name, args[0], args.slice(1))]); };\n          }\n      }, expression);\n      var _a = convertPropertyBinding(nameResolver, implicitReceiver, expressionWithoutBuiltins, bindingId), stmts = _a.stmts, currValExpr = _a.currValExpr;\n      var forceUpdate = null;\n      if (needsValueUnwrapper) {\n          var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();\n          stmts.unshift(initValueUnwrapperStmt);\n          forceUpdate = VAL_UNWRAPPER_VAR.prop('hasWrappedValue');\n      }\n      return new LegacyConvertPropertyBindingResult(stmts, currValExpr, forceUpdate);\n  }\n  /**\n   * Creates variables that are shared by multiple calls to `convertActionBinding` /\n   * `convertPropertyBinding`\n   */\n  function legacyCreateSharedBindingVariablesIfNeeded(stmts) {\n      var unwrapperStmts = [];\n      var readVars = findReadVarNames(stmts);\n      if (readVars.has(VAL_UNWRAPPER_VAR.name)) {\n          unwrapperStmts.push(VAL_UNWRAPPER_VAR\n              .set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))\n              .toDeclStmt(null, [StmtModifier.Final]));\n      }\n      return unwrapperStmts;\n  }\n  function convertBuiltins(converterFactory, ast) {\n      var visitor = new _BuiltinAstConverter(converterFactory);\n      return ast.visit(visitor);\n  }\n  function temporaryName(bindingId, temporaryNumber) {\n      return \"tmp_\" + bindingId + \"_\" + temporaryNumber;\n  }\n  function temporaryDeclaration(bindingId, temporaryNumber) {\n      return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);\n  }\n  function prependTemporaryDecls(temporaryCount, bindingId, statements) {\n      for (var i = temporaryCount - 1; i >= 0; i--) {\n          statements.unshift(temporaryDeclaration(bindingId, i));\n      }\n  }\n  var _Mode;\n  (function (_Mode) {\n      _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n      _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n  })(_Mode || (_Mode = {}));\n  function ensureStatementMode(mode, ast) {\n      if (mode !== _Mode.Statement) {\n          throw new Error(\"Expected a statement, but saw \" + ast);\n      }\n  }\n  function ensureExpressionMode(mode, ast) {\n      if (mode !== _Mode.Expression) {\n          throw new Error(\"Expected an expression, but saw \" + ast);\n      }\n  }\n  function convertToStatementIfNeeded(mode, expr) {\n      if (mode === _Mode.Statement) {\n          return expr.toStmt();\n      }\n      else {\n          return expr;\n      }\n  }\n  var _BuiltinAstConverter = (function (_super) {\n      __extends$20(_BuiltinAstConverter, _super);\n      function _BuiltinAstConverter(_converterFactory) {\n          var _this = _super.call(this) || this;\n          _this._converterFactory = _converterFactory;\n          return _this;\n      }\n      _BuiltinAstConverter.prototype.visitPipe = function (ast, context) {\n          var _this = this;\n          var args = [ast.exp].concat(ast.args).map(function (ast) { return ast.visit(_this, context); });\n          return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n      };\n      _BuiltinAstConverter.prototype.visitLiteralArray = function (ast, context) {\n          var _this = this;\n          var args = ast.expressions.map(function (ast) { return ast.visit(_this, context); });\n          return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n      };\n      _BuiltinAstConverter.prototype.visitLiteralMap = function (ast, context) {\n          var _this = this;\n          var args = ast.values.map(function (ast) { return ast.visit(_this, context); });\n          return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n      };\n      return _BuiltinAstConverter;\n  }(AstTransformer));\n  var _AstToIrVisitor = (function () {\n      function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId) {\n          this._localResolver = _localResolver;\n          this._implicitReceiver = _implicitReceiver;\n          this.bindingId = bindingId;\n          this._nodeMap = new Map();\n          this._resultMap = new Map();\n          this._currentTemporary = 0;\n          this.temporaryCount = 0;\n      }\n      _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {\n          var op;\n          switch (ast.operation) {\n              case '+':\n                  op = BinaryOperator.Plus;\n                  break;\n              case '-':\n                  op = BinaryOperator.Minus;\n                  break;\n              case '*':\n                  op = BinaryOperator.Multiply;\n                  break;\n              case '/':\n                  op = BinaryOperator.Divide;\n                  break;\n              case '%':\n                  op = BinaryOperator.Modulo;\n                  break;\n              case '&&':\n                  op = BinaryOperator.And;\n                  break;\n              case '||':\n                  op = BinaryOperator.Or;\n                  break;\n              case '==':\n                  op = BinaryOperator.Equals;\n                  break;\n              case '!=':\n                  op = BinaryOperator.NotEquals;\n                  break;\n              case '===':\n                  op = BinaryOperator.Identical;\n                  break;\n              case '!==':\n                  op = BinaryOperator.NotIdentical;\n                  break;\n              case '<':\n                  op = BinaryOperator.Lower;\n                  break;\n              case '>':\n                  op = BinaryOperator.Bigger;\n                  break;\n              case '<=':\n                  op = BinaryOperator.LowerEquals;\n                  break;\n              case '>=':\n                  op = BinaryOperator.BiggerEquals;\n                  break;\n              default:\n                  throw new Error(\"Unsupported operation \" + ast.operation);\n          }\n          return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitChain = function (ast, mode) {\n          ensureStatementMode(mode, ast);\n          return this.visitAll(ast.expressions, mode);\n      };\n      _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {\n          var value = this.visit(ast.condition, _Mode.Expression);\n          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {\n          throw new Error(\"Illegal state: Pipes should have been converted into functions. Pipe: \" + ast.name);\n      };\n      _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {\n          var convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n          var fnResult;\n          if (ast instanceof BuiltinFunctionCall) {\n              fnResult = ast.converter(convertedArgs);\n          }\n          else {\n              fnResult = this.visit(ast.target, _Mode.Expression).callFn(convertedArgs);\n          }\n          return convertToStatementIfNeeded(mode, fnResult);\n      };\n      _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {\n          ensureExpressionMode(mode, ast);\n          return this._implicitReceiver;\n      };\n      _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {\n          ensureExpressionMode(mode, ast);\n          var args = [literal(ast.expressions.length)];\n          for (var i = 0; i < ast.strings.length - 1; i++) {\n              args.push(literal(ast.strings[i]));\n              args.push(this.visit(ast.expressions[i], _Mode.Expression));\n          }\n          args.push(literal(ast.strings[ast.strings.length - 1]));\n          return ast.expressions.length <= 9 ?\n              importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) :\n              importExpr(createIdentifier(Identifiers.interpolate)).callFn([\n                  args[0], literalArr(args.slice(1))\n              ]);\n      };\n      _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {\n          var leftMostSafe = this.leftMostSafeNode(ast);\n          if (leftMostSafe) {\n              return this.convertSafeAccess(ast, leftMostSafe, mode);\n          }\n          else {\n              return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));\n          }\n      };\n      _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {\n          var obj = this.visit(ast.obj, _Mode.Expression);\n          var key = this.visit(ast.key, _Mode.Expression);\n          var value = this.visit(ast.value, _Mode.Expression);\n          return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n      };\n      _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {\n          throw new Error(\"Illegal State: literal arrays should have been converted into functions\");\n      };\n      _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {\n          throw new Error(\"Illegal State: literal maps should have been converted into functions\");\n      };\n      _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {\n          return convertToStatementIfNeeded(mode, literal(ast.value));\n      };\n      _AstToIrVisitor.prototype._getLocal = function (name) { return this._localResolver.getLocal(name); };\n      _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {\n          var leftMostSafe = this.leftMostSafeNode(ast);\n          if (leftMostSafe) {\n              return this.convertSafeAccess(ast, leftMostSafe, mode);\n          }\n          else {\n              var args = this.visitAll(ast.args, _Mode.Expression);\n              var result = null;\n              var receiver = this.visit(ast.receiver, _Mode.Expression);\n              if (receiver === this._implicitReceiver) {\n                  var varExpr = this._getLocal(ast.name);\n                  if (varExpr) {\n                      result = varExpr.callFn(args);\n                  }\n              }\n              if (isBlank(result)) {\n                  result = receiver.callMethod(ast.name, args);\n              }\n              return convertToStatementIfNeeded(mode, result);\n          }\n      };\n      _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {\n          return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {\n          var leftMostSafe = this.leftMostSafeNode(ast);\n          if (leftMostSafe) {\n              return this.convertSafeAccess(ast, leftMostSafe, mode);\n          }\n          else {\n              var result = null;\n              var receiver = this.visit(ast.receiver, _Mode.Expression);\n              if (receiver === this._implicitReceiver) {\n                  result = this._getLocal(ast.name);\n              }\n              if (isBlank(result)) {\n                  result = receiver.prop(ast.name);\n              }\n              return convertToStatementIfNeeded(mode, result);\n          }\n      };\n      _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {\n          var receiver = this.visit(ast.receiver, _Mode.Expression);\n          if (receiver === this._implicitReceiver) {\n              var varExpr = this._getLocal(ast.name);\n              if (varExpr) {\n                  throw new Error('Cannot assign to a reference or variable!');\n              }\n          }\n          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {\n          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n      };\n      _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {\n          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n      };\n      _AstToIrVisitor.prototype.visitAll = function (asts, mode) {\n          var _this = this;\n          return asts.map(function (ast) { return _this.visit(ast, mode); });\n      };\n      _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {\n          throw new Error('Quotes are not supported for evaluation!');\n      };\n      _AstToIrVisitor.prototype.visit = function (ast, mode) {\n          var result = this._resultMap.get(ast);\n          if (result)\n              return result;\n          return (this._nodeMap.get(ast) || ast).visit(this, mode);\n      };\n      _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {\n          // If the expression contains a safe access node on the left it needs to be converted to\n          // an expression that guards the access to the member by checking the receiver for blank. As\n          // execution proceeds from left to right, the left most part of the expression must be guarded\n          // first but, because member access is left associative, the right side of the expression is at\n          // the top of the AST. The desired result requires lifting a copy of the the left part of the\n          // expression up to test it for blank before generating the unguarded version.\n          // Consider, for example the following expression: a?.b.c?.d.e\n          // This results in the ast:\n          //         .\n          //        / \\\n          //       ?.   e\n          //      /  \\\n          //     .    d\n          //    / \\\n          //   ?.  c\n          //  /  \\\n          // a    b\n          // The following tree should be generated:\n          //\n          //        /---- ? ----\\\n          //       /      |      \\\n          //     a   /--- ? ---\\  null\n          //        /     |     \\\n          //       .      .     null\n          //      / \\    / \\\n          //     .  c   .   e\n          //    / \\    / \\\n          //   a   b  ,   d\n          //         / \\\n          //        .   c\n          //       / \\\n          //      a   b\n          //\n          // Notice that the first guard condition is the left hand of the left most safe access node\n          // which comes in as leftMostSafe to this routine.\n          var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);\n          var temporary;\n          if (this.needsTemporary(leftMostSafe.receiver)) {\n              // If the expression has method calls or pipes then we need to save the result into a\n              // temporary variable to avoid calling stateful or impure code more than once.\n              temporary = this.allocateTemporary();\n              // Preserve the result in the temporary variable\n              guardedExpression = temporary.set(guardedExpression);\n              // Ensure all further references to the guarded expression refer to the temporary instead.\n              this._resultMap.set(leftMostSafe.receiver, temporary);\n          }\n          var condition = guardedExpression.isBlank();\n          // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n          // leftMostNode with its unguarded version in the call to `this.visit()`.\n          if (leftMostSafe instanceof SafeMethodCall) {\n              this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));\n          }\n          else {\n              this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));\n          }\n          // Recursively convert the node now without the guarded member access.\n          var access = this.visit(ast, _Mode.Expression);\n          // Remove the mapping. This is not strictly required as the converter only traverses each node\n          // once but is safer if the conversion is changed to traverse the nodes more than once.\n          this._nodeMap.delete(leftMostSafe);\n          // If we allcoated a temporary, release it.\n          if (temporary) {\n              this.releaseTemporary(temporary);\n          }\n          // Produce the conditional\n          return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));\n      };\n      // Given a expression of the form a?.b.c?.d.e the the left most safe node is\n      // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n      // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n      // safe method call as this needs be transform initially to:\n      //   a == null ? null : a.c.b.c?.d.e\n      // then to:\n      //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n      _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {\n          var _this = this;\n          var visit = function (visitor, ast) {\n              return (_this._nodeMap.get(ast) || ast).visit(visitor);\n          };\n          return ast.visit({\n              visitBinary: function (ast) { return null; },\n              visitChain: function (ast) { return null; },\n              visitConditional: function (ast) { return null; },\n              visitFunctionCall: function (ast) { return null; },\n              visitImplicitReceiver: function (ast) { return null; },\n              visitInterpolation: function (ast) { return null; },\n              visitKeyedRead: function (ast) { return visit(this, ast.obj); },\n              visitKeyedWrite: function (ast) { return null; },\n              visitLiteralArray: function (ast) { return null; },\n              visitLiteralMap: function (ast) { return null; },\n              visitLiteralPrimitive: function (ast) { return null; },\n              visitMethodCall: function (ast) { return visit(this, ast.receiver); },\n              visitPipe: function (ast) { return null; },\n              visitPrefixNot: function (ast) { return null; },\n              visitPropertyRead: function (ast) { return visit(this, ast.receiver); },\n              visitPropertyWrite: function (ast) { return null; },\n              visitQuote: function (ast) { return null; },\n              visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },\n              visitSafePropertyRead: function (ast) {\n                  return visit(this, ast.receiver) || ast;\n              }\n          });\n      };\n      // Returns true of the AST includes a method or a pipe indicating that, if the\n      // expression is used as the target of a safe property or method access then\n      // the expression should be stored into a temporary variable.\n      _AstToIrVisitor.prototype.needsTemporary = function (ast) {\n          var _this = this;\n          var visit = function (visitor, ast) {\n              return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);\n          };\n          var visitSome = function (visitor, ast) {\n              return ast.some(function (ast) { return visit(visitor, ast); });\n          };\n          return ast.visit({\n              visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },\n              visitChain: function (ast) { return false; },\n              visitConditional: function (ast) {\n                  return visit(this, ast.condition) || visit(this, ast.trueExp) ||\n                      visit(this, ast.falseExp);\n              },\n              visitFunctionCall: function (ast) { return true; },\n              visitImplicitReceiver: function (ast) { return false; },\n              visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },\n              visitKeyedRead: function (ast) { return false; },\n              visitKeyedWrite: function (ast) { return false; },\n              visitLiteralArray: function (ast) { return true; },\n              visitLiteralMap: function (ast) { return true; },\n              visitLiteralPrimitive: function (ast) { return false; },\n              visitMethodCall: function (ast) { return true; },\n              visitPipe: function (ast) { return true; },\n              visitPrefixNot: function (ast) { return visit(this, ast.expression); },\n              visitPropertyRead: function (ast) { return false; },\n              visitPropertyWrite: function (ast) { return false; },\n              visitQuote: function (ast) { return false; },\n              visitSafeMethodCall: function (ast) { return true; },\n              visitSafePropertyRead: function (ast) { return false; }\n          });\n      };\n      _AstToIrVisitor.prototype.allocateTemporary = function () {\n          var tempNumber = this._currentTemporary++;\n          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n          return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n      };\n      _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {\n          this._currentTemporary--;\n          if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n              throw new Error(\"Temporary \" + temporary.name + \" released out of order\");\n          }\n      };\n      return _AstToIrVisitor;\n  }());\n  function flattenStatements(arg, output) {\n      if (Array.isArray(arg)) {\n          arg.forEach(function (entry) { return flattenStatements(entry, output); });\n      }\n      else {\n          output.push(arg);\n      }\n  }\n  function legacyCreateCachedLiteralArray(builder, values) {\n      if (values.length === 0) {\n          return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));\n      }\n      var proxyExpr = THIS_EXPR.prop(\"_arr_\" + builder.fields.length);\n      var proxyParams = [];\n      var proxyReturnEntries = [];\n      for (var i = 0; i < values.length; i++) {\n          var paramName = \"p\" + i;\n          proxyParams.push(new FnParam(paramName));\n          proxyReturnEntries.push(variable(paramName));\n      }\n      createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);\n      return proxyExpr.callFn(values);\n  }\n  function legacyCreateCachedLiteralMap(builder, entries) {\n      if (entries.length === 0) {\n          return importExpr(createIdentifier(Identifiers.EMPTY_MAP));\n      }\n      var proxyExpr = THIS_EXPR.prop(\"_map_\" + builder.fields.length);\n      var proxyParams = [];\n      var proxyReturnEntries = [];\n      var values = [];\n      for (var i = 0; i < entries.length; i++) {\n          var paramName = \"p\" + i;\n          proxyParams.push(new FnParam(paramName));\n          proxyReturnEntries.push([entries[i][0], variable(paramName)]);\n          values.push(entries[i][1]);\n      }\n      createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);\n      return proxyExpr.callFn(values);\n  }\n  var DefaultLocalResolver = (function () {\n      function DefaultLocalResolver() {\n      }\n      DefaultLocalResolver.prototype.getLocal = function (name) {\n          if (name === EventHandlerVars.event.name) {\n              return EventHandlerVars.event;\n          }\n          return null;\n      };\n      return DefaultLocalResolver;\n  }());\n  var LegacyDefaultNameResolver = (function () {\n      function LegacyDefaultNameResolver() {\n      }\n      LegacyDefaultNameResolver.prototype.callPipe = function (name, input, args) { return null; };\n      LegacyDefaultNameResolver.prototype.getLocal = function (name) {\n          if (name === EventHandlerVars.event.name) {\n              return EventHandlerVars.event;\n          }\n          return null;\n      };\n      return LegacyDefaultNameResolver;\n  }());\n  function createCurrValueExpr(bindingId) {\n      return variable(\"currVal_\" + bindingId); // fix syntax highlighting: `\n  }\n  function createPreventDefaultVar(bindingId) {\n      return variable(\"pd_\" + bindingId);\n  }\n  function convertStmtIntoExpression(stmt) {\n      if (stmt instanceof ExpressionStatement) {\n          return stmt.expr;\n      }\n      else if (stmt instanceof ReturnStatement) {\n          return stmt.value;\n      }\n      return null;\n  }\n  var BuiltinFunctionCall = (function (_super) {\n      __extends$20(BuiltinFunctionCall, _super);\n      function BuiltinFunctionCall(span, args, converter) {\n          var _this = _super.call(this, span, null, args) || this;\n          _this.args = args;\n          _this.converter = converter;\n          return _this;\n      }\n      return BuiltinFunctionCall;\n  }(FunctionCall));\n\n  function createCheckRenderBindingStmt(view, renderElement, boundProp, oldValue, evalResult, securityContextExpression) {\n      var checkStmts = evalResult.stmts.slice();\n      var securityContext = calcSecurityContext(boundProp, securityContextExpression);\n      switch (boundProp.type) {\n          case exports.PropertyBindingType.Property:\n              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderProperty))\n                  .callFn([\n                  view, renderElement, literal(boundProp.name), oldValue,\n                  oldValue.set(evalResult.currValExpr),\n                  evalResult.forceUpdate || literal(false), securityContext\n              ])\n                  .toStmt());\n              break;\n          case exports.PropertyBindingType.Attribute:\n              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderAttribute))\n                  .callFn([\n                  view, renderElement, literal(boundProp.name), oldValue,\n                  oldValue.set(evalResult.currValExpr),\n                  evalResult.forceUpdate || literal(false), securityContext\n              ])\n                  .toStmt());\n              break;\n          case exports.PropertyBindingType.Class:\n              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderClass))\n                  .callFn([\n                  view, renderElement, literal(boundProp.name), oldValue,\n                  oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || literal(false)\n              ])\n                  .toStmt());\n              break;\n          case exports.PropertyBindingType.Style:\n              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderStyle))\n                  .callFn([\n                  view, renderElement, literal(boundProp.name), literal(boundProp.unit), oldValue,\n                  oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || literal(false),\n                  securityContext\n              ])\n                  .toStmt());\n              break;\n          case exports.PropertyBindingType.Animation:\n              throw new Error('Illegal state: Should not come here!');\n      }\n      return checkStmts;\n  }\n  function calcSecurityContext(boundProp, securityContextExpression) {\n      if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {\n          return NULL_EXPR; // No sanitization needed.\n      }\n      if (!boundProp.needsRuntimeSecurityContext) {\n          securityContextExpression =\n              createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);\n      }\n      if (!securityContextExpression) {\n          throw new Error(\"internal error, no SecurityContext given \" + boundProp.name);\n      }\n      return securityContextExpression;\n  }\n  function createCheckAnimationBindingStmts(view, componentView, boundProp, boundOutputs, eventListener, renderElement, oldValue, evalResult) {\n      var detachStmts = [];\n      var updateStmts = [];\n      var animationName = boundProp.name;\n      var animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));\n      // it's important to normalize the void value as `void` explicitly\n      // so that the styles data can be obtained from the stringmap\n      var emptyStateValue = literal(_angular_core.ɵEMPTY_STATE);\n      var animationTransitionVar = variable('animationTransition_' + animationName);\n      updateStmts.push(animationTransitionVar\n          .set(animationFnExpr.callFn([\n          view, renderElement, isFirstViewCheck(view).conditional(emptyStateValue, oldValue),\n          evalResult.currValExpr\n      ]))\n          .toDeclStmt());\n      updateStmts.push(oldValue.set(evalResult.currValExpr).toStmt());\n      detachStmts.push(animationTransitionVar\n          .set(animationFnExpr.callFn([view, renderElement, evalResult.currValExpr, emptyStateValue]))\n          .toDeclStmt());\n      var registerStmts = [];\n      var animationStartMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'start'; });\n      if (animationStartMethodExists) {\n          registerStmts.push(animationTransitionVar\n              .callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])\n              .toStmt());\n      }\n      var animationDoneMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'done'; });\n      if (animationDoneMethodExists) {\n          registerStmts.push(animationTransitionVar\n              .callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])\n              .toStmt());\n      }\n      updateStmts.push.apply(updateStmts, registerStmts);\n      detachStmts.push.apply(detachStmts, registerStmts);\n      var checkUpdateStmts = evalResult.stmts.concat([\n          new IfStmt(importExpr(createIdentifier(Identifiers.checkBinding)).callFn([\n              view, oldValue, evalResult.currValExpr, evalResult.forceUpdate || literal(false)\n          ]), updateStmts)\n      ]);\n      var checkDetachStmts = evalResult.stmts.concat(detachStmts);\n      return { checkUpdateStmts: checkUpdateStmts, checkDetachStmts: checkDetachStmts };\n  }\n\n  /**\n   * Create a new class stmts based on the given data.\n   */\n  function createClassStmt(config) {\n      var parentArgs = config.parentArgs || [];\n      var superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];\n      var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);\n      var ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));\n      return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || [], config.sourceSpan);\n  }\n  function concatClassBuilderParts(builders) {\n      return {\n          fields: [].concat.apply([], builders.map(function (builder) { return builder.fields || []; })),\n          methods: [].concat.apply([], builders.map(function (builder) { return builder.methods || []; })),\n          getters: [].concat.apply([], builders.map(function (builder) { return builder.getters || []; })),\n          ctorStmts: [].concat.apply([], builders.map(function (builder) { return builder.ctorStmts || []; })),\n      };\n  }\n\n  var DirectiveWrapperCompileResult = (function () {\n      function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {\n          this.statements = statements;\n          this.dirWrapperClassVar = dirWrapperClassVar;\n      }\n      return DirectiveWrapperCompileResult;\n  }());\n  var CONTEXT_FIELD_NAME = 'context';\n  var CHANGES_FIELD_NAME = '_changes';\n  var CHANGED_FIELD_NAME = '_changed';\n  var EVENT_HANDLER_FIELD_NAME = '_eventHandler';\n  var CHANGE_VAR = variable('change');\n  var CURR_VALUE_VAR = variable('currValue');\n  var FORCE_UPDATE_VAR = variable('forceUpdate');\n  var VIEW_VAR = variable('view');\n  var COMPONENT_VIEW_VAR = variable('componentView');\n  var RENDER_EL_VAR = variable('el');\n  var EVENT_NAME_VAR = variable('eventName');\n  var RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();\n  /**\n   * We generate directive wrappers to prevent code bloat when a directive is used.\n   * A directive wrapper encapsulates\n   * the dirty checking for `@Input`, the handling of `@HostListener` / `@HostBinding`\n   * and calling the lifecyclehooks `ngOnInit`, `ngOnChanges`, `ngDoCheck`.\n   *\n   * So far, only `@Input` and the lifecycle hooks have been implemented.\n   */\n  var DirectiveWrapperCompiler = (function () {\n      function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {\n          this.compilerConfig = compilerConfig;\n          this._exprParser = _exprParser;\n          this._schemaRegistry = _schemaRegistry;\n          this._console = _console;\n      }\n      DirectiveWrapperCompiler.prototype.compile = function (dirMeta) {\n          var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);\n          reportParseErrors(hostParseResult.errors, this._console);\n          var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);\n          Object.keys(dirMeta.inputs).forEach(function (inputFieldName) {\n              addCheckInputMethod(inputFieldName, builder);\n          });\n          addNgDoCheckMethod(builder);\n          addCheckHostMethod(hostParseResult.hostProps, hostParseResult.hostListeners, builder);\n          addHandleEventMethod(hostParseResult.hostListeners, builder);\n          addSubscribeMethod(dirMeta, builder);\n          var classStmt = builder.build();\n          return new DirectiveWrapperCompileResult([classStmt], classStmt.name);\n      };\n      return DirectiveWrapperCompiler;\n  }());\n  DirectiveWrapperCompiler.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  DirectiveWrapperCompiler.ctorParameters = function () { return [\n      { type: CompilerConfig, },\n      { type: Parser, },\n      { type: ElementSchemaRegistry, },\n      { type: _angular_core.ɵConsole, },\n  ]; };\n  var DirectiveWrapperBuilder = (function () {\n      function DirectiveWrapperBuilder(compilerConfig, dirMeta) {\n          this.compilerConfig = compilerConfig;\n          this.dirMeta = dirMeta;\n          this.fields = [];\n          this.getters = [];\n          this.methods = [];\n          this.ctorStmts = [];\n          this.detachStmts = [];\n          this.destroyStmts = [];\n          var dirLifecycleHooks = dirMeta.type.lifecycleHooks;\n          this.genChanges = dirLifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnChanges) !== -1 ||\n              this.compilerConfig.logBindingUpdate;\n          this.ngOnChanges = dirLifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnChanges) !== -1;\n          this.ngOnInit = dirLifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnInit) !== -1;\n          this.ngDoCheck = dirLifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.DoCheck) !== -1;\n          this.ngOnDestroy = dirLifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1;\n          if (this.ngOnDestroy) {\n              this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());\n          }\n      }\n      DirectiveWrapperBuilder.prototype.build = function () {\n          var dirDepParamNames = [];\n          for (var i = 0; i < this.dirMeta.type.diDeps.length; i++) {\n              dirDepParamNames.push(\"p\" + i);\n          }\n          var methods = [\n              new ClassMethod('ngOnDetach', [\n                  new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n                  new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n                  new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),\n              ], this.detachStmts),\n              new ClassMethod('ngOnDestroy', [], this.destroyStmts),\n          ];\n          var fields = [\n              new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]),\n              new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)),\n              new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private]),\n          ];\n          var ctorStmts = [\n              THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),\n          ];\n          if (this.genChanges) {\n              fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));\n              ctorStmts.push(RESET_CHANGES_STMT);\n          }\n          ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)\n              .set(importExpr(this.dirMeta.type)\n              .instantiate(dirDepParamNames.map(function (paramName) { return variable(paramName); })))\n              .toStmt());\n          return createClassStmt({\n              name: dirWrapperClassName(this.dirMeta.type.reference),\n              ctorParams: dirDepParamNames.map(function (paramName) { return new FnParam(paramName, DYNAMIC_TYPE); }),\n              builders: [{ fields: fields, ctorStmts: ctorStmts, methods: methods }, this]\n          });\n      };\n      return DirectiveWrapperBuilder;\n  }());\n  function addNgDoCheckMethod(builder) {\n      var changedVar = variable('changed');\n      var stmts = [\n          changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(),\n          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),\n      ];\n      var lifecycleStmts = [];\n      if (builder.genChanges) {\n          var onChangesStmts = [];\n          if (builder.ngOnChanges) {\n              onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)\n                  .callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)])\n                  .toStmt());\n          }\n          if (builder.compilerConfig.logBindingUpdate) {\n              onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges))\n                  .callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)])\n                  .toStmt());\n          }\n          onChangesStmts.push(RESET_CHANGES_STMT);\n          lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));\n      }\n      if (builder.ngOnInit) {\n          lifecycleStmts.push(new IfStmt(isFirstViewCheck(VIEW_VAR), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));\n      }\n      if (builder.ngDoCheck) {\n          lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());\n      }\n      if (lifecycleStmts.length > 0) {\n          stmts.push(new IfStmt(not(VIEW_VAR.prop('throwOnChange')), lifecycleStmts));\n      }\n      stmts.push(new ReturnStatement(changedVar));\n      builder.methods.push(new ClassMethod('ngDoCheck', [\n          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),\n      ], stmts, BOOL_TYPE));\n  }\n  function addCheckInputMethod(input, builder) {\n      var field = createCheckBindingField(builder);\n      var onChangeStatements = [\n          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(),\n          THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt(),\n          field.expression.set(CURR_VALUE_VAR).toStmt()\n      ];\n      var methodBody;\n      if (builder.genChanges) {\n          onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(CHANGE_VAR).toStmt());\n          methodBody = [\n              CHANGE_VAR\n                  .set(importExpr(createIdentifier(Identifiers.checkBindingChange)).callFn([\n                  VIEW_VAR, field.expression, CURR_VALUE_VAR, FORCE_UPDATE_VAR\n              ]))\n                  .toDeclStmt(),\n              new IfStmt(CHANGE_VAR, onChangeStatements)\n          ];\n      }\n      else {\n          methodBody = [new IfStmt(importExpr(createIdentifier(Identifiers.checkBinding)).callFn([\n                  VIEW_VAR, field.expression, CURR_VALUE_VAR, FORCE_UPDATE_VAR\n              ]), onChangeStatements)];\n      }\n      builder.methods.push(new ClassMethod(\"check_\" + input, [\n          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n          new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE),\n          new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE)\n      ], methodBody));\n  }\n  function addCheckHostMethod(hostProps, hostEvents, builder) {\n      var stmts = [];\n      var methodParams = [\n          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n          new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),\n      ];\n      hostProps.forEach(function (hostProp, hostPropIdx) {\n          var field = createCheckBindingField(builder);\n          var evalResult = legacyConvertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);\n          if (!evalResult) {\n              return;\n          }\n          var securityContextExpr;\n          if (hostProp.needsRuntimeSecurityContext) {\n              securityContextExpr = variable(\"secCtx_\" + methodParams.length);\n              methodParams.push(new FnParam(securityContextExpr.name, importType(createIdentifier(Identifiers.SecurityContext))));\n          }\n          if (hostProp.isAnimation) {\n              var _a = createCheckAnimationBindingStmts(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, hostEvents, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME)\n                  .or(importExpr(createIdentifier(Identifiers.noop))), RENDER_EL_VAR, field.expression, evalResult), checkUpdateStmts = _a.checkUpdateStmts, checkDetachStmts = _a.checkDetachStmts;\n              (_b = builder.detachStmts).push.apply(_b, checkDetachStmts);\n              stmts.push.apply(stmts, checkUpdateStmts);\n          }\n          else {\n              stmts.push.apply(stmts, createCheckRenderBindingStmt(VIEW_VAR, RENDER_EL_VAR, hostProp, field.expression, evalResult, securityContextExpr));\n          }\n          var _b;\n      });\n      builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));\n  }\n  function addHandleEventMethod(hostListeners, builder) {\n      var resultVar = variable(\"result\");\n      var actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];\n      hostListeners.forEach(function (hostListener, eventIdx) {\n          var evalResult = convertActionBinding(null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, \"sub_\" + eventIdx);\n          var trueStmts = evalResult.stmts;\n          if (evalResult.allowDefault) {\n              trueStmts.push(resultVar.set(evalResult.allowDefault.and(resultVar)).toStmt());\n          }\n          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.\n          actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));\n      });\n      actionStmts.push(new ReturnStatement(resultVar));\n      builder.methods.push(new ClassMethod('handleEvent', [\n          new FnParam(EVENT_NAME_VAR.name, STRING_TYPE),\n          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)\n      ], actionStmts, BOOL_TYPE));\n  }\n  function addSubscribeMethod(dirMeta, builder) {\n      var methodParams = [\n          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n          new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)\n      ];\n      var stmts = [\n          THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()\n      ];\n      Object.keys(dirMeta.outputs).forEach(function (emitterPropName, emitterIdx) {\n          var eventName = dirMeta.outputs[emitterPropName];\n          var paramName = \"emit\" + emitterIdx;\n          methodParams.push(new FnParam(paramName, BOOL_TYPE));\n          var subscriptionFieldName = \"subscription\" + emitterIdx;\n          builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));\n          stmts.push(new IfStmt(variable(paramName), [\n              THIS_EXPR.prop(subscriptionFieldName)\n                  .set(THIS_EXPR.prop(CONTEXT_FIELD_NAME)\n                  .prop(emitterPropName)\n                  .callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME)\n                      .callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])]))\n                  .toStmt()\n          ]));\n          builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName)\n              .and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', []))\n              .toStmt());\n      });\n      builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));\n  }\n  var ParseResult = (function () {\n      function ParseResult(hostProps, hostListeners, errors) {\n          this.hostProps = hostProps;\n          this.hostListeners = hostListeners;\n          this.errors = errors;\n      }\n      return ParseResult;\n  }());\n  function parseHostBindings(dirMeta, exprParser, schemaRegistry) {\n      var errors = [];\n      var parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);\n      var moduleUrl = identifierModuleUrl(dirMeta.type);\n      var sourceFileName = moduleUrl ?\n          \"in Directive \" + identifierName(dirMeta.type) + \" in \" + moduleUrl :\n          \"in Directive \" + identifierName(dirMeta.type);\n      var sourceFile = new ParseSourceFile('', sourceFileName);\n      var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));\n      var parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), dirMeta.selector, sourceSpan);\n      var parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);\n      return new ParseResult(parsedHostProps, parsedHostListeners, errors);\n  }\n  function reportParseErrors(parseErrors, console) {\n      var warnings = parseErrors.filter(function (error) { return error.level === exports.ParseErrorLevel.WARNING; });\n      var errors = parseErrors.filter(function (error) { return error.level === exports.ParseErrorLevel.FATAL; });\n      if (warnings.length > 0) {\n          this._console.warn(\"Directive parse warnings:\\n\" + warnings.join('\\n'));\n      }\n      if (errors.length > 0) {\n          throw new Error(\"Directive parse errors:\\n\" + errors.join('\\n'));\n      }\n  }\n  var DirectiveWrapperExpressions = (function () {\n      function DirectiveWrapperExpressions() {\n      }\n      DirectiveWrapperExpressions.create = function (dir, depsExpr) {\n          return importExpr(dir).instantiate(depsExpr, importType(dir));\n      };\n      DirectiveWrapperExpressions.context = function (dirWrapper) {\n          return dirWrapper.prop(CONTEXT_FIELD_NAME);\n      };\n      DirectiveWrapperExpressions.ngDoCheck = function (dirWrapper, view, renderElement) {\n          return dirWrapper.callMethod('ngDoCheck', [view, renderElement]);\n      };\n      DirectiveWrapperExpressions.checkHost = function (hostProps, dirWrapper, view, componentView, renderElement, runtimeSecurityContexts) {\n          if (hostProps.length) {\n              return [dirWrapper\n                      .callMethod('checkHost', [view, componentView, renderElement].concat(runtimeSecurityContexts))\n                      .toStmt()];\n          }\n          else {\n              return [];\n          }\n      };\n      DirectiveWrapperExpressions.ngOnDetach = function (hostProps, dirWrapper, view, componentView, renderEl) {\n          if (hostProps.some(function (prop) { return prop.isAnimation; })) {\n              return [dirWrapper\n                      .callMethod('ngOnDetach', [\n                      view,\n                      componentView,\n                      renderEl,\n                  ])\n                      .toStmt()];\n          }\n          else {\n              return [];\n          }\n      };\n      DirectiveWrapperExpressions.ngOnDestroy = function (dir, dirWrapper) {\n          if (dir.type.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1 ||\n              Object.keys(dir.outputs).length > 0) {\n              return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];\n          }\n          else {\n              return [];\n          }\n      };\n      DirectiveWrapperExpressions.subscribe = function (dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {\n          var needsSubscribe = false;\n          var eventFlags = [];\n          Object.keys(dirMeta.outputs).forEach(function (propName) {\n              var eventName = dirMeta.outputs[propName];\n              var eventUsed = usedEvents.indexOf(eventName) > -1;\n              needsSubscribe = needsSubscribe || eventUsed;\n              eventFlags.push(literal(eventUsed));\n          });\n          hostProps.forEach(function (hostProp) {\n              if (hostProp.isAnimation && usedEvents.length > 0) {\n                  needsSubscribe = true;\n              }\n          });\n          if (needsSubscribe) {\n              return [\n                  dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()\n              ];\n          }\n          else {\n              return [];\n          }\n      };\n      DirectiveWrapperExpressions.handleEvent = function (hostEvents, dirWrapper, eventName, event) {\n          return dirWrapper.callMethod('handleEvent', [eventName, event]);\n      };\n      return DirectiveWrapperExpressions;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n  var NG_FACTORY = /\\.ngfactory\\./;\n  function ngfactoryFilePath(filePath) {\n      var urlWithSuffix = splitTypescriptSuffix(filePath);\n      return urlWithSuffix[0] + \".ngfactory\" + urlWithSuffix[1];\n  }\n  function stripNgFactory(filePath) {\n      return filePath.replace(NG_FACTORY, '.');\n  }\n  function isNgFactoryFile(filePath) {\n      return NG_FACTORY.test(filePath);\n  }\n  function splitTypescriptSuffix(path) {\n      if (path.endsWith('.d.ts')) {\n          return [path.slice(0, -5), '.ts'];\n      }\n      var lastDot = path.lastIndexOf('.');\n      if (lastDot !== -1) {\n          return [path.substring(0, lastDot), path.substring(lastDot)];\n      }\n      return [path, ''];\n  }\n  function summaryFileName(fileName) {\n      var fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n      return fileNameWithoutSuffix + \".ngsummary.json\";\n  }\n\n  function hasLifecycleHook(hook, token) {\n      return _angular_core.ɵreflector.hasLifecycleHook(token, getHookName(hook));\n  }\n  function getHookName(hook) {\n      switch (hook) {\n          case _angular_core.ɵLifecycleHooks.OnInit:\n              return 'ngOnInit';\n          case _angular_core.ɵLifecycleHooks.OnDestroy:\n              return 'ngOnDestroy';\n          case _angular_core.ɵLifecycleHooks.DoCheck:\n              return 'ngDoCheck';\n          case _angular_core.ɵLifecycleHooks.OnChanges:\n              return 'ngOnChanges';\n          case _angular_core.ɵLifecycleHooks.AfterContentInit:\n              return 'ngAfterContentInit';\n          case _angular_core.ɵLifecycleHooks.AfterContentChecked:\n              return 'ngAfterContentChecked';\n          case _angular_core.ɵLifecycleHooks.AfterViewInit:\n              return 'ngAfterViewInit';\n          case _angular_core.ɵLifecycleHooks.AfterViewChecked:\n              return 'ngAfterViewChecked';\n      }\n  }\n\n  function _isNgModuleMetadata(obj) {\n      return obj instanceof _angular_core.NgModule;\n  }\n  /**\n   * Resolves types to {@link NgModule}.\n   */\n  var NgModuleResolver = (function () {\n      function NgModuleResolver(_reflector) {\n          if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }\n          this._reflector = _reflector;\n      }\n      NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); };\n      NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var ngModuleMeta = ListWrapper.findLast(this._reflector.annotations(type), _isNgModuleMetadata);\n          if (ngModuleMeta) {\n              return ngModuleMeta;\n          }\n          else {\n              if (throwIfNotFound) {\n                  throw new Error(\"No NgModule metadata found for '\" + stringify(type) + \"'.\");\n              }\n              return null;\n          }\n      };\n      return NgModuleResolver;\n  }());\n  NgModuleResolver.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  NgModuleResolver.ctorParameters = function () { return [\n      { type: _angular_core.ɵReflectorReader, },\n  ]; };\n\n  function _isPipeMetadata(type) {\n      return type instanceof _angular_core.Pipe;\n  }\n  /**\n   * Resolve a `Type` for {@link Pipe}.\n   *\n   * This interface can be overridden by the application developer to create custom behavior.\n   *\n   * See {@link Compiler}\n   */\n  var PipeResolver = (function () {\n      function PipeResolver(_reflector) {\n          if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }\n          this._reflector = _reflector;\n      }\n      PipeResolver.prototype.isPipe = function (type) {\n          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));\n          return typeMetadata && typeMetadata.some(_isPipeMetadata);\n      };\n      /**\n       * Return {@link Pipe} for a given `Type`.\n       */\n      PipeResolver.prototype.resolve = function (type, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));\n          if (metas) {\n              var annotation = ListWrapper.findLast(metas, _isPipeMetadata);\n              if (annotation) {\n                  return annotation;\n              }\n          }\n          if (throwIfNotFound) {\n              throw new Error(\"No Pipe decorator found on \" + stringify(type));\n          }\n          return null;\n      };\n      return PipeResolver;\n  }());\n  PipeResolver.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  PipeResolver.ctorParameters = function () { return [\n      { type: _angular_core.ɵReflectorReader, },\n  ]; };\n\n  var SummaryResolver = (function () {\n      function SummaryResolver() {\n      }\n      SummaryResolver.prototype.isLibraryFile = function (fileName) { return false; };\n      ;\n      SummaryResolver.prototype.getLibraryFileName = function (fileName) { return null; };\n      SummaryResolver.prototype.resolveSummary = function (reference) { return null; };\n      ;\n      SummaryResolver.prototype.getSymbolsOf = function (filePath) { return []; };\n      SummaryResolver.prototype.getImportAs = function (reference) { return reference; };\n      return SummaryResolver;\n  }());\n  SummaryResolver.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  SummaryResolver.ctorParameters = function () { return []; };\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$21 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var ERROR_COLLECTOR_TOKEN = new _angular_core.InjectionToken('ErrorCollector');\n  // Design notes:\n  // - don't lazily create metadata:\n  //   For some metadata, we need to do async work sometimes,\n  //   so the user has to kick off this loading.\n  //   But we want to report errors even when the async work is\n  //   not required to check that the user would have been able\n  //   to wait correctly.\n  var CompileMetadataResolver = (function () {\n      function CompileMetadataResolver(_config, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _staticSymbolCache, _reflector, _errorCollector) {\n          if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }\n          this._config = _config;\n          this._ngModuleResolver = _ngModuleResolver;\n          this._directiveResolver = _directiveResolver;\n          this._pipeResolver = _pipeResolver;\n          this._summaryResolver = _summaryResolver;\n          this._schemaRegistry = _schemaRegistry;\n          this._directiveNormalizer = _directiveNormalizer;\n          this._staticSymbolCache = _staticSymbolCache;\n          this._reflector = _reflector;\n          this._errorCollector = _errorCollector;\n          this._nonNormalizedDirectiveCache = new Map();\n          this._directiveCache = new Map();\n          this._summaryCache = new Map();\n          this._pipeCache = new Map();\n          this._ngModuleCache = new Map();\n          this._ngModuleOfTypes = new Map();\n      }\n      CompileMetadataResolver.prototype.clearCacheFor = function (type) {\n          var dirMeta = this._directiveCache.get(type);\n          this._directiveCache.delete(type);\n          this._nonNormalizedDirectiveCache.delete(type);\n          this._summaryCache.delete(type);\n          this._pipeCache.delete(type);\n          this._ngModuleOfTypes.delete(type);\n          // Clear all of the NgModule as they contain transitive information!\n          this._ngModuleCache.clear();\n          if (dirMeta) {\n              this._directiveNormalizer.clearCacheFor(dirMeta);\n          }\n      };\n      CompileMetadataResolver.prototype.clearCache = function () {\n          this._directiveCache.clear();\n          this._nonNormalizedDirectiveCache.clear();\n          this._summaryCache.clear();\n          this._pipeCache.clear();\n          this._ngModuleCache.clear();\n          this._ngModuleOfTypes.clear();\n          this._directiveNormalizer.clearCache();\n      };\n      CompileMetadataResolver.prototype._createProxyClass = function (baseType, name) {\n          var delegate = null;\n          var proxyClass = function () {\n              if (!delegate) {\n                  throw new Error(\"Illegal state: Class \" + name + \" for type \" + stringify(baseType) + \" is not compiled yet!\");\n              }\n              return delegate.apply(this, arguments);\n          };\n          proxyClass.setDelegate = function (d) {\n              delegate = d;\n              proxyClass.prototype = d.prototype;\n          };\n          // Make stringify work correctly\n          proxyClass.overriddenName = name;\n          return proxyClass;\n      };\n      CompileMetadataResolver.prototype.getGeneratedClass = function (dirType, name) {\n          if (dirType instanceof StaticSymbol) {\n              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\n          }\n          else {\n              return this._createProxyClass(dirType, name);\n          }\n      };\n      CompileMetadataResolver.prototype.getDirectiveWrapperClass = function (dirType) {\n          if (!this._config.useViewEngine) {\n              return this.getGeneratedClass(dirType, dirWrapperClassName(dirType));\n          }\n          return null;\n      };\n      CompileMetadataResolver.prototype.getComponentViewClass = function (dirType) {\n          return this.getGeneratedClass(dirType, viewClassName(dirType, 0));\n      };\n      CompileMetadataResolver.prototype.getHostComponentViewClass = function (dirType) {\n          return this.getGeneratedClass(dirType, hostViewClassName(dirType));\n      };\n      CompileMetadataResolver.prototype.getHostComponentType = function (dirType) {\n          var name = identifierName({ reference: dirType }) + \"_Host\";\n          if (dirType instanceof StaticSymbol) {\n              return this._staticSymbolCache.get(dirType.filePath, name);\n          }\n          else {\n              var HostClass = function HostClass() { };\n              HostClass.overriddenName = name;\n              return HostClass;\n          }\n      };\n      CompileMetadataResolver.prototype.getRendererType = function (dirType) {\n          if (dirType instanceof StaticSymbol) {\n              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));\n          }\n          else {\n              // returning an object as proxy,\n              // that we fill later during runtime compilation.\n              return {};\n          }\n      };\n      CompileMetadataResolver.prototype.getComponentFactory = function (selector, dirType) {\n          if (dirType instanceof StaticSymbol) {\n              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));\n          }\n          else {\n              var hostView = this.getHostComponentViewClass(dirType);\n              if (this._config.useViewEngine) {\n                  return _angular_core.ɵcreateComponentFactory(selector, dirType, hostView);\n              }\n              else {\n                  return new _angular_core.ComponentFactory(selector, hostView, dirType);\n              }\n          }\n      };\n      CompileMetadataResolver.prototype._loadSummary = function (type, kind) {\n          var typeSummary = this._summaryCache.get(type);\n          if (!typeSummary) {\n              var summary = this._summaryResolver.resolveSummary(type);\n              typeSummary = summary ? summary.type : null;\n              this._summaryCache.set(type, typeSummary);\n          }\n          return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n      };\n      CompileMetadataResolver.prototype._loadDirectiveMetadata = function (directiveType, isSync) {\n          var _this = this;\n          if (this._directiveCache.has(directiveType)) {\n              return;\n          }\n          directiveType = _angular_core.resolveForwardRef(directiveType);\n          var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;\n          var createDirectiveMetadata = function (templateMetadata) {\n              var normalizedDirMeta = new CompileDirectiveMetadata({\n                  type: metadata.type,\n                  isComponent: metadata.isComponent,\n                  selector: metadata.selector,\n                  exportAs: metadata.exportAs,\n                  changeDetection: metadata.changeDetection,\n                  inputs: metadata.inputs,\n                  outputs: metadata.outputs,\n                  hostListeners: metadata.hostListeners,\n                  hostProperties: metadata.hostProperties,\n                  hostAttributes: metadata.hostAttributes,\n                  providers: metadata.providers,\n                  viewProviders: metadata.viewProviders,\n                  queries: metadata.queries,\n                  viewQueries: metadata.viewQueries,\n                  entryComponents: metadata.entryComponents,\n                  wrapperType: metadata.wrapperType,\n                  componentViewType: metadata.componentViewType,\n                  rendererType: metadata.rendererType,\n                  componentFactory: metadata.componentFactory,\n                  template: templateMetadata\n              });\n              _this._directiveCache.set(directiveType, normalizedDirMeta);\n              _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n              return normalizedDirMeta;\n          };\n          if (metadata.isComponent) {\n              var templateMeta = this._directiveNormalizer.normalizeTemplate({\n                  componentType: directiveType,\n                  moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),\n                  encapsulation: metadata.template.encapsulation,\n                  template: metadata.template.template,\n                  templateUrl: metadata.template.templateUrl,\n                  styles: metadata.template.styles,\n                  styleUrls: metadata.template.styleUrls,\n                  animations: metadata.template.animations,\n                  interpolation: metadata.template.interpolation\n              });\n              if (templateMeta.syncResult) {\n                  createDirectiveMetadata(templateMeta.syncResult);\n                  return null;\n              }\n              else {\n                  if (isSync) {\n                      this._reportError(componentStillLoadingError(directiveType), directiveType);\n                      return null;\n                  }\n                  return templateMeta.asyncResult.then(createDirectiveMetadata);\n              }\n          }\n          else {\n              // directive\n              createDirectiveMetadata(null);\n              return null;\n          }\n      };\n      CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {\n          var _this = this;\n          directiveType = _angular_core.resolveForwardRef(directiveType);\n          if (!directiveType) {\n              return null;\n          }\n          var cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n          if (cacheEntry) {\n              return cacheEntry;\n          }\n          var dirMeta = this._directiveResolver.resolve(directiveType, false);\n          if (!dirMeta) {\n              return null;\n          }\n          var nonNormalizedTemplateMetadata;\n          if (dirMeta instanceof _angular_core.Component) {\n              // component\n              assertArrayOfStrings('styles', dirMeta.styles);\n              assertArrayOfStrings('styleUrls', dirMeta.styleUrls);\n              assertInterpolationSymbols('interpolation', dirMeta.interpolation);\n              var animations = dirMeta.animations;\n              nonNormalizedTemplateMetadata = new CompileTemplateMetadata({\n                  encapsulation: dirMeta.encapsulation,\n                  template: dirMeta.template,\n                  templateUrl: dirMeta.templateUrl,\n                  styles: dirMeta.styles,\n                  styleUrls: dirMeta.styleUrls,\n                  animations: animations,\n                  interpolation: dirMeta.interpolation\n              });\n          }\n          var changeDetectionStrategy = null;\n          var viewProviders = [];\n          var entryComponentMetadata = [];\n          var selector = dirMeta.selector;\n          if (dirMeta instanceof _angular_core.Component) {\n              // Component\n              changeDetectionStrategy = dirMeta.changeDetection;\n              if (dirMeta.viewProviders) {\n                  viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, \"viewProviders for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n              }\n              if (dirMeta.entryComponents) {\n                  entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents)\n                      .map(function (type) { return _this._getEntryComponentMetadata(type); })\n                      .concat(entryComponentMetadata);\n              }\n              if (!selector) {\n                  selector = this._schemaRegistry.getDefaultComponentElementName();\n              }\n          }\n          else {\n              // Directive\n              if (!selector) {\n                  this._reportError(syntaxError(\"Directive \" + stringifyType(directiveType) + \" has no selector, please add it!\"), directiveType);\n                  selector = 'error';\n              }\n          }\n          var providers = [];\n          if (dirMeta.providers != null) {\n              providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, \"providers for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n          }\n          var queries = [];\n          var viewQueries = [];\n          if (dirMeta.queries != null) {\n              queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n              viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n          }\n          var metadata = CompileDirectiveMetadata.create({\n              selector: selector,\n              exportAs: dirMeta.exportAs,\n              isComponent: !!nonNormalizedTemplateMetadata,\n              type: this._getTypeMetadata(directiveType),\n              template: nonNormalizedTemplateMetadata,\n              changeDetection: changeDetectionStrategy,\n              inputs: dirMeta.inputs,\n              outputs: dirMeta.outputs,\n              host: dirMeta.host,\n              providers: providers,\n              viewProviders: viewProviders,\n              queries: queries,\n              viewQueries: viewQueries,\n              entryComponents: entryComponentMetadata,\n              wrapperType: this.getDirectiveWrapperClass(directiveType),\n              componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\n                  undefined,\n              rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : undefined,\n              componentFactory: nonNormalizedTemplateMetadata ?\n                  this.getComponentFactory(selector, directiveType) :\n                  undefined\n          });\n          cacheEntry = { metadata: metadata, annotation: dirMeta };\n          this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n          return cacheEntry;\n      };\n      /**\n       * Gets the metadata for the given directive.\n       * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n       */\n      CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {\n          var dirMeta = this._directiveCache.get(directiveType);\n          if (!dirMeta) {\n              this._reportError(syntaxError(\"Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive \" + stringifyType(directiveType) + \".\"), directiveType);\n          }\n          return dirMeta;\n      };\n      CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {\n          var dirSummary = this._loadSummary(dirType, exports.CompileSummaryKind.Directive);\n          if (!dirSummary) {\n              this._reportError(syntaxError(\"Illegal state: Could not load the summary for directive \" + stringifyType(dirType) + \".\"), dirType);\n          }\n          return dirSummary;\n      };\n      CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type); };\n      CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type); };\n      CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) {\n          var moduleSummary = this._loadSummary(moduleType, exports.CompileSummaryKind.NgModule);\n          if (!moduleSummary) {\n              var moduleMeta = this.getNgModuleMetadata(moduleType, false);\n              moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n              if (moduleSummary) {\n                  this._summaryCache.set(moduleType, moduleSummary);\n              }\n          }\n          return moduleSummary;\n      };\n      /**\n       * Loads the declared directives and pipes of an NgModule.\n       */\n      CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {\n          var _this = this;\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n          var loading = [];\n          if (ngModule) {\n              ngModule.declaredDirectives.forEach(function (id) {\n                  var promise = _this._loadDirectiveMetadata(id.reference, isSync);\n                  if (promise) {\n                      loading.push(promise);\n                  }\n              });\n              ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });\n          }\n          return Promise.all(loading);\n      };\n      CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {\n          var _this = this;\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          moduleType = _angular_core.resolveForwardRef(moduleType);\n          var compileMeta = this._ngModuleCache.get(moduleType);\n          if (compileMeta) {\n              return compileMeta;\n          }\n          var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n          if (!meta) {\n              return null;\n          }\n          var declaredDirectives = [];\n          var exportedNonModuleIdentifiers = [];\n          var declaredPipes = [];\n          var importedModules = [];\n          var exportedModules = [];\n          var providers = [];\n          var entryComponents = [];\n          var bootstrapComponents = [];\n          var schemas = [];\n          if (meta.imports) {\n              flattenAndDedupeArray(meta.imports).forEach(function (importedType) {\n                  var importedModuleType;\n                  if (isValidType(importedType)) {\n                      importedModuleType = importedType;\n                  }\n                  else if (importedType && importedType.ngModule) {\n                      var moduleWithProviders = importedType;\n                      importedModuleType = moduleWithProviders.ngModule;\n                      if (moduleWithProviders.providers) {\n                          providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(importedModuleType) + \"'\", [], importedType));\n                      }\n                  }\n                  if (importedModuleType) {\n                      var importedModuleSummary = _this.getNgModuleSummary(importedModuleType);\n                      if (!importedModuleSummary) {\n                          _this._reportError(syntaxError(\"Unexpected \" + _this._getTypeDescriptor(importedType) + \" '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                          return;\n                      }\n                      importedModules.push(importedModuleSummary);\n                  }\n                  else {\n                      _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                      return;\n                  }\n              });\n          }\n          if (meta.exports) {\n              flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {\n                  if (!isValidType(exportedType)) {\n                      _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(exportedType) + \"' exported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                      return;\n                  }\n                  var exportedModuleSummary = _this.getNgModuleSummary(exportedType);\n                  if (exportedModuleSummary) {\n                      exportedModules.push(exportedModuleSummary);\n                  }\n                  else {\n                      exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));\n                  }\n              });\n          }\n          // Note: This will be modified later, so we rely on\n          // getting a new instance every time!\n          var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n          if (meta.declarations) {\n              flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {\n                  if (!isValidType(declaredType)) {\n                      _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                      return;\n                  }\n                  var declaredIdentifier = _this._getIdentifierMetadata(declaredType);\n                  if (_this._directiveResolver.isDirective(declaredType)) {\n                      transitiveModule.addDirective(declaredIdentifier);\n                      declaredDirectives.push(declaredIdentifier);\n                      _this._addTypeToModule(declaredType, moduleType);\n                  }\n                  else if (_this._pipeResolver.isPipe(declaredType)) {\n                      transitiveModule.addPipe(declaredIdentifier);\n                      transitiveModule.pipes.push(declaredIdentifier);\n                      declaredPipes.push(declaredIdentifier);\n                      _this._addTypeToModule(declaredType, moduleType);\n                  }\n                  else {\n                      _this._reportError(syntaxError(\"Unexpected \" + _this._getTypeDescriptor(declaredType) + \" '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                      return;\n                  }\n              });\n          }\n          var exportedDirectives = [];\n          var exportedPipes = [];\n          exportedNonModuleIdentifiers.forEach(function (exportedId) {\n              if (transitiveModule.directivesSet.has(exportedId.reference)) {\n                  exportedDirectives.push(exportedId);\n                  transitiveModule.addExportedDirective(exportedId);\n              }\n              else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n                  exportedPipes.push(exportedId);\n                  transitiveModule.addExportedPipe(exportedId);\n              }\n              else {\n                  _this._reportError(syntaxError(\"Can't export \" + _this._getTypeDescriptor(exportedId.reference) + \" \" + stringifyType(exportedId.reference) + \" from \" + stringifyType(moduleType) + \" as it was neither declared nor imported!\"), moduleType);\n              }\n          });\n          // The providers of the module have to go last\n          // so that they overwrite any other provider we already added.\n          if (meta.providers) {\n              providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(moduleType) + \"'\", [], moduleType));\n          }\n          if (meta.entryComponents) {\n              entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)\n                  .map(function (type) { return _this._getEntryComponentMetadata(type); }));\n          }\n          if (meta.bootstrap) {\n              flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {\n                  if (!isValidType(type)) {\n                      _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(type) + \"' used in the bootstrap property of module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                      return;\n                  }\n                  bootstrapComponents.push(_this._getIdentifierMetadata(type));\n              });\n          }\n          entryComponents.push.apply(entryComponents, bootstrapComponents.map(function (type) { return _this._getEntryComponentMetadata(type.reference); }));\n          if (meta.schemas) {\n              schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));\n          }\n          compileMeta = new CompileNgModuleMetadata({\n              type: this._getTypeMetadata(moduleType),\n              providers: providers,\n              entryComponents: entryComponents,\n              bootstrapComponents: bootstrapComponents,\n              schemas: schemas,\n              declaredDirectives: declaredDirectives,\n              exportedDirectives: exportedDirectives,\n              declaredPipes: declaredPipes,\n              exportedPipes: exportedPipes,\n              importedModules: importedModules,\n              exportedModules: exportedModules,\n              transitiveModule: transitiveModule,\n              id: meta.id,\n          });\n          entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });\n          providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type); });\n          transitiveModule.addModule(compileMeta.type);\n          this._ngModuleCache.set(moduleType, compileMeta);\n          return compileMeta;\n      };\n      CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {\n          if (this._directiveResolver.isDirective(type)) {\n              return 'directive';\n          }\n          if (this._pipeResolver.isPipe(type)) {\n              return 'pipe';\n          }\n          if (this._ngModuleResolver.isNgModule(type)) {\n              return 'module';\n          }\n          if (type.provide) {\n              return 'provider';\n          }\n          return 'value';\n      };\n      CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {\n          var oldModule = this._ngModuleOfTypes.get(type);\n          if (oldModule && oldModule !== moduleType) {\n              this._reportError(syntaxError(\"Type \" + stringifyType(type) + \" is part of the declarations of 2 modules: \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \"! \" +\n                  (\"Please consider moving \" + stringifyType(type) + \" to a higher module that imports \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \". \") +\n                  (\"You can also create a new NgModule that exports and includes \" + stringifyType(type) + \" then import that NgModule in \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \".\")), moduleType);\n          }\n          this._ngModuleOfTypes.set(type, moduleType);\n      };\n      CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {\n          // collect `providers` / `entryComponents` from all imported and all exported modules\n          var result = new TransitiveCompileNgModuleMetadata();\n          var modulesByToken = new Map();\n          importedModules.concat(exportedModules).forEach(function (modSummary) {\n              modSummary.modules.forEach(function (mod) { return result.addModule(mod); });\n              modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });\n              var addedTokens = new Set();\n              modSummary.providers.forEach(function (entry) {\n                  var tokenRef = tokenReference(entry.provider.token);\n                  var prevModules = modulesByToken.get(tokenRef);\n                  if (!prevModules) {\n                      prevModules = new Set();\n                      modulesByToken.set(tokenRef, prevModules);\n                  }\n                  var moduleRef = entry.module.reference;\n                  // Note: the providers of one module may still contain multiple providers\n                  // per token (e.g. for multi providers), and we need to preserve these.\n                  if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n                      prevModules.add(moduleRef);\n                      addedTokens.add(tokenRef);\n                      result.addProvider(entry.provider, entry.module);\n                  }\n              });\n          });\n          exportedModules.forEach(function (modSummary) {\n              modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });\n              modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });\n          });\n          importedModules.forEach(function (modSummary) {\n              modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });\n              modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });\n          });\n          return result;\n      };\n      CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {\n          type = _angular_core.resolveForwardRef(type);\n          return { reference: type };\n      };\n      CompileMetadataResolver.prototype.isInjectable = function (type) {\n          var annotations = this._reflector.annotations(type);\n          // Note: We need an exact check here as @Component / @Directive / ... inherit\n          // from @CompilerInjectable!\n          return annotations.some(function (ann) { return ann.constructor === _angular_core.Injectable; });\n      };\n      CompileMetadataResolver.prototype.getInjectableSummary = function (type) {\n          return { summaryKind: exports.CompileSummaryKind.Injectable, type: this._getTypeMetadata(type) };\n      };\n      CompileMetadataResolver.prototype._getInjectableMetadata = function (type, dependencies) {\n          if (dependencies === void 0) { dependencies = null; }\n          var typeSummary = this._loadSummary(type, exports.CompileSummaryKind.Injectable);\n          if (typeSummary) {\n              return typeSummary.type;\n          }\n          return this._getTypeMetadata(type, dependencies);\n      };\n      CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies) {\n          if (dependencies === void 0) { dependencies = null; }\n          var identifier = this._getIdentifierMetadata(type);\n          return {\n              reference: identifier.reference,\n              diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),\n              lifecycleHooks: _angular_core.ɵLIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference); }),\n          };\n      };\n      CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {\n          if (dependencies === void 0) { dependencies = null; }\n          factory = _angular_core.resolveForwardRef(factory);\n          return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };\n      };\n      /**\n       * Gets the metadata for the given pipe.\n       * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n       */\n      CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {\n          var pipeMeta = this._pipeCache.get(pipeType);\n          if (!pipeMeta) {\n              this._reportError(syntaxError(\"Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n          }\n          return pipeMeta;\n      };\n      CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {\n          var pipeSummary = this._loadSummary(pipeType, exports.CompileSummaryKind.Pipe);\n          if (!pipeSummary) {\n              this._reportError(syntaxError(\"Illegal state: Could not load the summary for pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n          }\n          return pipeSummary;\n      };\n      CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {\n          var pipeMeta = this._pipeCache.get(pipeType);\n          if (!pipeMeta) {\n              pipeMeta = this._loadPipeMetadata(pipeType);\n          }\n          return pipeMeta;\n      };\n      CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {\n          pipeType = _angular_core.resolveForwardRef(pipeType);\n          var pipeAnnotation = this._pipeResolver.resolve(pipeType);\n          var pipeMeta = new CompilePipeMetadata({\n              type: this._getTypeMetadata(pipeType),\n              name: pipeAnnotation.name,\n              pure: pipeAnnotation.pure\n          });\n          this._pipeCache.set(pipeType, pipeMeta);\n          this._summaryCache.set(pipeType, pipeMeta.toSummary());\n          return pipeMeta;\n      };\n      CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies) {\n          var _this = this;\n          var hasUnknownDeps = false;\n          var params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n          var dependenciesMetadata = params.map(function (param) {\n              var isAttribute = false;\n              var isHost = false;\n              var isSelf = false;\n              var isSkipSelf = false;\n              var isOptional = false;\n              var token = null;\n              if (Array.isArray(param)) {\n                  param.forEach(function (paramEntry) {\n                      if (paramEntry instanceof _angular_core.Host) {\n                          isHost = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.Self) {\n                          isSelf = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.SkipSelf) {\n                          isSkipSelf = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.Optional) {\n                          isOptional = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.Attribute) {\n                          isAttribute = true;\n                          token = paramEntry.attributeName;\n                      }\n                      else if (paramEntry instanceof _angular_core.Inject) {\n                          token = paramEntry.token;\n                      }\n                      else if (paramEntry instanceof _angular_core.InjectionToken) {\n                          token = paramEntry;\n                      }\n                      else if (isValidType(paramEntry) && token == null) {\n                          token = paramEntry;\n                      }\n                  });\n              }\n              else {\n                  token = param;\n              }\n              if (token == null) {\n                  hasUnknownDeps = true;\n                  return null;\n              }\n              return {\n                  isAttribute: isAttribute,\n                  isHost: isHost,\n                  isSelf: isSelf,\n                  isSkipSelf: isSkipSelf,\n                  isOptional: isOptional,\n                  token: _this._getTokenMetadata(token)\n              };\n          });\n          if (hasUnknownDeps) {\n              var depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : '?'; }).join(', ');\n              this._reportError(syntaxError(\"Can't resolve all parameters for \" + stringifyType(typeOrFunc) + \": (\" + depsTokens + \").\"), typeOrFunc);\n          }\n          return dependenciesMetadata;\n      };\n      CompileMetadataResolver.prototype._getTokenMetadata = function (token) {\n          token = _angular_core.resolveForwardRef(token);\n          var compileToken;\n          if (typeof token === 'string') {\n              compileToken = { value: token };\n          }\n          else {\n              compileToken = { identifier: { reference: token } };\n          }\n          return compileToken;\n      };\n      CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {\n          var _this = this;\n          if (compileProviders === void 0) { compileProviders = []; }\n          providers.forEach(function (provider, providerIdx) {\n              if (Array.isArray(provider)) {\n                  _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n              }\n              else {\n                  provider = _angular_core.resolveForwardRef(provider);\n                  var providerMeta = void 0;\n                  if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n                      _this._validateProvider(provider);\n                      providerMeta = new ProviderMeta(provider.provide, provider);\n                  }\n                  else if (isValidType(provider)) {\n                      providerMeta = new ProviderMeta(provider, { useClass: provider });\n                  }\n                  else if (provider === void 0) {\n                      _this._reportError(syntaxError(\"Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files.\"));\n                  }\n                  else {\n                      var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {\n                          if (seenProviderIdx < providerIdx) {\n                              soFar.push(\"\" + stringifyType(seenProvider));\n                          }\n                          else if (seenProviderIdx == providerIdx) {\n                              soFar.push(\"?\" + stringifyType(seenProvider) + \"?\");\n                          }\n                          else if (seenProviderIdx == providerIdx + 1) {\n                              soFar.push('...');\n                          }\n                          return soFar;\n                      }, [])\n                          .join(', ');\n                      _this._reportError(syntaxError(\"Invalid \" + (debugInfo ? debugInfo : 'provider') + \" - only instances of Provider and Type are allowed, got: [\" + providersInfo + \"]\"), type);\n                  }\n                  if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n                      targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));\n                  }\n                  else {\n                      compileProviders.push(_this.getProviderMetadata(providerMeta));\n                  }\n              }\n          });\n          return compileProviders;\n      };\n      CompileMetadataResolver.prototype._validateProvider = function (provider) {\n          if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n              this._reportError(syntaxError(\"Invalid provider for \" + stringifyType(provider.provide) + \". useClass cannot be \" + provider.useClass + \".\\n           Usually it happens when:\\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\\n           2. Class was used before it was declared. Use forwardRef in this case.\"));\n          }\n      };\n      CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {\n          var _this = this;\n          var components = [];\n          var collectedIdentifiers = [];\n          if (provider.useFactory || provider.useExisting || provider.useClass) {\n              this._reportError(syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!\"), type);\n              return [];\n          }\n          if (!provider.multi) {\n              this._reportError(syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!\"), type);\n              return [];\n          }\n          extractIdentifiers(provider.useValue, collectedIdentifiers);\n          collectedIdentifiers.forEach(function (identifier) {\n              var entry = _this._getEntryComponentMetadata(identifier.reference, false);\n              if (entry) {\n                  components.push(entry);\n              }\n          });\n          return components;\n      };\n      CompileMetadataResolver.prototype._getEntryComponentMetadata = function (dirType, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n          if (dirMeta && dirMeta.metadata.isComponent) {\n              return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };\n          }\n          else {\n              var dirSummary = this._loadSummary(dirType, exports.CompileSummaryKind.Directive);\n              if (dirSummary && dirSummary.isComponent) {\n                  return { componentType: dirType, componentFactory: dirSummary.componentFactory };\n              }\n          }\n          if (throwIfNotFound) {\n              throw syntaxError(dirType.name + \" cannot be used as an entry component.\");\n          }\n      };\n      CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {\n          var compileDeps;\n          var compileTypeMetadata = null;\n          var compileFactoryMetadata = null;\n          var token = this._getTokenMetadata(provider.token);\n          if (provider.useClass) {\n              compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);\n              compileDeps = compileTypeMetadata.diDeps;\n              if (provider.token === provider.useClass) {\n                  // use the compileTypeMetadata as it contains information about lifecycleHooks...\n                  token = { identifier: compileTypeMetadata };\n              }\n          }\n          else if (provider.useFactory) {\n              compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n              compileDeps = compileFactoryMetadata.diDeps;\n          }\n          return {\n              token: token,\n              useClass: compileTypeMetadata,\n              useValue: provider.useValue,\n              useFactory: compileFactoryMetadata,\n              useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,\n              deps: compileDeps,\n              multi: provider.multi\n          };\n      };\n      CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {\n          var _this = this;\n          var res = [];\n          Object.keys(queries).forEach(function (propertyName) {\n              var query = queries[propertyName];\n              if (query.isViewQuery === isViewQuery) {\n                  res.push(_this._getQueryMetadata(query, propertyName, directiveType));\n              }\n          });\n          return res;\n      };\n      CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\\s*,\\s*/); };\n      CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {\n          var _this = this;\n          var selectors;\n          if (typeof q.selector === 'string') {\n              selectors =\n                  this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });\n          }\n          else {\n              if (!q.selector) {\n                  this._reportError(syntaxError(\"Can't construct a query for the property \\\"\" + propertyName + \"\\\" of \\\"\" + stringifyType(typeOrFunc) + \"\\\" since the query selector wasn't defined.\"), typeOrFunc);\n              }\n              selectors = [this._getTokenMetadata(q.selector)];\n          }\n          return {\n              selectors: selectors,\n              first: q.first,\n              descendants: q.descendants, propertyName: propertyName,\n              read: q.read ? this._getTokenMetadata(q.read) : null\n          };\n      };\n      CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {\n          if (this._errorCollector) {\n              this._errorCollector(error, type);\n              if (otherType) {\n                  this._errorCollector(error, otherType);\n              }\n          }\n          else {\n              throw error;\n          }\n      };\n      return CompileMetadataResolver;\n  }());\n  CompileMetadataResolver.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  CompileMetadataResolver.ctorParameters = function () { return [\n      { type: CompilerConfig, },\n      { type: NgModuleResolver, },\n      { type: DirectiveResolver, },\n      { type: PipeResolver, },\n      { type: SummaryResolver, },\n      { type: ElementSchemaRegistry, },\n      { type: DirectiveNormalizer, },\n      { type: StaticSymbolCache, decorators: [{ type: _angular_core.Optional },] },\n      { type: _angular_core.ɵReflectorReader, },\n      { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN,] },] },\n  ]; };\n  function flattenArray(tree, out) {\n      if (out === void 0) { out = []; }\n      if (tree) {\n          for (var i = 0; i < tree.length; i++) {\n              var item = _angular_core.resolveForwardRef(tree[i]);\n              if (Array.isArray(item)) {\n                  flattenArray(item, out);\n              }\n              else {\n                  out.push(item);\n              }\n          }\n      }\n      return out;\n  }\n  function dedupeArray(array) {\n      if (array) {\n          return Array.from(new Set(array));\n      }\n      return [];\n  }\n  function flattenAndDedupeArray(tree) {\n      return dedupeArray(flattenArray(tree));\n  }\n  function isValidType(value) {\n      return (value instanceof StaticSymbol) || (value instanceof _angular_core.Type);\n  }\n  function componentModuleUrl(reflector, type, cmpMetadata) {\n      if (type instanceof StaticSymbol) {\n          return type.filePath;\n      }\n      var moduleId = cmpMetadata.moduleId;\n      if (typeof moduleId === 'string') {\n          var scheme = getUrlScheme(moduleId);\n          return scheme ? moduleId : \"package:\" + moduleId + MODULE_SUFFIX;\n      }\n      else if (moduleId !== null && moduleId !== void 0) {\n          throw syntaxError(\"moduleId should be a string in \\\"\" + stringifyType(type) + \"\\\". See https://goo.gl/wIDDiL for more information.\\n\" +\n              \"If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.\");\n      }\n      return reflector.importUri(type);\n  }\n  function extractIdentifiers(value, targetIdentifiers) {\n      visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n  }\n  var _CompileValueConverter = (function (_super) {\n      __extends$21(_CompileValueConverter, _super);\n      function _CompileValueConverter() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {\n          targetIdentifiers.push({ reference: value });\n      };\n      return _CompileValueConverter;\n  }(ValueTransformer));\n  function stringifyType(type) {\n      if (type instanceof StaticSymbol) {\n          return type.name + \" in \" + type.filePath;\n      }\n      else {\n          return stringify(type);\n      }\n  }\n  /**\n   * Indicates that a component is still being loaded in a synchronous compile.\n   */\n  function componentStillLoadingError(compType) {\n      debugger;\n      var error = Error(\"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n      error[_angular_core.ɵERROR_COMPONENT_TYPE] = compType;\n      return error;\n  }\n\n  var QUOTED_KEYS = '$quoted$';\n  function convertValueToOutputAst(value, type) {\n      if (type === void 0) { type = null; }\n      return visitValue(value, new _ValueOutputAstTransformer(), type);\n  }\n  var _ValueOutputAstTransformer = (function () {\n      function _ValueOutputAstTransformer() {\n      }\n      _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {\n          var _this = this;\n          return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);\n      };\n      _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {\n          var _this = this;\n          var entries = [];\n          var quotedSet = new Set(map && map[QUOTED_KEYS]);\n          Object.keys(map).forEach(function (key) {\n              entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));\n          });\n          return new LiteralMapExpr(entries, type);\n      };\n      _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };\n      _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {\n          if (value instanceof Expression) {\n              return value;\n          }\n          else {\n              return importExpr({ reference: value });\n          }\n      };\n      return _ValueOutputAstTransformer;\n  }());\n\n  /**\n   * This is currently not read, but will probably be used in the future.\n   * We keep it as we already pass it through all the rigth places...\n   */\n  var ComponentFactoryDependency = (function () {\n      function ComponentFactoryDependency(compType) {\n          this.compType = compType;\n      }\n      return ComponentFactoryDependency;\n  }());\n  var NgModuleCompileResult = (function () {\n      function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {\n          this.statements = statements;\n          this.ngModuleFactoryVar = ngModuleFactoryVar;\n          this.dependencies = dependencies;\n      }\n      return NgModuleCompileResult;\n  }());\n  var NgModuleCompiler = (function () {\n      function NgModuleCompiler() {\n      }\n      NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {\n          var moduleUrl = identifierModuleUrl(ngModuleMeta.type);\n          var sourceFileName = isPresent(moduleUrl) ?\n              \"in NgModule \" + identifierName(ngModuleMeta.type) + \" in \" + moduleUrl :\n              \"in NgModule \" + identifierName(ngModuleMeta.type);\n          var sourceFile = new ParseSourceFile('', sourceFileName);\n          var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));\n          var deps = [];\n          var bootstrapComponentFactories = [];\n          var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {\n              if (ngModuleMeta.bootstrapComponents.some(function (id) { return id.reference === entryComponent.componentType; })) {\n                  bootstrapComponentFactories.push({ reference: entryComponent.componentFactory });\n              }\n              deps.push(new ComponentFactoryDependency(entryComponent.componentType));\n              return { reference: entryComponent.componentFactory };\n          });\n          var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);\n          var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);\n          providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });\n          var injectorClass = builder.build();\n          var ngModuleFactoryVar = identifierName(ngModuleMeta.type) + \"NgFactory\";\n          var ngModuleFactoryStmt = variable(ngModuleFactoryVar)\n              .set(importExpr(createIdentifier(Identifiers.NgModuleFactory))\n              .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))\n              .toDeclStmt(null, [StmtModifier.Final]);\n          var stmts = [injectorClass, ngModuleFactoryStmt];\n          if (ngModuleMeta.id) {\n              var registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn))\n                  .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])\n                  .toStmt();\n              stmts.push(registerFactoryStmt);\n          }\n          return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);\n      };\n      return NgModuleCompiler;\n  }());\n  NgModuleCompiler.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  NgModuleCompiler.ctorParameters = function () { return []; };\n  var _InjectorBuilder = (function () {\n      function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {\n          this._ngModuleMeta = _ngModuleMeta;\n          this._entryComponentFactories = _entryComponentFactories;\n          this._bootstrapComponentFactories = _bootstrapComponentFactories;\n          this._sourceSpan = _sourceSpan;\n          this.fields = [];\n          this.getters = [];\n          this.methods = [];\n          this.ctorStmts = [];\n          this._tokens = [];\n          this._instances = new Map();\n          this._createStmts = [];\n          this._destroyStmts = [];\n      }\n      _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {\n          var _this = this;\n          var providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });\n          var propName = \"_\" + tokenName(resolvedProvider.token) + \"_\" + this._instances.size;\n          var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);\n          if (resolvedProvider.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1) {\n              this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());\n          }\n          this._tokens.push(resolvedProvider.token);\n          this._instances.set(tokenReference(resolvedProvider.token), instance);\n      };\n      _InjectorBuilder.prototype.build = function () {\n          var _this = this;\n          var getMethodStmts = this._tokens.map(function (token) {\n              var providerExpr = _this._instances.get(tokenReference(token));\n              return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);\n          });\n          var methods = [\n              new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),\n              new ClassMethod('getInternal', [\n                  new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),\n                  new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)\n              ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE),\n              new ClassMethod('destroyInternal', [], this._destroyStmts),\n          ];\n          var parentArgs = [\n              variable(InjectorProps.parent.name),\n              literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),\n              literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))\n          ];\n          var injClassName = identifierName(this._ngModuleMeta.type) + \"Injector\";\n          return createClassStmt({\n              name: injClassName,\n              ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],\n              parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),\n              parentArgs: parentArgs,\n              builders: [{ methods: methods }, this]\n          });\n      };\n      _InjectorBuilder.prototype._getProviderValue = function (provider) {\n          var _this = this;\n          var result;\n          if (isPresent(provider.useExisting)) {\n              result = this._getDependency({ token: provider.useExisting });\n          }\n          else if (isPresent(provider.useFactory)) {\n              var deps = provider.deps || provider.useFactory.diDeps;\n              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });\n              result = importExpr(provider.useFactory).callFn(depsExpr);\n          }\n          else if (isPresent(provider.useClass)) {\n              var deps = provider.deps || provider.useClass.diDeps;\n              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });\n              result =\n                  importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));\n          }\n          else {\n              result = convertValueToOutputAst(provider.useValue);\n          }\n          return result;\n      };\n      _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {\n          var resolvedProviderValueExpr;\n          var type;\n          if (isMulti) {\n              resolvedProviderValueExpr = literalArr(providerValueExpressions);\n              type = new ArrayType(DYNAMIC_TYPE);\n          }\n          else {\n              resolvedProviderValueExpr = providerValueExpressions[0];\n              type = providerValueExpressions[0].type;\n          }\n          if (!type) {\n              type = DYNAMIC_TYPE;\n          }\n          if (isEager) {\n              this.fields.push(new ClassField(propName, type));\n              this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n          }\n          else {\n              var internalField = \"_\" + propName;\n              this.fields.push(new ClassField(internalField, type));\n              // Note: Equals is important for JS so that it also checks the undefined case!\n              var getterStmts = [\n                  new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),\n                  new ReturnStatement(THIS_EXPR.prop(internalField))\n              ];\n              this.getters.push(new ClassGetter(propName, getterStmts, type));\n          }\n          return THIS_EXPR.prop(propName);\n      };\n      _InjectorBuilder.prototype._getDependency = function (dep) {\n          var result = null;\n          if (dep.isValue) {\n              result = literal(dep.value);\n          }\n          if (!dep.isSkipSelf) {\n              if (dep.token &&\n                  (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||\n                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver))) {\n                  result = THIS_EXPR;\n              }\n              if (!result) {\n                  result = this._instances.get(tokenReference(dep.token));\n              }\n          }\n          if (!result) {\n              var args = [createDiTokenExpression(dep.token)];\n              if (dep.isOptional) {\n                  args.push(NULL_EXPR);\n              }\n              result = InjectorProps.parent.callMethod('get', args);\n          }\n          return result;\n      };\n      return _InjectorBuilder;\n  }());\n  var InjectorProps = (function () {\n      function InjectorProps() {\n      }\n      return InjectorProps;\n  }());\n  InjectorProps.parent = THIS_EXPR.prop('parent');\n  var InjectMethodVars = (function () {\n      function InjectMethodVars() {\n      }\n      return InjectMethodVars;\n  }());\n  InjectMethodVars.token = variable('token');\n  InjectMethodVars.notFoundResult = variable('notFoundResult');\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  // https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  var VERSION$1 = 3;\n  var JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\n  var SourceMapGenerator = (function () {\n      function SourceMapGenerator(file) {\n          if (file === void 0) { file = null; }\n          this.file = file;\n          this.sourcesContent = new Map();\n          this.lines = [];\n          this.lastCol0 = 0;\n          this.hasMappings = false;\n      }\n      // The content is `null` when the content is expected to be loaded using the URL\n      SourceMapGenerator.prototype.addSource = function (url, content) {\n          if (content === void 0) { content = null; }\n          if (!this.sourcesContent.has(url)) {\n              this.sourcesContent.set(url, content);\n          }\n          return this;\n      };\n      SourceMapGenerator.prototype.addLine = function () {\n          this.lines.push([]);\n          this.lastCol0 = 0;\n          return this;\n      };\n      SourceMapGenerator.prototype.addMapping = function (col0, sourceUrl, sourceLine0, sourceCol0) {\n          if (!this.currentLine) {\n              throw new Error(\"A line must be added before mappings can be added\");\n          }\n          if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n              throw new Error(\"Unknown source file \\\"\" + sourceUrl + \"\\\"\");\n          }\n          if (col0 == null) {\n              throw new Error(\"The column in the generated code must be provided\");\n          }\n          if (col0 < this.lastCol0) {\n              throw new Error(\"Mapping should be added in output order\");\n          }\n          if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n              throw new Error(\"The source location must be provided when a source url is provided\");\n          }\n          this.hasMappings = true;\n          this.lastCol0 = col0;\n          this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 });\n          return this;\n      };\n      Object.defineProperty(SourceMapGenerator.prototype, \"currentLine\", {\n          get: function () { return this.lines.slice(-1)[0]; },\n          enumerable: true,\n          configurable: true\n      });\n      SourceMapGenerator.prototype.toJSON = function () {\n          var _this = this;\n          if (!this.hasMappings) {\n              return null;\n          }\n          var sourcesIndex = new Map();\n          var sources = [];\n          var sourcesContent = [];\n          Array.from(this.sourcesContent.keys()).forEach(function (url, i) {\n              sourcesIndex.set(url, i);\n              sources.push(url);\n              sourcesContent.push(_this.sourcesContent.get(url) || null);\n          });\n          var mappings = '';\n          var lastCol0 = 0;\n          var lastSourceIndex = 0;\n          var lastSourceLine0 = 0;\n          var lastSourceCol0 = 0;\n          this.lines.forEach(function (segments) {\n              lastCol0 = 0;\n              mappings += segments\n                  .map(function (segment) {\n                  // zero-based starting column of the line in the generated code\n                  var segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                  lastCol0 = segment.col0;\n                  if (segment.sourceUrl != null) {\n                      // zero-based index into the “sources” list\n                      segAsStr +=\n                          toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);\n                      lastSourceIndex = sourcesIndex.get(segment.sourceUrl);\n                      // the zero-based starting line in the original source\n                      segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);\n                      lastSourceLine0 = segment.sourceLine0;\n                      // the zero-based starting column in the original source\n                      segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);\n                      lastSourceCol0 = segment.sourceCol0;\n                  }\n                  return segAsStr;\n              })\n                  .join(',');\n              mappings += ';';\n          });\n          mappings = mappings.slice(0, -1);\n          return {\n              'file': this.file || '',\n              'version': VERSION$1,\n              'sourceRoot': '',\n              'sources': sources,\n              'sourcesContent': sourcesContent,\n              'mappings': mappings,\n          };\n      };\n      SourceMapGenerator.prototype.toJsComment = function () {\n          return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n              '';\n      };\n      return SourceMapGenerator;\n  }());\n  function toBase64String(value) {\n      var b64 = '';\n      for (var i = 0; i < value.length;) {\n          var i1 = value.charCodeAt(i++);\n          var i2 = value.charCodeAt(i++);\n          var i3 = value.charCodeAt(i++);\n          b64 += toBase64Digit(i1 >> 2);\n          b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));\n          b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));\n          b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);\n      }\n      return b64;\n  }\n  function toBase64VLQ(value) {\n      value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n      var out = '';\n      do {\n          var digit = value & 31;\n          value = value >> 5;\n          if (value > 0) {\n              digit = digit | 32;\n          }\n          out += toBase64Digit(digit);\n      } while (value > 0);\n      return out;\n  }\n  var B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  function toBase64Digit(value) {\n      if (value < 0 || value >= 64) {\n          throw new Error(\"Can only encode value in the range [0, 63]\");\n      }\n      return B64_DIGITS[value];\n  }\n\n  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\n  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\n  var _INDENT_WITH = '  ';\n  var CATCH_ERROR_VAR$1 = variable('error');\n  var CATCH_STACK_VAR$1 = variable('stack');\n  var _EmittedLine = (function () {\n      function _EmittedLine(indent) {\n          this.indent = indent;\n          this.parts = [];\n          this.srcSpans = [];\n      }\n      return _EmittedLine;\n  }());\n  var EmitterVisitorContext = (function () {\n      function EmitterVisitorContext(_exportedVars, _indent) {\n          this._exportedVars = _exportedVars;\n          this._indent = _indent;\n          this._classes = [];\n          this._lines = [new _EmittedLine(_indent)];\n      }\n      EmitterVisitorContext.createRoot = function (exportedVars) {\n          return new EmitterVisitorContext(exportedVars, 0);\n      };\n      Object.defineProperty(EmitterVisitorContext.prototype, \"_currentLine\", {\n          get: function () { return this._lines[this._lines.length - 1]; },\n          enumerable: true,\n          configurable: true\n      });\n      EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };\n      EmitterVisitorContext.prototype.println = function (from, lastPart) {\n          if (lastPart === void 0) { lastPart = ''; }\n          this.print(from, lastPart, true);\n      };\n      EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };\n      EmitterVisitorContext.prototype.print = function (from, part, newLine) {\n          if (newLine === void 0) { newLine = false; }\n          if (part.length > 0) {\n              this._currentLine.parts.push(part);\n              this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n          }\n          if (newLine) {\n              this._lines.push(new _EmittedLine(this._indent));\n          }\n      };\n      EmitterVisitorContext.prototype.removeEmptyLastLine = function () {\n          if (this.lineIsEmpty()) {\n              this._lines.pop();\n          }\n      };\n      EmitterVisitorContext.prototype.incIndent = function () {\n          this._indent++;\n          this._currentLine.indent = this._indent;\n      };\n      EmitterVisitorContext.prototype.decIndent = function () {\n          this._indent--;\n          this._currentLine.indent = this._indent;\n      };\n      EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };\n      EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };\n      Object.defineProperty(EmitterVisitorContext.prototype, \"currentClass\", {\n          get: function () {\n              return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      EmitterVisitorContext.prototype.toSource = function () {\n          return this.sourceLines\n              .map(function (l) { return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : ''; })\n              .join('\\n');\n      };\n      EmitterVisitorContext.prototype.toSourceMapGenerator = function (file, startsAtLine) {\n          if (file === void 0) { file = null; }\n          if (startsAtLine === void 0) { startsAtLine = 0; }\n          var map = new SourceMapGenerator(file);\n          for (var i = 0; i < startsAtLine; i++) {\n              map.addLine();\n          }\n          this.sourceLines.forEach(function (line) {\n              map.addLine();\n              var spans = line.srcSpans;\n              var parts = line.parts;\n              var col0 = line.indent * _INDENT_WITH.length;\n              var spanIdx = 0;\n              // skip leading parts without source spans\n              while (spanIdx < spans.length && !spans[spanIdx]) {\n                  col0 += parts[spanIdx].length;\n                  spanIdx++;\n              }\n              while (spanIdx < spans.length) {\n                  var span = spans[spanIdx];\n                  var source = span.start.file;\n                  var sourceLine = span.start.line;\n                  var sourceCol = span.start.col;\n                  map.addSource(source.url, source.content)\n                      .addMapping(col0, source.url, sourceLine, sourceCol);\n                  col0 += parts[spanIdx].length;\n                  spanIdx++;\n                  // assign parts without span or the same span to the previous segment\n                  while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n                      col0 += parts[spanIdx].length;\n                      spanIdx++;\n                  }\n              }\n          });\n          return map;\n      };\n      Object.defineProperty(EmitterVisitorContext.prototype, \"sourceLines\", {\n          get: function () {\n              if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n                  return this._lines.slice(0, -1);\n              }\n              return this._lines;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      return EmitterVisitorContext;\n  }());\n  var AbstractEmitterVisitor = (function () {\n      function AbstractEmitterVisitor(_escapeDollarInStrings) {\n          this._escapeDollarInStrings = _escapeDollarInStrings;\n      }\n      AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {\n          stmt.expr.visitExpression(this, ctx);\n          ctx.println(stmt, ';');\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {\n          ctx.print(stmt, \"return \");\n          stmt.value.visitExpression(this, ctx);\n          ctx.println(stmt, ';');\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {\n          ctx.print(stmt, \"if (\");\n          stmt.condition.visitExpression(this, ctx);\n          ctx.print(stmt, \") {\");\n          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;\n          if (stmt.trueCase.length <= 1 && !hasElseCase) {\n              ctx.print(stmt, \" \");\n              this.visitAllStatements(stmt.trueCase, ctx);\n              ctx.removeEmptyLastLine();\n              ctx.print(stmt, \" \");\n          }\n          else {\n              ctx.println();\n              ctx.incIndent();\n              this.visitAllStatements(stmt.trueCase, ctx);\n              ctx.decIndent();\n              if (hasElseCase) {\n                  ctx.println(stmt, \"} else {\");\n                  ctx.incIndent();\n                  this.visitAllStatements(stmt.falseCase, ctx);\n                  ctx.decIndent();\n              }\n          }\n          ctx.println(stmt, \"}\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {\n          ctx.print(stmt, \"throw \");\n          stmt.error.visitExpression(this, ctx);\n          ctx.println(stmt, \";\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {\n          var lines = stmt.comment.split('\\n');\n          lines.forEach(function (line) { ctx.println(stmt, \"// \" + line); });\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {\n          var lineWasEmpty = ctx.lineIsEmpty();\n          if (!lineWasEmpty) {\n              ctx.print(expr, '(');\n          }\n          ctx.print(expr, expr.name + \" = \");\n          expr.value.visitExpression(this, ctx);\n          if (!lineWasEmpty) {\n              ctx.print(expr, ')');\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {\n          var lineWasEmpty = ctx.lineIsEmpty();\n          if (!lineWasEmpty) {\n              ctx.print(expr, '(');\n          }\n          expr.receiver.visitExpression(this, ctx);\n          ctx.print(expr, \"[\");\n          expr.index.visitExpression(this, ctx);\n          ctx.print(expr, \"] = \");\n          expr.value.visitExpression(this, ctx);\n          if (!lineWasEmpty) {\n              ctx.print(expr, ')');\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {\n          var lineWasEmpty = ctx.lineIsEmpty();\n          if (!lineWasEmpty) {\n              ctx.print(expr, '(');\n          }\n          expr.receiver.visitExpression(this, ctx);\n          ctx.print(expr, \".\" + expr.name + \" = \");\n          expr.value.visitExpression(this, ctx);\n          if (!lineWasEmpty) {\n              ctx.print(expr, ')');\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {\n          expr.receiver.visitExpression(this, ctx);\n          var name = expr.name;\n          if (isPresent(expr.builtin)) {\n              name = this.getBuiltinMethodName(expr.builtin);\n              if (isBlank(name)) {\n                  // some builtins just mean to skip the call.\n                  return null;\n              }\n          }\n          ctx.print(expr, \".\" + name + \"(\");\n          this.visitAllExpressions(expr.args, ctx, \",\");\n          ctx.print(expr, \")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {\n          expr.fn.visitExpression(this, ctx);\n          ctx.print(expr, \"(\");\n          this.visitAllExpressions(expr.args, ctx, ',');\n          ctx.print(expr, \")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {\n          var varName = ast.name;\n          if (isPresent(ast.builtin)) {\n              switch (ast.builtin) {\n                  case BuiltinVar.Super:\n                      varName = 'super';\n                      break;\n                  case BuiltinVar.This:\n                      varName = 'this';\n                      break;\n                  case BuiltinVar.CatchError:\n                      varName = CATCH_ERROR_VAR$1.name;\n                      break;\n                  case BuiltinVar.CatchStack:\n                      varName = CATCH_STACK_VAR$1.name;\n                      break;\n                  default:\n                      throw new Error(\"Unknown builtin variable \" + ast.builtin);\n              }\n          }\n          ctx.print(ast, varName);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {\n          ctx.print(ast, \"new \");\n          ast.classExpr.visitExpression(this, ctx);\n          ctx.print(ast, \"(\");\n          this.visitAllExpressions(ast.args, ctx, ',');\n          ctx.print(ast, \")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {\n          var value = ast.value;\n          if (typeof value === 'string') {\n              ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n          }\n          else {\n              ctx.print(ast, \"\" + value);\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {\n          ctx.print(ast, \"(\");\n          ast.condition.visitExpression(this, ctx);\n          ctx.print(ast, '? ');\n          ast.trueCase.visitExpression(this, ctx);\n          ctx.print(ast, ': ');\n          ast.falseCase.visitExpression(this, ctx);\n          ctx.print(ast, \")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {\n          ctx.print(ast, '!');\n          ast.condition.visitExpression(this, ctx);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {\n          var opStr;\n          switch (ast.operator) {\n              case BinaryOperator.Equals:\n                  opStr = '==';\n                  break;\n              case BinaryOperator.Identical:\n                  opStr = '===';\n                  break;\n              case BinaryOperator.NotEquals:\n                  opStr = '!=';\n                  break;\n              case BinaryOperator.NotIdentical:\n                  opStr = '!==';\n                  break;\n              case BinaryOperator.And:\n                  opStr = '&&';\n                  break;\n              case BinaryOperator.Or:\n                  opStr = '||';\n                  break;\n              case BinaryOperator.Plus:\n                  opStr = '+';\n                  break;\n              case BinaryOperator.Minus:\n                  opStr = '-';\n                  break;\n              case BinaryOperator.Divide:\n                  opStr = '/';\n                  break;\n              case BinaryOperator.Multiply:\n                  opStr = '*';\n                  break;\n              case BinaryOperator.Modulo:\n                  opStr = '%';\n                  break;\n              case BinaryOperator.Lower:\n                  opStr = '<';\n                  break;\n              case BinaryOperator.LowerEquals:\n                  opStr = '<=';\n                  break;\n              case BinaryOperator.Bigger:\n                  opStr = '>';\n                  break;\n              case BinaryOperator.BiggerEquals:\n                  opStr = '>=';\n                  break;\n              default:\n                  throw new Error(\"Unknown operator \" + ast.operator);\n          }\n          ctx.print(ast, \"(\");\n          ast.lhs.visitExpression(this, ctx);\n          ctx.print(ast, \" \" + opStr + \" \");\n          ast.rhs.visitExpression(this, ctx);\n          ctx.print(ast, \")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {\n          ast.receiver.visitExpression(this, ctx);\n          ctx.print(ast, \".\");\n          ctx.print(ast, ast.name);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {\n          ast.receiver.visitExpression(this, ctx);\n          ctx.print(ast, \"[\");\n          ast.index.visitExpression(this, ctx);\n          ctx.print(ast, \"]\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {\n          var useNewLine = ast.entries.length > 1;\n          ctx.print(ast, \"[\", useNewLine);\n          ctx.incIndent();\n          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);\n          ctx.decIndent();\n          ctx.print(ast, \"]\", useNewLine);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {\n          var _this = this;\n          var useNewLine = ast.entries.length > 1;\n          ctx.print(ast, \"{\", useNewLine);\n          ctx.incIndent();\n          this.visitAllObjects(function (entry) {\n              ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + \": \");\n              entry.value.visitExpression(_this, ctx);\n          }, ast.entries, ctx, ',', useNewLine);\n          ctx.decIndent();\n          ctx.print(ast, \"}\", useNewLine);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {\n          var _this = this;\n          if (newLine === void 0) { newLine = false; }\n          this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);\n      };\n      AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {\n          if (newLine === void 0) { newLine = false; }\n          for (var i = 0; i < expressions.length; i++) {\n              if (i > 0) {\n                  ctx.print(null, separator, newLine);\n              }\n              handler(expressions[i]);\n          }\n          if (newLine) {\n              ctx.println();\n          }\n      };\n      AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {\n          var _this = this;\n          statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });\n      };\n      return AbstractEmitterVisitor;\n  }());\n  function escapeIdentifier(input, escapeDollar, alwaysQuote) {\n      if (alwaysQuote === void 0) { alwaysQuote = true; }\n      if (isBlank(input)) {\n          return null;\n      }\n      var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {\n          var match = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              match[_i] = arguments[_i];\n          }\n          if (match[0] == '$') {\n              return escapeDollar ? '\\\\$' : '$';\n          }\n          else if (match[0] == '\\n') {\n              return '\\\\n';\n          }\n          else if (match[0] == '\\r') {\n              return '\\\\r';\n          }\n          else {\n              return \"\\\\\" + match[0];\n          }\n      });\n      var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n      return requiresQuotes ? \"'\" + body + \"'\" : body;\n  }\n  function _createIndent(count) {\n      var res = '';\n      for (var i = 0; i < count; i++) {\n          res += _INDENT_WITH;\n      }\n      return res;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$22 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _debugFilePath = '/debug/lib';\n  function debugOutputAstAsTypeScript(ast) {\n      var converter = new _TsEmitterVisitor(_debugFilePath, {\n          fileNameToModuleName: function (filePath, containingFilePath) { return filePath; },\n          getImportAs: function (symbol) { return null; },\n          getTypeArity: function (symbol) { return null; }\n      });\n      var ctx = EmitterVisitorContext.createRoot([]);\n      var asts = Array.isArray(ast) ? ast : [ast];\n      asts.forEach(function (ast) {\n          if (ast instanceof Statement) {\n              ast.visitStatement(converter, ctx);\n          }\n          else if (ast instanceof Expression) {\n              ast.visitExpression(converter, ctx);\n          }\n          else if (ast instanceof Type$1) {\n              ast.visitType(converter, ctx);\n          }\n          else {\n              throw new Error(\"Don't know how to print debug info for \" + ast);\n          }\n      });\n      return ctx.toSource();\n  }\n  var TypeScriptEmitter = (function () {\n      function TypeScriptEmitter(_importResolver) {\n          this._importResolver = _importResolver;\n      }\n      TypeScriptEmitter.prototype.emitStatements = function (genFilePath, stmts, exportedVars) {\n          var _this = this;\n          var converter = new _TsEmitterVisitor(genFilePath, this._importResolver);\n          var ctx = EmitterVisitorContext.createRoot(exportedVars);\n          converter.visitAllStatements(stmts, ctx);\n          var srcParts = [];\n          converter.reexports.forEach(function (reexports, exportedFilePath) {\n              var reexportsCode = reexports.map(function (reexport) { return reexport.name + \" as \" + reexport.as; }).join(',');\n              srcParts.push(\"export {\" + reexportsCode + \"} from '\" + _this._importResolver.fileNameToModuleName(exportedFilePath, genFilePath) + \"';\");\n          });\n          converter.importsWithPrefixes.forEach(function (prefix, importedFilePath) {\n              // Note: can't write the real word for import as it screws up system.js auto detection...\n              srcParts.push(\"imp\" +\n                  (\"ort * as \" + prefix + \" from '\" + _this._importResolver.fileNameToModuleName(importedFilePath, genFilePath) + \"';\"));\n          });\n          srcParts.push(ctx.toSource());\n          var prefixLines = converter.reexports.size + converter.importsWithPrefixes.size;\n          var sm = ctx.toSourceMapGenerator(null, prefixLines).toJsComment();\n          if (sm) {\n              srcParts.push(sm);\n          }\n          return srcParts.join('\\n');\n      };\n      return TypeScriptEmitter;\n  }());\n  var _TsEmitterVisitor = (function (_super) {\n      __extends$22(_TsEmitterVisitor, _super);\n      function _TsEmitterVisitor(_genFilePath, _importResolver) {\n          var _this = _super.call(this, false) || this;\n          _this._genFilePath = _genFilePath;\n          _this._importResolver = _importResolver;\n          _this.typeExpression = 0;\n          _this.importsWithPrefixes = new Map();\n          _this.reexports = new Map();\n          return _this;\n      }\n      _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {\n          if (defaultType === void 0) { defaultType = 'any'; }\n          if (isPresent(t)) {\n              this.typeExpression++;\n              t.visitType(this, ctx);\n              this.typeExpression--;\n          }\n          else {\n              ctx.print(null, defaultType);\n          }\n      };\n      _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {\n          var value = ast.value;\n          if (isBlank(value) && ast.type != INFERRED_TYPE) {\n              ctx.print(ast, \"(\" + value + \" as any)\");\n              return null;\n          }\n          return _super.prototype.visitLiteralExpr.call(this, ast, ctx);\n      };\n      // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.\n      // In SNC mode, [] have the type never[], so we cast here to any[].\n      // TODO: narrow the cast to a more explicit type, or use a pattern that does not\n      // start with [].concat. see https://github.com/angular/angular/pull/11846\n      _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {\n          if (ast.entries.length === 0) {\n              ctx.print(ast, '(');\n          }\n          var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);\n          if (ast.entries.length === 0) {\n              ctx.print(ast, ' as any[])');\n          }\n          return result;\n      };\n      _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {\n          this._visitIdentifier(ast.value, ast.typeParams, ctx);\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {\n          if (ctx.isExportedVar(stmt.name) && stmt.value instanceof ExternalExpr && !stmt.type) {\n              // check for a reexport\n              var _a = this._resolveStaticSymbol(stmt.value.value), name_1 = _a.name, filePath = _a.filePath, members = _a.members;\n              if (members.length === 0 && filePath !== this._genFilePath) {\n                  var reexports = this.reexports.get(filePath);\n                  if (!reexports) {\n                      reexports = [];\n                      this.reexports.set(filePath, reexports);\n                  }\n                  reexports.push({ name: name_1, as: stmt.name });\n                  return null;\n              }\n          }\n          if (ctx.isExportedVar(stmt.name)) {\n              ctx.print(stmt, \"export \");\n          }\n          if (stmt.hasModifier(StmtModifier.Final)) {\n              ctx.print(stmt, \"const\");\n          }\n          else {\n              ctx.print(stmt, \"var\");\n          }\n          ctx.print(stmt, \" \" + stmt.name);\n          this._printColonType(stmt.type, ctx);\n          ctx.print(stmt, \" = \");\n          stmt.value.visitExpression(this, ctx);\n          ctx.println(stmt, \";\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {\n          ctx.print(ast, \"(<\");\n          ast.type.visitType(this, ctx);\n          ctx.print(ast, \">\");\n          ast.value.visitExpression(this, ctx);\n          ctx.print(ast, \")\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {\n          ctx.print(ast, \"new \");\n          this.typeExpression++;\n          ast.classExpr.visitExpression(this, ctx);\n          this.typeExpression--;\n          ctx.print(ast, \"(\");\n          this.visitAllExpressions(ast.args, ctx, ',');\n          ctx.print(ast, \")\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {\n          var _this = this;\n          ctx.pushClass(stmt);\n          if (ctx.isExportedVar(stmt.name)) {\n              ctx.print(stmt, \"export \");\n          }\n          ctx.print(stmt, \"class \" + stmt.name);\n          if (isPresent(stmt.parent)) {\n              ctx.print(stmt, \" extends \");\n              this.typeExpression++;\n              stmt.parent.visitExpression(this, ctx);\n              this.typeExpression--;\n          }\n          ctx.println(stmt, \" {\");\n          ctx.incIndent();\n          stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });\n          if (isPresent(stmt.constructorMethod)) {\n              this._visitClassConstructor(stmt, ctx);\n          }\n          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });\n          stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });\n          ctx.decIndent();\n          ctx.println(stmt, \"}\");\n          ctx.popClass();\n          return null;\n      };\n      _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {\n          if (field.hasModifier(StmtModifier.Private)) {\n              // comment out as a workaround for #10967\n              ctx.print(null, \"/*private*/ \");\n          }\n          ctx.print(null, field.name);\n          this._printColonType(field.type, ctx);\n          ctx.println(null, \";\");\n      };\n      _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {\n          if (getter.hasModifier(StmtModifier.Private)) {\n              ctx.print(null, \"private \");\n          }\n          ctx.print(null, \"get \" + getter.name + \"()\");\n          this._printColonType(getter.type, ctx);\n          ctx.println(null, \" {\");\n          ctx.incIndent();\n          this.visitAllStatements(getter.body, ctx);\n          ctx.decIndent();\n          ctx.println(null, \"}\");\n      };\n      _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {\n          ctx.print(stmt, \"constructor(\");\n          this._visitParams(stmt.constructorMethod.params, ctx);\n          ctx.println(stmt, \") {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.constructorMethod.body, ctx);\n          ctx.decIndent();\n          ctx.println(stmt, \"}\");\n      };\n      _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {\n          if (method.hasModifier(StmtModifier.Private)) {\n              ctx.print(null, \"private \");\n          }\n          ctx.print(null, method.name + \"(\");\n          this._visitParams(method.params, ctx);\n          ctx.print(null, \")\");\n          this._printColonType(method.type, ctx, 'void');\n          ctx.println(null, \" {\");\n          ctx.incIndent();\n          this.visitAllStatements(method.body, ctx);\n          ctx.decIndent();\n          ctx.println(null, \"}\");\n      };\n      _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {\n          ctx.print(ast, \"(\");\n          this._visitParams(ast.params, ctx);\n          ctx.print(ast, \")\");\n          this._printColonType(ast.type, ctx, 'void');\n          ctx.println(ast, \" => {\");\n          ctx.incIndent();\n          this.visitAllStatements(ast.statements, ctx);\n          ctx.decIndent();\n          ctx.print(ast, \"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {\n          if (ctx.isExportedVar(stmt.name)) {\n              ctx.print(stmt, \"export \");\n          }\n          ctx.print(stmt, \"function \" + stmt.name + \"(\");\n          this._visitParams(stmt.params, ctx);\n          ctx.print(stmt, \")\");\n          this._printColonType(stmt.type, ctx, 'void');\n          ctx.println(stmt, \" {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.statements, ctx);\n          ctx.decIndent();\n          ctx.println(stmt, \"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {\n          ctx.println(stmt, \"try {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.bodyStmts, ctx);\n          ctx.decIndent();\n          ctx.println(stmt, \"} catch (\" + CATCH_ERROR_VAR$1.name + \") {\");\n          ctx.incIndent();\n          var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [\n                  StmtModifier.Final\n              ])].concat(stmt.catchStmts);\n          this.visitAllStatements(catchStmts, ctx);\n          ctx.decIndent();\n          ctx.println(stmt, \"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {\n          var typeStr;\n          switch (type.name) {\n              case BuiltinTypeName.Bool:\n                  typeStr = 'boolean';\n                  break;\n              case BuiltinTypeName.Dynamic:\n                  typeStr = 'any';\n                  break;\n              case BuiltinTypeName.Function:\n                  typeStr = 'Function';\n                  break;\n              case BuiltinTypeName.Number:\n                  typeStr = 'number';\n                  break;\n              case BuiltinTypeName.Int:\n                  typeStr = 'number';\n                  break;\n              case BuiltinTypeName.String:\n                  typeStr = 'string';\n                  break;\n              default:\n                  throw new Error(\"Unsupported builtin type \" + type.name);\n          }\n          ctx.print(null, typeStr);\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {\n          ast.value.visitExpression(this, ctx);\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {\n          this.visitType(type.of, ctx);\n          ctx.print(null, \"[]\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {\n          ctx.print(null, \"{[key: string]:\");\n          this.visitType(type.valueType, ctx);\n          ctx.print(null, \"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {\n          var name;\n          switch (method) {\n              case BuiltinMethod.ConcatArray:\n                  name = 'concat';\n                  break;\n              case BuiltinMethod.SubscribeObservable:\n                  name = 'subscribe';\n                  break;\n              case BuiltinMethod.Bind:\n                  name = 'bind';\n                  break;\n              default:\n                  throw new Error(\"Unknown builtin method: \" + method);\n          }\n          return name;\n      };\n      _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {\n          var _this = this;\n          this.visitAllObjects(function (param) {\n              ctx.print(null, param.name);\n              _this._printColonType(param.type, ctx);\n          }, params, ctx, ',');\n      };\n      _TsEmitterVisitor.prototype._resolveStaticSymbol = function (value) {\n          var reference = value.reference;\n          if (!(reference instanceof StaticSymbol)) {\n              throw new Error(\"Internal error: unknown identifier \" + JSON.stringify(value));\n          }\n          var arity = this._importResolver.getTypeArity(reference) || undefined;\n          var importReference = this._importResolver.getImportAs(reference) || reference;\n          return {\n              name: importReference.name,\n              filePath: importReference.filePath,\n              members: importReference.members, arity: arity\n          };\n      };\n      _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {\n          var _this = this;\n          var _a = this._resolveStaticSymbol(value), name = _a.name, filePath = _a.filePath, members = _a.members, arity = _a.arity;\n          if (filePath != this._genFilePath) {\n              var prefix = this.importsWithPrefixes.get(filePath);\n              if (isBlank(prefix)) {\n                  prefix = \"import\" + this.importsWithPrefixes.size;\n                  this.importsWithPrefixes.set(filePath, prefix);\n              }\n              ctx.print(null, prefix + \".\");\n          }\n          if (members.length) {\n              ctx.print(null, name);\n              ctx.print(null, '.');\n              ctx.print(null, members.join('.'));\n          }\n          else {\n              ctx.print(null, name);\n          }\n          if (this.typeExpression > 0) {\n              // If we are in a type expression that refers to a generic type then supply\n              // the required type parameters. If there were not enough type parameters\n              // supplied, supply any as the type. Outside a type expression the reference\n              // should not supply type parameters and be treated as a simple value reference\n              // to the constructor function itself.\n              var suppliedParameters = (typeParams && typeParams.length) || 0;\n              var additionalParameters = (arity || 0) - suppliedParameters;\n              if (suppliedParameters > 0 || additionalParameters > 0) {\n                  ctx.print(null, \"<\");\n                  if (suppliedParameters > 0) {\n                      this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');\n                  }\n                  if (additionalParameters > 0) {\n                      for (var i = 0; i < additionalParameters; i++) {\n                          if (i > 0 || suppliedParameters > 0)\n                              ctx.print(null, ',');\n                          ctx.print(null, 'any');\n                      }\n                  }\n                  ctx.print(null, \">\");\n              }\n          }\n      };\n      _TsEmitterVisitor.prototype._printColonType = function (type, ctx, defaultType) {\n          if (type !== INFERRED_TYPE) {\n              ctx.print(null, ':');\n              this.visitType(type, ctx, defaultType);\n          }\n      };\n      return _TsEmitterVisitor;\n  }(AbstractEmitterVisitor));\n\n  // =================================================================================================\n  // =================================================================================================\n  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n  // =================================================================================================\n  // =================================================================================================\n  //\n  //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n  //                               Reach out to mprobst for details.\n  //\n  // =================================================================================================\n  /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */\n  var SECURITY_SCHEMA = {};\n  function registerContext(ctx, specs) {\n      for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {\n          var spec = specs_1[_i];\n          SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n      }\n  }\n  // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n  registerContext(_angular_core.SecurityContext.HTML, [\n      'iframe|srcdoc',\n      '*|innerHTML',\n      '*|outerHTML',\n  ]);\n  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);\n  // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n  registerContext(_angular_core.SecurityContext.URL, [\n      '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',\n      'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',\n      'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',\n      'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',\n  ]);\n  registerContext(_angular_core.SecurityContext.RESOURCE_URL, [\n      'applet|code',\n      'applet|codebase',\n      'base|href',\n      'embed|src',\n      'frame|src',\n      'head|profile',\n      'html|manifest',\n      'iframe|src',\n      'link|href',\n      'media|src',\n      'object|codebase',\n      'object|data',\n      'script|src',\n  ]);\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$23 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var BOOLEAN = 'boolean';\n  var NUMBER = 'number';\n  var STRING = 'string';\n  var OBJECT = 'object';\n  /**\n   * This array represents the DOM schema. It encodes inheritance, properties, and events.\n   *\n   * ## Overview\n   *\n   * Each line represents one kind of element. The `element_inheritance` and properties are joined\n   * using `element_inheritance|properties` syntax.\n   *\n   * ## Element Inheritance\n   *\n   * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n   * Here the individual elements are separated by `,` (commas). Every element in the list\n   * has identical properties.\n   *\n   * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n   * specified then `\"\"` (blank) element is assumed.\n   *\n   * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n   * elements.\n   *\n   * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n   *\n   * ## Properties\n   *\n   * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n   * by a special character designating its type:\n   *\n   * - (no prefix): property is a string.\n   * - `*`: property represents an event.\n   * - `!`: property is a boolean.\n   * - `#`: property is a number.\n   * - `%`: property is an object.\n   *\n   * ## Query\n   *\n   * The class creates an internal squas representation which allows to easily answer the query of\n   * if a given property exist on a given element.\n   *\n   * NOTE: We don't yet support querying for types or events.\n   * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n   *       see dom_element_schema_registry_spec.ts\n   */\n  // =================================================================================================\n  // =================================================================================================\n  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n  // =================================================================================================\n  // =================================================================================================\n  //\n  //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n  //\n  // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n  // dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n  //\n  // =================================================================================================\n  var SCHEMA = [\n      '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',\n      '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n      'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n      'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',\n      ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n      ':svg:graphics^:svg:|',\n      ':svg:animation^:svg:|*begin,*end,*repeat',\n      ':svg:geometry^:svg:|',\n      ':svg:componentTransferFunction^:svg:|',\n      ':svg:gradient^:svg:|',\n      ':svg:textContent^:svg:graphics|',\n      ':svg:textPositioning^:svg:textContent|',\n      'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n      'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',\n      'audio^media|',\n      'br^[HTMLElement]|clear',\n      'base^[HTMLElement]|href,target',\n      'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n      'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n      'canvas^[HTMLElement]|#height,#width',\n      'content^[HTMLElement]|select',\n      'dl^[HTMLElement]|!compact',\n      'datalist^[HTMLElement]|',\n      'details^[HTMLElement]|!open',\n      'dialog^[HTMLElement]|!open,returnValue',\n      'dir^[HTMLElement]|!compact',\n      'div^[HTMLElement]|align',\n      'embed^[HTMLElement]|align,height,name,src,type,width',\n      'fieldset^[HTMLElement]|!disabled,name',\n      'font^[HTMLElement]|color,face,size',\n      'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n      'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n      'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n      'hr^[HTMLElement]|align,color,!noShade,size,width',\n      'head^[HTMLElement]|',\n      'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n      'html^[HTMLElement]|version',\n      'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n      'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n      'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n      'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',\n      'li^[HTMLElement]|type,#value',\n      'label^[HTMLElement]|htmlFor',\n      'legend^[HTMLElement]|align',\n      'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',\n      'map^[HTMLElement]|name',\n      'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n      'menu^[HTMLElement]|!compact',\n      'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n      'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n      'ins,del^[HTMLElement]|cite,dateTime',\n      'ol^[HTMLElement]|!compact,!reversed,#start,type',\n      'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n      'optgroup^[HTMLElement]|!disabled,label',\n      'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n      'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n      'p^[HTMLElement]|align',\n      'param^[HTMLElement]|name,type,value,valueType',\n      'picture^[HTMLElement]|',\n      'pre^[HTMLElement]|#width',\n      'progress^[HTMLElement]|#max,#value',\n      'q,blockquote,cite^[HTMLElement]|',\n      'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n      'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n      'shadow^[HTMLElement]|',\n      'source^[HTMLElement]|media,sizes,src,srcset,type',\n      'span^[HTMLElement]|',\n      'style^[HTMLElement]|!disabled,media,type',\n      'caption^[HTMLElement]|align',\n      'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n      'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n      'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n      'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n      'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n      'template^[HTMLElement]|',\n      'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n      'title^[HTMLElement]|text',\n      'track^[HTMLElement]|!default,kind,label,src,srclang',\n      'ul^[HTMLElement]|!compact,type',\n      'unknown^[HTMLElement]|',\n      'video^media|#height,poster,#width',\n      ':svg:a^:svg:graphics|',\n      ':svg:animate^:svg:animation|',\n      ':svg:animateMotion^:svg:animation|',\n      ':svg:animateTransform^:svg:animation|',\n      ':svg:circle^:svg:geometry|',\n      ':svg:clipPath^:svg:graphics|',\n      ':svg:cursor^:svg:|',\n      ':svg:defs^:svg:graphics|',\n      ':svg:desc^:svg:|',\n      ':svg:discard^:svg:|',\n      ':svg:ellipse^:svg:geometry|',\n      ':svg:feBlend^:svg:|',\n      ':svg:feColorMatrix^:svg:|',\n      ':svg:feComponentTransfer^:svg:|',\n      ':svg:feComposite^:svg:|',\n      ':svg:feConvolveMatrix^:svg:|',\n      ':svg:feDiffuseLighting^:svg:|',\n      ':svg:feDisplacementMap^:svg:|',\n      ':svg:feDistantLight^:svg:|',\n      ':svg:feDropShadow^:svg:|',\n      ':svg:feFlood^:svg:|',\n      ':svg:feFuncA^:svg:componentTransferFunction|',\n      ':svg:feFuncB^:svg:componentTransferFunction|',\n      ':svg:feFuncG^:svg:componentTransferFunction|',\n      ':svg:feFuncR^:svg:componentTransferFunction|',\n      ':svg:feGaussianBlur^:svg:|',\n      ':svg:feImage^:svg:|',\n      ':svg:feMerge^:svg:|',\n      ':svg:feMergeNode^:svg:|',\n      ':svg:feMorphology^:svg:|',\n      ':svg:feOffset^:svg:|',\n      ':svg:fePointLight^:svg:|',\n      ':svg:feSpecularLighting^:svg:|',\n      ':svg:feSpotLight^:svg:|',\n      ':svg:feTile^:svg:|',\n      ':svg:feTurbulence^:svg:|',\n      ':svg:filter^:svg:|',\n      ':svg:foreignObject^:svg:graphics|',\n      ':svg:g^:svg:graphics|',\n      ':svg:image^:svg:graphics|',\n      ':svg:line^:svg:geometry|',\n      ':svg:linearGradient^:svg:gradient|',\n      ':svg:mpath^:svg:|',\n      ':svg:marker^:svg:|',\n      ':svg:mask^:svg:|',\n      ':svg:metadata^:svg:|',\n      ':svg:path^:svg:geometry|',\n      ':svg:pattern^:svg:|',\n      ':svg:polygon^:svg:geometry|',\n      ':svg:polyline^:svg:geometry|',\n      ':svg:radialGradient^:svg:gradient|',\n      ':svg:rect^:svg:geometry|',\n      ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n      ':svg:script^:svg:|type',\n      ':svg:set^:svg:animation|',\n      ':svg:stop^:svg:|',\n      ':svg:style^:svg:|!disabled,media,title,type',\n      ':svg:switch^:svg:graphics|',\n      ':svg:symbol^:svg:|',\n      ':svg:tspan^:svg:textPositioning|',\n      ':svg:text^:svg:textPositioning|',\n      ':svg:textPath^:svg:textContent|',\n      ':svg:title^:svg:|',\n      ':svg:use^:svg:graphics|',\n      ':svg:view^:svg:|#zoomAndPan',\n      'data^[HTMLElement]|value',\n      'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n      'summary^[HTMLElement]|',\n      'time^[HTMLElement]|dateTime',\n  ];\n  var _ATTR_TO_PROP = {\n      'class': 'className',\n      'for': 'htmlFor',\n      'formaction': 'formAction',\n      'innerHtml': 'innerHTML',\n      'readonly': 'readOnly',\n      'tabindex': 'tabIndex',\n  };\n  var DomElementSchemaRegistry = (function (_super) {\n      __extends$23(DomElementSchemaRegistry, _super);\n      function DomElementSchemaRegistry() {\n          var _this = _super.call(this) || this;\n          _this._schema = {};\n          SCHEMA.forEach(function (encodedType) {\n              var type = {};\n              var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];\n              var properties = strProperties.split(',');\n              var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];\n              typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });\n              var superType = superName && _this._schema[superName.toLowerCase()];\n              if (superType) {\n                  Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });\n              }\n              properties.forEach(function (property) {\n                  if (property.length > 0) {\n                      switch (property[0]) {\n                          case '*':\n                              // We don't yet support events.\n                              // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events\n                              // will\n                              // almost certainly introduce bad XSS vulnerabilities.\n                              // type[property.substring(1)] = EVENT;\n                              break;\n                          case '!':\n                              type[property.substring(1)] = BOOLEAN;\n                              break;\n                          case '#':\n                              type[property.substring(1)] = NUMBER;\n                              break;\n                          case '%':\n                              type[property.substring(1)] = OBJECT;\n                              break;\n                          default:\n                              type[property] = STRING;\n                      }\n                  }\n              });\n          });\n          return _this;\n      }\n      DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {\n          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {\n              return true;\n          }\n          if (tagName.indexOf('-') > -1) {\n              if (tagName === 'ng-container' || tagName === 'ng-content') {\n                  return false;\n              }\n              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                  // Can't tell now as we don't know which properties a custom element will get\n                  // once it is instantiated\n                  return true;\n              }\n          }\n          var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n          return !!elementProperties[propName];\n      };\n      DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {\n          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {\n              return true;\n          }\n          if (tagName.indexOf('-') > -1) {\n              if (tagName === 'ng-container' || tagName === 'ng-content') {\n                  return true;\n              }\n              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                  // Allow any custom elements\n                  return true;\n              }\n          }\n          return !!this._schema[tagName.toLowerCase()];\n      };\n      /**\n       * securityContext returns the security context for the given property on the given DOM tag.\n       *\n       * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n       * possible to bind a value into a changing attribute or tag name.\n       *\n       * The filtering is white list based. All attributes in the schema above are assumed to have the\n       * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n       * attack vectors are assigned their appropriate context.\n       */\n      DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {\n          if (isAttribute) {\n              // NB: For security purposes, use the mapped property name, not the attribute name.\n              propName = this.getMappedPropName(propName);\n          }\n          // Make sure comparisons are case insensitive, so that case differences between attribute and\n          // property names do not have a security impact.\n          tagName = tagName.toLowerCase();\n          propName = propName.toLowerCase();\n          var ctx = SECURITY_SCHEMA[tagName + '|' + propName];\n          if (ctx) {\n              return ctx;\n          }\n          ctx = SECURITY_SCHEMA['*|' + propName];\n          return ctx ? ctx : _angular_core.SecurityContext.NONE;\n      };\n      DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };\n      DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };\n      DomElementSchemaRegistry.prototype.validateProperty = function (name) {\n          if (name.toLowerCase().startsWith('on')) {\n              var msg = \"Binding to event property '\" + name + \"' is disallowed for security reasons, \" +\n                  (\"please use (\" + name.slice(2) + \")=...\") +\n                  (\"\\nIf '\" + name + \"' is a directive input, make sure the directive is imported by the\") +\n                  \" current module.\";\n              return { error: true, msg: msg };\n          }\n          else {\n              return { error: false };\n          }\n      };\n      DomElementSchemaRegistry.prototype.validateAttribute = function (name) {\n          if (name.toLowerCase().startsWith('on')) {\n              var msg = \"Binding to event attribute '\" + name + \"' is disallowed for security reasons, \" +\n                  (\"please use (\" + name.slice(2) + \")=...\");\n              return { error: true, msg: msg };\n          }\n          else {\n              return { error: false };\n          }\n      };\n      DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema); };\n      DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {\n          return dashCaseToCamelCase(propName);\n      };\n      DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {\n          var unit = '';\n          var strVal = val.toString().trim();\n          var errorMsg = null;\n          if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n              if (typeof val === 'number') {\n                  unit = 'px';\n              }\n              else {\n                  var valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                  if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                      errorMsg = \"Please provide a CSS unit value for \" + userProvidedProp + \":\" + val;\n                  }\n              }\n          }\n          return { error: errorMsg, value: strVal + unit };\n      };\n      return DomElementSchemaRegistry;\n  }(ElementSchemaRegistry));\n  DomElementSchemaRegistry.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  DomElementSchemaRegistry.ctorParameters = function () { return []; };\n  function _isPixelDimensionStyle(prop) {\n      switch (prop) {\n          case 'width':\n          case 'height':\n          case 'minWidth':\n          case 'minHeight':\n          case 'maxWidth':\n          case 'maxHeight':\n          case 'left':\n          case 'top':\n          case 'bottom':\n          case 'right':\n          case 'fontSize':\n          case 'outlineWidth':\n          case 'outlineOffset':\n          case 'paddingTop':\n          case 'paddingLeft':\n          case 'paddingBottom':\n          case 'paddingRight':\n          case 'marginTop':\n          case 'marginLeft':\n          case 'marginBottom':\n          case 'marginRight':\n          case 'borderRadius':\n          case 'borderWidth':\n          case 'borderTopWidth':\n          case 'borderLeftWidth':\n          case 'borderRightWidth':\n          case 'borderBottomWidth':\n          case 'textIndent':\n              return true;\n          default:\n              return false;\n      }\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n   *\n   * Please make sure to keep to edits in sync with the source file.\n   *\n   * Source:\n   * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n   *\n   * The original file level comment is reproduced below\n   */\n  /*\n    This is a limited shim for ShadowDOM css styling.\n    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n    The intention here is to support only the styling features which can be\n    relatively simply implemented. The goal is to allow users to avoid the\n    most obvious pitfalls and do so without compromising performance significantly.\n    For ShadowDOM styling that's not covered here, a set of best practices\n    can be provided that should allow users to accomplish more complex styling.\n\n    The following is a list of specific ShadowDOM styling features and a brief\n    discussion of the approach used to shim.\n\n    Shimmed features:\n\n    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n    element using the :host rule. To shim this feature, the :host styles are\n    reformatted and prefixed with a given scope name and promoted to a\n    document level stylesheet.\n    For example, given a scope name of .foo, a rule like this:\n\n      :host {\n          background: red;\n        }\n      }\n\n    becomes:\n\n      .foo {\n        background: red;\n      }\n\n    * encapsulation: Styles defined within ShadowDOM, apply only to\n    dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n    this feature.\n\n    By default, rules are prefixed with the host element tag name\n    as a descendant selector. This ensures styling does not leak out of the 'top'\n    of the element's ShadowDOM. For example,\n\n    div {\n        font-weight: bold;\n      }\n\n    becomes:\n\n    x-foo div {\n        font-weight: bold;\n      }\n\n    becomes:\n\n\n    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n    selectors are scoped by adding an attribute selector suffix to each\n    simple selector that contains the host element tag name. Each element\n    in the element's ShadowDOM template is also given the scope attribute.\n    Thus, these rules match only elements that have the scope attribute.\n    For example, given a scope name of x-foo, a rule like this:\n\n      div {\n        font-weight: bold;\n      }\n\n    becomes:\n\n      div[x-foo] {\n        font-weight: bold;\n      }\n\n    Note that elements that are dynamically added to a scope must have the scope\n    selector added to them manually.\n\n    * upper/lower bound encapsulation: Styles which are defined outside a\n    shadowRoot should not cross the ShadowDOM boundary and should not apply\n    inside a shadowRoot.\n\n    This styling behavior is not emulated. Some possible ways to do this that\n    were rejected due to complexity and/or performance concerns include: (1) reset\n    every possible property for every possible selector for a given scope name;\n    (2) re-implement css in javascript.\n\n    As an alternative, users should make sure to use selectors\n    specific to the scope in which they are working.\n\n    * ::distributed: This behavior is not emulated. It's often not necessary\n    to style the contents of a specific insertion point and instead, descendants\n    of the host element can be styled selectively. Users can also create an\n    extra node around an insertion point and style that node's contents\n    via descendent selectors. For example, with a shadowRoot like this:\n\n      <style>\n        ::content(div) {\n          background: red;\n        }\n      </style>\n      <content></content>\n\n    could become:\n\n      <style>\n        / *@polyfill .content-container div * /\n        ::content(div) {\n          background: red;\n        }\n      </style>\n      <div class=\"content-container\">\n        <content></content>\n      </div>\n\n    Note the use of @polyfill in the comment above a ShadowDOM specific style\n    declaration. This is a directive to the styling shim to use the selector\n    in comments in lieu of the next selector when running under polyfill.\n  */\n  var ShadowCss = (function () {\n      function ShadowCss() {\n          this.strictStyling = true;\n      }\n      /*\n      * Shim some cssText with the given selector. Returns cssText that can\n      * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n      *\n      * When strictStyling is true:\n      * - selector is the attribute added to all elements inside the host,\n      * - hostSelector is the attribute added to the host itself.\n      */\n      ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {\n          if (hostSelector === void 0) { hostSelector = ''; }\n          var sourceMappingUrl = extractSourceMappingUrl(cssText);\n          cssText = stripComments(cssText);\n          cssText = this._insertDirectives(cssText);\n          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;\n      };\n      ShadowCss.prototype._insertDirectives = function (cssText) {\n          cssText = this._insertPolyfillDirectivesInCssText(cssText);\n          return this._insertPolyfillRulesInCssText(cssText);\n      };\n      /*\n       * Process styles to convert native ShadowDOM rules that will trip\n       * up the css parser; we rely on decorating the stylesheet with inert rules.\n       *\n       * For example, we convert this rule:\n       *\n       * polyfill-next-selector { content: ':host menu-item'; }\n       * ::content menu-item {\n       *\n       * to this:\n       *\n       * scopeName menu-item {\n       *\n      **/\n      ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {\n          // Difference with webcomponents.js: does not handle comments\n          return cssText.replace(_cssContentNextSelectorRe, function () {\n              var m = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                  m[_i] = arguments[_i];\n              }\n              return m[2] + '{';\n          });\n      };\n      /*\n       * Process styles to add rules which will only apply under the polyfill\n       *\n       * For example, we convert this rule:\n       *\n       * polyfill-rule {\n       *   content: ':host menu-item';\n       * ...\n       * }\n       *\n       * to this:\n       *\n       * scopeName menu-item {...}\n       *\n      **/\n      ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {\n          // Difference with webcomponents.js: does not handle comments\n          return cssText.replace(_cssContentRuleRe, function () {\n              var m = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                  m[_i] = arguments[_i];\n              }\n              var rule = m[0].replace(m[1], '').replace(m[2], '');\n              return m[4] + rule;\n          });\n      };\n      /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n       *\n       *  .foo {... }\n       *\n       *  and converts this to\n       *\n       *  scopeName .foo { ... }\n      */\n      ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {\n          var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n          // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n          cssText = this._insertPolyfillHostInCssText(cssText);\n          cssText = this._convertColonHost(cssText);\n          cssText = this._convertColonHostContext(cssText);\n          cssText = this._convertShadowDOMSelectors(cssText);\n          if (scopeSelector) {\n              cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n          }\n          cssText = cssText + '\\n' + unscopedRules;\n          return cssText.trim();\n      };\n      /*\n       * Process styles to add rules which will only apply under the polyfill\n       * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n       * occasions, e.g. -webkit-calc on Safari.)\n       * For example, we convert this rule:\n       *\n       * @polyfill-unscoped-rule {\n       *   content: 'menu-item';\n       * ... }\n       *\n       * to this:\n       *\n       * menu-item {...}\n       *\n      **/\n      ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {\n          // Difference with webcomponents.js: does not handle comments\n          var r = '';\n          var m;\n          _cssContentUnscopedRuleRe.lastIndex = 0;\n          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n              var rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n              r += rule + '\\n\\n';\n          }\n          return r;\n      };\n      /*\n       * convert a rule like :host(.foo) > .bar { }\n       *\n       * to\n       *\n       * .foo<scopeName> > .bar\n      */\n      ShadowCss.prototype._convertColonHost = function (cssText) {\n          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n      };\n      /*\n       * convert a rule like :host-context(.foo) > .bar { }\n       *\n       * to\n       *\n       * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n       *\n       * and\n       *\n       * :host-context(.foo:host) .bar { ... }\n       *\n       * to\n       *\n       * .foo<scopeName> .bar { ... }\n      */\n      ShadowCss.prototype._convertColonHostContext = function (cssText) {\n          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n      };\n      ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {\n          // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n          return cssText.replace(regExp, function () {\n              var m = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                  m[_i] = arguments[_i];\n              }\n              if (m[2]) {\n                  var parts = m[2].split(',');\n                  var r = [];\n                  for (var i = 0; i < parts.length; i++) {\n                      var p = parts[i].trim();\n                      if (!p)\n                          break;\n                      r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                  }\n                  return r.join(',');\n              }\n              else {\n                  return _polyfillHostNoCombinator + m[3];\n              }\n          });\n      };\n      ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {\n          if (part.indexOf(_polyfillHost) > -1) {\n              return this._colonHostPartReplacer(host, part, suffix);\n          }\n          else {\n              return host + part + suffix + ', ' + part + ' ' + host + suffix;\n          }\n      };\n      ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {\n          return host + part.replace(_polyfillHost, '') + suffix;\n      };\n      /*\n       * Convert combinators like ::shadow and pseudo-elements like ::content\n       * by replacing with space.\n      */\n      ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {\n          return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n      };\n      // change a selector like 'div' to 'name div'\n      ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {\n          var _this = this;\n          return processRules(cssText, function (rule) {\n              var selector = rule.selector;\n              var content = rule.content;\n              if (rule.selector[0] != '@') {\n                  selector =\n                      _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);\n              }\n              else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                  rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                  content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n              }\n              return new CssRule(selector, content);\n          });\n      };\n      ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {\n          var _this = this;\n          return selector.split(',')\n              .map(function (part) { return part.trim().split(_shadowDeepSelectors); })\n              .map(function (deepParts) {\n              var shallowPart = deepParts[0], otherParts = deepParts.slice(1);\n              var applyScope = function (shallowPart) {\n                  if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                      return strict ?\n                          _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\n                          _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n                  }\n                  else {\n                      return shallowPart;\n                  }\n              };\n              return [applyScope(shallowPart)].concat(otherParts).join(' ');\n          })\n              .join(', ');\n      };\n      ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {\n          var re = this._makeScopeMatcher(scopeSelector);\n          return !re.test(selector);\n      };\n      ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {\n          var lre = /\\[/g;\n          var rre = /\\]/g;\n          scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n      };\n      ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {\n          // Difference from webcomponents.js: scopeSelector could not be an array\n          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n      };\n      // scope via name and [is=name]\n      ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n          // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n          _polyfillHostRe.lastIndex = 0;\n          if (_polyfillHostRe.test(selector)) {\n              var replaceBy_1 = this.strictStyling ? \"[\" + hostSelector + \"]\" : scopeSelector;\n              return selector\n                  .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {\n                  return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                      return before + replaceBy_1 + colon + after;\n                  });\n              })\n                  .replace(_polyfillHostRe, replaceBy_1 + ' ');\n          }\n          return scopeSelector + ' ' + selector;\n      };\n      // return a selector with [name] suffix on each simple selector\n      // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n      ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n          var _this = this;\n          var isRe = /\\[is=([^\\]]*)\\]/g;\n          scopeSelector = scopeSelector.replace(isRe, function (_) {\n              var parts = [];\n              for (var _i = 1; _i < arguments.length; _i++) {\n                  parts[_i - 1] = arguments[_i];\n              }\n              return parts[0];\n          });\n          var attrName = '[' + scopeSelector + ']';\n          var _scopeSelectorPart = function (p) {\n              var scopedP = p.trim();\n              if (!scopedP) {\n                  return '';\n              }\n              if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                  scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n              }\n              else {\n                  // remove :host since it should be unnecessary\n                  var t = p.replace(_polyfillHostRe, '');\n                  if (t.length > 0) {\n                      var matches = t.match(/([^:]*)(:*)(.*)/);\n                      if (matches) {\n                          scopedP = matches[1] + attrName + matches[2] + matches[3];\n                      }\n                  }\n              }\n              return scopedP;\n          };\n          var safeContent = new SafeSelector(selector);\n          selector = safeContent.content();\n          var scopedSelector = '';\n          var startIndex = 0;\n          var res;\n          var sep = /( |>|\\+|~(?!=))\\s*/g;\n          var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);\n          while ((res = sep.exec(selector)) !== null) {\n              var separator = res[1];\n              var part = selector.slice(startIndex, res.index).trim();\n              // if a selector appears before :host-context it should not be shimmed as it\n              // matches on ancestor elements and not on elements in the host's shadow\n              var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;\n              scopedSelector += scopedPart + \" \" + separator + \" \";\n              startIndex = sep.lastIndex;\n          }\n          scopedSelector += _scopeSelectorPart(selector.substring(startIndex));\n          // replace the placeholders with their original values\n          return safeContent.restore(scopedSelector);\n      };\n      ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {\n          return selector.replace(_colonHostContextRe, _polyfillHostContext)\n              .replace(_colonHostRe, _polyfillHost);\n      };\n      return ShadowCss;\n  }());\n  var SafeSelector = (function () {\n      function SafeSelector(selector) {\n          var _this = this;\n          this.placeholders = [];\n          this.index = 0;\n          // Replaces attribute selectors with placeholders.\n          // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n          selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n              var replaceBy = \"__ph-\" + _this.index + \"__\";\n              _this.placeholders.push(keep);\n              _this.index++;\n              return replaceBy;\n          });\n          // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n          // WS and \"+\" would otherwise be interpreted as selector separators.\n          this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n              var replaceBy = \"__ph-\" + _this.index + \"__\";\n              _this.placeholders.push(exp);\n              _this.index++;\n              return pseudo + replaceBy;\n          });\n      }\n      ;\n      SafeSelector.prototype.restore = function (content) {\n          var _this = this;\n          return content.replace(/__ph-(\\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });\n      };\n      SafeSelector.prototype.content = function () { return this._content; };\n      return SafeSelector;\n  }());\n  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\n  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\n  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\n  var _polyfillHost = '-shadowcsshost';\n  // note: :host-context pre-processed to -shadowcsshostcontext.\n  var _polyfillHostContext = '-shadowcsscontext';\n  var _parenSuffix = ')(?:\\\\((' +\n      '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n      ')\\\\))?([^,{]*)';\n  var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n  var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n  var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\n  var _shadowDOMSelectorsRe = [\n      /::shadow/g,\n      /::content/g,\n      // Deprecated selectors\n      /\\/shadow-deep\\//g,\n      /\\/shadow\\//g,\n  ];\n  var _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)/g;\n  var _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\n  var _polyfillHostRe = /-shadowcsshost/gim;\n  var _colonHostRe = /:host/gim;\n  var _colonHostContextRe = /:host-context/gim;\n  var _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n  function stripComments(input) {\n      return input.replace(_commentRe, '');\n  }\n  // all comments except inline source mapping\n  var _sourceMappingUrlRe = /\\/\\*\\s*#\\s*sourceMappingURL=[\\s\\S]+?\\*\\//;\n  function extractSourceMappingUrl(input) {\n      var matcher = input.match(_sourceMappingUrlRe);\n      return matcher ? matcher[0] : '';\n  }\n  var _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\n  var _curlyRe = /([{}])/g;\n  var OPEN_CURLY = '{';\n  var CLOSE_CURLY = '}';\n  var BLOCK_PLACEHOLDER = '%BLOCK%';\n  var CssRule = (function () {\n      function CssRule(selector, content) {\n          this.selector = selector;\n          this.content = content;\n      }\n      return CssRule;\n  }());\n  function processRules(input, ruleCallback) {\n      var inputWithEscapedBlocks = escapeBlocks(input);\n      var nextBlockIndex = 0;\n      return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n          var m = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              m[_i] = arguments[_i];\n          }\n          var selector = m[2];\n          var content = '';\n          var suffix = m[4];\n          var contentPrefix = '';\n          if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n              content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n              suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n              contentPrefix = '{';\n          }\n          var rule = ruleCallback(new CssRule(selector, content));\n          return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n      });\n  }\n  var StringWithEscapedBlocks = (function () {\n      function StringWithEscapedBlocks(escapedString, blocks) {\n          this.escapedString = escapedString;\n          this.blocks = blocks;\n      }\n      return StringWithEscapedBlocks;\n  }());\n  function escapeBlocks(input) {\n      var inputParts = input.split(_curlyRe);\n      var resultParts = [];\n      var escapedBlocks = [];\n      var bracketCount = 0;\n      var currentBlockParts = [];\n      for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n          var part = inputParts[partIndex];\n          if (part == CLOSE_CURLY) {\n              bracketCount--;\n          }\n          if (bracketCount > 0) {\n              currentBlockParts.push(part);\n          }\n          else {\n              if (currentBlockParts.length > 0) {\n                  escapedBlocks.push(currentBlockParts.join(''));\n                  resultParts.push(BLOCK_PLACEHOLDER);\n                  currentBlockParts = [];\n              }\n              resultParts.push(part);\n          }\n          if (part == OPEN_CURLY) {\n              bracketCount++;\n          }\n      }\n      if (currentBlockParts.length > 0) {\n          escapedBlocks.push(currentBlockParts.join(''));\n          resultParts.push(BLOCK_PLACEHOLDER);\n      }\n      return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n  }\n\n  var COMPONENT_VARIABLE = '%COMP%';\n  var HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\n  var CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\n  var StylesCompileDependency = (function () {\n      function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {\n          this.name = name;\n          this.moduleUrl = moduleUrl;\n          this.isShimmed = isShimmed;\n          this.valuePlaceholder = valuePlaceholder;\n      }\n      return StylesCompileDependency;\n  }());\n  var StylesCompileResult = (function () {\n      function StylesCompileResult(componentStylesheet, externalStylesheets) {\n          this.componentStylesheet = componentStylesheet;\n          this.externalStylesheets = externalStylesheets;\n      }\n      return StylesCompileResult;\n  }());\n  var CompiledStylesheet = (function () {\n      function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {\n          this.statements = statements;\n          this.stylesVar = stylesVar;\n          this.dependencies = dependencies;\n          this.isShimmed = isShimmed;\n          this.meta = meta;\n      }\n      return CompiledStylesheet;\n  }());\n  var StyleCompiler = (function () {\n      function StyleCompiler(_urlResolver) {\n          this._urlResolver = _urlResolver;\n          this._shadowCss = new ShadowCss();\n      }\n      StyleCompiler.prototype.compileComponent = function (comp) {\n          var _this = this;\n          var externalStylesheets = [];\n          var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({\n              styles: comp.template.styles,\n              styleUrls: comp.template.styleUrls,\n              moduleUrl: identifierModuleUrl(comp.type)\n          }), true);\n          comp.template.externalStylesheets.forEach(function (stylesheetMeta) {\n              var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);\n              externalStylesheets.push(compiledStylesheet);\n          });\n          return new StylesCompileResult(componentStylesheet, externalStylesheets);\n      };\n      StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {\n          var _this = this;\n          var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;\n          var styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });\n          var dependencies = [];\n          for (var i = 0; i < stylesheet.styleUrls.length; i++) {\n              var identifier = { reference: null };\n              dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));\n              styleExpressions.push(new ExternalExpr(identifier));\n          }\n          // styles variable contains plain strings and arrays of other styles arrays (recursive),\n          // so we set its type to dynamic.\n          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n          var stmt = variable(stylesVar)\n              .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))\n              .toDeclStmt(null, [StmtModifier.Final]);\n          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);\n      };\n      StyleCompiler.prototype._shimIfNeeded = function (style, shim) {\n          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n      };\n      return StyleCompiler;\n  }());\n  StyleCompiler.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  StyleCompiler.ctorParameters = function () { return [\n      { type: UrlResolver, },\n  ]; };\n  function getStylesVarName(component) {\n      var result = \"styles\";\n      if (component) {\n          result += \"_\" + identifierName(component.type);\n      }\n      return result;\n  }\n\n  var _DebugState = (function () {\n      function _DebugState(nodeIndex, sourceAst) {\n          this.nodeIndex = nodeIndex;\n          this.sourceAst = sourceAst;\n      }\n      return _DebugState;\n  }());\n  var NULL_DEBUG_STATE = new _DebugState(null, null);\n  var CompileMethod = (function () {\n      function CompileMethod(_view) {\n          this._view = _view;\n          this._newState = NULL_DEBUG_STATE;\n          this._currState = NULL_DEBUG_STATE;\n          this._bodyStatements = [];\n          this._debugEnabled = this._view.genConfig.genDebugInfo;\n      }\n      CompileMethod.prototype._updateDebugContextIfNeeded = function () {\n          if (this._newState.nodeIndex !== this._currState.nodeIndex ||\n              this._newState.sourceAst !== this._currState.sourceAst) {\n              var expr = this._updateDebugContext(this._newState);\n              if (expr) {\n                  this._bodyStatements.push(expr.toStmt());\n              }\n          }\n      };\n      CompileMethod.prototype._updateDebugContext = function (newState) {\n          this._currState = this._newState = newState;\n          if (this._debugEnabled) {\n              var sourceLocation = newState.sourceAst ? newState.sourceAst.sourceSpan.start : null;\n              return THIS_EXPR.callMethod('debug', [\n                  literal(newState.nodeIndex),\n                  sourceLocation ? literal(sourceLocation.line) : NULL_EXPR,\n                  sourceLocation ? literal(sourceLocation.col) : NULL_EXPR\n              ]);\n          }\n          else {\n              return null;\n          }\n      };\n      CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {\n          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));\n          return res || NULL_EXPR;\n      };\n      CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {\n          this._newState = new _DebugState(nodeIndex, templateAst);\n      };\n      CompileMethod.prototype.push = function () {\n          var stmts = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              stmts[_i] = arguments[_i];\n          }\n          this.addStmts(stmts);\n      };\n      CompileMethod.prototype.addStmt = function (stmt) {\n          this._updateDebugContextIfNeeded();\n          this._bodyStatements.push(stmt);\n      };\n      CompileMethod.prototype.addStmts = function (stmts) {\n          this._updateDebugContextIfNeeded();\n          (_a = this._bodyStatements).push.apply(_a, stmts);\n          var _a;\n      };\n      CompileMethod.prototype.finish = function () { return this._bodyStatements; };\n      CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };\n      return CompileMethod;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$25 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  function getPropertyInView(property, callingView, definedView) {\n      if (callingView === definedView) {\n          return property;\n      }\n      else {\n          var viewProp = THIS_EXPR;\n          var currView = callingView;\n          while (currView !== definedView && currView.declarationElement.view) {\n              currView = currView.declarationElement.view;\n              viewProp = viewProp.prop('parentView');\n          }\n          if (currView !== definedView) {\n              throw new Error(\"Internal error: Could not calculate a property in a parent view: \" + property);\n          }\n          return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);\n      }\n  }\n  var _ReplaceViewTransformer = (function (_super) {\n      __extends$25(_ReplaceViewTransformer, _super);\n      function _ReplaceViewTransformer(_viewExpr, _view) {\n          var _this = _super.call(this) || this;\n          _this._viewExpr = _viewExpr;\n          _this._view = _view;\n          return _this;\n      }\n      _ReplaceViewTransformer.prototype._isThis = function (expr) {\n          return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;\n      };\n      _ReplaceViewTransformer.prototype.visitReadVarExpr = function (ast, context) {\n          return this._isThis(ast) ? this._viewExpr : ast;\n      };\n      _ReplaceViewTransformer.prototype.visitReadPropExpr = function (ast, context) {\n          if (this._isThis(ast.receiver)) {\n              // Note: Don't cast for members of the AppView base class...\n              if (this._view.fields.some(function (field) { return field.name == ast.name; }) ||\n                  this._view.getters.some(function (field) { return field.name == ast.name; })) {\n                  return this._viewExpr.cast(this._view.classType).prop(ast.name);\n              }\n          }\n          return _super.prototype.visitReadPropExpr.call(this, ast, context);\n      };\n      return _ReplaceViewTransformer;\n  }(ExpressionTransformer));\n  function injectFromViewParentInjector(view, token, optional) {\n      var viewExpr;\n      if (view.viewType === _angular_core.ɵViewType.HOST) {\n          viewExpr = THIS_EXPR;\n      }\n      else {\n          viewExpr = THIS_EXPR.prop('parentView');\n      }\n      var args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];\n      if (optional) {\n          args.push(NULL_EXPR);\n      }\n      return viewExpr.callMethod('injectorGet', args);\n  }\n  function getHandleEventMethodName(elementIndex) {\n      return \"handleEvent_\" + elementIndex;\n  }\n\n  var ViewQueryValues = (function () {\n      function ViewQueryValues(view, values) {\n          this.view = view;\n          this.values = values;\n      }\n      return ViewQueryValues;\n  }());\n  var CompileQuery = (function () {\n      function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {\n          this.meta = meta;\n          this.queryList = queryList;\n          this.ownerDirectiveExpression = ownerDirectiveExpression;\n          this.view = view;\n          this._values = new ViewQueryValues(view, []);\n      }\n      CompileQuery.prototype.addValue = function (value, view) {\n          var currentView = view;\n          var elPath = [];\n          while (currentView && currentView !== this.view) {\n              var parentEl = currentView.declarationElement;\n              elPath.unshift(parentEl);\n              currentView = parentEl.view;\n          }\n          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);\n          var viewValues = this._values;\n          elPath.forEach(function (el) {\n              var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;\n              if (last instanceof ViewQueryValues && last.view === el.embeddedView) {\n                  viewValues = last;\n              }\n              else {\n                  var newViewValues = new ViewQueryValues(el.embeddedView, []);\n                  viewValues.values.push(newViewValues);\n                  viewValues = newViewValues;\n              }\n          });\n          viewValues.values.push(value);\n          if (elPath.length > 0) {\n              view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());\n          }\n      };\n      CompileQuery.prototype._isStatic = function () {\n          return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });\n      };\n      CompileQuery.prototype.generateStatements = function (targetStaticMethod, targetDynamicMethod) {\n          var values = createQueryValues(this._values);\n          var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];\n          if (this.ownerDirectiveExpression) {\n              var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;\n              updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());\n          }\n          if (!this.meta.first) {\n              updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());\n          }\n          if (this.meta.first && this._isStatic()) {\n              // for queries that don't change and the user asked for a single element,\n              // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...\n              // we don't do this for QueryLists for now as this would break the timing when\n              // we call QueryList listeners...\n              targetStaticMethod.addStmts(updateStmts);\n          }\n          else {\n              targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));\n          }\n      };\n      return CompileQuery;\n  }());\n  function createQueryValues(viewValues) {\n      return ListWrapper.flatten(viewValues.values.map(function (entry) {\n          if (entry instanceof ViewQueryValues) {\n              return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));\n          }\n          else {\n              return entry;\n          }\n      }));\n  }\n  function mapNestedViews(viewContainer, view, expressions) {\n      var adjustedExpressions = expressions.map(function (expr) { return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr); });\n      return viewContainer.callMethod('mapNestedViews', [\n          variable(view.className),\n          fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)\n      ]);\n  }\n  function createQueryList(propertyName, compileView) {\n      compileView.fields.push(new ClassField(propertyName, importType(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));\n      var expr = THIS_EXPR.prop(propertyName);\n      compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)\n          .set(importExpr(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([]))\n          .toStmt());\n      return expr;\n  }\n  function addQueryToTokenMap(map, query) {\n      query.meta.selectors.forEach(function (selector) {\n          var entry = map.get(tokenReference(selector));\n          if (!entry) {\n              entry = [];\n              map.set(tokenReference(selector), entry);\n          }\n          entry.push(query);\n      });\n  }\n\n  var ViewTypeEnum = (function () {\n      function ViewTypeEnum() {\n      }\n      ViewTypeEnum.fromValue = function (value) {\n          return createEnumExpression(Identifiers.ViewType, value);\n      };\n      return ViewTypeEnum;\n  }());\n  var ViewEncapsulationEnum = (function () {\n      function ViewEncapsulationEnum() {\n      }\n      ViewEncapsulationEnum.fromValue = function (value) {\n          return createEnumExpression(Identifiers.ViewEncapsulation, value);\n      };\n      return ViewEncapsulationEnum;\n  }());\n  var ChangeDetectorStatusEnum = (function () {\n      function ChangeDetectorStatusEnum() {\n      }\n      ChangeDetectorStatusEnum.fromValue = function (value) {\n          return createEnumExpression(Identifiers.ChangeDetectorStatus, value);\n      };\n      return ChangeDetectorStatusEnum;\n  }());\n  var ViewConstructorVars = (function () {\n      function ViewConstructorVars() {\n      }\n      return ViewConstructorVars;\n  }());\n  ViewConstructorVars.viewUtils = variable('viewUtils');\n  ViewConstructorVars.parentView = variable('parentView');\n  ViewConstructorVars.parentIndex = variable('parentIndex');\n  ViewConstructorVars.parentElement = variable('parentElement');\n  var ViewProperties = (function () {\n      function ViewProperties() {\n      }\n      return ViewProperties;\n  }());\n  ViewProperties.renderer = THIS_EXPR.prop('renderer');\n  ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');\n  ViewProperties.throwOnChange = THIS_EXPR.prop('throwOnChange');\n  var InjectMethodVars$1 = (function () {\n      function InjectMethodVars() {\n      }\n      return InjectMethodVars;\n  }());\n  InjectMethodVars$1.token = variable('token');\n  InjectMethodVars$1.requestNodeIndex = variable('requestNodeIndex');\n  InjectMethodVars$1.notFoundResult = variable('notFoundResult');\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * This is currently not read, but will probably be used in the future.\n   * We keep it as we already pass it through all the right places...\n   */\n  var ComponentViewDependency = (function () {\n      function ComponentViewDependency(compType) {\n          this.compType = compType;\n      }\n      return ComponentViewDependency;\n  }());\n  /**\n   * This is currently not read, but will probably be used in the future.\n   * We keep it as we already pass it through all the right places...\n   */\n  var ComponentFactoryDependency$1 = (function () {\n      function ComponentFactoryDependency(compType) {\n          this.compType = compType;\n      }\n      return ComponentFactoryDependency;\n  }());\n  /**\n   * This is currently not read, but will probably be used in the future.\n   * We keep it as we already pass it through all the right places...\n   */\n  var DirectiveWrapperDependency = (function () {\n      function DirectiveWrapperDependency(dirType) {\n          this.dirType = dirType;\n      }\n      return DirectiveWrapperDependency;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$24 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var CompileNode = (function () {\n      function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {\n          this.parent = parent;\n          this.view = view;\n          this.nodeIndex = nodeIndex;\n          this.renderNode = renderNode;\n          this.sourceAst = sourceAst;\n      }\n      CompileNode.prototype.isNull = function () { return !this.renderNode; };\n      CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };\n      return CompileNode;\n  }());\n  var CompileElement = (function (_super) {\n      __extends$24(CompileElement, _super);\n      function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {\n          var _this = _super.call(this, parent, view, nodeIndex, renderNode, sourceAst) || this;\n          _this.component = component;\n          _this._directives = _directives;\n          _this._resolvedProvidersArray = _resolvedProvidersArray;\n          _this.hasViewContainer = hasViewContainer;\n          _this.hasEmbeddedView = hasEmbeddedView;\n          _this.compViewExpr = null;\n          _this.instances = new Map();\n          _this.directiveWrapperInstance = new Map();\n          _this._queryCount = 0;\n          _this._queries = new Map();\n          _this.contentNodesByNgContentIndex = null;\n          _this.referenceTokens = {};\n          references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });\n          _this.elementRef =\n              importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([_this.renderNode]);\n          _this.instances.set(resolveIdentifier(Identifiers.ElementRef), _this.elementRef);\n          _this.instances.set(resolveIdentifier(Identifiers.Injector), THIS_EXPR.callMethod('injector', [literal(_this.nodeIndex)]));\n          _this.instances.set(resolveIdentifier(Identifiers.Renderer), THIS_EXPR.prop('renderer'));\n          if (_this.hasViewContainer || _this.hasEmbeddedView) {\n              _this._createViewContainer();\n          }\n          if (_this.component) {\n              _this._createComponentFactoryResolver();\n          }\n          return _this;\n      }\n      CompileElement.createNull = function () {\n          return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);\n      };\n      CompileElement.prototype._createViewContainer = function () {\n          var fieldName = \"_vc_\" + this.nodeIndex;\n          var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;\n          // private is fine here as no child view will reference a ViewContainer\n          this.view.fields.push(new ClassField(fieldName, importType(createIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));\n          var statement = THIS_EXPR.prop(fieldName)\n              .set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([\n              literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode\n          ]))\n              .toStmt();\n          this.view.createMethod.addStmt(statement);\n          this.viewContainer = THIS_EXPR.prop(fieldName);\n          this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);\n          this.view.viewContainers.push(this.viewContainer);\n      };\n      CompileElement.prototype._createComponentFactoryResolver = function () {\n          var _this = this;\n          var entryComponents = this.component.entryComponents.map(function (entryComponent) {\n              _this.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent.componentType));\n              return { reference: entryComponent.componentFactory };\n          });\n          if (!entryComponents || entryComponents.length === 0) {\n              return;\n          }\n          var createComponentFactoryResolverExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([\n              literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent); })),\n              injectFromViewParentInjector(this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)\n          ]);\n          var provider = {\n              token: createIdentifierToken(Identifiers.ComponentFactoryResolver),\n              useValue: createComponentFactoryResolverExpr\n          };\n          // Add ComponentFactoryResolver as first provider as it does not have deps on other providers\n          // ProviderAstType.PrivateService as only the component and its view can see it,\n          // but nobody else\n          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));\n      };\n      CompileElement.prototype.setComponentView = function (compViewExpr) {\n          this.compViewExpr = compViewExpr;\n          this.contentNodesByNgContentIndex =\n              new Array(this.component.template.ngContentSelectors.length);\n          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {\n              this.contentNodesByNgContentIndex[i] = [];\n          }\n      };\n      CompileElement.prototype.setEmbeddedView = function (embeddedView) {\n          this.embeddedView = embeddedView;\n          if (isPresent(embeddedView)) {\n              var createTemplateRefExpr = importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([\n                  THIS_EXPR, literal(this.nodeIndex), this.renderNode\n              ]);\n              var provider = {\n                  token: createIdentifierToken(Identifiers.TemplateRef),\n                  useValue: createTemplateRefExpr\n              };\n              // Add TemplateRef as first provider as it does not have deps on other providers\n              this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));\n          }\n      };\n      CompileElement.prototype.beforeChildren = function () {\n          var _this = this;\n          if (this.hasViewContainer) {\n              this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));\n          }\n          this._resolvedProviders = new Map();\n          this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(tokenReference(provider.token), provider); });\n          // create all the provider instances, some in the view constructor,\n          // some as getters. We rely on the fact that they are already sorted topologically.\n          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {\n              var isDirectiveWrapper = resolvedProvider.providerType === exports.ProviderAstType.Component ||\n                  resolvedProvider.providerType === exports.ProviderAstType.Directive;\n              var providerValueExpressions = resolvedProvider.providers.map(function (provider) {\n                  if (provider.useExisting) {\n                      return _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting });\n                  }\n                  else if (provider.useFactory) {\n                      var deps = provider.deps || provider.useFactory.diDeps;\n                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });\n                      return importExpr(provider.useFactory).callFn(depsExpr);\n                  }\n                  else if (provider.useClass) {\n                      var deps = provider.deps || provider.useClass.diDeps;\n                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });\n                      if (isDirectiveWrapper) {\n                          var dirMeta = _this._directives.find(function (dir) { return dir.type.reference === provider.useClass.reference; });\n                          _this.view.targetDependencies.push(new DirectiveWrapperDependency(dirMeta.type.reference));\n                          return DirectiveWrapperExpressions.create({ reference: dirMeta.wrapperType }, depsExpr);\n                      }\n                      else {\n                          return importExpr(provider.useClass)\n                              .instantiate(depsExpr, importType(provider.useClass));\n                      }\n                  }\n                  else {\n                      return convertValueToOutputAst(provider.useValue);\n                  }\n              });\n              var propName = \"_\" + tokenName(resolvedProvider.token) + \"_\" + _this.nodeIndex + \"_\" + _this.instances.size;\n              var instance = createProviderProperty(propName, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);\n              if (isDirectiveWrapper) {\n                  _this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);\n                  _this.instances.set(tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));\n              }\n              else {\n                  _this.instances.set(tokenReference(resolvedProvider.token), instance);\n              }\n          });\n          var _loop_1 = function (i) {\n              var directive = this_1._directives[i];\n              var directiveInstance = this_1.instances.get(tokenReference(identifierToken(directive.type)));\n              directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });\n          };\n          var this_1 = this;\n          for (var i = 0; i < this._directives.length; i++) {\n              _loop_1(i);\n          }\n          Object.keys(this.referenceTokens).forEach(function (varName) {\n              var token = _this.referenceTokens[varName];\n              var varValue;\n              if (token) {\n                  varValue = _this.instances.get(tokenReference(token));\n              }\n              else {\n                  varValue = _this.renderNode;\n              }\n              _this.view.locals.set(varName, varValue);\n          });\n      };\n      CompileElement.prototype.afterChildren = function (childNodeCount) {\n          var _this = this;\n          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {\n              // Note: afterChildren is called after recursing into children.\n              // This is good so that an injector match in an element that is closer to a requesting element\n              // matches first.\n              var providerExpr = _this.instances.get(tokenReference(resolvedProvider.token));\n              // Note: view providers are only visible on the injector of that element.\n              // This is not fully correct as the rules during codegen don't allow a directive\n              // to get hold of a view provdier on the same element. We still do this semantic\n              // as it simplifies our model to having only one runtime injector per element.\n              var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;\n              _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));\n          });\n      };\n      CompileElement.prototype.finish = function () {\n          var _this = this;\n          Array.from(this._queries.values())\n              .forEach(function (queries) { return queries.forEach(function (q) { return q.generateStatements(_this.view.createMethod, _this.view.updateContentQueriesMethod); }); });\n      };\n      CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {\n          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);\n      };\n      CompileElement.prototype.getComponent = function () {\n          return isPresent(this.component) ?\n              this.instances.get(tokenReference(identifierToken(this.component.type))) :\n              null;\n      };\n      CompileElement.prototype.getProviderTokens = function () {\n          return Array.from(this._resolvedProviders.values()).map(function (provider) { return provider.token; });\n      };\n      CompileElement.prototype.getQueriesFor = function (token) {\n          var result = [];\n          var currentEl = this;\n          var distance = 0;\n          var queries;\n          while (!currentEl.isNull()) {\n              queries = currentEl._queries.get(tokenReference(token));\n              if (isPresent(queries)) {\n                  result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));\n              }\n              if (currentEl._directives.length > 0) {\n                  distance++;\n              }\n              currentEl = currentEl.parent;\n          }\n          queries = this.view.componentView.viewQueries.get(tokenReference(token));\n          if (isPresent(queries)) {\n              result.push.apply(result, queries);\n          }\n          return result;\n      };\n      CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {\n          var propName = \"_query_\" + tokenName(queryMeta.selectors[0]) + \"_\" + this.nodeIndex + \"_\" + this._queryCount++;\n          var queryList = createQueryList(propName, this.view);\n          var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);\n          addQueryToTokenMap(this._queries, query);\n          return query;\n      };\n      CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {\n          var result = null;\n          if (isPresent(dep.token)) {\n              // access builtins with special visibility\n              if (!result) {\n                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {\n                      if (requestingProviderType === exports.ProviderAstType.Component) {\n                          return this.compViewExpr.prop('ref');\n                      }\n                      else {\n                          return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n                      }\n                  }\n              }\n              // access regular providers on the element\n              if (!result) {\n                  var resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));\n                  // don't allow directives / public services to access private services.\n                  // only components and private services can access private services.\n                  if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive ||\n                      requestingProviderType === exports.ProviderAstType.PublicService) &&\n                      resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {\n                      return null;\n                  }\n                  result = this.instances.get(tokenReference(dep.token));\n              }\n          }\n          return result;\n      };\n      CompileElement.prototype._getDependency = function (requestingProviderType, dep) {\n          var currElement = this;\n          var result = null;\n          if (dep.isValue) {\n              result = literal(dep.value);\n          }\n          if (!result && !dep.isSkipSelf) {\n              result = this._getLocalDependency(requestingProviderType, dep);\n          }\n          // check parent elements\n          while (!result && !currElement.parent.isNull()) {\n              currElement = currElement.parent;\n              result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, { token: dep.token });\n          }\n          if (!result) {\n              result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);\n          }\n          if (!result) {\n              result = NULL_EXPR;\n          }\n          return getPropertyInView(result, this.view, currElement.view);\n      };\n      return CompileElement;\n  }(CompileNode));\n  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {\n      var indexCondition;\n      if (childNodeCount > 0) {\n          indexCondition = literal(nodeIndex)\n              .lowerEquals(InjectMethodVars$1.requestNodeIndex)\n              .and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));\n      }\n      else {\n          indexCondition = literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex);\n      }\n      return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);\n  }\n  function createProviderProperty(propName, providerValueExpressions, isMulti, isEager, compileElement) {\n      var view = compileElement.view;\n      var resolvedProviderValueExpr;\n      var type;\n      if (isMulti) {\n          resolvedProviderValueExpr = literalArr(providerValueExpressions);\n          type = new ArrayType(DYNAMIC_TYPE);\n      }\n      else {\n          resolvedProviderValueExpr = providerValueExpressions[0];\n          type = providerValueExpressions[0].type;\n      }\n      if (!type) {\n          type = DYNAMIC_TYPE;\n      }\n      if (isEager) {\n          view.fields.push(new ClassField(propName, type));\n          view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n      }\n      else {\n          var internalField = \"_\" + propName;\n          view.fields.push(new ClassField(internalField, type));\n          var getter = new CompileMethod(view);\n          getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n          // Note: Equals is important for JS so that it also checks the undefined case!\n          getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));\n          getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));\n          view.getters.push(new ClassGetter(propName, getter.finish(), type));\n      }\n      return THIS_EXPR.prop(propName);\n  }\n\n  var CompilePipe = (function () {\n      function CompilePipe(view, meta) {\n          var _this = this;\n          this.view = view;\n          this.meta = meta;\n          this._purePipeProxyCount = 0;\n          this.instance = THIS_EXPR.prop(\"_pipe_\" + meta.name + \"_\" + view.pipeCount++);\n          var deps = this.meta.type.diDeps.map(function (diDep) {\n              if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {\n                  return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);\n              }\n              return injectFromViewParentInjector(view, diDep.token, false);\n          });\n          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));\n          this.view.createMethod.resetDebugInfo(null, null);\n          this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)\n              .set(importExpr(this.meta.type).instantiate(deps))\n              .toStmt());\n      }\n      CompilePipe.call = function (view, name, args) {\n          var compView = view.componentView;\n          var meta = _findPipeMeta(compView, name);\n          var pipe;\n          if (meta.pure) {\n              // pure pipes live on the component view\n              pipe = compView.purePipes.get(name);\n              if (!pipe) {\n                  pipe = new CompilePipe(compView, meta);\n                  compView.purePipes.set(name, pipe);\n                  compView.pipes.push(pipe);\n              }\n          }\n          else {\n              // Non pure pipes live on the view that called it\n              pipe = new CompilePipe(view, meta);\n              view.pipes.push(pipe);\n          }\n          return pipe._call(view, args);\n      };\n      Object.defineProperty(CompilePipe.prototype, \"pure\", {\n          get: function () { return this.meta.pure; },\n          enumerable: true,\n          configurable: true\n      });\n      CompilePipe.prototype._call = function (callingView, args) {\n          if (this.meta.pure) {\n              // PurePipeProxies live on the view that called them.\n              var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + \"_\" + this._purePipeProxyCount++);\n              var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);\n              createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')\n                  .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, { fields: callingView.fields, ctorStmts: callingView.createMethod });\n              return importExpr(createIdentifier(Identifiers.castByValue))\n                  .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])\n                  .callFn(args);\n          }\n          else {\n              return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);\n          }\n      };\n      return CompilePipe;\n  }());\n  function _findPipeMeta(view, name) {\n      var pipeMeta = null;\n      for (var i = view.pipeMetas.length - 1; i >= 0; i--) {\n          var localPipeMeta = view.pipeMetas[i];\n          if (localPipeMeta.name == name) {\n              pipeMeta = localPipeMeta;\n              break;\n          }\n      }\n      if (!pipeMeta) {\n          throw new Error(\"Illegal state: Could not find pipe \" + name + \" although the parser should have detected this error!\");\n      }\n      return pipeMeta;\n  }\n\n  var CompileViewRootNodeType;\n  (function (CompileViewRootNodeType) {\n      CompileViewRootNodeType[CompileViewRootNodeType[\"Node\"] = 0] = \"Node\";\n      CompileViewRootNodeType[CompileViewRootNodeType[\"ViewContainer\"] = 1] = \"ViewContainer\";\n      CompileViewRootNodeType[CompileViewRootNodeType[\"NgContent\"] = 2] = \"NgContent\";\n  })(CompileViewRootNodeType || (CompileViewRootNodeType = {}));\n  var CompileViewRootNode = (function () {\n      function CompileViewRootNode(type, expr, ngContentIndex) {\n          this.type = type;\n          this.expr = expr;\n          this.ngContentIndex = ngContentIndex;\n      }\n      return CompileViewRootNode;\n  }());\n  var CompileView = (function () {\n      function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings, targetDependencies) {\n          var _this = this;\n          this.component = component;\n          this.genConfig = genConfig;\n          this.pipeMetas = pipeMetas;\n          this.styles = styles;\n          this.animations = animations;\n          this.viewIndex = viewIndex;\n          this.declarationElement = declarationElement;\n          this.templateVariableBindings = templateVariableBindings;\n          this.targetDependencies = targetDependencies;\n          this.viewChildren = [];\n          this.nodes = [];\n          this.rootNodes = [];\n          this.lastRenderNode = NULL_EXPR;\n          this.viewContainers = [];\n          this.methods = [];\n          this.ctorStmts = [];\n          this.fields = [];\n          this.getters = [];\n          this.disposables = [];\n          this.purePipes = new Map();\n          this.pipes = [];\n          this.locals = new Map();\n          this.literalArrayCount = 0;\n          this.literalMapCount = 0;\n          this.pipeCount = 0;\n          this.createMethod = new CompileMethod(this);\n          this.animationBindingsMethod = new CompileMethod(this);\n          this.injectorGetMethod = new CompileMethod(this);\n          this.updateContentQueriesMethod = new CompileMethod(this);\n          this.dirtyParentQueriesMethod = new CompileMethod(this);\n          this.updateViewQueriesMethod = new CompileMethod(this);\n          this.detectChangesInInputsMethod = new CompileMethod(this);\n          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);\n          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);\n          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);\n          this.destroyMethod = new CompileMethod(this);\n          this.detachMethod = new CompileMethod(this);\n          this.viewType = getViewType(component, viewIndex);\n          this.className = viewClassName(component.type.reference, viewIndex);\n          this.rendererTypeName = rendererTypeName(component.type.reference);\n          this.classType = expressionType(variable(this.className));\n          this.classExpr = variable(this.className);\n          if (this.viewType === _angular_core.ɵViewType.COMPONENT || this.viewType === _angular_core.ɵViewType.HOST) {\n              this.componentView = this;\n          }\n          else {\n              this.componentView = this.declarationElement.view.componentView;\n          }\n          this.componentContext =\n              getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);\n          var viewQueries = new Map();\n          if (this.viewType === _angular_core.ɵViewType.COMPONENT) {\n              var directiveInstance_1 = THIS_EXPR.prop('context');\n              this.component.viewQueries.forEach(function (queryMeta, queryIndex) {\n                  var propName = \"_viewQuery_\" + tokenName(queryMeta.selectors[0]) + \"_\" + queryIndex;\n                  var queryList = createQueryList(propName, _this);\n                  var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);\n                  addQueryToTokenMap(viewQueries, query);\n              });\n          }\n          this.viewQueries = viewQueries;\n          templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });\n          if (!this.declarationElement.isNull()) {\n              this.declarationElement.setEmbeddedView(this);\n          }\n      }\n      CompileView.prototype.callPipe = function (name, input, args) {\n          return CompilePipe.call(this, name, [input].concat(args));\n      };\n      CompileView.prototype.getLocal = function (name) {\n          if (name == EventHandlerVars.event.name) {\n              return EventHandlerVars.event;\n          }\n          var currView = this;\n          var result = currView.locals.get(name);\n          while (!result && isPresent(currView.declarationElement.view)) {\n              currView = currView.declarationElement.view;\n              result = currView.locals.get(name);\n          }\n          if (isPresent(result)) {\n              return getPropertyInView(result, this, currView);\n          }\n          else {\n              return null;\n          }\n      };\n      CompileView.prototype.finish = function () {\n          var _this = this;\n          Array.from(this.viewQueries.values())\n              .forEach(function (queries) { return queries.forEach(function (q) { return q.generateStatements(_this.createMethod, _this.updateViewQueriesMethod); }); });\n      };\n      return CompileView;\n  }());\n  function getViewType(component, embeddedTemplateIndex) {\n      if (embeddedTemplateIndex > 0) {\n          return _angular_core.ɵViewType.EMBEDDED;\n      }\n      if (component.isHost) {\n          return _angular_core.ɵViewType.HOST;\n      }\n      return _angular_core.ɵViewType.COMPONENT;\n  }\n\n  function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {\n      var usedEvents = collectEvents(boundEvents, directives);\n      if (!usedEvents.size) {\n          return false;\n      }\n      if (bindToRenderer) {\n          subscribeToRenderEvents(usedEvents, compileElement);\n      }\n      subscribeToDirectiveEvents(usedEvents, directives, compileElement);\n      generateHandleEventMethod(boundEvents, directives, compileElement);\n      return true;\n  }\n  function collectEvents(boundEvents, directives) {\n      var usedEvents = new Map();\n      boundEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });\n      directives.forEach(function (dirAst) {\n          dirAst.hostEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });\n      });\n      return usedEvents;\n  }\n  function subscribeToRenderEvents(usedEvents, compileElement) {\n      var eventAndTargetExprs = [];\n      usedEvents.forEach(function (event) {\n          if (!event.phase) {\n              eventAndTargetExprs.push(literal(event.name), literal(event.target));\n          }\n      });\n      if (eventAndTargetExprs.length) {\n          var disposableVar = variable(\"disposable_\" + compileElement.view.disposables.length);\n          compileElement.view.disposables.push(disposableVar);\n          compileElement.view.createMethod.addStmt(disposableVar\n              .set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([\n              THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs),\n              handleEventExpr(compileElement)\n          ]))\n              .toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));\n      }\n  }\n  function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {\n      var usedEventNames = Array.from(usedEvents.keys());\n      directives.forEach(function (dirAst) {\n          var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);\n          compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));\n      });\n  }\n  function generateHandleEventMethod(boundEvents, directives, compileElement) {\n      var hasComponentHostListener = directives.some(function (dirAst) { return dirAst.hostEvents.some(function (event) { return dirAst.directive.isComponent; }); });\n      var markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;\n      var handleEventStmts = new CompileMethod(compileElement.view);\n      handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());\n      var eventNameVar = variable('eventName');\n      var resultVar = variable('result');\n      handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));\n      directives.forEach(function (dirAst, dirIdx) {\n          var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);\n          if (dirAst.hostEvents.length > 0) {\n              handleEventStmts.push(resultVar\n                  .set(DirectiveWrapperExpressions\n                  .handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event)\n                  .and(resultVar))\n                  .toStmt());\n          }\n      });\n      boundEvents.forEach(function (renderEvent, renderEventIdx) {\n          var evalResult = convertActionBinding(compileElement.view, compileElement.view.componentContext, renderEvent.handler, \"sub_\" + renderEventIdx);\n          var trueStmts = evalResult.stmts;\n          if (evalResult.allowDefault) {\n              trueStmts.push(resultVar.set(evalResult.allowDefault.and(resultVar)).toStmt());\n          }\n          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.\n          handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));\n      });\n      handleEventStmts.push(new ReturnStatement(resultVar));\n      compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [\n          new FnParam(eventNameVar.name, STRING_TYPE),\n          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)\n      ], handleEventStmts.finish(), BOOL_TYPE));\n  }\n  function handleEventExpr(compileElement) {\n      var handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);\n      return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);\n  }\n\n  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {\n      var view = compileElement.view;\n      var lifecycleHooks = directiveMeta.type.lifecycleHooks;\n      var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;\n      afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      if (lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.AfterContentInit) !== -1) {\n          afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(isFirstViewCheck(THIS_EXPR), [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));\n      }\n      if (lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.AfterContentChecked) !== -1) {\n          afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());\n      }\n  }\n  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {\n      var view = compileElement.view;\n      var lifecycleHooks = directiveMeta.type.lifecycleHooks;\n      var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;\n      afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      if (lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.AfterViewInit) !== -1) {\n          afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(isFirstViewCheck(THIS_EXPR), [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));\n      }\n      if (lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.AfterViewChecked) !== -1) {\n          afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());\n      }\n  }\n  function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {\n      compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));\n      compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));\n  }\n  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {\n      var onDestroyMethod = compileElement.view.destroyMethod;\n      onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      if (provider.providerType !== exports.ProviderAstType.Directive &&\n          provider.providerType !== exports.ProviderAstType.Component &&\n          provider.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1) {\n          onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());\n      }\n  }\n  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {\n      var onDestroyMethod = view.destroyMethod;\n      if (pipeMeta.type.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1) {\n          onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());\n      }\n  }\n\n  function bindRenderText(boundText, compileNode, view) {\n      var valueField = createCheckBindingField(view);\n      var evalResult = legacyConvertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);\n      if (!evalResult) {\n          return null;\n      }\n      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);\n      view.detectChangesRenderPropertiesMethod.addStmts(evalResult.stmts);\n      view.detectChangesRenderPropertiesMethod.addStmt(importExpr(createIdentifier(Identifiers.checkRenderText))\n          .callFn([\n          THIS_EXPR, compileNode.renderNode, valueField.expression,\n          valueField.expression.set(evalResult.currValExpr),\n          evalResult.forceUpdate || literal(false)\n      ])\n          .toStmt());\n  }\n  function bindRenderInputs(boundProps, boundOutputs, hasEvents, compileElement) {\n      var view = compileElement.view;\n      var renderNode = compileElement.renderNode;\n      boundProps.forEach(function (boundProp) {\n          var bindingField = createCheckBindingField(view);\n          view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);\n          var evalResult = legacyConvertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);\n          if (!evalResult) {\n              return;\n          }\n          var compileMethod = view.detectChangesRenderPropertiesMethod;\n          switch (boundProp.type) {\n              case exports.PropertyBindingType.Property:\n              case exports.PropertyBindingType.Attribute:\n              case exports.PropertyBindingType.Class:\n              case exports.PropertyBindingType.Style:\n                  compileMethod.addStmts(createCheckRenderBindingStmt(THIS_EXPR, renderNode, boundProp, bindingField.expression, evalResult));\n                  break;\n              case exports.PropertyBindingType.Animation:\n                  compileMethod = view.animationBindingsMethod;\n                  var _a = createCheckAnimationBindingStmts(THIS_EXPR, THIS_EXPR, boundProp, boundOutputs, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) :\n                      importExpr(createIdentifier(Identifiers.noop)))\n                      .callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, bindingField.expression, evalResult), checkUpdateStmts = _a.checkUpdateStmts, checkDetachStmts = _a.checkDetachStmts;\n                  view.detachMethod.addStmts(checkDetachStmts);\n                  compileMethod.addStmts(checkUpdateStmts);\n                  break;\n          }\n      });\n  }\n  function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {\n      // We need to provide the SecurityContext for properties that could need sanitization.\n      var runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function (boundProp) { return boundProp.needsRuntimeSecurityContext; })\n          .map(function (boundProp) {\n          var ctx;\n          switch (boundProp.type) {\n              case exports.PropertyBindingType.Property:\n                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);\n                  break;\n              case exports.PropertyBindingType.Attribute:\n                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);\n                  break;\n              default:\n                  throw new Error(\"Illegal state: Only property / attribute bindings can have an unknown security context! Binding \" + boundProp.name);\n          }\n          return createEnumExpression(Identifiers.SecurityContext, ctx);\n      });\n      compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, runtimeSecurityCtxExprs));\n  }\n  function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {\n      var view = compileElement.view;\n      var detectChangesInInputsMethod = view.detectChangesInInputsMethod;\n      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      directiveAst.inputs.forEach(function (input, inputIdx) {\n          // Note: We can't use `fields.length` here, as we are not adding a field!\n          var bindingId = compileElement.nodeIndex + \"_\" + dirIndex + \"_\" + inputIdx;\n          detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);\n          var evalResult = legacyConvertPropertyBinding(view, view, view.componentContext, input.value, bindingId);\n          if (!evalResult) {\n              return;\n          }\n          detectChangesInInputsMethod.addStmts(evalResult.stmts);\n          detectChangesInInputsMethod.addStmt(directiveWrapperInstance\n              .callMethod(\"check_\" + input.directiveName, [THIS_EXPR, evalResult.currValExpr, evalResult.forceUpdate || literal(false)])\n              .toStmt());\n      });\n      var isOnPushComp = directiveAst.directive.isComponent &&\n          !_angular_core.ɵisDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);\n      var directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode);\n      var directiveDetectChangesStmt = isOnPushComp ?\n          new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) :\n          directiveDetectChangesExpr.toStmt();\n      detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);\n  }\n\n  // Note: We can't do this when we create the CompileElements already,\n  // as we create embedded views before the <ng-template> elements themselves.\n  function bindQueryValues(ce) {\n      var queriesWithReads = [];\n      ce.getProviderTokens().forEach(function (token) {\n          var queriesForProvider = ce.getQueriesFor(token);\n          queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, token); }));\n      });\n      Object.keys(ce.referenceTokens).forEach(function (varName) {\n          var varToken = { value: varName };\n          queriesWithReads.push.apply(queriesWithReads, ce.getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));\n      });\n      queriesWithReads.forEach(function (queryWithRead) {\n          var value;\n          if (queryWithRead.read.identifier) {\n              // query for an identifier\n              value = ce.instances.get(tokenReference(queryWithRead.read));\n          }\n          else {\n              // query for a reference\n              var token = ce.referenceTokens[queryWithRead.read.value];\n              if (token) {\n                  value = ce.instances.get(tokenReference(token));\n              }\n              else {\n                  value = ce.elementRef;\n              }\n          }\n          if (value) {\n              queryWithRead.query.addValue(value, ce.view);\n          }\n      });\n  }\n  var _QueryWithRead = (function () {\n      function _QueryWithRead(query, match) {\n          this.query = query;\n          this.read = query.meta.read || match;\n      }\n      return _QueryWithRead;\n  }());\n\n  function bindView(view, parsedTemplate, schemaRegistry) {\n      var visitor = new ViewBinderVisitor(view, schemaRegistry);\n      templateVisitAll(visitor, parsedTemplate);\n      view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });\n  }\n  var ViewBinderVisitor = (function () {\n      function ViewBinderVisitor(view, _schemaRegistry) {\n          this.view = view;\n          this._schemaRegistry = _schemaRegistry;\n          this._nodeIndex = 0;\n      }\n      ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {\n          var node = this.view.nodes[this._nodeIndex++];\n          bindRenderText(ast, node, this.view);\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitText = function (ast, parent) {\n          this._nodeIndex++;\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };\n      ViewBinderVisitor.prototype.visitElement = function (ast, parent) {\n          var _this = this;\n          var compileElement = this.view.nodes[this._nodeIndex++];\n          bindQueryValues(compileElement);\n          var hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);\n          bindRenderInputs(ast.inputs, ast.outputs, hasEvents, compileElement);\n          ast.directives.forEach(function (directiveAst, dirIndex) {\n              var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);\n              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);\n              bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);\n          });\n          templateVisitAll(this, ast.children, compileElement);\n          // afterContent and afterView lifecycles need to be called bottom up\n          // so that children are notified before parents\n          ast.directives.forEach(function (directiveAst) {\n              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);\n              var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);\n              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);\n          });\n          ast.providers.forEach(function (providerAst) {\n              var providerInstance = compileElement.instances.get(tokenReference(providerAst.token));\n              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);\n          });\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {\n          var compileElement = this.view.nodes[this._nodeIndex++];\n          bindQueryValues(compileElement);\n          bindOutputs(ast.outputs, ast.directives, compileElement, false);\n          ast.directives.forEach(function (directiveAst, dirIndex) {\n              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);\n              var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);\n              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);\n              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);\n          });\n          ast.providers.forEach(function (providerAst) {\n              var providerInstance = compileElement.instances.get(tokenReference(providerAst.token));\n              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);\n          });\n          bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };\n      ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };\n      return ViewBinderVisitor;\n  }());\n\n  var IMPLICIT_TEMPLATE_VAR = '\\$implicit';\n  var CLASS_ATTR$1 = 'class';\n  var STYLE_ATTR = 'style';\n  var NG_CONTAINER_TAG = 'ng-container';\n  var parentRenderNodeVar = variable('parentRenderNode');\n  var rootSelectorVar = variable('rootSelector');\n  function buildView(view, template, targetDependencies) {\n      var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);\n      var parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;\n      templateVisitAll(builderVisitor, template, parentEl);\n      if (view.viewType === _angular_core.ɵViewType.EMBEDDED || view.viewType === _angular_core.ɵViewType.HOST) {\n          view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();\n      }\n      return builderVisitor.nestedViewCount;\n  }\n  function finishView(view, targetStatements) {\n      view.nodes.forEach(function (node) {\n          if (node instanceof CompileElement) {\n              node.finish();\n              if (node.hasEmbeddedView) {\n                  finishView(node.embeddedView, targetStatements);\n              }\n          }\n      });\n      view.finish();\n      createViewTopLevelStmts(view, targetStatements);\n  }\n  var ViewBuilderVisitor = (function () {\n      function ViewBuilderVisitor(view, targetDependencies) {\n          this.view = view;\n          this.targetDependencies = targetDependencies;\n          this.nestedViewCount = 0;\n      }\n      ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };\n      ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {\n          var projectedNode = _getOuterContainerOrSelf(node);\n          var parent = projectedNode.parent;\n          var ngContentIndex = projectedNode.sourceAst.ngContentIndex;\n          var viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;\n          if (this._isRootNode(parent)) {\n              if (this.view.viewType !== _angular_core.ɵViewType.COMPONENT) {\n                  this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));\n              }\n          }\n          else if (isPresent(parent.component) && isPresent(ngContentIndex)) {\n              parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));\n          }\n      };\n      ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {\n          parent = _getOuterContainerParentOrSelf(parent);\n          if (this._isRootNode(parent)) {\n              if (this.view.viewType === _angular_core.ɵViewType.COMPONENT) {\n                  return parentRenderNodeVar;\n              }\n              else {\n                  // root node of an embedded/host view\n                  return NULL_EXPR;\n              }\n          }\n          else {\n              return isPresent(parent.component) &&\n                  parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ?\n                  NULL_EXPR :\n                  parent.renderNode;\n          }\n      };\n      ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function () {\n          var view = this.view;\n          if (view.rootNodes.length === 0 ||\n              view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {\n              var fieldName = \"_el_\" + view.nodes.length;\n              view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));\n              view.createMethod.addStmt(THIS_EXPR.prop(fieldName)\n                  .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR]))\n                  .toStmt());\n              view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));\n          }\n          return view.rootNodes[view.rootNodes.length - 1].expr;\n      };\n      ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {\n          return this._visitText(ast, '', parent);\n      };\n      ViewBuilderVisitor.prototype.visitText = function (ast, parent) {\n          return this._visitText(ast, ast.value, parent);\n      };\n      ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {\n          var fieldName = \"_text_\" + this.view.nodes.length;\n          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));\n          var renderNode = THIS_EXPR.prop(fieldName);\n          var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);\n          var createRenderNode = THIS_EXPR.prop(fieldName)\n              .set(ViewProperties.renderer.callMethod('createText', [\n              this._getParentRenderNode(parent), literal(value),\n              this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)\n          ]))\n              .toStmt();\n          this.view.nodes.push(compileNode);\n          this.view.createMethod.addStmt(createRenderNode);\n          this._addRootNodeAndProject(compileNode);\n          return renderNode;\n      };\n      ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {\n          // the projected nodes originate from a different view, so we don't\n          // have debug information for them...\n          this.view.createMethod.resetDebugInfo(null, ast);\n          var parentRenderNode = this._getParentRenderNode(parent);\n          if (parentRenderNode !== NULL_EXPR) {\n              this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)])\n                  .toStmt());\n          }\n          else if (this._isRootNode(parent)) {\n              if (this.view.viewType !== _angular_core.ɵViewType.COMPONENT) {\n                  // store root nodes only for embedded/host views\n                  this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));\n              }\n          }\n          else {\n              if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {\n                  parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));\n              }\n          }\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {\n          var nodeIndex = this.view.nodes.length;\n          var createRenderNodeExpr;\n          var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);\n          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });\n          var component = directives.find(function (directive) { return directive.isComponent; });\n          if (ast.name === NG_CONTAINER_TAG) {\n              createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);\n          }\n          else {\n              var htmlAttrs = _readHtmlAttrs(ast.attrs);\n              var attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function (v) { return literal(v); }));\n              if (nodeIndex === 0 && this.view.viewType === _angular_core.ɵViewType.HOST) {\n                  createRenderNodeExpr =\n                      importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([\n                          ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar,\n                          debugContextExpr\n                      ]);\n              }\n              else {\n                  createRenderNodeExpr =\n                      importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([\n                          ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name),\n                          attrNameAndValues, debugContextExpr\n                      ]);\n              }\n          }\n          var fieldName = \"_el_\" + nodeIndex;\n          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));\n          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());\n          var renderNode = THIS_EXPR.prop(fieldName);\n          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);\n          this.view.nodes.push(compileElement);\n          var compViewExpr = null;\n          if (isPresent(component)) {\n              this.targetDependencies.push(new ComponentViewDependency(component.type.reference));\n              compViewExpr = THIS_EXPR.prop(\"compView_\" + nodeIndex); // fix highlighting: `\n              this.view.fields.push(new ClassField(compViewExpr.name, importType(createIdentifier(Identifiers.AppView), [importType(component.type)])));\n              this.view.viewChildren.push(compViewExpr);\n              compileElement.setComponentView(compViewExpr);\n              this.view.createMethod.addStmt(compViewExpr\n                  .set(importExpr({ reference: component.componentViewType }).instantiate([\n                  ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode\n              ]))\n                  .toStmt());\n          }\n          compileElement.beforeChildren();\n          this._addRootNodeAndProject(compileElement);\n          templateVisitAll(this, ast.children, compileElement);\n          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);\n          if (isPresent(compViewExpr)) {\n              this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());\n          }\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {\n          var nodeIndex = this.view.nodes.length;\n          var fieldName = \"_anchor_\" + nodeIndex;\n          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));\n          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)\n              .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [\n              this._getParentRenderNode(parent),\n              this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)\n          ]))\n              .toStmt());\n          var renderNode = THIS_EXPR.prop(fieldName);\n          var templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });\n          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });\n          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);\n          this.view.nodes.push(compileElement);\n          this.nestedViewCount++;\n          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings, this.targetDependencies);\n          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);\n          compileElement.beforeChildren();\n          this._addRootNodeAndProject(compileElement);\n          compileElement.afterChildren(0);\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };\n      ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };\n      return ViewBuilderVisitor;\n  }());\n  /**\n   * Walks up the nodes while the direct parent is a container.\n   *\n   * Returns the outer container or the node itself when it is not a direct child of a container.\n   *\n   * @internal\n   */\n  function _getOuterContainerOrSelf(node) {\n      var view = node.view;\n      while (_isNgContainer(node.parent, view)) {\n          node = node.parent;\n      }\n      return node;\n  }\n  /**\n   * Walks up the nodes while they are container and returns the first parent which is not.\n   *\n   * Returns the parent of the outer container or the node itself when it is not a container.\n   *\n   * @internal\n   */\n  function _getOuterContainerParentOrSelf(el) {\n      var view = el.view;\n      while (_isNgContainer(el, view)) {\n          el = el.parent;\n      }\n      return el;\n  }\n  function _isNgContainer(node, view) {\n      return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG &&\n          node.view === view;\n  }\n  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {\n      var mapResult = {};\n      Object.keys(declaredHtmlAttrs).forEach(function (key) { mapResult[key] = declaredHtmlAttrs[key]; });\n      directives.forEach(function (directiveMeta) {\n          Object.keys(directiveMeta.hostAttributes).forEach(function (name) {\n              var value = directiveMeta.hostAttributes[name];\n              var prevValue = mapResult[name];\n              mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;\n          });\n      });\n      var arrResult = [];\n      // Note: We need to sort to get a defined output order\n      // for tests and for caching generated artifacts...\n      Object.keys(mapResult).sort().forEach(function (attrName) { arrResult.push(attrName, mapResult[attrName]); });\n      return arrResult;\n  }\n  function _readHtmlAttrs(attrs) {\n      var htmlAttrs = {};\n      attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });\n      return htmlAttrs;\n  }\n  function mergeAttributeValue(attrName, attrValue1, attrValue2) {\n      if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {\n          return attrValue1 + \" \" + attrValue2;\n      }\n      else {\n          return attrValue2;\n      }\n  }\n  function createViewTopLevelStmts(view, targetStatements) {\n      var nodeDebugInfosVar = NULL_EXPR;\n      if (view.genConfig.genDebugInfo) {\n          nodeDebugInfosVar = variable(\"nodeDebugInfos_\" + identifierName(view.component.type) + view.viewIndex); // fix\n          // highlighting:\n          // `\n          targetStatements.push(nodeDebugInfosVar\n              .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))\n              .toDeclStmt(null, [StmtModifier.Final]));\n      }\n      var renderCompTypeVar = variable(view.rendererTypeName); // fix highlighting: `\n      if (view.viewIndex === 0) {\n          var templateUrlInfo = void 0;\n          if (view.component.template.templateUrl == identifierModuleUrl(view.component.type)) {\n              templateUrlInfo =\n                  identifierModuleUrl(view.component.type) + \" class \" + identifierName(view.component.type) + \" - inline template\";\n          }\n          else {\n              templateUrlInfo = view.component.template.templateUrl;\n          }\n          targetStatements.push(renderCompTypeVar\n              .set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([\n              view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''),\n              literal(view.component.template.ngContentSelectors.length),\n              ViewEncapsulationEnum.fromValue(view.component.template.encapsulation),\n              view.styles,\n              literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnExp]; }), null, true),\n          ]))\n              .toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType))));\n      }\n      var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);\n      targetStatements.push(viewClass);\n  }\n  function createStaticNodeDebugInfo(node) {\n      var compileElement = node instanceof CompileElement ? node : null;\n      var providerTokens = [];\n      var componentToken = NULL_EXPR;\n      var varTokenEntries = [];\n      if (isPresent(compileElement)) {\n          providerTokens =\n              compileElement.getProviderTokens().map(function (token) { return createDiTokenExpression(token); });\n          if (isPresent(compileElement.component)) {\n              componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));\n          }\n          Object.keys(compileElement.referenceTokens).forEach(function (varName) {\n              var token = compileElement.referenceTokens[varName];\n              varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);\n          });\n      }\n      return importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo))\n          .instantiate([\n          literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),\n          componentToken,\n          literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))\n      ], importType(createIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));\n  }\n  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {\n      var viewConstructorArgs = [\n          new FnParam(ViewConstructorVars.viewUtils.name, importType(createIdentifier(Identifiers.ViewUtils))),\n          new FnParam(ViewConstructorVars.parentView.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n          new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE),\n          new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)\n      ];\n      var superConstructorArgs = [\n          variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),\n          ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex,\n          ViewConstructorVars.parentElement,\n          ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))\n      ];\n      if (view.genConfig.genDebugInfo) {\n          superConstructorArgs.push(nodeDebugInfosVar);\n      }\n      if (view.viewType === _angular_core.ɵViewType.EMBEDDED) {\n          viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(createIdentifier(Identifiers.ViewContainer))));\n          superConstructorArgs.push(variable('declaredViewContainer'));\n      }\n      var viewMethods = [\n          new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(createIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])),\n          new ClassMethod('injectorGetInternal', [\n              new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),\n              // Note: Can't use o.INT_TYPE here as the method in AppView uses number\n              new FnParam(InjectMethodVars$1.requestNodeIndex.name, NUMBER_TYPE),\n              new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)\n          ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars$1.notFoundResult), DYNAMIC_TYPE),\n          new ClassMethod('detectChangesInternal', [], generateDetectChangesMethod(view)),\n          new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),\n          new ClassMethod('destroyInternal', [], generateDestroyMethod(view)),\n          new ClassMethod('detachInternal', [], view.detachMethod.finish()),\n          generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view),\n          generateCreateEmbeddedViewsMethod(view)\n      ].filter(function (method) { return method.body.length > 0; });\n      var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;\n      var viewClass = createClassStmt({\n          name: view.className,\n          parent: importExpr(createIdentifier(superClass), [getContextType(view)]),\n          parentArgs: superConstructorArgs,\n          ctorParams: viewConstructorArgs,\n          builders: [{ methods: viewMethods }, view]\n      });\n      return viewClass;\n  }\n  function generateDestroyMethod(view) {\n      var stmts = [];\n      view.viewContainers.forEach(function (viewContainer) {\n          stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());\n      });\n      view.viewChildren.forEach(function (viewChild) { stmts.push(viewChild.callMethod('destroy', []).toStmt()); });\n      stmts.push.apply(stmts, view.destroyMethod.finish());\n      return stmts;\n  }\n  function generateCreateMethod(view) {\n      var parentRenderNodeExpr = NULL_EXPR;\n      var parentRenderNodeStmts = [];\n      if (view.viewType === _angular_core.ɵViewType.COMPONENT) {\n          parentRenderNodeExpr =\n              ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);\n          parentRenderNodeStmts =\n              [parentRenderNodeVar.set(parentRenderNodeExpr)\n                      .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];\n      }\n      var resultExpr;\n      if (view.viewType === _angular_core.ɵViewType.HOST) {\n          var hostEl = view.nodes[0];\n          resultExpr =\n              importExpr(createIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([\n                  literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()\n              ]);\n      }\n      else {\n          resultExpr = NULL_EXPR;\n      }\n      var allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE)\n          .prop('directRenderer')\n          .conditional(NULL_EXPR, literalArr(view.nodes.map(function (node) { return node.renderNode; })));\n      return parentRenderNodeStmts.concat(view.createMethod.finish(), [\n          THIS_EXPR\n              .callMethod('init', [\n              view.lastRenderNode,\n              allNodesExpr,\n              view.disposables.length ? literalArr(view.disposables) : NULL_EXPR,\n          ])\n              .toStmt(),\n          new ReturnStatement(resultExpr)\n      ]);\n  }\n  function generateDetectChangesMethod(view) {\n      var stmts = [];\n      if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() &&\n          view.updateContentQueriesMethod.isEmpty() &&\n          view.afterContentLifecycleCallbacksMethod.isEmpty() &&\n          view.detectChangesRenderPropertiesMethod.isEmpty() &&\n          view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() &&\n          view.viewContainers.length === 0 && view.viewChildren.length === 0) {\n          return stmts;\n      }\n      stmts.push.apply(stmts, view.animationBindingsMethod.finish());\n      stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());\n      view.viewContainers.forEach(function (viewContainer) {\n          stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [ViewProperties.throwOnChange])\n              .toStmt());\n      });\n      var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());\n      if (afterContentStmts.length > 0) {\n          stmts.push(new IfStmt(not(ViewProperties.throwOnChange), afterContentStmts));\n      }\n      stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());\n      view.viewChildren.forEach(function (viewChild) {\n          stmts.push(viewChild.callMethod('internalDetectChanges', [ViewProperties.throwOnChange]).toStmt());\n      });\n      var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());\n      if (afterViewStmts.length > 0) {\n          stmts.push(new IfStmt(not(ViewProperties.throwOnChange), afterViewStmts));\n      }\n      var varStmts = legacyCreateSharedBindingVariablesIfNeeded(stmts);\n      return varStmts.concat(stmts);\n  }\n  function addReturnValuefNotEmpty(statements, value) {\n      if (statements.length > 0) {\n          return statements.concat([new ReturnStatement(value)]);\n      }\n      else {\n          return statements;\n      }\n  }\n  function getContextType(view) {\n      if (view.viewType === _angular_core.ɵViewType.COMPONENT) {\n          return importType(view.component.type);\n      }\n      return DYNAMIC_TYPE;\n  }\n  function getChangeDetectionMode(view) {\n      var mode;\n      if (view.viewType === _angular_core.ɵViewType.COMPONENT) {\n          mode = _angular_core.ɵisDefaultChangeDetectionStrategy(view.component.changeDetection) ?\n              _angular_core.ɵChangeDetectorStatus.CheckAlways :\n              _angular_core.ɵChangeDetectorStatus.CheckOnce;\n      }\n      else {\n          mode = _angular_core.ɵChangeDetectorStatus.CheckAlways;\n      }\n      return mode;\n  }\n  function generateVisitRootNodesMethod(view) {\n      var cbVar = variable('cb');\n      var ctxVar = variable('ctx');\n      var stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);\n      return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);\n  }\n  function generateVisitProjectableNodesMethod(view) {\n      var nodeIndexVar = variable('nodeIndex');\n      var ngContentIndexVar = variable('ngContentIndex');\n      var cbVar = variable('cb');\n      var ctxVar = variable('ctx');\n      var stmts = [];\n      view.nodes.forEach(function (node) {\n          if (node instanceof CompileElement && node.component) {\n              node.contentNodesByNgContentIndex.forEach(function (projectedNodes, ngContentIndex) {\n                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex))\n                      .and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));\n              });\n          }\n      });\n      return new ClassMethod('visitProjectableNodesInternal', [\n          new FnParam(nodeIndexVar.name, NUMBER_TYPE),\n          new FnParam(ngContentIndexVar.name, NUMBER_TYPE),\n          new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)\n      ], stmts);\n  }\n  function generateVisitNodesStmts(nodes, cb, ctx) {\n      var stmts = [];\n      nodes.forEach(function (node) {\n          switch (node.type) {\n              case CompileViewRootNodeType.Node:\n                  stmts.push(cb.callFn([node.expr, ctx]).toStmt());\n                  break;\n              case CompileViewRootNodeType.ViewContainer:\n                  stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());\n                  stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());\n                  break;\n              case CompileViewRootNodeType.NgContent:\n                  stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx])\n                      .toStmt());\n                  break;\n          }\n      });\n      return stmts;\n  }\n  function generateCreateEmbeddedViewsMethod(view) {\n      var nodeIndexVar = variable('nodeIndex');\n      var stmts = [];\n      view.nodes.forEach(function (node) {\n          if (node instanceof CompileElement) {\n              if (node.embeddedView) {\n                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([\n                          ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode,\n                          node.viewContainer\n                      ]))]));\n              }\n          }\n      });\n      if (stmts.length > 0) {\n          stmts.push(new ReturnStatement(NULL_EXPR));\n      }\n      return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));\n  }\n\n  var ViewCompileResult = (function () {\n      function ViewCompileResult(statements, viewClassVar, rendererTypeVar, dependencies) {\n          this.statements = statements;\n          this.viewClassVar = viewClassVar;\n          this.rendererTypeVar = rendererTypeVar;\n          this.dependencies = dependencies;\n      }\n      return ViewCompileResult;\n  }());\n  var ViewCompiler = (function () {\n      function ViewCompiler(_genConfig, _schemaRegistry) {\n          this._genConfig = _genConfig;\n          this._schemaRegistry = _schemaRegistry;\n      }\n      ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes, compiledAnimations) {\n          var dependencies = [];\n          var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), [], dependencies);\n          var statements = [];\n          buildView(view, template, dependencies);\n          // Need to separate binding from creation to be able to refer to\n          // variables that have been declared after usage.\n          bindView(view, template, this._schemaRegistry);\n          finishView(view, statements);\n          return new ViewCompileResult(statements, view.classExpr.name, view.rendererTypeName, dependencies);\n      };\n      return ViewCompiler;\n  }());\n  ViewCompiler.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  ViewCompiler.ctorParameters = function () { return [\n      { type: CompilerConfig, },\n      { type: ElementSchemaRegistry, },\n  ]; };\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$26 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var CLASS_ATTR$2 = 'class';\n  var STYLE_ATTR$1 = 'style';\n  var IMPLICIT_TEMPLATE_VAR$1 = '\\$implicit';\n  var NG_CONTAINER_TAG$1 = 'ng-container';\n  var ViewCompilerNext = (function (_super) {\n      __extends$26(ViewCompilerNext, _super);\n      function ViewCompilerNext(_genConfigNext, _schemaRegistryNext) {\n          var _this = _super.call(this, _genConfigNext, _schemaRegistryNext) || this;\n          _this._genConfigNext = _genConfigNext;\n          _this._schemaRegistryNext = _schemaRegistryNext;\n          return _this;\n      }\n      ViewCompilerNext.prototype.compileComponent = function (component, template, styles, usedPipes, compiledAnimations) {\n          var embeddedViewCount = 0;\n          var staticQueryIds = findStaticQueryIds(template);\n          var statements = [];\n          var renderComponentVar = variable(rendererTypeName(component.type.reference));\n          statements.push(renderComponentVar\n              .set(importExpr(createIdentifier(Identifiers.createRendererTypeV2)).callFn([\n              new LiteralMapExpr([\n                  new LiteralMapEntry('encapsulation', literal(component.template.encapsulation)),\n                  new LiteralMapEntry('styles', styles),\n                  new LiteralMapEntry('data', literalMap([\n                      ['animation', convertValueToOutputAst(component.template.animations)]\n                  ])),\n              ])\n          ]))\n              .toDeclStmt(importType(createIdentifier(Identifiers.RendererTypeV2)), [StmtModifier.Final]));\n          var viewBuilderFactory = function (parent) {\n              var embeddedViewIndex = embeddedViewCount++;\n              return new ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);\n          };\n          var visitor = viewBuilderFactory(null);\n          visitor.visitAll([], template);\n          statements.push.apply(statements, visitor.build());\n          return new ViewCompileResult(statements, visitor.viewName, renderComponentVar.name, []);\n      };\n      return ViewCompilerNext;\n  }(ViewCompiler));\n  ViewCompilerNext.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  ViewCompilerNext.ctorParameters = function () { return [\n      { type: CompilerConfig, },\n      { type: ElementSchemaRegistry, },\n  ]; };\n  var VIEW_VAR$1 = variable('view');\n  var CHECK_VAR = variable('check');\n  var COMP_VAR = variable('comp');\n  var NODE_INDEX_VAR = variable('nodeIndex');\n  var EVENT_NAME_VAR$1 = variable('eventName');\n  var ALLOW_DEFAULT_VAR = variable(\"allowDefault\");\n  var ViewBuilder = (function () {\n      function ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {\n          this.parent = parent;\n          this.component = component;\n          this.embeddedViewIndex = embeddedViewIndex;\n          this.usedPipes = usedPipes;\n          this.staticQueryIds = staticQueryIds;\n          this.viewBuilderFactory = viewBuilderFactory;\n          this.nodeDefs = [];\n          this.purePipeNodeIndices = Object.create(null);\n          // Need Object.create so that we don't have builtin values...\n          this.refNodeIndices = Object.create(null);\n          this.variables = [];\n          this.children = [];\n          this.updateDirectivesExpressions = [];\n          this.updateRendererExpressions = [];\n          // TODO(tbosch): The old view compiler used to use an `any` type\n          // for the context in any embedded view. We keep this behaivor for now\n          // to be able to introduce the new view compiler without too many errors.\n          this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : importType(this.component.type);\n      }\n      Object.defineProperty(ViewBuilder.prototype, \"viewName\", {\n          get: function () {\n              return viewClassName(this.component.type.reference, this.embeddedViewIndex);\n          },\n          enumerable: true,\n          configurable: true\n      });\n      ViewBuilder.prototype.visitAll = function (variables, astNodes) {\n          var _this = this;\n          this.variables = variables;\n          // create the pipes for the pure pipes immediately, so that we know their indices.\n          if (!this.parent) {\n              this.usedPipes.forEach(function (pipe) {\n                  if (pipe.pure) {\n                      _this.purePipeNodeIndices[pipe.name] = _this._createPipe(pipe);\n                  }\n              });\n          }\n          if (!this.parent) {\n              var queryIds_1 = staticViewQueryIds(this.staticQueryIds);\n              this.component.viewQueries.forEach(function (query, queryIndex) {\n                  // Note: queries start with id 1 so we can use the number in a Bloom filter!\n                  var queryId = queryIndex + 1;\n                  var bindingType = query.first ? _angular_core.ɵQueryBindingType.First : _angular_core.ɵQueryBindingType.All;\n                  var flags = _angular_core.ɵNodeFlags.HasViewQuery;\n                  if (queryIds_1.staticQueryIds.has(queryId)) {\n                      flags |= _angular_core.ɵNodeFlags.HasStaticQuery;\n                  }\n                  else {\n                      flags |= _angular_core.ɵNodeFlags.HasDynamicQuery;\n                  }\n                  _this.nodeDefs.push(function () { return importExpr(createIdentifier(Identifiers.queryDef)).callFn([\n                      literal(flags), literal(queryId),\n                      new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])\n                  ]); });\n              });\n          }\n          templateVisitAll(this, astNodes);\n          if (astNodes.length === 0 ||\n              (this.parent && needsAdditionalRootNode(astNodes[astNodes.length - 1]))) {\n              // if the view is empty, or an embedded view has a view container as last root nde,\n              // create an additional root node.\n              this.nodeDefs.push(function () { return importExpr(createIdentifier(Identifiers.anchorDef)).callFn([\n                  literal(_angular_core.ɵNodeFlags.None), NULL_EXPR, NULL_EXPR, literal(0)\n              ]); });\n          }\n      };\n      ViewBuilder.prototype.build = function (targetStatements) {\n          if (targetStatements === void 0) { targetStatements = []; }\n          this.children.forEach(function (child) { return child.build(targetStatements); });\n          var updateDirectivesFn = this._createUpdateFn(this.updateDirectivesExpressions);\n          var updateRendererFn = this._createUpdateFn(this.updateRendererExpressions);\n          var viewFlags = _angular_core.ɵViewFlags.None;\n          if (!this.parent && this.component.changeDetection === _angular_core.ChangeDetectionStrategy.OnPush) {\n              viewFlags |= _angular_core.ɵViewFlags.OnPush;\n          }\n          var viewFactory = new DeclareFunctionStmt(this.viewName, [], [new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([\n                  literal(viewFlags),\n                  literalArr(this.nodeDefs.map(function (nd) { return nd(); })),\n                  updateDirectivesFn,\n                  updateRendererFn,\n              ]))], importType(createIdentifier(Identifiers.ViewDefinition)));\n          targetStatements.push(viewFactory);\n          return targetStatements;\n      };\n      ViewBuilder.prototype._createUpdateFn = function (expressions) {\n          var _this = this;\n          var updateStmts = [];\n          var updateBindingCount = 0;\n          expressions.forEach(function (_a) {\n              var expressions = _a.expressions, nodeIndex = _a.nodeIndex;\n              var exprs = expressions.map(function (_a) {\n                  var context = _a.context, value = _a.value;\n                  var bindingId = \"\" + updateBindingCount++;\n                  var nameResolver = context === COMP_VAR ? _this : null;\n                  var _b = convertPropertyBinding(nameResolver, context, value, bindingId), stmts = _b.stmts, currValExpr = _b.currValExpr;\n                  updateStmts.push.apply(updateStmts, stmts);\n                  return currValExpr;\n              });\n              updateStmts.push(callCheckStmt(nodeIndex, exprs).toStmt());\n          });\n          var updateFn;\n          if (updateStmts.length > 0) {\n              var preStmts = [];\n              if (!this.component.isHost) {\n                  preStmts.push(COMP_VAR.set(VIEW_VAR$1.prop('component')).toDeclStmt(this.compType));\n              }\n              updateFn = fn([\n                  new FnParam(CHECK_VAR.name, INFERRED_TYPE),\n                  new FnParam(VIEW_VAR$1.name, INFERRED_TYPE)\n              ], preStmts.concat(updateStmts), INFERRED_TYPE);\n          }\n          else {\n              updateFn = NULL_EXPR;\n          }\n          return updateFn;\n      };\n      ViewBuilder.prototype.visitNgContent = function (ast, context) {\n          // ngContentDef(ngContentIndex: number, index: number): NodeDef;\n          this.nodeDefs.push(function () { return importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([\n              literal(ast.ngContentIndex), literal(ast.index)\n          ]); });\n      };\n      ViewBuilder.prototype.visitText = function (ast, context) {\n          // textDef(ngContentIndex: number, constants: string[]): NodeDef;\n          this.nodeDefs.push(function () { return importExpr(createIdentifier(Identifiers.textDef)).callFn([\n              literal(ast.ngContentIndex), literalArr([literal(ast.value)])\n          ]); });\n      };\n      ViewBuilder.prototype.visitBoundText = function (ast, context) {\n          var nodeIndex = this.nodeDefs.length;\n          // reserve the space in the nodeDefs array\n          this.nodeDefs.push(null);\n          var astWithSource = ast.value;\n          var inter = astWithSource.ast;\n          this._addUpdateExpressions(nodeIndex, inter.expressions.map(function (expr) { return { context: COMP_VAR, value: expr }; }), this.updateRendererExpressions);\n          // textDef(ngContentIndex: number, constants: string[]): NodeDef;\n          this.nodeDefs[nodeIndex] = function () { return importExpr(createIdentifier(Identifiers.textDef)).callFn([\n              literal(ast.ngContentIndex), literalArr(inter.strings.map(function (s) { return literal(s); }))\n          ]); };\n      };\n      ViewBuilder.prototype.visitEmbeddedTemplate = function (ast, context) {\n          var _this = this;\n          var nodeIndex = this.nodeDefs.length;\n          // reserve the space in the nodeDefs array\n          this.nodeDefs.push(null);\n          var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, queryMatchesExpr = _a.queryMatchesExpr, hostEvents = _a.hostEvents;\n          var childVisitor = this.viewBuilderFactory(this);\n          this.children.push(childVisitor);\n          childVisitor.visitAll(ast.variables, ast.children);\n          var childCount = this.nodeDefs.length - nodeIndex - 1;\n          // anchorDef(\n          //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\n          //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\n          //   ViewDefinitionFactory): NodeDef;\n          var nodeDef = function () { return importExpr(createIdentifier(Identifiers.anchorDef)).callFn([\n              literal(flags),\n              queryMatchesExpr,\n              literal(ast.ngContentIndex),\n              literal(childCount),\n              _this._createElementHandleEventFn(nodeIndex, hostEvents),\n              variable(childVisitor.viewName),\n          ]); };\n          this.nodeDefs[nodeIndex] = nodeDef;\n      };\n      ViewBuilder.prototype.visitElement = function (ast, context) {\n          var _this = this;\n          var nodeIndex = this.nodeDefs.length;\n          // reserve the space in the nodeDefs array so we can add children\n          this.nodeDefs.push(null);\n          var elName = ast.name;\n          if (ast.name === NG_CONTAINER_TAG$1) {\n              // Using a null element name creates an anchor.\n              elName = null;\n          }\n          var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, usedEvents = _a.usedEvents, queryMatchesExpr = _a.queryMatchesExpr, hostBindings = _a.hostBindings, hostEvents = _a.hostEvents;\n          var inputDefs = [];\n          var outputDefs = [];\n          if (elName) {\n              ast.inputs.forEach(function (inputAst) { return hostBindings.push({ context: COMP_VAR, value: inputAst.value }); });\n              if (hostBindings.length) {\n                  this._addUpdateExpressions(nodeIndex, hostBindings, this.updateRendererExpressions);\n              }\n              // Note: inputDefs have to be in the same order as hostBindings:\n              // - first the entries from the directives, then the ones from the element.\n              ast.directives.forEach(function (dirAst, dirIndex) {\n                  return inputDefs.push.apply(inputDefs, elementBindingDefs(dirAst.hostProperties, dirAst));\n              });\n              inputDefs.push.apply(inputDefs, elementBindingDefs(ast.inputs, null));\n              outputDefs = usedEvents.map(function (_a) {\n                  var target = _a[0], eventName = _a[1];\n                  return literalArr([literal(target), literal(eventName)]);\n              });\n          }\n          templateVisitAll(this, ast.children);\n          var childCount = this.nodeDefs.length - nodeIndex - 1;\n          var compAst = ast.directives.find(function (dirAst) { return dirAst.directive.isComponent; });\n          var compRendererType = NULL_EXPR;\n          var compView = NULL_EXPR;\n          if (compAst) {\n              compView = importExpr({ reference: compAst.directive.componentViewType });\n              compRendererType = importExpr({ reference: compAst.directive.rendererType });\n          }\n          // elementDef(\n          //   flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][],\n          //   ngContentIndex: number, childCount: number, namespaceAndName: string,\n          //   fixedAttrs: [string, string][] = [],\n          //   bindings?:\n          //       ([BindingType.ElementClass, string] | [BindingType.ElementStyle, string, string] |\n          //        [BindingType.ElementAttribute | BindingType.ElementProperty |\n          //        BindingType.DirectiveHostProperty, string, SecurityContext])[],\n          //   outputs?: ([OutputType.ElementOutput | OutputType.DirectiveHostOutput, string, string])[],\n          //   handleEvent?: ElementHandleEventFn,\n          //   componentView?: () => ViewDefinition, componentRendererType?: RendererTypeV2): NodeDef;\n          var nodeDef = function () { return importExpr(createIdentifier(Identifiers.elementDef)).callFn([\n              literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount),\n              literal(elName), elName ? fixedAttrsDef(ast) : NULL_EXPR,\n              inputDefs.length ? literalArr(inputDefs) : NULL_EXPR,\n              outputDefs.length ? literalArr(outputDefs) : NULL_EXPR,\n              _this._createElementHandleEventFn(nodeIndex, hostEvents), compView, compRendererType\n          ]); };\n          this.nodeDefs[nodeIndex] = nodeDef;\n      };\n      ViewBuilder.prototype._visitElementOrTemplate = function (nodeIndex, ast) {\n          var _this = this;\n          var flags = _angular_core.ɵNodeFlags.None;\n          if (ast.hasViewContainer) {\n              flags |= _angular_core.ɵNodeFlags.HasEmbeddedViews;\n          }\n          var usedEvents = new Map();\n          ast.outputs.forEach(function (event) {\n              var _a = elementEventNameAndTarget(event, null), name = _a.name, target = _a.target;\n              usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);\n          });\n          ast.directives.forEach(function (dirAst) {\n              dirAst.hostEvents.forEach(function (event) {\n                  var _a = elementEventNameAndTarget(event, dirAst), name = _a.name, target = _a.target;\n                  usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);\n              });\n          });\n          var hostBindings = [];\n          var hostEvents = [];\n          var componentFactoryResolverProvider = createComponentFactoryResolver(ast.directives);\n          if (componentFactoryResolverProvider) {\n              this._visitProvider(componentFactoryResolverProvider, ast.queryMatches);\n          }\n          ast.providers.forEach(function (providerAst, providerIndex) {\n              var dirAst;\n              var dirIndex;\n              ast.directives.forEach(function (localDirAst, i) {\n                  if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\n                      dirAst = localDirAst;\n                      dirIndex = i;\n                  }\n              });\n              if (dirAst) {\n                  var _a = _this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, _this.staticQueryIds.get(ast)), dirHostBindings = _a.hostBindings, dirHostEvents = _a.hostEvents;\n                  hostBindings.push.apply(hostBindings, dirHostBindings);\n                  hostEvents.push.apply(hostEvents, dirHostEvents);\n              }\n              else {\n                  _this._visitProvider(providerAst, ast.queryMatches);\n              }\n          });\n          var queryMatchExprs = [];\n          ast.queryMatches.forEach(function (match) {\n              var valueType;\n              if (tokenReference(match.value) === resolveIdentifier(Identifiers.ElementRef)) {\n                  valueType = _angular_core.ɵQueryValueType.ElementRef;\n              }\n              else if (tokenReference(match.value) === resolveIdentifier(Identifiers.ViewContainerRef)) {\n                  valueType = _angular_core.ɵQueryValueType.ViewContainerRef;\n              }\n              else if (tokenReference(match.value) === resolveIdentifier(Identifiers.TemplateRef)) {\n                  valueType = _angular_core.ɵQueryValueType.TemplateRef;\n              }\n              if (valueType != null) {\n                  queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));\n              }\n          });\n          ast.references.forEach(function (ref) {\n              var valueType;\n              if (!ref.value) {\n                  valueType = _angular_core.ɵQueryValueType.RenderElement;\n              }\n              else if (tokenReference(ref.value) === resolveIdentifier(Identifiers.TemplateRef)) {\n                  valueType = _angular_core.ɵQueryValueType.TemplateRef;\n              }\n              if (valueType != null) {\n                  _this.refNodeIndices[ref.name] = nodeIndex;\n                  queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));\n              }\n          });\n          ast.outputs.forEach(function (outputAst) {\n              hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: null });\n          });\n          return {\n              flags: flags,\n              usedEvents: Array.from(usedEvents.values()),\n              queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\n              hostBindings: hostBindings,\n              hostEvents: hostEvents\n          };\n      };\n      ViewBuilder.prototype._visitDirective = function (providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {\n          var _this = this;\n          var nodeIndex = this.nodeDefs.length;\n          // reserve the space in the nodeDefs array so we can add children\n          this.nodeDefs.push(null);\n          dirAst.directive.queries.forEach(function (query, queryIndex) {\n              var flags = _angular_core.ɵNodeFlags.HasContentQuery;\n              var queryId = dirAst.contentQueryStartId + queryIndex;\n              // Note: We only make queries static that query for a single item.\n              // This is because of backwards compatibility with the old view compiler...\n              if (queryIds.staticQueryIds.has(queryId) && query.first) {\n                  flags |= _angular_core.ɵNodeFlags.HasStaticQuery;\n              }\n              else {\n                  flags |= _angular_core.ɵNodeFlags.HasDynamicQuery;\n              }\n              var bindingType = query.first ? _angular_core.ɵQueryBindingType.First : _angular_core.ɵQueryBindingType.All;\n              _this.nodeDefs.push(function () { return importExpr(createIdentifier(Identifiers.queryDef)).callFn([\n                  literal(flags), literal(queryId),\n                  new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])\n              ]); });\n          });\n          // Note: the operation below might also create new nodeDefs,\n          // but we don't want them to be a child of a directive,\n          // as they might be a provider/pipe on their own.\n          // I.e. we only allow queries as children of directives nodes.\n          var childCount = this.nodeDefs.length - nodeIndex - 1;\n          var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, providerType = _a.providerType, depsExpr = _a.depsExpr;\n          refs.forEach(function (ref) {\n              if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\n                  _this.refNodeIndices[ref.name] = nodeIndex;\n                  queryMatchExprs.push(literalArr([literal(ref.name), literal(_angular_core.ɵQueryValueType.Provider)]));\n              }\n          });\n          if (dirAst.directive.isComponent) {\n              flags |= _angular_core.ɵNodeFlags.IsComponent;\n          }\n          var inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {\n              var mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);\n              // Note: it's important to not quote the key so that we can capture renames by minifiers!\n              return new LiteralMapEntry(inputAst.directiveName, mapValue, false);\n          });\n          var outputDefs = [];\n          var dirMeta = dirAst.directive;\n          Object.keys(dirMeta.outputs).forEach(function (propName) {\n              var eventName = dirMeta.outputs[propName];\n              if (usedEvents.has(eventName)) {\n                  // Note: it's important to not quote the key so that we can capture renames by minifiers!\n                  outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));\n              }\n          });\n          if (dirAst.inputs.length || (flags & (_angular_core.ɵNodeFlags.DoCheck | _angular_core.ɵNodeFlags.OnInit)) > 0) {\n              this._addUpdateExpressions(nodeIndex, dirAst.inputs.map(function (input) { return { context: COMP_VAR, value: input.value }; }), this.updateDirectivesExpressions);\n          }\n          var dirContextExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([\n              VIEW_VAR$1, literal(nodeIndex)\n          ]);\n          var hostBindings = dirAst.hostProperties.map(function (hostBindingAst) {\n              return {\n                  value: hostBindingAst.value.ast,\n                  context: dirContextExpr,\n              };\n          });\n          var hostEvents = dirAst.hostEvents.map(function (hostEventAst) { return { context: dirContextExpr, eventAst: hostEventAst, dirAst: dirAst }; });\n          // directiveDef(\n          //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], childCount: number, ctor:\n          //   any,\n          //   deps: ([DepFlags, any] | any)[], props?: {[name: string]: [number, string]},\n          //   outputs?: {[name: string]: string}, component?: () => ViewDefinition): NodeDef;\n          var nodeDef = function () { return importExpr(createIdentifier(Identifiers.directiveDef)).callFn([\n              literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\n              literal(childCount), providerExpr, depsExpr,\n              inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR,\n              outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR\n          ]); };\n          this.nodeDefs[nodeIndex] = nodeDef;\n          return { hostBindings: hostBindings, hostEvents: hostEvents };\n      };\n      ViewBuilder.prototype._visitProvider = function (providerAst, queryMatches) {\n          var nodeIndex = this.nodeDefs.length;\n          // reserve the space in the nodeDefs array so we can add children\n          this.nodeDefs.push(null);\n          var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, providerType = _a.providerType, depsExpr = _a.depsExpr;\n          // providerDef(\n          //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], type: ProviderType, token:\n          //   any,\n          //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n          var nodeDef = function () { return importExpr(createIdentifier(Identifiers.providerDef)).callFn([\n              literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\n              literal(providerType), tokenExpr(providerAst.token), providerExpr, depsExpr\n          ]); };\n          this.nodeDefs[nodeIndex] = nodeDef;\n      };\n      ViewBuilder.prototype._visitProviderOrDirective = function (providerAst, queryMatches) {\n          var flags = _angular_core.ɵNodeFlags.None;\n          if (!providerAst.eager) {\n              flags |= _angular_core.ɵNodeFlags.LazyProvider;\n          }\n          if (providerAst.providerType === exports.ProviderAstType.PrivateService) {\n              flags |= _angular_core.ɵNodeFlags.PrivateProvider;\n          }\n          providerAst.lifecycleHooks.forEach(function (lifecycleHook) {\n              // for regular providers, we only support ngOnDestroy\n              if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy ||\n                  providerAst.providerType === exports.ProviderAstType.Directive ||\n                  providerAst.providerType === exports.ProviderAstType.Component) {\n                  flags |= lifecycleHookToNodeFlag(lifecycleHook);\n              }\n          });\n          var queryMatchExprs = [];\n          queryMatches.forEach(function (match) {\n              if (tokenReference(match.value) === tokenReference(providerAst.token)) {\n                  queryMatchExprs.push(literalArr([literal(match.queryId), literal(_angular_core.ɵQueryValueType.Provider)]));\n              }\n          });\n          var _a = providerDef(providerAst), providerExpr = _a.providerExpr, providerType = _a.providerType, depsExpr = _a.depsExpr;\n          return { flags: flags, queryMatchExprs: queryMatchExprs, providerExpr: providerExpr, providerType: providerType, depsExpr: depsExpr };\n      };\n      ViewBuilder.prototype.getLocal = function (name) {\n          if (name == EventHandlerVars.event.name) {\n              return EventHandlerVars.event;\n          }\n          var currViewExpr = VIEW_VAR$1;\n          for (var currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop('parent')) {\n              // check references\n              var refNodeIndex = currBuilder.refNodeIndices[name];\n              if (refNodeIndex != null) {\n                  return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([\n                      currViewExpr, literal(refNodeIndex)\n                  ]);\n              }\n              // check variables\n              var varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });\n              if (varAst) {\n                  var varValue = varAst.value || IMPLICIT_TEMPLATE_VAR$1;\n                  return currViewExpr.prop('context').prop(varValue);\n              }\n          }\n          return null;\n      };\n      ViewBuilder.prototype.createLiteralArrayConverter = function (argCount) {\n          if (argCount === 0) {\n              var valueExpr_1 = importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));\n              return function () { return valueExpr_1; };\n          }\n          var nodeIndex = this.nodeDefs.length;\n          // pureArrayDef(argCount: number): NodeDef;\n          var nodeDef = function () {\n              return importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([literal(argCount)]);\n          };\n          this.nodeDefs.push(nodeDef);\n          return function (args) { return callCheckStmt(nodeIndex, args); };\n      };\n      ViewBuilder.prototype.createLiteralMapConverter = function (keys) {\n          if (keys.length === 0) {\n              var valueExpr_2 = importExpr(createIdentifier(Identifiers.EMPTY_MAP));\n              return function () { return valueExpr_2; };\n          }\n          var nodeIndex = this.nodeDefs.length;\n          // function pureObjectDef(propertyNames: string[]): NodeDef\n          var nodeDef = function () {\n              return importExpr(createIdentifier(Identifiers.pureObjectDef)).callFn([literalArr(keys.map(function (key) { return literal(key); }))]);\n          };\n          this.nodeDefs.push(nodeDef);\n          return function (args) { return callCheckStmt(nodeIndex, args); };\n      };\n      ViewBuilder.prototype.createPipeConverter = function (name, argCount) {\n          var pipe = this._findPipe(name);\n          if (pipe.pure) {\n              var nodeIndex_1 = this.nodeDefs.length;\n              // function purePipeDef(argCount: number): NodeDef;\n              var nodeDef = function () {\n                  return importExpr(createIdentifier(Identifiers.purePipeDef)).callFn([literal(argCount)]);\n              };\n              this.nodeDefs.push(nodeDef);\n              // find underlying pipe in the component view\n              var compViewExpr = VIEW_VAR$1;\n              var compBuilder = this;\n              while (compBuilder.parent) {\n                  compBuilder = compBuilder.parent;\n                  compViewExpr = compViewExpr.prop('parent');\n              }\n              var pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\n              var pipeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([\n                  compViewExpr, literal(pipeNodeIndex)\n              ]);\n              return function (args) {\n                  return callUnwrapValue(callCheckStmt(nodeIndex_1, [pipeValueExpr_1].concat(args)));\n              };\n          }\n          else {\n              var nodeIndex = this._createPipe(pipe);\n              var nodeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([\n                  VIEW_VAR$1, literal(nodeIndex)\n              ]);\n              return function (args) { return callUnwrapValue(nodeValueExpr_1.callMethod('transform', args)); };\n          }\n      };\n      ViewBuilder.prototype._findPipe = function (name) {\n          return this.usedPipes.find(function (pipeSummary) { return pipeSummary.name === name; });\n      };\n      ViewBuilder.prototype._createPipe = function (pipe) {\n          var nodeIndex = this.nodeDefs.length;\n          var flags = _angular_core.ɵNodeFlags.None;\n          pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {\n              // for pipes, we only support ngOnDestroy\n              if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy) {\n                  flags |= lifecycleHookToNodeFlag(lifecycleHook);\n              }\n          });\n          var depExprs = pipe.type.diDeps.map(depDef);\n          // function pipeDef(\n          //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\n          var nodeDef = function () { return importExpr(createIdentifier(Identifiers.pipeDef)).callFn([\n              literal(flags), importExpr(pipe.type), literalArr(depExprs)\n          ]); };\n          this.nodeDefs.push(nodeDef);\n          return nodeIndex;\n      };\n      // Attention: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\n      ViewBuilder.prototype._addUpdateExpressions = function (nodeIndex, expressions, target) {\n          var _this = this;\n          var transformedExpressions = expressions.map(function (_a) {\n              var context = _a.context, value = _a.value;\n              if (value instanceof ASTWithSource) {\n                  value = value.ast;\n              }\n              return { context: context, value: convertPropertyBindingBuiltins(_this, value) };\n          });\n          target.push({ nodeIndex: nodeIndex, expressions: transformedExpressions });\n      };\n      ViewBuilder.prototype._createElementHandleEventFn = function (nodeIndex, handlers) {\n          var _this = this;\n          var handleEventStmts = [];\n          var handleEventBindingCount = 0;\n          handlers.forEach(function (_a) {\n              var context = _a.context, eventAst = _a.eventAst, dirAst = _a.dirAst;\n              var bindingId = \"\" + handleEventBindingCount++;\n              var nameResolver = context === COMP_VAR ? _this : null;\n              var expression = eventAst.handler instanceof ASTWithSource ? eventAst.handler.ast : eventAst.handler;\n              var _b = convertActionBinding(nameResolver, context, expression, bindingId), stmts = _b.stmts, allowDefault = _b.allowDefault;\n              var trueStmts = stmts;\n              if (allowDefault) {\n                  trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\n              }\n              var _c = elementEventNameAndTarget(eventAst, dirAst), eventTarget = _c.target, eventName = _c.name;\n              var fullEventName = _angular_core.ɵelementEventFullName(eventTarget, eventName);\n              handleEventStmts.push(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR$1), trueStmts));\n          });\n          var handleEventFn;\n          if (handleEventStmts.length > 0) {\n              var preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];\n              if (!this.component.isHost) {\n                  preStmts.push(COMP_VAR.set(VIEW_VAR$1.prop('component')).toDeclStmt(this.compType));\n              }\n              handleEventFn = fn([\n                  new FnParam(VIEW_VAR$1.name, INFERRED_TYPE),\n                  new FnParam(EVENT_NAME_VAR$1.name, INFERRED_TYPE),\n                  new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)\n              ], preStmts.concat(handleEventStmts, [new ReturnStatement(ALLOW_DEFAULT_VAR)]), INFERRED_TYPE);\n          }\n          else {\n              handleEventFn = NULL_EXPR;\n          }\n          return handleEventFn;\n      };\n      ViewBuilder.prototype.visitDirective = function (ast, context) { };\n      ViewBuilder.prototype.visitDirectiveProperty = function (ast, context) { };\n      ViewBuilder.prototype.visitReference = function (ast, context) { };\n      ViewBuilder.prototype.visitVariable = function (ast, context) { };\n      ViewBuilder.prototype.visitEvent = function (ast, context) { };\n      ViewBuilder.prototype.visitElementProperty = function (ast, context) { };\n      ViewBuilder.prototype.visitAttr = function (ast, context) { };\n      return ViewBuilder;\n  }());\n  function providerDef(providerAst) {\n      return providerAst.multiProvider ? multiProviderDef(providerAst.providers) :\n          singleProviderDef(providerAst.providers[0]);\n  }\n  function multiProviderDef(providers) {\n      var allDepDefs = [];\n      var allParams = [];\n      var exprs = providers.map(function (provider, providerIndex) {\n          var expr;\n          if (provider.useClass) {\n              var depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);\n              expr = importExpr(provider.useClass).instantiate(depExprs);\n          }\n          else if (provider.useFactory) {\n              var depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);\n              expr = importExpr(provider.useFactory).callFn(depExprs);\n          }\n          else if (provider.useExisting) {\n              var depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);\n              expr = depExprs[0];\n          }\n          else {\n              expr = convertValueToOutputAst(provider.useValue);\n          }\n          return expr;\n      });\n      var providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);\n      return { providerExpr: providerExpr, providerType: _angular_core.ɵProviderType.Factory, depsExpr: literalArr(allDepDefs) };\n      function convertDeps(providerIndex, deps) {\n          return deps.map(function (dep, depIndex) {\n              var paramName = \"p\" + providerIndex + \"_\" + depIndex;\n              allParams.push(new FnParam(paramName, DYNAMIC_TYPE));\n              allDepDefs.push(depDef(dep));\n              return variable(paramName);\n          });\n      }\n  }\n  function singleProviderDef(providerMeta) {\n      var providerExpr;\n      var providerType;\n      var deps;\n      if (providerMeta.useClass) {\n          providerExpr = importExpr(providerMeta.useClass);\n          providerType = _angular_core.ɵProviderType.Class;\n          deps = providerMeta.deps || providerMeta.useClass.diDeps;\n      }\n      else if (providerMeta.useFactory) {\n          providerExpr = importExpr(providerMeta.useFactory);\n          providerType = _angular_core.ɵProviderType.Factory;\n          deps = providerMeta.deps || providerMeta.useFactory.diDeps;\n      }\n      else if (providerMeta.useExisting) {\n          providerExpr = NULL_EXPR;\n          providerType = _angular_core.ɵProviderType.UseExisting;\n          deps = [{ token: providerMeta.useExisting }];\n      }\n      else {\n          providerExpr = convertValueToOutputAst(providerMeta.useValue);\n          providerType = _angular_core.ɵProviderType.Value;\n          deps = [];\n      }\n      var depsExpr = literalArr(deps.map(function (dep) { return depDef(dep); }));\n      return { providerExpr: providerExpr, providerType: providerType, depsExpr: depsExpr };\n  }\n  function tokenExpr(tokenMeta) {\n      return tokenMeta.identifier ? importExpr(tokenMeta.identifier) : literal(tokenMeta.value);\n  }\n  function depDef(dep) {\n      // Note: the following fields have already been normalized out by provider_analyzer:\n      // - isAttribute, isSelf, isHost\n      var expr = dep.isValue ? convertValueToOutputAst(dep.value) : tokenExpr(dep.token);\n      var flags = _angular_core.ɵDepFlags.None;\n      if (dep.isSkipSelf) {\n          flags |= _angular_core.ɵDepFlags.SkipSelf;\n      }\n      if (dep.isOptional) {\n          flags |= _angular_core.ɵDepFlags.Optional;\n      }\n      if (dep.isValue) {\n          flags |= _angular_core.ɵDepFlags.Value;\n      }\n      return flags === _angular_core.ɵDepFlags.None ? expr : literalArr([literal(flags), expr]);\n  }\n  function needsAdditionalRootNode(ast) {\n      if (ast instanceof EmbeddedTemplateAst) {\n          return ast.hasViewContainer;\n      }\n      if (ast instanceof ElementAst) {\n          if (ast.name === NG_CONTAINER_TAG$1 && ast.children.length) {\n              return needsAdditionalRootNode(ast.children[ast.children.length - 1]);\n          }\n          return ast.hasViewContainer;\n      }\n      return ast instanceof NgContentAst;\n  }\n  function lifecycleHookToNodeFlag(lifecycleHook) {\n      var nodeFlag = _angular_core.ɵNodeFlags.None;\n      switch (lifecycleHook) {\n          case _angular_core.ɵLifecycleHooks.AfterContentChecked:\n              nodeFlag = _angular_core.ɵNodeFlags.AfterContentChecked;\n              break;\n          case _angular_core.ɵLifecycleHooks.AfterContentInit:\n              nodeFlag = _angular_core.ɵNodeFlags.AfterContentInit;\n              break;\n          case _angular_core.ɵLifecycleHooks.AfterViewChecked:\n              nodeFlag = _angular_core.ɵNodeFlags.AfterViewChecked;\n              break;\n          case _angular_core.ɵLifecycleHooks.AfterViewInit:\n              nodeFlag = _angular_core.ɵNodeFlags.AfterViewInit;\n              break;\n          case _angular_core.ɵLifecycleHooks.DoCheck:\n              nodeFlag = _angular_core.ɵNodeFlags.DoCheck;\n              break;\n          case _angular_core.ɵLifecycleHooks.OnChanges:\n              nodeFlag = _angular_core.ɵNodeFlags.OnChanges;\n              break;\n          case _angular_core.ɵLifecycleHooks.OnDestroy:\n              nodeFlag = _angular_core.ɵNodeFlags.OnDestroy;\n              break;\n          case _angular_core.ɵLifecycleHooks.OnInit:\n              nodeFlag = _angular_core.ɵNodeFlags.OnInit;\n              break;\n      }\n      return nodeFlag;\n  }\n  function elementBindingDefs(inputAsts, dirAst) {\n      return inputAsts.map(function (inputAst) {\n          switch (inputAst.type) {\n              case exports.PropertyBindingType.Attribute:\n                  return literalArr([\n                      literal(_angular_core.ɵBindingType.ElementAttribute), literal(inputAst.name),\n                      literal(inputAst.securityContext)\n                  ]);\n              case exports.PropertyBindingType.Property:\n                  return literalArr([\n                      literal(_angular_core.ɵBindingType.ElementProperty), literal(inputAst.name),\n                      literal(inputAst.securityContext)\n                  ]);\n              case exports.PropertyBindingType.Animation:\n                  var bindingType = dirAst && dirAst.directive.isComponent ?\n                      _angular_core.ɵBindingType.ComponentHostProperty :\n                      _angular_core.ɵBindingType.ElementProperty;\n                  return literalArr([\n                      literal(bindingType), literal('@' + inputAst.name),\n                      literal(inputAst.securityContext)\n                  ]);\n              case exports.PropertyBindingType.Class:\n                  return literalArr([literal(_angular_core.ɵBindingType.ElementClass), literal(inputAst.name)]);\n              case exports.PropertyBindingType.Style:\n                  return literalArr([\n                      literal(_angular_core.ɵBindingType.ElementStyle), literal(inputAst.name), literal(inputAst.unit)\n                  ]);\n          }\n      });\n  }\n  function fixedAttrsDef(elementAst) {\n      var mapResult = Object.create(null);\n      elementAst.attrs.forEach(function (attrAst) { mapResult[attrAst.name] = attrAst.value; });\n      elementAst.directives.forEach(function (dirAst) {\n          Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {\n              var value = dirAst.directive.hostAttributes[name];\n              var prevValue = mapResult[name];\n              mapResult[name] = prevValue != null ? mergeAttributeValue$1(name, prevValue, value) : value;\n          });\n      });\n      var mapEntries = [];\n      // Note: We need to sort to get a defined output order\n      // for tests and for caching generated artifacts...\n      return literalArr(Object.keys(mapResult).sort().map(function (attrName) { return literalArr([literal(attrName), literal(mapResult[attrName])]); }));\n  }\n  function mergeAttributeValue$1(attrName, attrValue1, attrValue2) {\n      if (attrName == CLASS_ATTR$2 || attrName == STYLE_ATTR$1) {\n          return attrValue1 + \" \" + attrValue2;\n      }\n      else {\n          return attrValue2;\n      }\n  }\n  function callCheckStmt(nodeIndex, exprs) {\n      if (exprs.length > 10) {\n          return CHECK_VAR.callFn([VIEW_VAR$1, literal(nodeIndex), literal(_angular_core.ɵArgumentType.Dynamic), literalArr(exprs)]);\n      }\n      else {\n          return CHECK_VAR.callFn([VIEW_VAR$1, literal(nodeIndex), literal(_angular_core.ɵArgumentType.Inline)].concat(exprs));\n      }\n  }\n  function callUnwrapValue(expr) {\n      return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([expr]);\n  }\n  function findStaticQueryIds(nodes, result) {\n      if (result === void 0) { result = new Map(); }\n      nodes.forEach(function (node) {\n          var staticQueryIds = new Set();\n          var dynamicQueryIds = new Set();\n          var queryMatches;\n          if (node instanceof ElementAst) {\n              findStaticQueryIds(node.children, result);\n              node.children.forEach(function (child) {\n                  var childData = result.get(child);\n                  childData.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });\n                  childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n              });\n              queryMatches = node.queryMatches;\n          }\n          else if (node instanceof EmbeddedTemplateAst) {\n              findStaticQueryIds(node.children, result);\n              node.children.forEach(function (child) {\n                  var childData = result.get(child);\n                  childData.staticQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n                  childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n              });\n              queryMatches = node.queryMatches;\n          }\n          if (queryMatches) {\n              queryMatches.forEach(function (match) { return staticQueryIds.add(match.queryId); });\n          }\n          dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });\n          result.set(node, { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds });\n      });\n      return result;\n  }\n  function staticViewQueryIds(nodeStaticQueryIds) {\n      var staticQueryIds = new Set();\n      var dynamicQueryIds = new Set();\n      Array.from(nodeStaticQueryIds.values()).forEach(function (entry) {\n          entry.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });\n          entry.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n      });\n      dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });\n      return { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds };\n  }\n  function createComponentFactoryResolver(directives) {\n      var componentDirMeta = directives.find(function (dirAst) { return dirAst.directive.isComponent; });\n      if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\n          var entryComponentFactories = componentDirMeta.directive.entryComponents.map(function (entryComponent) { return importExpr({ reference: entryComponent.componentFactory }); });\n          var cfrExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver))\n              .instantiate([literalArr(entryComponentFactories)]);\n          var token = createIdentifierToken(Identifiers.ComponentFactoryResolver);\n          var classMeta = {\n              diDeps: [\n                  { isValue: true, value: literalArr(entryComponentFactories) },\n                  { token: token, isSkipSelf: true, isOptional: true }\n              ],\n              lifecycleHooks: [],\n              reference: resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)\n          };\n          return new ProviderAst(token, false, true, [{ token: token, multi: false, useClass: classMeta }], exports.ProviderAstType.PrivateService, [], componentDirMeta.sourceSpan);\n      }\n      return null;\n  }\n  function elementEventNameAndTarget(eventAst, dirAst) {\n      if (eventAst.isAnimation) {\n          return {\n              name: \"@\" + eventAst.name + \".\" + eventAst.phase,\n              target: dirAst && dirAst.directive.isComponent ? 'component' : null\n          };\n      }\n      else {\n          return eventAst;\n      }\n  }\n\n  var AnimationEntryCompileResult = (function () {\n      function AnimationEntryCompileResult(name, statements, fnExp) {\n          this.name = name;\n          this.statements = statements;\n          this.fnExp = fnExp;\n      }\n      return AnimationEntryCompileResult;\n  }());\n  var AnimationCompiler = (function () {\n      function AnimationCompiler() {\n      }\n      AnimationCompiler.prototype.compile = function (factoryNamePrefix, parsedAnimations) {\n          return parsedAnimations.map(function (entry) {\n              var factoryName = factoryNamePrefix + \"_\" + entry.name;\n              var visitor = new _AnimationBuilder(entry.name, factoryName);\n              return visitor.build(entry);\n          });\n      };\n      return AnimationCompiler;\n  }());\n  var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');\n  var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');\n  var _ANIMATION_FACTORY_VIEW_VAR = variable('view');\n  var _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');\n  var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');\n  var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');\n  var _ANIMATION_NEXT_STATE_VAR = variable('nextState');\n  var _ANIMATION_PLAYER_VAR = variable('player');\n  var _ANIMATION_TIME_VAR = variable('totalTime');\n  var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');\n  var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');\n  var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');\n  var _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');\n  var _EMPTY_MAP = literalMap([]);\n  var _EMPTY_ARRAY = literalArr([]);\n  var _AnimationBuilder = (function () {\n      function _AnimationBuilder(animationName, factoryName) {\n          this.animationName = animationName;\n          this._fnVarName = factoryName + '_factory';\n          this._statesMapVarName = factoryName + '_states';\n          this._statesMapVar = variable(this._statesMapVarName);\n      }\n      _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {\n          var stylesArr = [];\n          if (context.isExpectingFirstStyleStep) {\n              stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);\n              context.isExpectingFirstStyleStep = false;\n          }\n          ast.styles.forEach(function (entry) {\n              var entries = Object.keys(entry).map(function (key) { return [key, literal(entry[key])]; });\n              stylesArr.push(literalMap(entries, null, true));\n          });\n          return importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([\n              importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([\n                  _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)\n              ])\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {\n          return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([\n              literal(ast.offset), ast.styles.visit(this, context)\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {\n          var _this = this;\n          if (context.endStateAnimateStep === ast) {\n              return this._visitEndStateAnimation(ast, context);\n          }\n          var startingStylesExpr = ast.startingStyles.visit(this, context);\n          var keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });\n          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);\n      };\n      /** @internal */\n      _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {\n          var _this = this;\n          var startingStylesExpr = ast.startingStyles.visit(this, context);\n          var keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });\n          var keyframesExpr = importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([\n              _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,\n              literalArr(keyframeExpressions)\n          ]);\n          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);\n      };\n      /** @internal */\n      _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {\n          var previousStylesValue = _EMPTY_ARRAY;\n          if (context.isExpectingFirstAnimateStep) {\n              previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;\n              context.isExpectingFirstAnimateStep = false;\n          }\n          context.totalTransitionTime += ast.duration + ast.delay;\n          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [\n              _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),\n              literal(ast.delay), literal(ast.easing), previousStylesValue\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {\n          var _this = this;\n          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });\n          return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([\n              literalArr(playerExprs)\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {\n          var _this = this;\n          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });\n          return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([\n              literalArr(playerExprs)\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {\n          var flatStyles = {};\n          _getStylesArray(ast).forEach(function (entry) { Object.keys(entry).forEach(function (key) { flatStyles[key] = entry[key]; }); });\n          context.stateMap.registerState(ast.stateName, flatStyles);\n      };\n      _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {\n          var steps = ast.animation.steps;\n          var lastStep = steps[steps.length - 1];\n          if (_isEndStateAnimateStep(lastStep)) {\n              context.endStateAnimateStep = lastStep;\n          }\n          context.totalTransitionTime = 0;\n          context.isExpectingFirstStyleStep = true;\n          context.isExpectingFirstAnimateStep = true;\n          var stateChangePreconditions = [];\n          ast.stateChanges.forEach(function (stateChange) {\n              if (stateChange instanceof AnimationStateTransitionFnExpression) {\n                  stateChangePreconditions.push(importExpr({ reference: stateChange.fn }).callFn([\n                      _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR\n                  ]));\n              }\n              else {\n                  stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)\n                      .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));\n                  if (stateChange.fromState != _angular_core.ɵANY_STATE) {\n                      context.stateMap.registerState(stateChange.fromState);\n                  }\n                  if (stateChange.toState != _angular_core.ɵANY_STATE) {\n                      context.stateMap.registerState(stateChange.toState);\n                  }\n              }\n          });\n          var animationPlayerExpr = ast.animation.visit(this, context);\n          var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });\n          var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);\n          var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();\n          var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();\n          return new IfStmt(precondition, [animationStmt, totalTimeStmt]);\n      };\n      _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {\n          var _this = this;\n          // visit each of the declarations first to build the context state map\n          ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });\n          // this should always be defined even if the user overrides it\n          context.stateMap.registerState(_angular_core.ɵDEFAULT_STATE, {});\n          var statements = [];\n          statements.push(_PREVIOUS_ANIMATION_PLAYERS\n              .set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [\n              _ANIMATION_FACTORY_ELEMENT_VAR,\n              _ANIMATION_NEXT_STATE_VAR.equals(literal(_angular_core.ɵEMPTY_STATE))\n                  .conditional(NULL_EXPR, literal(this.animationName))\n          ]))\n              .toDeclStmt());\n          statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());\n          statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());\n          statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());\n          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(_angular_core.ɵDEFAULT_STATE)))\n              .toDeclStmt());\n          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))\n              .toDeclStmt());\n          statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));\n          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))\n              .toDeclStmt());\n          statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));\n          var RENDER_STYLES_FN = importExpr(createIdentifier(Identifiers.renderStyles));\n          ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });\n          // this check ensures that the animation factory always returns a player\n          // so that the onDone callback can be used for tracking\n          statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR\n                  .set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))\n                  .toStmt()]));\n          // once complete we want to apply the styles on the element\n          // since the destination state's values should persist once\n          // the animation sequence has completed.\n          statements.push(_ANIMATION_PLAYER_VAR\n              .callMethod('onDone', [fn([], [\n                  _ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(),\n                  RENDER_STYLES_FN\n                      .callFn([\n                      _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,\n                      importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles))\n                          .callFn([\n                          _ANIMATION_START_STATE_STYLES_VAR,\n                          _ANIMATION_END_STATE_STYLES_VAR\n                      ])\n                  ])\n                      .toStmt()\n              ])])\n              .toStmt());\n          statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer))\n              .instantiate([_PREVIOUS_ANIMATION_PLAYERS])\n              .callMethod('destroy', [])\n              .toStmt());\n          // before we start any animation we want to clear out the starting\n          // styles from the element's style property (since they were placed\n          // there at the end of the last animation\n          statements.push(RENDER_STYLES_FN\n              .callFn([\n              _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,\n              importExpr(createIdentifier(Identifiers.clearStyles))\n                  .callFn([_ANIMATION_START_STATE_STYLES_VAR])\n          ])\n              .toStmt());\n          statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT\n              .callMethod('queueAnimation', [\n              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),\n              _ANIMATION_PLAYER_VAR\n          ])\n              .toStmt());\n          statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([\n              _ANIMATION_PLAYER_VAR, _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),\n              _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR\n          ])));\n          return fn([\n              new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n              new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),\n              new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),\n              new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)\n          ], statements, importType(createIdentifier(Identifiers.AnimationTransition)));\n      };\n      _AnimationBuilder.prototype.build = function (ast) {\n          var context = new _AnimationBuilderContext();\n          var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);\n          var fnVariable = variable(this._fnVarName);\n          var lookupMap = [];\n          Object.keys(context.stateMap.states).forEach(function (stateName) {\n              var value = context.stateMap.states[stateName];\n              var variableValue = _EMPTY_MAP;\n              if (isPresent(value)) {\n                  var styleMap_1 = [];\n                  Object.keys(value).forEach(function (key) { styleMap_1.push([key, literal(value[key])]); });\n                  variableValue = literalMap(styleMap_1, null, true);\n              }\n              lookupMap.push([stateName, variableValue]);\n          });\n          var compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap, null, true)).toDeclStmt();\n          var statements = [compiledStatesMapStmt, fnStatement];\n          return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);\n      };\n      return _AnimationBuilder;\n  }());\n  var _AnimationBuilderContext = (function () {\n      function _AnimationBuilderContext() {\n          this.stateMap = new _AnimationBuilderStateMap();\n          this.endStateAnimateStep = null;\n          this.isExpectingFirstStyleStep = false;\n          this.isExpectingFirstAnimateStep = false;\n          this.totalTransitionTime = 0;\n      }\n      return _AnimationBuilderContext;\n  }());\n  var _AnimationBuilderStateMap = (function () {\n      function _AnimationBuilderStateMap() {\n          this._states = {};\n      }\n      Object.defineProperty(_AnimationBuilderStateMap.prototype, \"states\", {\n          get: function () { return this._states; },\n          enumerable: true,\n          configurable: true\n      });\n      _AnimationBuilderStateMap.prototype.registerState = function (name, value) {\n          if (value === void 0) { value = null; }\n          var existingEntry = this._states[name];\n          if (!existingEntry) {\n              this._states[name] = value;\n          }\n      };\n      return _AnimationBuilderStateMap;\n  }());\n  function _compareToAnimationStateExpr(value, animationState) {\n      var emptyStateLiteral = literal(_angular_core.ɵEMPTY_STATE);\n      switch (animationState) {\n          case _angular_core.ɵEMPTY_STATE:\n              return value.equals(emptyStateLiteral);\n          case _angular_core.ɵANY_STATE:\n              return literal(true);\n          default:\n              return value.equals(literal(animationState));\n      }\n  }\n  function _isEndStateAnimateStep(step) {\n      // the final animation step is characterized by having only TWO\n      // keyframe values and it must have zero styles for both keyframes\n      if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {\n          var styles1 = _getStylesArray(step.keyframes[0])[0];\n          var styles2 = _getStylesArray(step.keyframes[1])[0];\n          return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;\n      }\n      return false;\n  }\n  function _getStylesArray(obj) {\n      return obj.styles.styles;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var GeneratedFile = (function () {\n      function GeneratedFile(srcFileUrl, genFileUrl, source) {\n          this.srcFileUrl = srcFileUrl;\n          this.genFileUrl = genFileUrl;\n          this.source = source;\n      }\n      return GeneratedFile;\n  }());\n\n  var __extends$27 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  function serializeSummaries(summaryResolver, symbolResolver, symbols, types) {\n      var serializer = new Serializer$1(symbolResolver, summaryResolver);\n      // for symbols, we use everything except for the class metadata itself\n      // (we keep the statics though), as the class metadata is contained in the\n      // CompileTypeSummary.\n      symbols.forEach(function (resolvedSymbol) { return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }); });\n      // Add summaries that are referenced by the given symbols (transitively)\n      // Note: the serializer.symbols array might be growing while\n      // we execute the loop!\n      for (var processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {\n          var symbol = serializer.symbols[processedIndex];\n          if (summaryResolver.isLibraryFile(symbol.filePath)) {\n              var summary = summaryResolver.resolveSummary(symbol);\n              if (!summary) {\n                  // some symbols might originate from a plain typescript library\n                  // that just exported .d.ts and .metadata.json files, i.e. where no summary\n                  // files were created.\n                  var resolvedSymbol = symbolResolver.resolveSymbol(symbol);\n                  if (resolvedSymbol) {\n                      summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };\n                  }\n              }\n              if (summary) {\n                  serializer.addOrMergeSummary(summary);\n              }\n          }\n      }\n      // Add type summaries.\n      // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n      // as the type summaries already contain the transitive data that they require\n      // (in a minimal way).\n      types.forEach(function (typeSummary) {\n          serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: { __symbolic: 'class' }, type: typeSummary });\n          if (typeSummary.summaryKind === exports.CompileSummaryKind.NgModule) {\n              var ngModuleSummary = typeSummary;\n              ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {\n                  var symbol = id.reference;\n                  if (summaryResolver.isLibraryFile(symbol.filePath)) {\n                      var summary = summaryResolver.resolveSummary(symbol);\n                      if (summary) {\n                          serializer.addOrMergeSummary(summary);\n                      }\n                  }\n              });\n          }\n      });\n      return serializer.serialize();\n  }\n  function deserializeSummaries(symbolCache, json) {\n      var deserializer = new Deserializer(symbolCache);\n      return deserializer.deserialize(json);\n  }\n  var Serializer$1 = (function (_super) {\n      __extends$27(Serializer, _super);\n      function Serializer(symbolResolver, summaryResolver) {\n          var _this = _super.call(this) || this;\n          _this.symbolResolver = symbolResolver;\n          _this.summaryResolver = summaryResolver;\n          // Note: This only contains symbols without members.\n          _this.symbols = [];\n          _this.indexBySymbol = new Map();\n          // This now contains a `__symbol: number` in the place of\n          // StaticSymbols, but otherwise has the same shape as the original objects.\n          _this.processedSummaryBySymbol = new Map();\n          _this.processedSummaries = [];\n          return _this;\n      }\n      Serializer.prototype.addOrMergeSummary = function (summary) {\n          var symbolMeta = summary.metadata;\n          if (symbolMeta && symbolMeta.__symbolic === 'class') {\n              // For classes, we only keep their statics and arity, but not the metadata\n              // of the class itself as that has been captured already via other summaries\n              // (e.g. DirectiveSummary, ...).\n              symbolMeta = { __symbolic: 'class', statics: symbolMeta.statics, arity: symbolMeta.arity };\n          }\n          var processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n          if (!processedSummary) {\n              processedSummary = this.processValue({ symbol: summary.symbol });\n              this.processedSummaries.push(processedSummary);\n              this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n          }\n          // Note: == on purpose to compare with undefined!\n          if (processedSummary.metadata == null && symbolMeta != null) {\n              processedSummary.metadata = this.processValue(symbolMeta);\n          }\n          // Note: == on purpose to compare with undefined!\n          if (processedSummary.type == null && summary.type != null) {\n              processedSummary.type = this.processValue(summary.type);\n          }\n      };\n      Serializer.prototype.serialize = function () {\n          var _this = this;\n          var exportAs = [];\n          var json = JSON.stringify({\n              summaries: this.processedSummaries,\n              symbols: this.symbols.map(function (symbol, index) {\n                  symbol.assertNoMembers();\n                  var importAs;\n                  if (_this.summaryResolver.isLibraryFile(symbol.filePath)) {\n                      importAs = symbol.name + \"_\" + index;\n                      exportAs.push({ symbol: symbol, exportAs: importAs });\n                  }\n                  return {\n                      __symbol: index,\n                      name: symbol.name,\n                      // We convert the source filenames tinto output filenames,\n                      // as the generated summary file will be used when teh current\n                      // compilation unit is used as a library\n                      filePath: _this.summaryResolver.getLibraryFileName(symbol.filePath),\n                      importAs: importAs\n                  };\n              })\n          });\n          return { json: json, exportAs: exportAs };\n      };\n      Serializer.prototype.processValue = function (value) { return visitValue(value, this, null); };\n      Serializer.prototype.visitOther = function (value, context) {\n          if (value instanceof StaticSymbol) {\n              var baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n              var index = this.indexBySymbol.get(baseSymbol);\n              // Note: == on purpose to compare with undefined!\n              if (index == null) {\n                  index = this.indexBySymbol.size;\n                  this.indexBySymbol.set(baseSymbol, index);\n                  this.symbols.push(baseSymbol);\n              }\n              return { __symbol: index, members: value.members };\n          }\n      };\n      return Serializer;\n  }(ValueTransformer));\n  var Deserializer = (function (_super) {\n      __extends$27(Deserializer, _super);\n      function Deserializer(symbolCache) {\n          var _this = _super.call(this) || this;\n          _this.symbolCache = symbolCache;\n          return _this;\n      }\n      Deserializer.prototype.deserialize = function (json) {\n          var _this = this;\n          var data = JSON.parse(json);\n          var importAs = [];\n          this.symbols = [];\n          data.symbols.forEach(function (serializedSymbol) {\n              var symbol = _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);\n              _this.symbols.push(symbol);\n              if (serializedSymbol.importAs) {\n                  importAs.push({ symbol: symbol, importAs: serializedSymbol.importAs });\n              }\n          });\n          var summaries = visitValue(data.summaries, this, null);\n          return { summaries: summaries, importAs: importAs };\n      };\n      Deserializer.prototype.visitStringMap = function (map, context) {\n          if ('__symbol' in map) {\n              var baseSymbol = this.symbols[map['__symbol']];\n              var members = map['members'];\n              return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\n                  baseSymbol;\n          }\n          else {\n              return _super.prototype.visitStringMap.call(this, map, context);\n          }\n      };\n      return Deserializer;\n  }(ValueTransformer));\n\n  var AotCompiler = (function () {\n      function AotCompiler(_config, _host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _animationParser, _symbolResolver) {\n          this._config = _config;\n          this._host = _host;\n          this._metadataResolver = _metadataResolver;\n          this._templateParser = _templateParser;\n          this._styleCompiler = _styleCompiler;\n          this._viewCompiler = _viewCompiler;\n          this._dirWrapperCompiler = _dirWrapperCompiler;\n          this._ngModuleCompiler = _ngModuleCompiler;\n          this._outputEmitter = _outputEmitter;\n          this._summaryResolver = _summaryResolver;\n          this._localeId = _localeId;\n          this._translationFormat = _translationFormat;\n          this._animationParser = _animationParser;\n          this._symbolResolver = _symbolResolver;\n          this._animationCompiler = new AnimationCompiler();\n      }\n      AotCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(); };\n      AotCompiler.prototype.compileAll = function (rootFiles) {\n          var _this = this;\n          var programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);\n          var _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;\n          return Promise\n              .all(ngModules.map(function (ngModule) { return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))\n              .then(function () {\n              var sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables); });\n              return ListWrapper.flatten(sourceModules);\n          });\n      };\n      AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {\n          var _this = this;\n          var fileSuffix = splitTypescriptSuffix(srcFileUrl)[1];\n          var statements = [];\n          var exportedVars = [];\n          var generatedFiles = [];\n          generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, statements, exportedVars));\n          // compile all ng modules\n          exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));\n          // compile directive wrappers\n          if (!this._config.useViewEngine) {\n              exportedVars.push.apply(exportedVars, directives.map(function (directiveType) { return _this._compileDirectiveWrapper(directiveType, statements); }));\n          }\n          // compile components\n          directives.forEach(function (dirType) {\n              var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);\n              if (!compMeta.isComponent) {\n                  return Promise.resolve(null);\n              }\n              var ngModule = ngModuleByPipeOrDirective.get(dirType);\n              if (!ngModule) {\n                  throw new Error(\"Internal Error: cannot determine the module for component \" + identifierName(compMeta.type) + \"!\");\n              }\n              _assertComponent(compMeta);\n              // compile styles\n              var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);\n              stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {\n                  generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));\n              });\n              // compile components\n              var compViewVars = _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements);\n              exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), compViewVars.viewClassVar, compViewVars.compRenderTypeVar);\n          });\n          if (statements.length > 0) {\n              var srcModule = this._codegenSourceModule(srcFileUrl, ngfactoryFilePath(srcFileUrl), statements, exportedVars);\n              generatedFiles.unshift(srcModule);\n          }\n          return generatedFiles;\n      };\n      AotCompiler.prototype._createSummary = function (srcFileUrl, directives, pipes, ngModules, injectables, targetStatements, targetExportedVars) {\n          var _this = this;\n          var symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl)\n              .map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol); });\n          var typeSummaries = ngModules.map(function (ref) { return _this._metadataResolver.getNgModuleSummary(ref); }).concat(directives.map(function (ref) { return _this._metadataResolver.getDirectiveSummary(ref); }), pipes.map(function (ref) { return _this._metadataResolver.getPipeSummary(ref); }), injectables.map(function (ref) { return _this._metadataResolver.getInjectableSummary(ref); }));\n          var _a = serializeSummaries(this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries), json = _a.json, exportAs = _a.exportAs;\n          exportAs.forEach(function (entry) {\n              targetStatements.push(variable(entry.exportAs).set(importExpr({ reference: entry.symbol })).toDeclStmt());\n              targetExportedVars.push(entry.exportAs);\n          });\n          return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);\n      };\n      AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {\n          var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);\n          var providers = [];\n          if (this._localeId) {\n              providers.push({\n                  token: createIdentifierToken(Identifiers.LOCALE_ID),\n                  useValue: this._localeId,\n              });\n          }\n          if (this._translationFormat) {\n              providers.push({\n                  token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),\n                  useValue: this._translationFormat\n              });\n          }\n          var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);\n          targetStatements.push.apply(targetStatements, appCompileResult.statements);\n          return appCompileResult.ngModuleFactoryVar;\n      };\n      AotCompiler.prototype._compileDirectiveWrapper = function (directiveType, targetStatements) {\n          var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);\n          var dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);\n          targetStatements.push.apply(targetStatements, dirCompileResult.statements);\n          return dirCompileResult.dirWrapperClassVar;\n      };\n      AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {\n          var hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference);\n          var hostMeta = createHostComponentMeta(hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType));\n          var hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements)\n              .viewClassVar;\n          var compFactoryVar = componentFactoryName(compMeta.type.reference);\n          if (this._config.useViewEngine) {\n              targetStatements.push(variable(compFactoryVar)\n                  .set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([\n                  literal(compMeta.selector),\n                  importExpr(compMeta.type),\n                  variable(hostViewFactoryVar),\n              ]))\n                  .toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]), [StmtModifier.Final]));\n          }\n          else {\n              targetStatements.push(variable(compFactoryVar)\n                  .set(importExpr(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])\n                  .instantiate([\n                  literal(compMeta.selector),\n                  variable(hostViewFactoryVar),\n                  importExpr(compMeta.type),\n              ], importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))\n                  .toDeclStmt(null, [StmtModifier.Final]));\n          }\n          return compFactoryVar;\n      };\n      AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {\n          var _this = this;\n          var directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });\n          var pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n          var _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type)), parsedTemplate = _a.template, usedPipes = _a.pipes;\n          var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);\n          var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, usedPipes, null);\n          if (componentStyles) {\n              targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));\n          }\n          targetStatements.push.apply(targetStatements, viewResult.statements);\n          return { viewClassVar: viewResult.viewClassVar, compRenderTypeVar: viewResult.rendererTypeVar };\n      };\n      AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {\n          _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);\n          return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);\n      };\n      AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) {\n          return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars));\n      };\n      return AotCompiler;\n  }());\n  function _resolveStyleStatements(reflector, compileResult, fileSuffix) {\n      compileResult.dependencies.forEach(function (dep) {\n          dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);\n      });\n      return compileResult.statements;\n  }\n  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {\n      return \"\" + stylesheetUrl + (shim ? '.shim' : '') + \".ngstyle\" + suffix;\n  }\n  function _assertComponent(meta) {\n      if (!meta.isComponent) {\n          throw new Error(\"Could not compile '\" + identifierName(meta.type) + \"' because it is not a component.\");\n      }\n  }\n  // Returns all the source files and a mapping from modules to directives\n  function analyzeNgModules(programStaticSymbols, host, metadataResolver) {\n      var _a = _createNgModules(programStaticSymbols, host, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;\n      return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);\n  }\n  function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {\n      var result = analyzeNgModules(programStaticSymbols, host, metadataResolver);\n      if (result.symbolsMissingModule && result.symbolsMissingModule.length) {\n          var messages = result.symbolsMissingModule.map(function (s) {\n              return \"Cannot determine the module for class \" + s.name + \" in \" + s.filePath + \"! Add \" + s.name + \" to the NgModule to fix it.\";\n          });\n          throw syntaxError(messages.join('\\n'));\n      }\n      return result;\n  }\n  function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {\n      var moduleMetasByRef = new Map();\n      ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule); });\n      var ngModuleByPipeOrDirective = new Map();\n      var ngModulesByFile = new Map();\n      var ngDirectivesByFile = new Map();\n      var ngPipesByFile = new Map();\n      var ngInjectablesByFile = new Map();\n      var filePaths = new Set();\n      // Make sure we produce an analyzed file for each input file\n      programSymbols.forEach(function (symbol) {\n          var filePath = symbol.filePath;\n          filePaths.add(filePath);\n          if (metadataResolver.isInjectable(symbol)) {\n              ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));\n          }\n      });\n      // Looping over all modules to construct:\n      // - a map from file to modules `ngModulesByFile`,\n      // - a map from file to directives `ngDirectivesByFile`,\n      // - a map from file to pipes `ngPipesByFile`,\n      // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.\n      ngModuleMetas.forEach(function (ngModuleMeta) {\n          var srcFileUrl = ngModuleMeta.type.reference.filePath;\n          filePaths.add(srcFileUrl);\n          ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));\n          ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {\n              var fileUrl = dirIdentifier.reference.filePath;\n              filePaths.add(fileUrl);\n              ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));\n              ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);\n          });\n          ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {\n              var fileUrl = pipeIdentifier.reference.filePath;\n              filePaths.add(fileUrl);\n              ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));\n              ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);\n          });\n      });\n      var files = [];\n      filePaths.forEach(function (srcUrl) {\n          var directives = ngDirectivesByFile.get(srcUrl) || [];\n          var pipes = ngPipesByFile.get(srcUrl) || [];\n          var ngModules = ngModulesByFile.get(srcUrl) || [];\n          var injectables = ngInjectablesByFile.get(srcUrl) || [];\n          files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables });\n      });\n      return {\n          // map directive/pipe to module\n          ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,\n          // list modules and directives for every source file\n          files: files,\n          ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule\n      };\n  }\n  function extractProgramSymbols(staticSymbolResolver, files, host) {\n      var staticSymbols = [];\n      files.filter(function (fileName) { return host.isSourceFile(fileName); }).forEach(function (sourceFile) {\n          staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) {\n              var resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n              var symbolMeta = resolvedSymbol.metadata;\n              if (symbolMeta) {\n                  if (symbolMeta.__symbolic != 'error') {\n                      // Ignore symbols that are only included to record error information.\n                      staticSymbols.push(resolvedSymbol.symbol);\n                  }\n              }\n          });\n      });\n      return staticSymbols;\n  }\n  // Load the NgModules and check\n  // that all directives / pipes that are present in the program\n  // are also declared by a module.\n  function _createNgModules(programStaticSymbols, host, metadataResolver) {\n      var ngModules = new Map();\n      var programPipesAndDirectives = [];\n      var ngModulePipesAndDirective = new Set();\n      var addNgModule = function (staticSymbol) {\n          if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {\n              return false;\n          }\n          var ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);\n          if (ngModule) {\n              ngModules.set(ngModule.type.reference, ngModule);\n              ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference); });\n              ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference); });\n              // For every input module add the list of transitively included modules\n              ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.reference); });\n          }\n          return !!ngModule;\n      };\n      programStaticSymbols.forEach(function (staticSymbol) {\n          if (!addNgModule(staticSymbol) &&\n              (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {\n              programPipesAndDirectives.push(staticSymbol);\n          }\n      });\n      // Throw an error if any of the program pipe or directives is not declared by a module\n      var symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s); });\n      return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };\n  }\n\n  var StaticAndDynamicReflectionCapabilities = (function () {\n      function StaticAndDynamicReflectionCapabilities(staticDelegate) {\n          this.staticDelegate = staticDelegate;\n          this.dynamicDelegate = new _angular_core.ɵReflectionCapabilities();\n      }\n      StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) {\n          _angular_core.ɵreflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));\n      };\n      StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n      StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) { return this.dynamicDelegate.factory(type); };\n      StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n          return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) :\n              this.dynamicDelegate.hasLifecycleHook(type, lcProperty);\n      };\n      StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) {\n          return isStaticType(type) ? this.staticDelegate.parameters(type) :\n              this.dynamicDelegate.parameters(type);\n      };\n      StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) {\n          return isStaticType(type) ? this.staticDelegate.annotations(type) :\n              this.dynamicDelegate.annotations(type);\n      };\n      StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n          return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) :\n              this.dynamicDelegate.propMetadata(typeOrFunc);\n      };\n      StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) { return this.dynamicDelegate.getter(name); };\n      StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) { return this.dynamicDelegate.setter(name); };\n      StaticAndDynamicReflectionCapabilities.prototype.method = function (name) { return this.dynamicDelegate.method(name); };\n      StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) { return this.staticDelegate.importUri(type); };\n      StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n          return this.staticDelegate.resolveIdentifier(name, moduleUrl, members);\n      };\n      StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {\n          if (isStaticType(enumIdentifier)) {\n              return this.staticDelegate.resolveEnum(enumIdentifier, name);\n          }\n          else {\n              return null;\n          }\n      };\n      return StaticAndDynamicReflectionCapabilities;\n  }());\n  function isStaticType(type) {\n      return typeof type === 'object' && type.name && type.filePath;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$28 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var ANGULAR_CORE = '@angular/core';\n  var HIDDEN_KEY = /^\\$.*\\$$/;\n  /**\n   * A static reflector implements enough of the Reflector API that is necessary to compile\n   * templates statically.\n   */\n  var StaticReflector = (function () {\n      function StaticReflector(symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {\n          if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }\n          if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }\n          var _this = this;\n          this.symbolResolver = symbolResolver;\n          this.errorRecorder = errorRecorder;\n          this.annotationCache = new Map();\n          this.propertyCache = new Map();\n          this.parameterCache = new Map();\n          this.methodCache = new Map();\n          this.conversionMap = new Map();\n          this.initializeConversionMap();\n          knownMetadataClasses.forEach(function (kc) { return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor); });\n          knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });\n      }\n      StaticReflector.prototype.importUri = function (typeOrFunc) {\n          var staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n          return staticSymbol ? staticSymbol.filePath : null;\n      };\n      StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl, members) {\n          var importSymbol = this.getStaticSymbol(moduleUrl, name);\n          var rootSymbol = this.findDeclaration(moduleUrl, name);\n          if (importSymbol != rootSymbol) {\n              this.symbolResolver.recordImportAs(rootSymbol, importSymbol);\n          }\n          if (members && members.length) {\n              return this.getStaticSymbol(rootSymbol.filePath, rootSymbol.name, members);\n          }\n          return rootSymbol;\n      };\n      StaticReflector.prototype.findDeclaration = function (moduleUrl, name, containingFile) {\n          return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n      };\n      StaticReflector.prototype.findSymbolDeclaration = function (symbol) {\n          var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n          if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {\n              return this.findSymbolDeclaration(resolvedSymbol.metadata);\n          }\n          else {\n              return symbol;\n          }\n      };\n      StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) {\n          var staticSymbol = enumIdentifier;\n          var members = (staticSymbol.members || []).concat(name);\n          return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, members);\n      };\n      StaticReflector.prototype.annotations = function (type) {\n          var annotations = this.annotationCache.get(type);\n          if (!annotations) {\n              annotations = [];\n              var classMetadata = this.getTypeMetadata(type);\n              if (classMetadata['extends']) {\n                  var parentType = this.trySimplify(type, classMetadata['extends']);\n                  if (parentType && (parentType instanceof StaticSymbol)) {\n                      var parentAnnotations = this.annotations(parentType);\n                      annotations.push.apply(annotations, parentAnnotations);\n                  }\n              }\n              if (classMetadata['decorators']) {\n                  var ownAnnotations = this.simplify(type, classMetadata['decorators']);\n                  annotations.push.apply(annotations, ownAnnotations);\n              }\n              this.annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));\n          }\n          return annotations;\n      };\n      StaticReflector.prototype.propMetadata = function (type) {\n          var _this = this;\n          var propMetadata = this.propertyCache.get(type);\n          if (!propMetadata) {\n              var classMetadata = this.getTypeMetadata(type);\n              propMetadata = {};\n              if (classMetadata['extends']) {\n                  var parentType = this.simplify(type, classMetadata['extends']);\n                  if (parentType instanceof StaticSymbol) {\n                      var parentPropMetadata_1 = this.propMetadata(parentType);\n                      Object.keys(parentPropMetadata_1).forEach(function (parentProp) {\n                          propMetadata[parentProp] = parentPropMetadata_1[parentProp];\n                      });\n                  }\n              }\n              var members_1 = classMetadata['members'] || {};\n              Object.keys(members_1).forEach(function (propName) {\n                  var propData = members_1[propName];\n                  var prop = propData\n                      .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });\n                  var decorators = [];\n                  if (propMetadata[propName]) {\n                      decorators.push.apply(decorators, propMetadata[propName]);\n                  }\n                  propMetadata[propName] = decorators;\n                  if (prop && prop['decorators']) {\n                      decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));\n                  }\n              });\n              this.propertyCache.set(type, propMetadata);\n          }\n          return propMetadata;\n      };\n      StaticReflector.prototype.parameters = function (type) {\n          if (!(type instanceof StaticSymbol)) {\n              this.reportError(new Error(\"parameters received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n              return [];\n          }\n          try {\n              var parameters_1 = this.parameterCache.get(type);\n              if (!parameters_1) {\n                  var classMetadata = this.getTypeMetadata(type);\n                  var members = classMetadata ? classMetadata['members'] : null;\n                  var ctorData = members ? members['__ctor__'] : null;\n                  if (ctorData) {\n                      var ctor = ctorData.find(function (a) { return a['__symbolic'] == 'constructor'; });\n                      var parameterTypes = this.simplify(type, ctor['parameters'] || []);\n                      var parameterDecorators_1 = this.simplify(type, ctor['parameterDecorators'] || []);\n                      parameters_1 = [];\n                      parameterTypes.forEach(function (paramType, index) {\n                          var nestedResult = [];\n                          if (paramType) {\n                              nestedResult.push(paramType);\n                          }\n                          var decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;\n                          if (decorators) {\n                              nestedResult.push.apply(nestedResult, decorators);\n                          }\n                          parameters_1.push(nestedResult);\n                      });\n                  }\n                  else if (classMetadata['extends']) {\n                      var parentType = this.simplify(type, classMetadata['extends']);\n                      if (parentType instanceof StaticSymbol) {\n                          parameters_1 = this.parameters(parentType);\n                      }\n                  }\n                  if (!parameters_1) {\n                      parameters_1 = [];\n                  }\n                  this.parameterCache.set(type, parameters_1);\n              }\n              return parameters_1;\n          }\n          catch (e) {\n              console.error(\"Failed on type \" + JSON.stringify(type) + \" with error \" + e);\n              throw e;\n          }\n      };\n      StaticReflector.prototype._methodNames = function (type) {\n          var methodNames = this.methodCache.get(type);\n          if (!methodNames) {\n              var classMetadata = this.getTypeMetadata(type);\n              methodNames = {};\n              if (classMetadata['extends']) {\n                  var parentType = this.simplify(type, classMetadata['extends']);\n                  if (parentType instanceof StaticSymbol) {\n                      var parentMethodNames_1 = this._methodNames(parentType);\n                      Object.keys(parentMethodNames_1).forEach(function (parentProp) {\n                          methodNames[parentProp] = parentMethodNames_1[parentProp];\n                      });\n                  }\n              }\n              var members_2 = classMetadata['members'] || {};\n              Object.keys(members_2).forEach(function (propName) {\n                  var propData = members_2[propName];\n                  var isMethod = propData.some(function (a) { return a['__symbolic'] == 'method'; });\n                  methodNames[propName] = methodNames[propName] || isMethod;\n              });\n              this.methodCache.set(type, methodNames);\n          }\n          return methodNames;\n      };\n      StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n          if (!(type instanceof StaticSymbol)) {\n              this.reportError(new Error(\"hasLifecycleHook received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n          }\n          try {\n              return !!this._methodNames(type)[lcProperty];\n          }\n          catch (e) {\n              console.error(\"Failed on type \" + JSON.stringify(type) + \" with error \" + e);\n              throw e;\n          }\n      };\n      StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) {\n          this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });\n      };\n      StaticReflector.prototype._registerFunction = function (type, fn) {\n          this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });\n      };\n      StaticReflector.prototype.initializeConversionMap = function () {\n          this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n          this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), _angular_core.Host);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), _angular_core.Injectable);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), _angular_core.Self);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), _angular_core.SkipSelf);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), _angular_core.Inject);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), _angular_core.Optional);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), _angular_core.Attribute);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), _angular_core.ContentChild);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), _angular_core.ContentChildren);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), _angular_core.ViewChild);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), _angular_core.ViewChildren);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), _angular_core.Input);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), _angular_core.Output);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), _angular_core.Pipe);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), _angular_core.HostBinding);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), _angular_core.HostListener);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), _angular_core.Directive);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), _angular_core.Component);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), _angular_core.NgModule);\n          // Note: Some metadata classes can be used directly with Provider.deps.\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), _angular_core.Host);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), _angular_core.Self);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), _angular_core.SkipSelf);\n          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), _angular_core.Optional);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'trigger'), _angular_core.trigger);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'state'), _angular_core.state);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'transition'), _angular_core.transition);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'style'), _angular_core.style);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'animate'), _angular_core.animate);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'keyframes'), _angular_core.keyframes);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'sequence'), _angular_core.sequence);\n          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'group'), _angular_core.group);\n      };\n      /**\n       * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n       * All types passed to the StaticResolver should be pseudo-types returned by this method.\n       *\n       * @param declarationFile the absolute path of the file where the symbol is declared\n       * @param name the name of the type.\n       */\n      StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) {\n          return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n      };\n      StaticReflector.prototype.reportError = function (error, context, path) {\n          if (this.errorRecorder) {\n              this.errorRecorder(error, (context && context.filePath) || path);\n          }\n          else {\n              throw error;\n          }\n      };\n      /**\n       * Simplify but discard any errors\n       */\n      StaticReflector.prototype.trySimplify = function (context, value) {\n          var originalRecorder = this.errorRecorder;\n          this.errorRecorder = function (error, fileName) { };\n          var result = this.simplify(context, value);\n          this.errorRecorder = originalRecorder;\n          return result;\n      };\n      /** @internal */\n      StaticReflector.prototype.simplify = function (context, value) {\n          var _this = this;\n          var self = this;\n          var scope = BindingScope.empty;\n          var calling = new Map();\n          function simplifyInContext(context, value, depth) {\n              function resolveReferenceValue(staticSymbol) {\n                  var resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n                  return resolvedSymbol ? resolvedSymbol.metadata : null;\n              }\n              function simplifyCall(functionSymbol, targetFunction, args) {\n                  if (targetFunction && targetFunction['__symbolic'] == 'function') {\n                      if (calling.get(functionSymbol)) {\n                          throw new Error('Recursion not supported');\n                      }\n                      calling.set(functionSymbol, true);\n                      try {\n                          var value_1 = targetFunction['value'];\n                          if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {\n                              var parameters = targetFunction['parameters'];\n                              var defaults = targetFunction.defaults;\n                              args = args.map(function (arg) { return simplifyInContext(context, arg, depth + 1); });\n                              if (defaults && defaults.length > args.length) {\n                                  args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));\n                              }\n                              var functionScope = BindingScope.build();\n                              for (var i = 0; i < parameters.length; i++) {\n                                  functionScope.define(parameters[i], args[i]);\n                              }\n                              var oldScope = scope;\n                              var result_1;\n                              try {\n                                  scope = functionScope.done();\n                                  result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);\n                              }\n                              finally {\n                                  scope = oldScope;\n                              }\n                              return result_1;\n                          }\n                      }\n                      finally {\n                          calling.delete(functionSymbol);\n                      }\n                  }\n                  if (depth === 0) {\n                      // If depth is 0 we are evaluating the top level expression that is describing element\n                      // decorator. In this case, it is a decorator we don't understand, such as a custom\n                      // non-angular decorator, and we should just ignore it.\n                      return { __symbolic: 'ignore' };\n                  }\n                  return simplify({ __symbolic: 'error', message: 'Function call not supported', context: functionSymbol });\n              }\n              function simplify(expression) {\n                  if (isPrimitive$1(expression)) {\n                      return expression;\n                  }\n                  if (expression instanceof Array) {\n                      var result_2 = [];\n                      for (var _i = 0, _a = expression; _i < _a.length; _i++) {\n                          var item = _a[_i];\n                          // Check for a spread expression\n                          if (item && item.__symbolic === 'spread') {\n                              var spreadArray = simplify(item.expression);\n                              if (Array.isArray(spreadArray)) {\n                                  for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {\n                                      var spreadItem = spreadArray_1[_b];\n                                      result_2.push(spreadItem);\n                                  }\n                                  continue;\n                              }\n                          }\n                          var value_2 = simplify(item);\n                          if (shouldIgnore(value_2)) {\n                              continue;\n                          }\n                          result_2.push(value_2);\n                      }\n                      return result_2;\n                  }\n                  if (expression instanceof StaticSymbol) {\n                      // Stop simplification at builtin symbols\n                      if (expression === self.injectionToken || expression === self.opaqueToken ||\n                          self.conversionMap.has(expression)) {\n                          return expression;\n                      }\n                      else {\n                          var staticSymbol = expression;\n                          var declarationValue = resolveReferenceValue(staticSymbol);\n                          if (declarationValue) {\n                              return simplifyInContext(staticSymbol, declarationValue, depth + 1);\n                          }\n                          else {\n                              return staticSymbol;\n                          }\n                      }\n                  }\n                  if (expression) {\n                      if (expression['__symbolic']) {\n                          var staticSymbol = void 0;\n                          switch (expression['__symbolic']) {\n                              case 'binop':\n                                  var left = simplify(expression['left']);\n                                  if (shouldIgnore(left))\n                                      return left;\n                                  var right = simplify(expression['right']);\n                                  if (shouldIgnore(right))\n                                      return right;\n                                  switch (expression['operator']) {\n                                      case '&&':\n                                          return left && right;\n                                      case '||':\n                                          return left || right;\n                                      case '|':\n                                          return left | right;\n                                      case '^':\n                                          return left ^ right;\n                                      case '&':\n                                          return left & right;\n                                      case '==':\n                                          return left == right;\n                                      case '!=':\n                                          return left != right;\n                                      case '===':\n                                          return left === right;\n                                      case '!==':\n                                          return left !== right;\n                                      case '<':\n                                          return left < right;\n                                      case '>':\n                                          return left > right;\n                                      case '<=':\n                                          return left <= right;\n                                      case '>=':\n                                          return left >= right;\n                                      case '<<':\n                                          return left << right;\n                                      case '>>':\n                                          return left >> right;\n                                      case '+':\n                                          return left + right;\n                                      case '-':\n                                          return left - right;\n                                      case '*':\n                                          return left * right;\n                                      case '/':\n                                          return left / right;\n                                      case '%':\n                                          return left % right;\n                                  }\n                                  return null;\n                              case 'if':\n                                  var condition = simplify(expression['condition']);\n                                  return condition ? simplify(expression['thenExpression']) :\n                                      simplify(expression['elseExpression']);\n                              case 'pre':\n                                  var operand = simplify(expression['operand']);\n                                  if (shouldIgnore(operand))\n                                      return operand;\n                                  switch (expression['operator']) {\n                                      case '+':\n                                          return operand;\n                                      case '-':\n                                          return -operand;\n                                      case '!':\n                                          return !operand;\n                                      case '~':\n                                          return ~operand;\n                                  }\n                                  return null;\n                              case 'index':\n                                  var indexTarget = simplify(expression['expression']);\n                                  var index = simplify(expression['index']);\n                                  if (indexTarget && isPrimitive$1(index))\n                                      return indexTarget[index];\n                                  return null;\n                              case 'select':\n                                  var member = expression['member'];\n                                  var selectContext = context;\n                                  var selectTarget = simplify(expression['expression']);\n                                  if (selectTarget instanceof StaticSymbol) {\n                                      var members = selectTarget.members.concat(member);\n                                      selectContext =\n                                          self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                                      var declarationValue = resolveReferenceValue(selectContext);\n                                      if (declarationValue) {\n                                          return simplifyInContext(selectContext, declarationValue, depth + 1);\n                                      }\n                                      else {\n                                          return selectContext;\n                                      }\n                                  }\n                                  if (selectTarget && isPrimitive$1(member))\n                                      return simplifyInContext(selectContext, selectTarget[member], depth + 1);\n                                  return null;\n                              case 'reference':\n                                  // Note: This only has to deal with variable references,\n                                  // as symbol references have been converted into StaticSymbols already\n                                  // in the StaticSymbolResolver!\n                                  var name_1 = expression['name'];\n                                  var localValue = scope.resolve(name_1);\n                                  if (localValue != BindingScope.missing) {\n                                      return localValue;\n                                  }\n                                  break;\n                              case 'class':\n                                  return context;\n                              case 'function':\n                                  return context;\n                              case 'new':\n                              case 'call':\n                                  // Determine if the function is a built-in conversion\n                                  staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);\n                                  if (staticSymbol instanceof StaticSymbol) {\n                                      if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                                          // if somebody calls new InjectionToken, don't create an InjectionToken,\n                                          // but rather return the symbol to which the InjectionToken is assigned to.\n                                          return context;\n                                      }\n                                      var argExpressions = expression['arguments'] || [];\n                                      var converter = self.conversionMap.get(staticSymbol);\n                                      if (converter) {\n                                          var args = argExpressions.map(function (arg) { return simplifyInContext(context, arg, depth + 1); });\n                                          return converter(context, args);\n                                      }\n                                      else {\n                                          // Determine if the function is one we can simplify.\n                                          var targetFunction = resolveReferenceValue(staticSymbol);\n                                          return simplifyCall(staticSymbol, targetFunction, argExpressions);\n                                      }\n                                  }\n                                  break;\n                              case 'error':\n                                  var message = produceErrorMessage(expression);\n                                  if (expression['line']) {\n                                      message =\n                                          message + \" (position \" + (expression['line'] + 1) + \":\" + (expression['character'] + 1) + \" in the original .ts file)\";\n                                      throw positionalError(message, context.filePath, expression['line'], expression['character']);\n                                  }\n                                  throw new Error(message);\n                          }\n                          return null;\n                      }\n                      return mapStringMap(expression, function (value, name) { return simplify(value); });\n                  }\n                  return null;\n              }\n              try {\n                  return simplify(value);\n              }\n              catch (e) {\n                  var members = context.members.length ? \".\" + context.members.join('.') : '';\n                  var message = e.message + \", resolving symbol \" + context.name + members + \" in \" + context.filePath;\n                  if (e.fileName) {\n                      throw positionalError(message, e.fileName, e.line, e.column);\n                  }\n                  throw syntaxError(message);\n              }\n          }\n          var recordedSimplifyInContext = function (context, value, depth) {\n              try {\n                  return simplifyInContext(context, value, depth);\n              }\n              catch (e) {\n                  _this.reportError(e, context);\n              }\n          };\n          var result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) :\n              simplifyInContext(context, value, 0);\n          if (shouldIgnore(result)) {\n              return undefined;\n          }\n          return result;\n      };\n      StaticReflector.prototype.getTypeMetadata = function (type) {\n          var resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n          return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\n              { __symbolic: 'class' };\n      };\n      return StaticReflector;\n  }());\n  function expandedMessage(error) {\n      switch (error.message) {\n          case 'Reference to non-exported class':\n              if (error.context && error.context.className) {\n                  return \"Reference to a non-exported class \" + error.context.className + \". Consider exporting the class\";\n              }\n              break;\n          case 'Variable not initialized':\n              return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';\n          case 'Destructuring not supported':\n              return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';\n          case 'Could not resolve type':\n              if (error.context && error.context.typeName) {\n                  return \"Could not resolve type \" + error.context.typeName;\n              }\n              break;\n          case 'Function call not supported':\n              var prefix = error.context && error.context.name ? \"Calling function '\" + error.context.name + \"', f\" : 'F';\n              return prefix +\n                  'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';\n          case 'Reference to a local symbol':\n              if (error.context && error.context.name) {\n                  return \"Reference to a local (non-exported) symbol '\" + error.context.name + \"'. Consider exporting the symbol\";\n              }\n              break;\n      }\n      return error.message;\n  }\n  function produceErrorMessage(error) {\n      return \"Error encountered resolving symbol values statically. \" + expandedMessage(error);\n  }\n  function mapStringMap(input, transform) {\n      if (!input)\n          return {};\n      var result = {};\n      Object.keys(input).forEach(function (key) {\n          var value = transform(input[key], key);\n          if (!shouldIgnore(value)) {\n              if (HIDDEN_KEY.test(key)) {\n                  Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });\n              }\n              else {\n                  result[key] = value;\n              }\n          }\n      });\n      return result;\n  }\n  function isPrimitive$1(o) {\n      return o === null || (typeof o !== 'function' && typeof o !== 'object');\n  }\n  var BindingScope = (function () {\n      function BindingScope() {\n      }\n      BindingScope.build = function () {\n          var current = new Map();\n          return {\n              define: function (name, value) {\n                  current.set(name, value);\n                  return this;\n              },\n              done: function () {\n                  return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;\n              }\n          };\n      };\n      return BindingScope;\n  }());\n  BindingScope.missing = {};\n  BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };\n  var PopulatedScope = (function (_super) {\n      __extends$28(PopulatedScope, _super);\n      function PopulatedScope(bindings) {\n          var _this = _super.call(this) || this;\n          _this.bindings = bindings;\n          return _this;\n      }\n      PopulatedScope.prototype.resolve = function (name) {\n          return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;\n      };\n      return PopulatedScope;\n  }(BindingScope));\n  function shouldIgnore(value) {\n      return value && value.__symbolic == 'ignore';\n  }\n  function positionalError(message, fileName, line, column) {\n      var result = new Error(message);\n      result.fileName = fileName;\n      result.line = line;\n      result.column = column;\n      return result;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$29 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var ResolvedStaticSymbol = (function () {\n      function ResolvedStaticSymbol(symbol, metadata) {\n          this.symbol = symbol;\n          this.metadata = metadata;\n      }\n      return ResolvedStaticSymbol;\n  }());\n  var SUPPORTED_SCHEMA_VERSION = 3;\n  /**\n   * This class is responsible for loading metadata per symbol,\n   * and normalizing references between symbols.\n   *\n   * Internally, it only uses symbols without members,\n   * and deduces the values for symbols with members based\n   * on these symbols.\n   */\n  var StaticSymbolResolver = (function () {\n      function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {\n          this.host = host;\n          this.staticSymbolCache = staticSymbolCache;\n          this.summaryResolver = summaryResolver;\n          this.errorRecorder = errorRecorder;\n          this.metadataCache = new Map();\n          // Note: this will only contain StaticSymbols without members!\n          this.resolvedSymbols = new Map();\n          this.resolvedFilePaths = new Set();\n          // Note: this will only contain StaticSymbols without members!\n          this.importAs = new Map();\n      }\n      StaticSymbolResolver.prototype.resolveSymbol = function (staticSymbol) {\n          if (staticSymbol.members.length > 0) {\n              return this._resolveSymbolMembers(staticSymbol);\n          }\n          var result = this.resolvedSymbols.get(staticSymbol);\n          if (result) {\n              return result;\n          }\n          result = this._resolveSymbolFromSummary(staticSymbol);\n          if (result) {\n              return result;\n          }\n          // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n          // have summaries, only .d.ts files. So we always need to check both, the summary\n          // and metadata.\n          this._createSymbolsOf(staticSymbol.filePath);\n          result = this.resolvedSymbols.get(staticSymbol);\n          return result;\n      };\n      /**\n       * getImportAs produces a symbol that can be used to import the given symbol.\n       * The import might be different than the symbol if the symbol is exported from\n       * a library with a summary; in which case we want to import the symbol from the\n       * ngfactory re-export instead of directly to avoid introducing a direct dependency\n       * on an otherwise indirect dependency.\n       *\n       * @param staticSymbol the symbol for which to generate a import symbol\n       */\n      StaticSymbolResolver.prototype.getImportAs = function (staticSymbol) {\n          if (staticSymbol.members.length) {\n              var baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);\n              var baseImportAs = this.getImportAs(baseSymbol);\n              return baseImportAs ?\n                  this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :\n                  null;\n          }\n          var result = this.summaryResolver.getImportAs(staticSymbol);\n          if (!result) {\n              result = this.importAs.get(staticSymbol);\n          }\n          return result;\n      };\n      /**\n       * getTypeArity returns the number of generic type parameters the given symbol\n       * has. If the symbol is not a type the result is null.\n       */\n      StaticSymbolResolver.prototype.getTypeArity = function (staticSymbol) {\n          // If the file is a factory file, don't resolve the symbol as doing so would\n          // cause the metadata for an factory file to be loaded which doesn't exist.\n          // All references to generated classes must include the correct arity whenever\n          // generating code.\n          if (isNgFactoryFile(staticSymbol.filePath)) {\n              return null;\n          }\n          var resolvedSymbol = this.resolveSymbol(staticSymbol);\n          while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {\n              resolvedSymbol = this.resolveSymbol(resolvedSymbol.metadata);\n          }\n          return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;\n      };\n      StaticSymbolResolver.prototype.recordImportAs = function (sourceSymbol, targetSymbol) {\n          sourceSymbol.assertNoMembers();\n          targetSymbol.assertNoMembers();\n          this.importAs.set(sourceSymbol, targetSymbol);\n      };\n      StaticSymbolResolver.prototype._resolveSymbolMembers = function (staticSymbol) {\n          var members = staticSymbol.members;\n          var baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));\n          if (!baseResolvedSymbol) {\n              return null;\n          }\n          var baseMetadata = baseResolvedSymbol.metadata;\n          if (baseMetadata instanceof StaticSymbol) {\n              return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));\n          }\n          else if (baseMetadata && baseMetadata.__symbolic === 'class') {\n              if (baseMetadata.statics && members.length === 1) {\n                  return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);\n              }\n          }\n          else {\n              var value = baseMetadata;\n              for (var i = 0; i < members.length && value; i++) {\n                  value = value[members[i]];\n              }\n              return new ResolvedStaticSymbol(staticSymbol, value);\n          }\n          return null;\n      };\n      StaticSymbolResolver.prototype._resolveSymbolFromSummary = function (staticSymbol) {\n          var summary = this.summaryResolver.resolveSummary(staticSymbol);\n          return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;\n      };\n      /**\n       * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n       * All types passed to the StaticResolver should be pseudo-types returned by this method.\n       *\n       * @param declarationFile the absolute path of the file where the symbol is declared\n       * @param name the name of the type.\n       * @param members a symbol for a static member of the named type\n       */\n      StaticSymbolResolver.prototype.getStaticSymbol = function (declarationFile, name, members) {\n          return this.staticSymbolCache.get(declarationFile, name, members);\n      };\n      StaticSymbolResolver.prototype.getSymbolsOf = function (filePath) {\n          // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n          // have summaries, only .d.ts files. So we always need to check both, the summary\n          // and metadata.\n          var symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));\n          this._createSymbolsOf(filePath);\n          this.resolvedSymbols.forEach(function (resolvedSymbol) {\n              if (resolvedSymbol.symbol.filePath === filePath) {\n                  symbols.add(resolvedSymbol.symbol);\n              }\n          });\n          return Array.from(symbols);\n      };\n      StaticSymbolResolver.prototype._createSymbolsOf = function (filePath) {\n          var _this = this;\n          if (this.resolvedFilePaths.has(filePath)) {\n              return;\n          }\n          this.resolvedFilePaths.add(filePath);\n          var resolvedSymbols = [];\n          var metadata = this.getModuleMetadata(filePath);\n          if (metadata['metadata']) {\n              // handle direct declarations of the symbol\n              var topLevelSymbolNames_1 = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));\n              Object.keys(metadata['metadata']).forEach(function (metadataKey) {\n                  var symbolMeta = metadata['metadata'][metadataKey];\n                  var name = unescapeIdentifier(metadataKey);\n                  var canonicalSymbol = _this.getStaticSymbol(filePath, name);\n                  if (metadata['importAs']) {\n                      // Index bundle indexes should use the importAs module name instead of a reference\n                      // to the .d.ts file directly.\n                      var importSymbol = _this.getStaticSymbol(metadata['importAs'], name);\n                      _this.recordImportAs(canonicalSymbol, importSymbol);\n                  }\n                  resolvedSymbols.push(_this.createResolvedSymbol(canonicalSymbol, topLevelSymbolNames_1, symbolMeta));\n              });\n          }\n          // handle the symbols in one of the re-export location\n          if (metadata['exports']) {\n              var _loop_1 = function (moduleExport) {\n                  // handle the symbols in the list of explicitly re-exported symbols.\n                  if (moduleExport.export) {\n                      moduleExport.export.forEach(function (exportSymbol) {\n                          var symbolName;\n                          if (typeof exportSymbol === 'string') {\n                              symbolName = exportSymbol;\n                          }\n                          else {\n                              symbolName = exportSymbol.as;\n                          }\n                          symbolName = unescapeIdentifier(symbolName);\n                          var symName = symbolName;\n                          if (typeof exportSymbol !== 'string') {\n                              symName = unescapeIdentifier(exportSymbol.name);\n                          }\n                          var resolvedModule = _this.resolveModule(moduleExport.from, filePath);\n                          if (resolvedModule) {\n                              var targetSymbol = _this.getStaticSymbol(resolvedModule, symName);\n                              var sourceSymbol = _this.getStaticSymbol(filePath, symbolName);\n                              resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));\n                          }\n                      });\n                  }\n                  else {\n                      // handle the symbols via export * directives.\n                      var resolvedModule = this_1.resolveModule(moduleExport.from, filePath);\n                      if (resolvedModule) {\n                          var nestedExports = this_1.getSymbolsOf(resolvedModule);\n                          nestedExports.forEach(function (targetSymbol) {\n                              var sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);\n                              resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));\n                          });\n                      }\n                  }\n              };\n              var this_1 = this;\n              for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {\n                  var moduleExport = _a[_i];\n                  _loop_1(moduleExport);\n              }\n          }\n          resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol); });\n      };\n      StaticSymbolResolver.prototype.createResolvedSymbol = function (sourceSymbol, topLevelSymbolNames, metadata) {\n          var self = this;\n          var ReferenceTransformer = (function (_super) {\n              __extends$29(ReferenceTransformer, _super);\n              function ReferenceTransformer() {\n                  return _super !== null && _super.apply(this, arguments) || this;\n              }\n              ReferenceTransformer.prototype.visitStringMap = function (map, functionParams) {\n                  var symbolic = map['__symbolic'];\n                  if (symbolic === 'function') {\n                      var oldLen = functionParams.length;\n                      functionParams.push.apply(functionParams, (map['parameters'] || []));\n                      var result = _super.prototype.visitStringMap.call(this, map, functionParams);\n                      functionParams.length = oldLen;\n                      return result;\n                  }\n                  else if (symbolic === 'reference') {\n                      var module = map['module'];\n                      var name_1 = map['name'] ? unescapeIdentifier(map['name']) : map['name'];\n                      if (!name_1) {\n                          return null;\n                      }\n                      var filePath = void 0;\n                      if (module) {\n                          filePath = self.resolveModule(module, sourceSymbol.filePath);\n                          if (!filePath) {\n                              return {\n                                  __symbolic: 'error',\n                                  message: \"Could not resolve \" + module + \" relative to \" + sourceSymbol.filePath + \".\"\n                              };\n                          }\n                          return self.getStaticSymbol(filePath, name_1);\n                      }\n                      else if (functionParams.indexOf(name_1) >= 0) {\n                          // reference to a function parameter\n                          return { __symbolic: 'reference', name: name_1 };\n                      }\n                      else {\n                          if (topLevelSymbolNames.has(name_1)) {\n                              return self.getStaticSymbol(sourceSymbol.filePath, name_1);\n                          }\n                          // ambient value\n                          null;\n                      }\n                  }\n                  else {\n                      return _super.prototype.visitStringMap.call(this, map, functionParams);\n                  }\n              };\n              return ReferenceTransformer;\n          }(ValueTransformer));\n          var transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);\n          if (transformedMeta instanceof StaticSymbol) {\n              return this.createExport(sourceSymbol, transformedMeta);\n          }\n          return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\n      };\n      StaticSymbolResolver.prototype.createExport = function (sourceSymbol, targetSymbol) {\n          sourceSymbol.assertNoMembers();\n          targetSymbol.assertNoMembers();\n          if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath)) {\n              // This case is for an ng library importing symbols from a plain ts library\n              // transitively.\n              // Note: We rely on the fact that we discover symbols in the direction\n              // from source files to library files\n              this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);\n          }\n          return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);\n      };\n      StaticSymbolResolver.prototype.reportError = function (error, context, path) {\n          if (this.errorRecorder) {\n              this.errorRecorder(error, (context && context.filePath) || path);\n          }\n          else {\n              throw error;\n          }\n      };\n      /**\n       * @param module an absolute path to a module file.\n       */\n      StaticSymbolResolver.prototype.getModuleMetadata = function (module) {\n          var moduleMetadata = this.metadataCache.get(module);\n          if (!moduleMetadata) {\n              var moduleMetadatas = this.host.getMetadataFor(module);\n              if (moduleMetadatas) {\n                  var maxVersion_1 = -1;\n                  moduleMetadatas.forEach(function (md) {\n                      if (md['version'] > maxVersion_1) {\n                          maxVersion_1 = md['version'];\n                          moduleMetadata = md;\n                      }\n                  });\n              }\n              if (!moduleMetadata) {\n                  moduleMetadata =\n                      { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };\n              }\n              if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {\n                  var errorMessage = moduleMetadata['version'] == 2 ?\n                      \"Unsupported metadata version \" + moduleMetadata['version'] + \" for module \" + module + \". This module should be compiled with a newer version of ngc\" :\n                      \"Metadata version mismatch for module \" + module + \", found version \" + moduleMetadata['version'] + \", expected \" + SUPPORTED_SCHEMA_VERSION;\n                  this.reportError(new Error(errorMessage), null);\n              }\n              this.metadataCache.set(module, moduleMetadata);\n          }\n          return moduleMetadata;\n      };\n      StaticSymbolResolver.prototype.getSymbolByModule = function (module, symbolName, containingFile) {\n          var filePath = this.resolveModule(module, containingFile);\n          if (!filePath) {\n              this.reportError(new Error(\"Could not resolve module \" + module + (containingFile ? \" relative to $ {\\n            containingFile\\n          } \" : '')), null);\n              return this.getStaticSymbol(\"ERROR:\" + module, symbolName);\n          }\n          return this.getStaticSymbol(filePath, symbolName);\n      };\n      StaticSymbolResolver.prototype.resolveModule = function (module, containingFile) {\n          try {\n              return this.host.moduleNameToFileName(module, containingFile);\n          }\n          catch (e) {\n              console.error(\"Could not resolve module '\" + module + \"' relative to file \" + containingFile);\n              this.reportError(e, null, containingFile);\n          }\n      };\n      return StaticSymbolResolver;\n  }());\n  // Remove extra underscore from escaped identifier.\n  // See https://github.com/Microsoft/TypeScript/blob/master/src/compiler/utilities.ts\n  function unescapeIdentifier(identifier) {\n      return identifier.startsWith('___') ? identifier.substr(1) : identifier;\n  }\n\n  var AotSummaryResolver = (function () {\n      function AotSummaryResolver(host, staticSymbolCache) {\n          this.host = host;\n          this.staticSymbolCache = staticSymbolCache;\n          // Note: this will only contain StaticSymbols without members!\n          this.summaryCache = new Map();\n          this.loadedFilePaths = new Set();\n          // Note: this will only contain StaticSymbols without members!\n          this.importAs = new Map();\n      }\n      AotSummaryResolver.prototype.isLibraryFile = function (filePath) {\n          // Note: We need to strip the .ngfactory. file path,\n          // so this method also works for generated files\n          // (for which host.isSourceFile will always return false).\n          return !this.host.isSourceFile(stripNgFactory(filePath));\n      };\n      AotSummaryResolver.prototype.getLibraryFileName = function (filePath) { return this.host.getOutputFileName(filePath); };\n      AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) {\n          staticSymbol.assertNoMembers();\n          var summary = this.summaryCache.get(staticSymbol);\n          if (!summary) {\n              this._loadSummaryFile(staticSymbol.filePath);\n              summary = this.summaryCache.get(staticSymbol);\n          }\n          return summary;\n      };\n      AotSummaryResolver.prototype.getSymbolsOf = function (filePath) {\n          this._loadSummaryFile(filePath);\n          return Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath; });\n      };\n      AotSummaryResolver.prototype.getImportAs = function (staticSymbol) {\n          staticSymbol.assertNoMembers();\n          return this.importAs.get(staticSymbol);\n      };\n      AotSummaryResolver.prototype._loadSummaryFile = function (filePath) {\n          var _this = this;\n          if (this.loadedFilePaths.has(filePath)) {\n              return;\n          }\n          this.loadedFilePaths.add(filePath);\n          if (this.isLibraryFile(filePath)) {\n              var summaryFilePath = summaryFileName(filePath);\n              var json = void 0;\n              try {\n                  json = this.host.loadSummary(summaryFilePath);\n              }\n              catch (e) {\n                  console.error(\"Error loading summary file \" + summaryFilePath);\n                  throw e;\n              }\n              if (json) {\n                  var _a = deserializeSummaries(this.staticSymbolCache, json), summaries = _a.summaries, importAs = _a.importAs;\n                  summaries.forEach(function (summary) { return _this.summaryCache.set(summary.symbol, summary); });\n                  importAs.forEach(function (importAs) {\n                      _this.importAs.set(importAs.symbol, _this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));\n                  });\n              }\n          }\n      };\n      return AotSummaryResolver;\n  }());\n\n  /**\n   * Creates a new AotCompiler based on options and a host.\n   */\n  function createAotCompiler(compilerHost, options) {\n      var translations = options.translations || '';\n      var urlResolver = createOfflineCompileUrlResolver();\n      var symbolCache = new StaticSymbolCache();\n      var summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n      var symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n      var staticReflector = new StaticReflector(symbolResolver);\n      StaticAndDynamicReflectionCapabilities.install(staticReflector);\n      var console = new _angular_core.ɵConsole();\n      var htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, _angular_core.MissingTranslationStrategy.Warning, console);\n      var config = new CompilerConfig({\n          genDebugInfo: options.debug === true,\n          defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,\n          logBindingUpdate: false,\n          useJit: false,\n          useViewEngine: options.useViewEngine,\n          enableLegacyTemplate: options.enableLegacyTemplate !== false,\n      });\n      var normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);\n      var expressionParser = new Parser(new Lexer());\n      var elementSchemaRegistry = new DomElementSchemaRegistry();\n      var tmplParser = new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n      var resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, symbolCache, staticReflector);\n      // TODO(vicb): do not pass options.i18nFormat here\n      var importResolver = {\n          getImportAs: function (symbol) { return symbolResolver.getImportAs(symbol); },\n          fileNameToModuleName: function (fileName, containingFilePath) {\n              return compilerHost.fileNameToModuleName(fileName, containingFilePath);\n          },\n          getTypeArity: function (symbol) { return symbolResolver.getTypeArity(symbol); }\n      };\n      var viewCompiler = config.useViewEngine ? new ViewCompilerNext(config, elementSchemaRegistry) :\n          new ViewCompiler(config, elementSchemaRegistry);\n      var compiler = new AotCompiler(config, compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver, options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry), symbolResolver);\n      return { compiler: compiler, reflector: staticReflector };\n  }\n\n  function interpretStatements(statements, resultVars) {\n      var stmtsWithReturn = statements.concat([new ReturnStatement(literalArr(resultVars.map(function (resultVar) { return variable(resultVar); })))]);\n      var ctx = new _ExecutionContext(null, null, null, new Map());\n      var visitor = new StatementInterpreter();\n      var result = visitor.visitAllStatements(stmtsWithReturn, ctx);\n      return isPresent(result) ? result.value : null;\n  }\n  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {\n      var childCtx = ctx.createChildWihtLocalVars();\n      for (var i = 0; i < varNames.length; i++) {\n          childCtx.vars.set(varNames[i], varValues[i]);\n      }\n      var result = visitor.visitAllStatements(statements, childCtx);\n      return result ? result.value : null;\n  }\n  var _ExecutionContext = (function () {\n      function _ExecutionContext(parent, instance, className, vars) {\n          this.parent = parent;\n          this.instance = instance;\n          this.className = className;\n          this.vars = vars;\n      }\n      _ExecutionContext.prototype.createChildWihtLocalVars = function () {\n          return new _ExecutionContext(this, this.instance, this.className, new Map());\n      };\n      return _ExecutionContext;\n  }());\n  var ReturnValue = (function () {\n      function ReturnValue(value) {\n          this.value = value;\n      }\n      return ReturnValue;\n  }());\n  function createDynamicClass(_classStmt, _ctx, _visitor) {\n      var propertyDescriptors = {};\n      _classStmt.getters.forEach(function (getter) {\n          // Note: use `function` instead of arrow function to capture `this`\n          propertyDescriptors[getter.name] = {\n              configurable: false,\n              get: function () {\n                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                  return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n              }\n          };\n      });\n      _classStmt.methods.forEach(function (method) {\n          var paramNames = method.params.map(function (param) { return param.name; });\n          // Note: use `function` instead of arrow function to capture `this`\n          propertyDescriptors[method.name] = {\n              writable: false,\n              configurable: false,\n              value: function () {\n                  var args = [];\n                  for (var _i = 0; _i < arguments.length; _i++) {\n                      args[_i] = arguments[_i];\n                  }\n                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                  return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n              }\n          };\n      });\n      var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });\n      // Note: use `function` instead of arrow function to capture `this`\n      var ctor = function () {\n          var _this = this;\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n          }\n          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n          _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });\n          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n      };\n      var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n      ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n      return ctor;\n  }\n  var StatementInterpreter = (function () {\n      function StatementInterpreter() {\n      }\n      StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };\n      StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {\n          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));\n          return null;\n      };\n      StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {\n          var value = expr.value.visitExpression(this, ctx);\n          var currCtx = ctx;\n          while (currCtx != null) {\n              if (currCtx.vars.has(expr.name)) {\n                  currCtx.vars.set(expr.name, value);\n                  return value;\n              }\n              currCtx = currCtx.parent;\n          }\n          throw new Error(\"Not declared variable \" + expr.name);\n      };\n      StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {\n          var varName = ast.name;\n          if (isPresent(ast.builtin)) {\n              switch (ast.builtin) {\n                  case BuiltinVar.Super:\n                      return ctx.instance.__proto__;\n                  case BuiltinVar.This:\n                      return ctx.instance;\n                  case BuiltinVar.CatchError:\n                      varName = CATCH_ERROR_VAR$2;\n                      break;\n                  case BuiltinVar.CatchStack:\n                      varName = CATCH_STACK_VAR$2;\n                      break;\n                  default:\n                      throw new Error(\"Unknown builtin variable \" + ast.builtin);\n              }\n          }\n          var currCtx = ctx;\n          while (currCtx != null) {\n              if (currCtx.vars.has(varName)) {\n                  return currCtx.vars.get(varName);\n              }\n              currCtx = currCtx.parent;\n          }\n          throw new Error(\"Not declared variable \" + varName);\n      };\n      StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {\n          var receiver = expr.receiver.visitExpression(this, ctx);\n          var index = expr.index.visitExpression(this, ctx);\n          var value = expr.value.visitExpression(this, ctx);\n          receiver[index] = value;\n          return value;\n      };\n      StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {\n          var receiver = expr.receiver.visitExpression(this, ctx);\n          var value = expr.value.visitExpression(this, ctx);\n          receiver[expr.name] = value;\n          return value;\n      };\n      StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {\n          var receiver = expr.receiver.visitExpression(this, ctx);\n          var args = this.visitAllExpressions(expr.args, ctx);\n          var result;\n          if (isPresent(expr.builtin)) {\n              switch (expr.builtin) {\n                  case BuiltinMethod.ConcatArray:\n                      result = receiver.concat.apply(receiver, args);\n                      break;\n                  case BuiltinMethod.SubscribeObservable:\n                      result = receiver.subscribe({ next: args[0] });\n                      break;\n                  case BuiltinMethod.Bind:\n                      result = receiver.bind.apply(receiver, args);\n                      break;\n                  default:\n                      throw new Error(\"Unknown builtin method \" + expr.builtin);\n              }\n          }\n          else {\n              result = receiver[expr.name].apply(receiver, args);\n          }\n          return result;\n      };\n      StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {\n          var args = this.visitAllExpressions(stmt.args, ctx);\n          var fnExpr = stmt.fn;\n          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n              ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n              return null;\n          }\n          else {\n              var fn = stmt.fn.visitExpression(this, ctx);\n              return fn.apply(null, args);\n          }\n      };\n      StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {\n          return new ReturnValue(stmt.value.visitExpression(this, ctx));\n      };\n      StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {\n          var clazz = createDynamicClass(stmt, ctx, this);\n          ctx.vars.set(stmt.name, clazz);\n          return null;\n      };\n      StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {\n          return stmt.expr.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {\n          var condition = stmt.condition.visitExpression(this, ctx);\n          if (condition) {\n              return this.visitAllStatements(stmt.trueCase, ctx);\n          }\n          else if (isPresent(stmt.falseCase)) {\n              return this.visitAllStatements(stmt.falseCase, ctx);\n          }\n          return null;\n      };\n      StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {\n          try {\n              return this.visitAllStatements(stmt.bodyStmts, ctx);\n          }\n          catch (e) {\n              var childCtx = ctx.createChildWihtLocalVars();\n              childCtx.vars.set(CATCH_ERROR_VAR$2, e);\n              childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);\n              return this.visitAllStatements(stmt.catchStmts, childCtx);\n          }\n      };\n      StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {\n          throw stmt.error.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };\n      StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {\n          var args = this.visitAllExpressions(ast.args, ctx);\n          var clazz = ast.classExpr.visitExpression(this, ctx);\n          return new (clazz.bind.apply(clazz, [void 0].concat(args)))();\n      };\n      StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };\n      StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {\n          return ast.value.reference;\n      };\n      StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {\n          if (ast.condition.visitExpression(this, ctx)) {\n              return ast.trueCase.visitExpression(this, ctx);\n          }\n          else if (isPresent(ast.falseCase)) {\n              return ast.falseCase.visitExpression(this, ctx);\n          }\n          return null;\n      };\n      StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {\n          return !ast.condition.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {\n          return ast.value.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {\n          var paramNames = ast.params.map(function (param) { return param.name; });\n          return _declareFn(paramNames, ast.statements, ctx, this);\n      };\n      StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {\n          var paramNames = stmt.params.map(function (param) { return param.name; });\n          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n          return null;\n      };\n      StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {\n          var _this = this;\n          var lhs = function () { return ast.lhs.visitExpression(_this, ctx); };\n          var rhs = function () { return ast.rhs.visitExpression(_this, ctx); };\n          switch (ast.operator) {\n              case BinaryOperator.Equals:\n                  return lhs() == rhs();\n              case BinaryOperator.Identical:\n                  return lhs() === rhs();\n              case BinaryOperator.NotEquals:\n                  return lhs() != rhs();\n              case BinaryOperator.NotIdentical:\n                  return lhs() !== rhs();\n              case BinaryOperator.And:\n                  return lhs() && rhs();\n              case BinaryOperator.Or:\n                  return lhs() || rhs();\n              case BinaryOperator.Plus:\n                  return lhs() + rhs();\n              case BinaryOperator.Minus:\n                  return lhs() - rhs();\n              case BinaryOperator.Divide:\n                  return lhs() / rhs();\n              case BinaryOperator.Multiply:\n                  return lhs() * rhs();\n              case BinaryOperator.Modulo:\n                  return lhs() % rhs();\n              case BinaryOperator.Lower:\n                  return lhs() < rhs();\n              case BinaryOperator.LowerEquals:\n                  return lhs() <= rhs();\n              case BinaryOperator.Bigger:\n                  return lhs() > rhs();\n              case BinaryOperator.BiggerEquals:\n                  return lhs() >= rhs();\n              default:\n                  throw new Error(\"Unknown operator \" + ast.operator);\n          }\n      };\n      StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {\n          var result;\n          var receiver = ast.receiver.visitExpression(this, ctx);\n          result = receiver[ast.name];\n          return result;\n      };\n      StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {\n          var receiver = ast.receiver.visitExpression(this, ctx);\n          var prop = ast.index.visitExpression(this, ctx);\n          return receiver[prop];\n      };\n      StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {\n          return this.visitAllExpressions(ast.entries, ctx);\n      };\n      StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {\n          var _this = this;\n          var result = {};\n          ast.entries.forEach(function (entry) { return result[entry.key] = entry.value.visitExpression(_this, ctx); });\n          return result;\n      };\n      StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {\n          var _this = this;\n          return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });\n      };\n      StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {\n          for (var i = 0; i < statements.length; i++) {\n              var stmt = statements[i];\n              var val = stmt.visitStatement(this, ctx);\n              if (val instanceof ReturnValue) {\n                  return val;\n              }\n          }\n          return null;\n      };\n      return StatementInterpreter;\n  }());\n  function _declareFn(varNames, statements, ctx, visitor) {\n      return function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n          }\n          return _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n      };\n  }\n  var CATCH_ERROR_VAR$2 = 'error';\n  var CATCH_STACK_VAR$2 = 'stack';\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$31 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var AbstractJsEmitterVisitor = (function (_super) {\n      __extends$31(AbstractJsEmitterVisitor, _super);\n      function AbstractJsEmitterVisitor() {\n          return _super.call(this, false) || this;\n      }\n      AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {\n          var _this = this;\n          ctx.pushClass(stmt);\n          this._visitClassConstructor(stmt, ctx);\n          if (isPresent(stmt.parent)) {\n              ctx.print(stmt, stmt.name + \".prototype = Object.create(\");\n              stmt.parent.visitExpression(this, ctx);\n              ctx.println(stmt, \".prototype);\");\n          }\n          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });\n          stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });\n          ctx.popClass();\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {\n          ctx.print(stmt, \"function \" + stmt.name + \"(\");\n          if (isPresent(stmt.constructorMethod)) {\n              this._visitParams(stmt.constructorMethod.params, ctx);\n          }\n          ctx.println(stmt, \") {\");\n          ctx.incIndent();\n          if (isPresent(stmt.constructorMethod)) {\n              if (stmt.constructorMethod.body.length > 0) {\n                  ctx.println(stmt, \"var self = this;\");\n                  this.visitAllStatements(stmt.constructorMethod.body, ctx);\n              }\n          }\n          ctx.decIndent();\n          ctx.println(stmt, \"}\");\n      };\n      AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {\n          ctx.println(stmt, \"Object.defineProperty(\" + stmt.name + \".prototype, '\" + getter.name + \"', { get: function() {\");\n          ctx.incIndent();\n          if (getter.body.length > 0) {\n              ctx.println(stmt, \"var self = this;\");\n              this.visitAllStatements(getter.body, ctx);\n          }\n          ctx.decIndent();\n          ctx.println(stmt, \"}});\");\n      };\n      AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {\n          ctx.print(stmt, stmt.name + \".prototype.\" + method.name + \" = function(\");\n          this._visitParams(method.params, ctx);\n          ctx.println(stmt, \") {\");\n          ctx.incIndent();\n          if (method.body.length > 0) {\n              ctx.println(stmt, \"var self = this;\");\n              this.visitAllStatements(method.body, ctx);\n          }\n          ctx.decIndent();\n          ctx.println(stmt, \"};\");\n      };\n      AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {\n          if (ast.builtin === BuiltinVar.This) {\n              ctx.print(ast, 'self');\n          }\n          else if (ast.builtin === BuiltinVar.Super) {\n              throw new Error(\"'super' needs to be handled at a parent ast node, not at the variable level!\");\n          }\n          else {\n              _super.prototype.visitReadVarExpr.call(this, ast, ctx);\n          }\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {\n          ctx.print(stmt, \"var \" + stmt.name + \" = \");\n          stmt.value.visitExpression(this, ctx);\n          ctx.println(stmt, \";\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {\n          ast.value.visitExpression(this, ctx);\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {\n          var fnExpr = expr.fn;\n          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n              ctx.currentClass.parent.visitExpression(this, ctx);\n              ctx.print(expr, \".call(this\");\n              if (expr.args.length > 0) {\n                  ctx.print(expr, \", \");\n                  this.visitAllExpressions(expr.args, ctx, ',');\n              }\n              ctx.print(expr, \")\");\n          }\n          else {\n              _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);\n          }\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {\n          ctx.print(ast, \"function(\");\n          this._visitParams(ast.params, ctx);\n          ctx.println(ast, \") {\");\n          ctx.incIndent();\n          this.visitAllStatements(ast.statements, ctx);\n          ctx.decIndent();\n          ctx.print(ast, \"}\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {\n          ctx.print(stmt, \"function \" + stmt.name + \"(\");\n          this._visitParams(stmt.params, ctx);\n          ctx.println(stmt, \") {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.statements, ctx);\n          ctx.decIndent();\n          ctx.println(stmt, \"}\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {\n          ctx.println(stmt, \"try {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.bodyStmts, ctx);\n          ctx.decIndent();\n          ctx.println(stmt, \"} catch (\" + CATCH_ERROR_VAR$1.name + \") {\");\n          ctx.incIndent();\n          var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [\n                  StmtModifier.Final\n              ])].concat(stmt.catchStmts);\n          this.visitAllStatements(catchStmts, ctx);\n          ctx.decIndent();\n          ctx.println(stmt, \"}\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {\n          this.visitAllObjects(function (param) { return ctx.print(null, param.name); }, params, ctx, ',');\n      };\n      AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {\n          var name;\n          switch (method) {\n              case BuiltinMethod.ConcatArray:\n                  name = 'concat';\n                  break;\n              case BuiltinMethod.SubscribeObservable:\n                  name = 'subscribe';\n                  break;\n              case BuiltinMethod.Bind:\n                  name = 'bind';\n                  break;\n              default:\n                  throw new Error(\"Unknown builtin method: \" + method);\n          }\n          return name;\n      };\n      return AbstractJsEmitterVisitor;\n  }(AbstractEmitterVisitor));\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$30 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  function evalExpression(sourceUrl, ctx, vars) {\n      var fnBody = ctx.toSource() + \"\\n//# sourceURL=\" + sourceUrl + \"\\n\" + ctx.toSourceMapGenerator().toJsComment();\n      var fnArgNames = [];\n      var fnArgValues = [];\n      for (var argName in vars) {\n          fnArgNames.push(argName);\n          fnArgValues.push(vars[argName]);\n      }\n      return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);\n  }\n  function jitStatements(sourceUrl, statements, resultVars) {\n      var converter = new JitEmitterVisitor();\n      var ctx = EmitterVisitorContext.createRoot(resultVars);\n      var returnStmt = new ReturnStatement(literalArr(resultVars.map(function (resultVar) { return variable(resultVar); })));\n      converter.visitAllStatements(statements.concat([returnStmt]), ctx);\n      return evalExpression(sourceUrl, ctx, converter.getArgs());\n  }\n  var JitEmitterVisitor = (function (_super) {\n      __extends$30(JitEmitterVisitor, _super);\n      function JitEmitterVisitor() {\n          var _this = _super !== null && _super.apply(this, arguments) || this;\n          _this._evalArgNames = [];\n          _this._evalArgValues = [];\n          return _this;\n      }\n      JitEmitterVisitor.prototype.getArgs = function () {\n          var result = {};\n          for (var i = 0; i < this._evalArgNames.length; i++) {\n              result[this._evalArgNames[i]] = this._evalArgValues[i];\n          }\n          return result;\n      };\n      JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {\n          var value = ast.value.reference;\n          var id = this._evalArgValues.indexOf(value);\n          if (id === -1) {\n              id = this._evalArgValues.length;\n              this._evalArgValues.push(value);\n              var name_1 = identifierName(ast.value) || 'val';\n              this._evalArgNames.push(\"jit_\" + name_1 + id);\n          }\n          ctx.print(ast, this._evalArgNames[id]);\n          return null;\n      };\n      return JitEmitterVisitor;\n  }(AbstractJsEmitterVisitor));\n\n  /**\n   * An internal module of the Angular compiler that begins with component types,\n   * extracts templates, and eventually produces a compiled version of the component\n   * ready for linking into an application.\n   *\n   * @security  When compiling templates at runtime, you must ensure that the entire template comes\n   * from a trusted source. Attacker-controlled data introduced by a template could expose your\n   * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n   */\n  var JitCompiler = (function () {\n      function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {\n          this._injector = _injector;\n          this._metadataResolver = _metadataResolver;\n          this._templateParser = _templateParser;\n          this._styleCompiler = _styleCompiler;\n          this._viewCompiler = _viewCompiler;\n          this._ngModuleCompiler = _ngModuleCompiler;\n          this._directiveWrapperCompiler = _directiveWrapperCompiler;\n          this._compilerConfig = _compilerConfig;\n          this._animationParser = _animationParser;\n          this._compiledTemplateCache = new Map();\n          this._compiledHostTemplateCache = new Map();\n          this._compiledDirectiveWrapperCache = new Map();\n          this._compiledNgModuleCache = new Map();\n          this._animationCompiler = new AnimationCompiler();\n      }\n      Object.defineProperty(JitCompiler.prototype, \"injector\", {\n          get: function () { return this._injector; },\n          enumerable: true,\n          configurable: true\n      });\n      JitCompiler.prototype.compileModuleSync = function (moduleType) {\n          return this._compileModuleAndComponents(moduleType, true).syncResult;\n      };\n      JitCompiler.prototype.compileModuleAsync = function (moduleType) {\n          return this._compileModuleAndComponents(moduleType, false).asyncResult;\n      };\n      JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n          return this._compileModuleAndAllComponents(moduleType, true).syncResult;\n      };\n      JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;\n      };\n      JitCompiler.prototype.getNgContentSelectors = function (component) {\n          var template = this._compiledTemplateCache.get(component);\n          if (!template) {\n              throw new Error(\"The component \" + stringify(component) + \" is not yet compiled!\");\n          }\n          return template.compMeta.template.ngContentSelectors;\n      };\n      JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {\n          var _this = this;\n          var loadingPromise = this._loadModules(moduleType, isSync);\n          var createResult = function () {\n              _this._compileComponents(moduleType, null);\n              return _this._compileModule(moduleType);\n          };\n          if (isSync) {\n              return new SyncAsyncResult(createResult());\n          }\n          else {\n              return new SyncAsyncResult(null, loadingPromise.then(createResult));\n          }\n      };\n      JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {\n          var _this = this;\n          var loadingPromise = this._loadModules(moduleType, isSync);\n          var createResult = function () {\n              var componentFactories = [];\n              _this._compileComponents(moduleType, componentFactories);\n              return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);\n          };\n          if (isSync) {\n              return new SyncAsyncResult(createResult());\n          }\n          else {\n              return new SyncAsyncResult(null, loadingPromise.then(createResult));\n          }\n      };\n      JitCompiler.prototype._loadModules = function (mainModule, isSync) {\n          var _this = this;\n          var loadingPromises = [];\n          var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);\n          // Note: the loadingPromise for a module only includes the loading of the exported directives\n          // of imported modules.\n          // However, for runtime compilation, we want to transitively compile all modules,\n          // so we also need to call loadNgModuleDirectiveAndPipeMetadata for all nested modules.\n          ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {\n              loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));\n          });\n          return Promise.all(loadingPromises);\n      };\n      JitCompiler.prototype._compileModule = function (moduleType) {\n          var _this = this;\n          var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);\n          if (!ngModuleFactory) {\n              var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);\n              // Always provide a bound Compiler\n              var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];\n              var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);\n              if (!this._compilerConfig.useJit) {\n                  ngModuleFactory =\n                      interpretStatements(compileResult.statements, [compileResult.ngModuleFactoryVar])[0];\n              }\n              else {\n                  ngModuleFactory = jitStatements(\"/\" + identifierName(moduleMeta_1.type) + \"/module.ngfactory.js\", compileResult.statements, [compileResult.ngModuleFactoryVar])[0];\n              }\n              this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);\n          }\n          return ngModuleFactory;\n      };\n      /**\n       * @internal\n       */\n      JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {\n          var _this = this;\n          var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);\n          var moduleByDirective = new Map();\n          var templates = new Set();\n          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {\n              var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);\n              localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {\n                  moduleByDirective.set(dirIdentifier.reference, localModuleMeta);\n                  var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);\n                  _this._compileDirectiveWrapper(dirMeta, localModuleMeta);\n                  if (dirMeta.isComponent) {\n                      templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));\n                      if (allComponentFactories) {\n                          var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);\n                          templates.add(template);\n                          allComponentFactories.push(dirMeta.componentFactory);\n                      }\n                  }\n              });\n          });\n          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {\n              var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);\n              localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {\n                  var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);\n                  if (dirMeta.isComponent) {\n                      dirMeta.entryComponents.forEach(function (entryComponentType) {\n                          var moduleMeta = moduleByDirective.get(entryComponentType.componentType);\n                          templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n                      });\n                  }\n              });\n              localModuleMeta.entryComponents.forEach(function (entryComponentType) {\n                  var moduleMeta = moduleByDirective.get(entryComponentType.componentType);\n                  templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n              });\n          });\n          templates.forEach(function (template) { return _this._compileTemplate(template); });\n      };\n      JitCompiler.prototype.clearCacheFor = function (type) {\n          this._compiledNgModuleCache.delete(type);\n          this._metadataResolver.clearCacheFor(type);\n          this._compiledHostTemplateCache.delete(type);\n          var compiledTemplate = this._compiledTemplateCache.get(type);\n          if (compiledTemplate) {\n              this._compiledTemplateCache.delete(type);\n          }\n      };\n      JitCompiler.prototype.clearCache = function () {\n          this._metadataResolver.clearCache();\n          this._compiledTemplateCache.clear();\n          this._compiledHostTemplateCache.clear();\n          this._compiledNgModuleCache.clear();\n      };\n      JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {\n          if (!ngModule) {\n              throw new Error(\"Component \" + stringify(compType) + \" is not part of any NgModule or the module has not been imported into your module.\");\n          }\n          var compiledTemplate = this._compiledHostTemplateCache.get(compType);\n          if (!compiledTemplate) {\n              var compMeta = this._metadataResolver.getDirectiveMetadata(compType);\n              assertComponent(compMeta);\n              var componentFactory = compMeta.componentFactory;\n              var hostClass = this._metadataResolver.getHostComponentType(compType);\n              var hostMeta = createHostComponentMeta(hostClass, compMeta, _angular_core.ɵgetComponentFactoryViewClass(componentFactory));\n              compiledTemplate =\n                  new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);\n              this._compiledHostTemplateCache.set(compType, compiledTemplate);\n          }\n          return compiledTemplate;\n      };\n      JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {\n          var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\n          if (!compiledTemplate) {\n              assertComponent(compMeta);\n              compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);\n              this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\n          }\n          return compiledTemplate;\n      };\n      JitCompiler.prototype._compileDirectiveWrapper = function (dirMeta, moduleMeta) {\n          if (this._compilerConfig.useViewEngine) {\n              return;\n          }\n          var compileResult = this._directiveWrapperCompiler.compile(dirMeta);\n          var statements = compileResult.statements;\n          var directiveWrapperClass;\n          if (!this._compilerConfig.useJit) {\n              directiveWrapperClass =\n                  interpretStatements(statements, [compileResult.dirWrapperClassVar])[0];\n          }\n          else {\n              directiveWrapperClass = jitStatements(\"/\" + identifierName(moduleMeta.type) + \"/\" + identifierName(dirMeta.type) + \"/wrapper.ngfactory.js\", statements, [compileResult.dirWrapperClassVar])[0];\n          }\n          dirMeta.wrapperType.setDelegate(directiveWrapperClass);\n          this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);\n      };\n      JitCompiler.prototype._compileTemplate = function (template) {\n          var _this = this;\n          if (template.isCompiled) {\n              return;\n          }\n          var compMeta = template.compMeta;\n          var externalStylesheetsByModuleUrl = new Map();\n          var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);\n          stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });\n          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);\n          var parsedAnimations = this._compilerConfig.useViewEngine ? [] : this._animationParser.parseComponent(compMeta);\n          var directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });\n          var pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n          var _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type)), parsedTemplate = _a.template, usedPipes = _a.pipes;\n          var compiledAnimations = this._compilerConfig.useViewEngine ?\n              [] :\n              this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);\n          var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), usedPipes, compiledAnimations);\n          var statements = (_b = stylesCompileResult.componentStylesheet.statements).concat.apply(_b, compiledAnimations.map(function (ca) { return ca.statements; })).concat(compileResult.statements);\n          var viewClass;\n          var rendererType;\n          if (!this._compilerConfig.useJit) {\n              _c = interpretStatements(statements, [compileResult.viewClassVar, compileResult.rendererTypeVar]), viewClass = _c[0], rendererType = _c[1];\n          }\n          else {\n              var sourceUrl = \"/\" + identifierName(template.ngModule.type) + \"/\" + identifierName(template.compType) + \"/\" + (template.isHost ? 'host' : 'component') + \".ngfactory.js\";\n              _d = jitStatements(sourceUrl, statements, [compileResult.viewClassVar, compileResult.rendererTypeVar]), viewClass = _d[0], rendererType = _d[1];\n          }\n          template.compiled(viewClass, rendererType);\n          var _b, _c, _d;\n      };\n      JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {\n          var _this = this;\n          result.dependencies.forEach(function (dep, i) {\n              var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);\n              var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);\n              dep.valuePlaceholder.reference = nestedStylesArr;\n          });\n      };\n      JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {\n          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n          if (!this._compilerConfig.useJit) {\n              return interpretStatements(result.statements, [result.stylesVar])[0];\n          }\n          else {\n              return jitStatements(\"/\" + result.meta.moduleUrl + \".ngstyle.js\", result.statements, [result.stylesVar])[0];\n          }\n      };\n      return JitCompiler;\n  }());\n  JitCompiler.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  JitCompiler.ctorParameters = function () { return [\n      { type: _angular_core.Injector, },\n      { type: CompileMetadataResolver, },\n      { type: TemplateParser, },\n      { type: StyleCompiler, },\n      { type: ViewCompiler, },\n      { type: NgModuleCompiler, },\n      { type: DirectiveWrapperCompiler, },\n      { type: CompilerConfig, },\n      { type: AnimationParser, },\n  ]; };\n  var CompiledTemplate = (function () {\n      function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {\n          this.isHost = isHost;\n          this.compType = compType;\n          this.compMeta = compMeta;\n          this.ngModule = ngModule;\n          this.directives = directives;\n          this._viewClass = null;\n          this.isCompiled = false;\n      }\n      CompiledTemplate.prototype.compiled = function (viewClass, rendererType) {\n          this._viewClass = viewClass;\n          this.compMeta.componentViewType.setDelegate(viewClass);\n          for (var prop in rendererType) {\n              this.compMeta.rendererType[prop] = rendererType[prop];\n          }\n          this.isCompiled = true;\n      };\n      return CompiledTemplate;\n  }());\n  function assertComponent(meta) {\n      if (!meta.isComponent) {\n          throw new Error(\"Could not compile '\" + identifierName(meta.type) + \"' because it is not a component.\");\n      }\n  }\n  /**\n   * Implements `Compiler` by delegating to the JitCompiler using a known module.\n   */\n  var ModuleBoundCompiler = (function () {\n      function ModuleBoundCompiler(_delegate, _ngModule) {\n          this._delegate = _delegate;\n          this._ngModule = _ngModule;\n      }\n      Object.defineProperty(ModuleBoundCompiler.prototype, \"_injector\", {\n          get: function () { return this._delegate.injector; },\n          enumerable: true,\n          configurable: true\n      });\n      ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {\n          return this._delegate.compileModuleSync(moduleType);\n      };\n      ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {\n          return this._delegate.compileModuleAsync(moduleType);\n      };\n      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n          return this._delegate.compileModuleAndAllComponentsSync(moduleType);\n      };\n      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);\n      };\n      ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) {\n          return this._delegate.getNgContentSelectors(component);\n      };\n      /**\n       * Clears all caches\n       */\n      ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };\n      /**\n       * Clears the cache for the given component/ngModule.\n       */\n      ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };\n      return ModuleBoundCompiler;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$32 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  /**\n   * A container for message extracted from the templates.\n   */\n  var MessageBundle = (function () {\n      function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {\n          if (_locale === void 0) { _locale = null; }\n          this._htmlParser = _htmlParser;\n          this._implicitTags = _implicitTags;\n          this._implicitAttrs = _implicitAttrs;\n          this._locale = _locale;\n          this._messages = [];\n      }\n      MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {\n          var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n          if (htmlParserResult.errors.length) {\n              return htmlParserResult.errors;\n          }\n          var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n          if (i18nParserResult.errors.length) {\n              return i18nParserResult.errors;\n          }\n          (_a = this._messages).push.apply(_a, i18nParserResult.messages);\n          var _a;\n      };\n      // Return the message in the internal format\n      // The public (serialized) format might be different, see the `write` method.\n      MessageBundle.prototype.getMessages = function () { return this._messages; };\n      MessageBundle.prototype.write = function (serializer) {\n          var messages = {};\n          var mapperVisitor = new MapPlaceholderNames();\n          // Deduplicate messages based on their ID\n          this._messages.forEach(function (message) {\n              var id = serializer.digest(message);\n              if (!messages.hasOwnProperty(id)) {\n                  messages[id] = message;\n              }\n          });\n          // Transform placeholder names using the serializer mapping\n          var msgList = Object.keys(messages).map(function (id) {\n              var mapper = serializer.createNameMapper(messages[id]);\n              var src = messages[id];\n              var nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n              return new Message(nodes, {}, {}, src.meaning, src.description, id);\n          });\n          return serializer.write(msgList, this._locale);\n      };\n      return MessageBundle;\n  }());\n  // Transform an i18n AST by renaming the placeholder nodes with the given mapper\n  var MapPlaceholderNames = (function (_super) {\n      __extends$32(MapPlaceholderNames, _super);\n      function MapPlaceholderNames() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      MapPlaceholderNames.prototype.convert = function (nodes, mapper) {\n          var _this = this;\n          return mapper ? nodes.map(function (n) { return n.visit(_this, mapper); }) : nodes;\n      };\n      MapPlaceholderNames.prototype.visitTagPlaceholder = function (ph, mapper) {\n          var _this = this;\n          var startName = mapper.toPublicName(ph.startName);\n          var closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n          var children = ph.children.map(function (n) { return n.visit(_this, mapper); });\n          return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\n      };\n      MapPlaceholderNames.prototype.visitPlaceholder = function (ph, mapper) {\n          return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n      };\n      MapPlaceholderNames.prototype.visitIcuPlaceholder = function (ph, mapper) {\n          return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n      };\n      return MapPlaceholderNames;\n  }(CloneVisitor));\n\n  var Extractor = (function () {\n      function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {\n          this.host = host;\n          this.staticSymbolResolver = staticSymbolResolver;\n          this.messageBundle = messageBundle;\n          this.metadataResolver = metadataResolver;\n      }\n      Extractor.prototype.extract = function (rootFiles) {\n          var _this = this;\n          var programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);\n          var _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;\n          return Promise\n              .all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))\n              .then(function () {\n              var errors = [];\n              files.forEach(function (file) {\n                  var compMetas = [];\n                  file.directives.forEach(function (directiveType) {\n                      var dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);\n                      if (dirMeta && dirMeta.isComponent) {\n                          compMetas.push(dirMeta);\n                      }\n                  });\n                  compMetas.forEach(function (compMeta) {\n                      var html = compMeta.template.template;\n                      var interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);\n                      errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));\n                  });\n              });\n              if (errors.length) {\n                  throw new Error(errors.map(function (e) { return e.toString(); }).join('\\n'));\n              }\n              return _this.messageBundle;\n          });\n      };\n      Extractor.create = function (host, locale) {\n          var htmlParser = new I18NHtmlParser(new HtmlParser());\n          var urlResolver = createOfflineCompileUrlResolver();\n          var symbolCache = new StaticSymbolCache();\n          var summaryResolver = new AotSummaryResolver(host, symbolCache);\n          var staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n          var staticReflector = new StaticReflector(staticSymbolResolver);\n          StaticAndDynamicReflectionCapabilities.install(staticReflector);\n          var config = new CompilerConfig({\n              genDebugInfo: false,\n              defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,\n              logBindingUpdate: false,\n              useJit: false\n          });\n          var normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);\n          var elementSchemaRegistry = new DomElementSchemaRegistry();\n          var resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, symbolCache, staticReflector);\n          // TODO(vicb): implicit tags & attributes\n          var messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n          var extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n          return { extractor: extractor, staticReflector: staticReflector };\n      };\n      return Extractor;\n  }());\n\n  var _NO_RESOURCE_LOADER = {\n      get: function (url) {\n          throw new Error(\"No ResourceLoader implementation has been provided. Can't read the url \\\"\" + url + \"\\\"\");\n      }\n  };\n  var baseHtmlParser = new _angular_core.InjectionToken('HtmlParser');\n  function viewCompilerFactory(cc, sr) {\n      return cc.useViewEngine ? new ViewCompilerNext(cc, sr) : new ViewCompiler(cc, sr);\n  }\n  /**\n   * A set of providers that provide `JitCompiler` and its dependencies to use for\n   * template compilation.\n   */\n  var COMPILER_PROVIDERS = [\n      { provide: _angular_core.ɵReflector, useValue: _angular_core.ɵreflector },\n      { provide: _angular_core.ɵReflectorReader, useExisting: _angular_core.ɵReflector },\n      { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },\n      SummaryResolver,\n      _angular_core.ɵConsole,\n      Lexer,\n      Parser,\n      {\n          provide: baseHtmlParser,\n          useClass: HtmlParser,\n      },\n      {\n          provide: I18NHtmlParser,\n          useFactory: function (parser, translations, format, config, console) {\n              return new I18NHtmlParser(parser, translations, format, config.missingTranslation, console);\n          },\n          deps: [\n              baseHtmlParser,\n              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],\n              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],\n              [CompilerConfig],\n              [_angular_core.ɵConsole],\n          ]\n      },\n      {\n          provide: HtmlParser,\n          useExisting: I18NHtmlParser,\n      },\n      TemplateParser,\n      DirectiveNormalizer,\n      CompileMetadataResolver,\n      DEFAULT_PACKAGE_URL_PROVIDER,\n      StyleCompiler,\n      { provide: USE_VIEW_ENGINE, useValue: false },\n      {\n          provide: ViewCompiler,\n          useFactory: viewCompilerFactory,\n          deps: [CompilerConfig, ElementSchemaRegistry]\n      },\n      NgModuleCompiler,\n      DirectiveWrapperCompiler,\n      { provide: CompilerConfig, useValue: new CompilerConfig() },\n      JitCompiler,\n      { provide: _angular_core.Compiler, useExisting: JitCompiler },\n      DomElementSchemaRegistry,\n      { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },\n      UrlResolver,\n      DirectiveResolver,\n      PipeResolver,\n      NgModuleResolver,\n      AnimationParser,\n  ];\n  var JitCompilerFactory = (function () {\n      function JitCompilerFactory(defaultOptions) {\n          var compilerOptions = {\n              useDebug: _angular_core.isDevMode(),\n              useJit: true,\n              defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,\n              missingTranslation: _angular_core.MissingTranslationStrategy.Warning,\n              enableLegacyTemplate: true,\n          };\n          this._defaultOptions = [compilerOptions].concat(defaultOptions);\n      }\n      JitCompilerFactory.prototype.createCompiler = function (options) {\n          if (options === void 0) { options = []; }\n          var opts = _mergeOptions(this._defaultOptions.concat(options));\n          var injector = _angular_core.ReflectiveInjector.resolveAndCreate([\n              COMPILER_PROVIDERS, {\n                  provide: CompilerConfig,\n                  useFactory: function (useViewEngine) {\n                      return new CompilerConfig({\n                          // let explicit values from the compiler options overwrite options\n                          // from the app providers. E.g. important for the testing platform.\n                          genDebugInfo: opts.useDebug,\n                          // let explicit values from the compiler options overwrite options\n                          // from the app providers\n                          useJit: opts.useJit,\n                          // let explicit values from the compiler options overwrite options\n                          // from the app providers\n                          defaultEncapsulation: opts.defaultEncapsulation,\n                          logBindingUpdate: opts.useDebug,\n                          missingTranslation: opts.missingTranslation, useViewEngine: useViewEngine,\n                          enableLegacyTemplate: opts.enableLegacyTemplate,\n                      });\n                  },\n                  deps: [USE_VIEW_ENGINE]\n              },\n              opts.providers\n          ]);\n          return injector.get(_angular_core.Compiler);\n      };\n      return JitCompilerFactory;\n  }());\n  JitCompilerFactory.decorators = [\n      { type: CompilerInjectable },\n  ];\n  /** @nocollapse */\n  JitCompilerFactory.ctorParameters = function () { return [\n      { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },\n  ]; };\n  function _initReflector() {\n      _angular_core.ɵreflector.reflectionCapabilities = new _angular_core.ɵReflectionCapabilities();\n  }\n  /**\n   * A platform that included corePlatform and the compiler.\n   *\n   * @experimental\n   */\n  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [\n      { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },\n      { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory },\n      { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },\n  ]);\n  function _mergeOptions(optionsArr) {\n      return {\n          useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),\n          useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),\n          defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),\n          providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; })),\n          missingTranslation: _lastDefined(optionsArr.map(function (options) { return options.missingTranslation; })),\n      };\n  }\n  function _lastDefined(args) {\n      for (var i = args.length - 1; i >= 0; i--) {\n          if (args[i] !== undefined) {\n              return args[i];\n          }\n      }\n      return undefined;\n  }\n  function _mergeArrays(parts) {\n      var result = [];\n      parts.forEach(function (part) { return part && result.push.apply(result, part); });\n      return result;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * Interface that defines how import statements should be generated.\n   */\n  var ImportResolver = (function () {\n      function ImportResolver() {\n      }\n      return ImportResolver;\n  }());\n\n  exports.VERSION = VERSION;\n  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;\n  exports.CompilerConfig = CompilerConfig;\n  exports.RenderTypes = RenderTypes;\n  exports.JitCompiler = JitCompiler;\n  exports.DirectiveResolver = DirectiveResolver;\n  exports.PipeResolver = PipeResolver;\n  exports.NgModuleResolver = NgModuleResolver;\n  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;\n  exports.InterpolationConfig = InterpolationConfig;\n  exports.NgModuleCompiler = NgModuleCompiler;\n  exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;\n  exports.ViewCompiler = ViewCompiler;\n  exports.AnimationParser = AnimationParser;\n  exports.isSyntaxError = isSyntaxError;\n  exports.syntaxError = syntaxError;\n  exports.TextAst = TextAst;\n  exports.BoundTextAst = BoundTextAst;\n  exports.AttrAst = AttrAst;\n  exports.BoundElementPropertyAst = BoundElementPropertyAst;\n  exports.BoundEventAst = BoundEventAst;\n  exports.ReferenceAst = ReferenceAst;\n  exports.VariableAst = VariableAst;\n  exports.ElementAst = ElementAst;\n  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;\n  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;\n  exports.DirectiveAst = DirectiveAst;\n  exports.ProviderAst = ProviderAst;\n  exports.NgContentAst = NgContentAst;\n  exports.templateVisitAll = templateVisitAll;\n  exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;\n  exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;\n  exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;\n  exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;\n  exports.CompileAnimationMetadata = CompileAnimationMetadata;\n  exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;\n  exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;\n  exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;\n  exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;\n  exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;\n  exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;\n  exports.identifierName = identifierName;\n  exports.identifierModuleUrl = identifierModuleUrl;\n  exports.viewClassName = viewClassName;\n  exports.rendererTypeName = rendererTypeName;\n  exports.hostViewClassName = hostViewClassName;\n  exports.dirWrapperClassName = dirWrapperClassName;\n  exports.componentFactoryName = componentFactoryName;\n  exports.tokenName = tokenName;\n  exports.tokenReference = tokenReference;\n  exports.CompileStylesheetMetadata = CompileStylesheetMetadata;\n  exports.CompileTemplateMetadata = CompileTemplateMetadata;\n  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;\n  exports.createHostComponentMeta = createHostComponentMeta;\n  exports.CompilePipeMetadata = CompilePipeMetadata;\n  exports.CompileNgModuleMetadata = CompileNgModuleMetadata;\n  exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;\n  exports.ProviderMeta = ProviderMeta;\n  exports.createAotCompiler = createAotCompiler;\n  exports.AotCompiler = AotCompiler;\n  exports.analyzeNgModules = analyzeNgModules;\n  exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;\n  exports.extractProgramSymbols = extractProgramSymbols;\n  exports.StaticReflector = StaticReflector;\n  exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;\n  exports.StaticSymbol = StaticSymbol;\n  exports.StaticSymbolCache = StaticSymbolCache;\n  exports.ResolvedStaticSymbol = ResolvedStaticSymbol;\n  exports.StaticSymbolResolver = StaticSymbolResolver;\n  exports.unescapeIdentifier = unescapeIdentifier;\n  exports.AotSummaryResolver = AotSummaryResolver;\n  exports.SummaryResolver = SummaryResolver;\n  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;\n  exports.JitCompilerFactory = JitCompilerFactory;\n  exports.platformCoreDynamic = platformCoreDynamic;\n  exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;\n  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;\n  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;\n  exports.UrlResolver = UrlResolver;\n  exports.getUrlScheme = getUrlScheme;\n  exports.ResourceLoader = ResourceLoader;\n  exports.ElementSchemaRegistry = ElementSchemaRegistry;\n  exports.Extractor = Extractor;\n  exports.I18NHtmlParser = I18NHtmlParser;\n  exports.MessageBundle = MessageBundle;\n  exports.Serializer = Serializer;\n  exports.Xliff = Xliff;\n  exports.Xmb = Xmb;\n  exports.Xtb = Xtb;\n  exports.DirectiveNormalizer = DirectiveNormalizer;\n  exports.ParserError = ParserError;\n  exports.ParseSpan = ParseSpan;\n  exports.AST = AST;\n  exports.Quote = Quote;\n  exports.EmptyExpr = EmptyExpr;\n  exports.ImplicitReceiver = ImplicitReceiver;\n  exports.Chain = Chain;\n  exports.Conditional = Conditional;\n  exports.PropertyRead = PropertyRead;\n  exports.PropertyWrite = PropertyWrite;\n  exports.SafePropertyRead = SafePropertyRead;\n  exports.KeyedRead = KeyedRead;\n  exports.KeyedWrite = KeyedWrite;\n  exports.BindingPipe = BindingPipe;\n  exports.LiteralPrimitive = LiteralPrimitive;\n  exports.LiteralArray = LiteralArray;\n  exports.LiteralMap = LiteralMap;\n  exports.Interpolation = Interpolation;\n  exports.Binary = Binary;\n  exports.PrefixNot = PrefixNot;\n  exports.MethodCall = MethodCall;\n  exports.SafeMethodCall = SafeMethodCall;\n  exports.FunctionCall = FunctionCall;\n  exports.ASTWithSource = ASTWithSource;\n  exports.TemplateBinding = TemplateBinding;\n  exports.RecursiveAstVisitor = RecursiveAstVisitor;\n  exports.AstTransformer = AstTransformer;\n  exports.Lexer = Lexer;\n  exports.Token = Token;\n  exports.EOF = EOF;\n  exports.isIdentifier = isIdentifier;\n  exports.isQuote = isQuote;\n  exports.SplitInterpolation = SplitInterpolation;\n  exports.TemplateBindingParseResult = TemplateBindingParseResult;\n  exports.Parser = Parser;\n  exports._ParseAST = _ParseAST;\n  exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;\n  exports.CompileMetadataResolver = CompileMetadataResolver;\n  exports.componentModuleUrl = componentModuleUrl;\n  exports.Text = Text;\n  exports.Expansion = Expansion;\n  exports.ExpansionCase = ExpansionCase;\n  exports.Attribute = Attribute$1;\n  exports.Element = Element;\n  exports.Comment = Comment;\n  exports.visitAll = visitAll;\n  exports.HtmlParser = HtmlParser;\n  exports.ParseTreeResult = ParseTreeResult;\n  exports.TreeError = TreeError;\n  exports.HtmlTagDefinition = HtmlTagDefinition;\n  exports.getHtmlTagDefinition = getHtmlTagDefinition;\n  exports.splitNsName = splitNsName;\n  exports.getNsPrefix = getNsPrefix;\n  exports.mergeNsAndName = mergeNsAndName;\n  exports.NAMED_ENTITIES = NAMED_ENTITIES;\n  exports.ImportResolver = ImportResolver;\n  exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;\n  exports.TypeScriptEmitter = TypeScriptEmitter;\n  exports.ParseLocation = ParseLocation;\n  exports.ParseSourceFile = ParseSourceFile;\n  exports.ParseSourceSpan = ParseSourceSpan;\n  exports.ParseError = ParseError;\n  exports.DomElementSchemaRegistry = DomElementSchemaRegistry;\n  exports.CssSelector = CssSelector;\n  exports.SelectorMatcher = SelectorMatcher;\n  exports.SelectorListContext = SelectorListContext;\n  exports.SelectorContext = SelectorContext;\n  exports.StylesCompileDependency = StylesCompileDependency;\n  exports.StylesCompileResult = StylesCompileResult;\n  exports.CompiledStylesheet = CompiledStylesheet;\n  exports.StyleCompiler = StyleCompiler;\n  exports.TemplateParseError = TemplateParseError;\n  exports.TemplateParseResult = TemplateParseResult;\n  exports.TemplateParser = TemplateParser;\n  exports.splitClasses = splitClasses;\n  exports.createElementCssSelector = createElementCssSelector;\n  exports.removeSummaryDuplicates = removeSummaryDuplicates;\n\n}));"},70:function(e,n){e.exports="(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define('@angular/core', ['exports', 'rxjs/Observable', 'rxjs/observable/merge', 'rxjs/operator/share', 'rxjs/symbol/observable', 'rxjs/Subject'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('rxjs/Observable'), require('rxjs/observable/merge'), require('rxjs/operator/share'), require('rxjs/symbol/observable'), require('rxjs/Subject'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.rxjsObservable, global.rxjsObservableMerge, global.rxjsOperatorShare, global.rxjsSymbolObservable, global.Rx);\n        global.ng = global.ng || {};\n        global.ng.core = mod.exports;\n    }\n})(this, function (exports, _Observable, _merge, _share, _observable, _Subject2) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.ɵy = exports.ɵx = exports.ɵb = exports.ɵa = exports.ɵu = exports.ɵt = exports.ɵv = exports.ɵr = exports.ɵs = exports.ɵq = exports.ɵj = exports.ɵe = exports.ɵd = exports.ɵc = exports.ɵl = exports.ɵk = exports.ɵi = exports.ɵh = exports.ɵg = exports.ɵf = exports.ɵo = exports.ɵn = exports.ɵm = exports.ɵp = exports.ɵbb = exports.ɵbi = exports.ɵbf = exports.ɵbg = exports.ɵbe = exports.ɵbh = exports.ɵbd = exports.ɵbc = exports.ɵz = exports.transition = exports.keyframes = exports.state = exports.style = exports.sequence = exports.group = exports.animate = exports.trigger = exports.AUTO_STYLE = exports.ɵviewDef = exports.ɵunwrapValue = exports.ɵtextDef = exports.ɵqueryDef = exports.ɵpurePipeDef = exports.ɵpureObjectDef = exports.ɵpureArrayDef = exports.ɵproviderDef = exports.ɵpipeDef = exports.ɵnodeValue = exports.ɵngContentDef = exports.ɵelementEventFullName = exports.ɵelementDef = exports.ɵdirectiveDef = exports.ɵcreateRendererTypeV2 = exports.ɵcreateComponentFactory = exports.ɵanchorDef = exports.ɵViewFlags = exports.ɵQueryValueType = exports.ɵQueryBindingType = undefined;\n    exports.ɵProviderType = exports.ɵNodeFlags = exports.ɵDepFlags = exports.ɵBindingType = exports.ɵArgumentType = exports.ɵsubscribeToRenderElement = exports.ɵsetBindingDebugInfoForChanges = exports.ɵsetBindingDebugInfo = exports.ɵselectOrCreateRenderHostElement = exports.ɵpureProxy9 = exports.ɵpureProxy8 = exports.ɵpureProxy7 = exports.ɵpureProxy6 = exports.ɵpureProxy5 = exports.ɵpureProxy4 = exports.ɵpureProxy3 = exports.ɵpureProxy2 = exports.ɵpureProxy10 = exports.ɵpureProxy1 = exports.ɵnoop = exports.ɵinterpolate = exports.ɵinlineInterpolate = exports.ɵgetComponentFactoryViewClass = exports.ɵcreateRenderElement = exports.ɵcreateRenderComponentType = exports.ɵcheckRenderText = exports.ɵcheckRenderStyle = exports.ɵcheckRenderProperty = exports.ɵcheckRenderClass = exports.ɵcheckRenderAttribute = exports.ɵcheckBindingChange = exports.ɵcheckBinding = exports.ɵcastByValue = exports.ɵViewUtils = exports.ɵInlineArrayDynamic = exports.ɵInlineArray8 = exports.ɵInlineArray4 = exports.ɵInlineArray2 = exports.ɵInlineArray16 = exports.ɵEMPTY_MAP = exports.ɵEMPTY_INLINE_ARRAY = exports.ɵEMPTY_ARRAY = exports.ɵTemplateRef_ = exports.ɵregisterModuleFactory = exports.ɵNgModuleInjector = exports.ɵComponentRef_ = exports.ɵisPromise = exports.ɵisObservable = exports.ɵmakeDecorator = exports.ɵRenderDebugInfo = exports.ɵReflectorReader = exports.ɵReflectionCapabilities = exports.ɵreflector = exports.ɵReflector = exports.ɵViewMetadata = exports.ɵLifecycleHooks = exports.ɵLIFECYCLE_HOOKS_VALUES = exports.ɵViewType = exports.ɵViewContainer = exports.ɵDebugAppView = exports.ɵAppView = exports.ɵStaticNodeDebugInfo = exports.ɵDebugContext = exports.ɵCodegenComponentFactoryResolver = exports.ɵComponentFactory = exports.ɵERROR_COMPONENT_TYPE = exports.ɵDebugDomRootRenderer = exports.ɵConsole = exports.ɵisDefaultChangeDetectionStrategy = exports.ɵChangeDetectorStatus = exports.ɵdevModeEqual = exports.ɵValueUnwrapper = exports.ɵAPP_ID_RANDOM_PROVIDER = exports.ɵALLOW_MULTIPLE_PLATFORMS = exports.ɵAnimationTransition = exports.ɵAnimationStyles = exports.ɵrenderStyles = exports.ɵprepareFinalAnimationStyles = exports.ɵflattenStyles = exports.ɵcollectAndResolveStyles = exports.ɵclearStyles = exports.ɵbalanceAnimationKeyframes = exports.ɵAnimationSequencePlayer = exports.ɵNoOpAnimationPlayer = exports.ɵAnimationPlayer = exports.ɵAnimationKeyframe = exports.ɵAnimationGroupPlayer = exports.ɵFILL_STYLE_FLAG = exports.ɵEMPTY_STATE = exports.ɵDEFAULT_STATE = exports.ɵANY_STATE = exports.platformCore = exports.WrappedValue = exports.SimpleChange = exports.KeyValueDiffers = exports.IterableDiffers = exports.DefaultIterableDiffer = exports.ChangeDetectorRef = exports.ChangeDetectionStrategy = exports.ViewRef = undefined;\n    exports.EmbeddedViewRef = exports.ViewContainerRef = exports.TemplateRef = exports.SystemJsNgModuleLoaderConfig = exports.SystemJsNgModuleLoader = exports.QueryList = exports.getModuleFactory = exports.NgModuleFactoryLoader = exports.NgModuleRef = exports.NgModuleFactory = exports.ElementRef = exports.ComponentFactoryResolver = exports.ComponentRef = exports.ComponentFactory = exports.ModuleWithComponentFactories = exports.CompilerFactory = exports.Compiler = exports.COMPILER_OPTIONS = exports.RootRenderer = exports.RendererV2 = exports.RendererFactoryV2 = exports.Renderer = exports.RenderComponentType = exports.NgZone = exports.Host = exports.SkipSelf = exports.Self = exports.Injectable = exports.Optional = exports.Inject = exports.OpaqueToken = exports.InjectionToken = exports.ReflectiveKey = exports.ResolvedReflectiveFactory = exports.ReflectiveInjector = exports.Injector = exports.resolveForwardRef = exports.forwardRef = exports.Class = exports.VERSION = exports.Version = exports.ViewEncapsulation = exports.NgModule = exports.NO_ERRORS_SCHEMA = exports.CUSTOM_ELEMENTS_SCHEMA = exports.Pipe = exports.Output = exports.Input = exports.HostListener = exports.HostBinding = exports.Directive = exports.Component = exports.ViewChildren = exports.ViewChild = exports.Query = exports.ContentChildren = exports.ContentChild = exports.Attribute = exports.ANALYZE_FOR_ENTRY_COMPONENTS = exports.SecurityContext = exports.Sanitizer = exports.AnimationKeyframe = exports.AnimationStyles = exports.AnimationPlayer = exports.ErrorHandler = exports.EventEmitter = exports.Type = exports.wtfEndTimeRange = exports.wtfStartTimeRange = exports.wtfLeave = exports.wtfCreateScope = exports.ApplicationModule = exports.MissingTranslationStrategy = exports.LOCALE_ID = exports.TRANSLATIONS_FORMAT = exports.TRANSLATIONS = exports.setTestabilityGetter = exports.TestabilityRegistry = exports.Testability = exports.getDebugNode = exports.asNativeElements = exports.DebugNode = exports.DebugElement = exports.ApplicationInitStatus = exports.APP_INITIALIZER = exports.APP_BOOTSTRAP_LISTENER = exports.PLATFORM_ID = exports.PLATFORM_INITIALIZER = exports.PACKAGE_ROOT_URL = exports.APP_ID = exports.NgProbeToken = exports.createPlatformFactory = exports.isDevMode = exports.enableProdMode = exports.ApplicationRef = exports.PlatformRef = exports.getPlatform = exports.destroyPlatform = exports.assertPlatform = exports.createPlatform = undefined;\n\n    var _slicedToArray = function () {\n        function sliceIterator(arr, i) {\n            var _arr = [];\n            var _n = true;\n            var _d = false;\n            var _e = undefined;\n\n            try {\n                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                    _arr.push(_s.value);\n\n                    if (i && _arr.length === i) break;\n                }\n            } catch (err) {\n                _d = true;\n                _e = err;\n            } finally {\n                try {\n                    if (!_n && _i[\"return\"]) _i[\"return\"]();\n                } finally {\n                    if (_d) throw _e;\n                }\n            }\n\n            return _arr;\n        }\n\n        return function (arr, i) {\n            if (Array.isArray(arr)) {\n                return arr;\n            } else if (Symbol.iterator in Object(arr)) {\n                return sliceIterator(arr, i);\n            } else {\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n            }\n        };\n    }();\n\n    var _get = function get(object, property, receiver) {\n        if (object === null) object = Function.prototype;\n        var desc = Object.getOwnPropertyDescriptor(object, property);\n\n        if (desc === undefined) {\n            var parent = Object.getPrototypeOf(object);\n\n            if (parent === null) {\n                return undefined;\n            } else {\n                return get(parent, property, receiver);\n            }\n        } else if (\"value\" in desc) {\n            return desc.value;\n        } else {\n            var getter = desc.get;\n\n            if (getter === undefined) {\n                return undefined;\n            }\n\n            return getter.call(receiver);\n        }\n    };\n\n    function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n            }\n\n            return arr2;\n        } else {\n            return Array.from(arr);\n        }\n    }\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var OpaqueToken = function () {\n        /**\n         * @param {?} _desc\n         */\n        function OpaqueToken(_desc) {\n            _classCallCheck(this, OpaqueToken);\n\n            this._desc = _desc;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(OpaqueToken, [{\n            key: 'toString',\n            value: function toString() {\n                return 'Token ' + this._desc;\n            }\n        }]);\n\n        return OpaqueToken;\n    }();\n\n    var InjectionToken = function (_OpaqueToken) {\n        _inherits(InjectionToken, _OpaqueToken);\n\n        /**\n         * @param {?} desc\n         */\n        function InjectionToken(desc) {\n            _classCallCheck(this, InjectionToken);\n\n            return _possibleConstructorReturn(this, (InjectionToken.__proto__ || Object.getPrototypeOf(InjectionToken)).call(this, desc));\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(InjectionToken, [{\n            key: 'toString',\n            value: function toString() {\n                return 'InjectionToken ' + this._desc;\n            }\n        }]);\n\n        return InjectionToken;\n    }(OpaqueToken);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */globalScope = void 0;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        } else {\n            globalScope = global;\n        }\n    } else {\n        globalScope = window;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var /** @type {?} */global$1 = globalScope;\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function getTypeNameForDebugging(type) {\n        return type['name'] || (typeof type === 'undefined' ? 'undefined' : _typeof(type));\n    }\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return '' + token.overriddenName;\n        }\n        if (token.name) {\n            return '' + token.name;\n        }\n        var /** @type {?} */res = token.toString();\n        var /** @type {?} */newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object');\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function print(obj) {\n        // tslint:disable-next-line:no-console\n        console.log(obj);\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function _warn(obj) {\n        console.warn(obj);\n    }\n    var /** @type {?} */_symbolIterator = null;\n    /**\n     * @return {?}\n     */\n    function getSymbolIterator() {\n        if (!_symbolIterator) {\n            if (globalScope.Symbol && Symbol.iterator) {\n                _symbolIterator = Symbol.iterator;\n            } else {\n                // es6-shim specific logic\n                var /** @type {?} */keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var /** @type {?} */i = 0; i < keys.length; ++i) {\n                    var /** @type {?} */key = keys[i];\n                    if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    var /** @type {?} */_nextClassId = 0;\n    var /** @type {?} */Reflect = global$1.Reflect;\n    /**\n     * @param {?} annotation\n     * @return {?}\n     */\n    function extractAnnotation(annotation) {\n        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n            // it is a decorator, extract annotation\n            annotation = annotation.annotation;\n        }\n        return annotation;\n    }\n    /**\n     * @param {?} fnOrArray\n     * @param {?} key\n     * @return {?}\n     */\n    function applyParams(fnOrArray, key) {\n        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {\n            throw new Error('Can not use native ' + stringify(fnOrArray) + ' as constructor');\n        }\n        if (typeof fnOrArray === 'function') {\n            return fnOrArray;\n        }\n        if (Array.isArray(fnOrArray)) {\n            var /** @type {?} */annotations = fnOrArray;\n            var /** @type {?} */annoLength = annotations.length - 1;\n            var /** @type {?} */fn = fnOrArray[annoLength];\n            if (typeof fn !== 'function') {\n                throw new Error('Last position of Class method array must be Function in key ' + key + ' was \\'' + stringify(fn) + '\\'');\n            }\n            if (annoLength != fn.length) {\n                throw new Error('Number of annotations (' + annoLength + ') does not match number of arguments (' + fn.length + ') in the function: ' + stringify(fn));\n            }\n            var /** @type {?} */paramsAnnotations = [];\n            for (var /** @type {?} */i = 0, /** @type {?} */ii = annotations.length - 1; i < ii; i++) {\n                var /** @type {?} */paramAnnotations = [];\n                paramsAnnotations.push(paramAnnotations);\n                var /** @type {?} */annotation = annotations[i];\n                if (Array.isArray(annotation)) {\n                    for (var /** @type {?} */j = 0; j < annotation.length; j++) {\n                        paramAnnotations.push(extractAnnotation(annotation[j]));\n                    }\n                } else if (typeof annotation === 'function') {\n                    paramAnnotations.push(extractAnnotation(annotation));\n                } else {\n                    paramAnnotations.push(annotation);\n                }\n            }\n            Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n            return fn;\n        }\n        throw new Error('Only Function or Array is supported in Class definition for key \\'' + key + '\\' is \\'' + stringify(fnOrArray) + '\\'');\n    }\n    /**\n     * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n     *\n     * ## Basic Example\n     *\n     * ```\n     * var Greeter = ng.Class({\n     *   constructor: function(name) {\n     *     this.name = name;\n     *   },\n     *\n     *   greet: function() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class Greeter {\n     *   constructor(name) {\n     *     this.name = name;\n     *   }\n     *\n     *   greet() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * }\n     * ```\n     *\n     * or equivalent to ES5:\n     *\n     * ```\n     * var Greeter = function (name) {\n     *   this.name = name;\n     * }\n     *\n     * Greeter.prototype.greet = function () {\n     *   alert('Hello ' + this.name + '!');\n     * }\n     * ```\n     *\n     * ### Example with parameter annotations\n     *\n     * ```\n     * var MyService = ng.Class({\n     *   constructor: [String, [new Optional(), Service], function(name, myService) {\n     *     ...\n     *   }]\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class MyService {\n     *   constructor(name: string, \\@Optional() myService: Service) {\n     *     ...\n     *   }\n     * }\n     * ```\n     *\n     * ### Example with inheritance\n     *\n     * ```\n     * var Shape = ng.Class({\n     *   constructor: (color) {\n     *     this.color = color;\n     *   }\n     * });\n     *\n     * var Square = ng.Class({\n     *   extends: Shape,\n     *   constructor: function(color, size) {\n     *     Shape.call(this, color);\n     *     this.size = size;\n     *   }\n     * });\n     * ```\n     * @suppress {globalThis}\n     * \\@stable\n     * @param {?} clsDef\n     * @return {?}\n     */\n    function Class(clsDef) {\n        var /** @type {?} */constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n        var /** @type {?} */proto = constructor.prototype;\n        if (clsDef.hasOwnProperty('extends')) {\n            if (typeof clsDef.extends === 'function') {\n                constructor.prototype = proto = Object.create(clsDef.extends.prototype);\n            } else {\n                throw new Error('Class definition \\'extends\\' property must be a constructor function was: ' + stringify(clsDef.extends));\n            }\n        }\n        for (var /** @type {?} */key in clsDef) {\n            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {\n                proto[key] = applyParams(clsDef[key], key);\n            }\n        }\n        if (this && this.annotations instanceof Array) {\n            Reflect.defineMetadata('annotations', this.annotations, constructor);\n        }\n        var /** @type {?} */constructorName = constructor['name'];\n        if (!constructorName || constructorName === 'constructor') {\n            constructor['overriddenName'] = 'class' + _nextClassId++;\n        }\n        return constructor;\n    }\n    /**\n     * @suppress {globalThis}\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @param {?=} chainFn\n     * @return {?}\n     */\n    function makeDecorator(name, props, parentClass) {\n        var chainFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n        var /** @type {?} */metaCtor = makeMetadataCtor([props]);\n        /**\n         * @param {?} objOrType\n         * @return {?}\n         */\n        function DecoratorFactory(objOrType) {\n            if (!(Reflect && Reflect.getOwnMetadata)) {\n                throw 'reflect-metadata shim is required when using class decorators';\n            }\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call(this, objOrType);\n                return this;\n            }\n            var /** @type {?} */annotationInstance = new DecoratorFactory(objOrType);\n            var /** @type {?} */chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n            chainAnnotation.push(annotationInstance);\n            var /** @type {?} */TypeDecorator = function TypeDecorator(cls) {\n                var /** @type {?} */annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n                annotations.push(annotationInstance);\n                Reflect.defineMetadata('annotations', annotations, cls);\n                return cls;\n            };\n            TypeDecorator.annotations = chainAnnotation;\n            TypeDecorator.Class = Class;\n            if (chainFn) chainFn(TypeDecorator);\n            return TypeDecorator;\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.toString = function () {\n            return '@' + name;\n        };\n        DecoratorFactory.annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    }\n    /**\n     * @param {?} props\n     * @return {?}\n     */\n    function makeMetadataCtor(props) {\n        return function ctor() {\n            var _this2 = this;\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            props.forEach(function (prop, i) {\n                var /** @type {?} */argVal = args[i];\n                if (Array.isArray(prop)) {\n                    // plain parameter\n                    _this2[prop[0]] = argVal === undefined ? prop[1] : argVal;\n                } else {\n                    for (var /** @type {?} */propName in prop) {\n                        _this2[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];\n                    }\n                }\n            });\n        };\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @return {?}\n     */\n    function makeParamDecorator(name, props, parentClass) {\n        var /** @type {?} */metaCtor = makeMetadataCtor(props);\n        /**\n         * @param {...?} args\n         * @return {?}\n         */\n        function ParamDecoratorFactory() {\n            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n            }\n\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var /** @type {?} */annotationInstance = new (Function.prototype.bind.apply(ParamDecoratorFactory, [null].concat(args)))();\n            ParamDecorator.annotation = annotationInstance;\n            return ParamDecorator;\n            /**\n             * @param {?} cls\n             * @param {?} unusedKey\n             * @param {?} index\n             * @return {?}\n             */\n            function ParamDecorator(cls, unusedKey, index) {\n                var /** @type {?} */parameters = Reflect.getOwnMetadata('parameters', cls) || [];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                parameters[index] = parameters[index] || [];\n                parameters[index].push(annotationInstance);\n                Reflect.defineMetadata('parameters', parameters, cls);\n                return cls;\n            }\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.toString = function () {\n            return '@' + name;\n        };\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @return {?}\n     */\n    function makePropDecorator(name, props, parentClass) {\n        var /** @type {?} */metaCtor = makeMetadataCtor(props);\n        /**\n         * @param {...?} args\n         * @return {?}\n         */\n        function PropDecoratorFactory() {\n            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n            }\n\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var /** @type {?} */decoratorInstance = new (Function.prototype.bind.apply(PropDecoratorFactory, [null].concat(args)))();\n            return function PropDecorator(target, name) {\n                var /** @type {?} */meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                Reflect.defineMetadata('propMetadata', meta, target.constructor);\n            };\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.toString = function () {\n            return '@' + name;\n        };\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    }\n\n    /**\n     * This token can be used to create a virtual provider that will populate the\n     * `entryComponents` fields of components and ng modules based on its `useValue`.\n     * All components that are referenced in the `useValue` value (either directly\n     * or in a nested array or map) will be added to the `entryComponents` property.\n     *\n     * ### Example\n     * The following example shows how the router can populate the `entryComponents`\n     * field of an NgModule based on the router configuration which refers\n     * to components.\n     *\n     * ```typescript\n     * // helper function inside the router\n     * function provideRoutes(routes) {\n     *   return [\n     *     {provide: ROUTES, useValue: routes},\n     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n     *   ];\n     * }\n     *\n     * // user code\n     * let routes = [\n     *   {path: '/root', component: RootComp},\n     *   {path: '/teams', component: TeamsComp}\n     * ];\n     *\n     * @NgModule({\n     *   providers: [provideRoutes(routes)]\n     * })\n     * class ModuleWithRoutes {}\n     * ```\n     *\n     * @experimental\n     */\n    var /** @type {?} */ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n    /**\n     * Attribute decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);\n    /**\n     * Base class for query metadata.\n     *\n     * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n     * more information.\n     *\n     * \\@stable\n     * @abstract\n     */\n\n    var Query = function Query() {\n        _classCallCheck(this, Query);\n    };\n\n    /**\n     * ContentChildren decorator and metadata.\n     *\n     *  @stable\n     *  @Annotation\n     */\n    var /** @type {?} */ContentChildren = makePropDecorator('ContentChildren', [['selector', undefined], {\n        first: false,\n        isViewQuery: false,\n        descendants: false,\n        read: undefined\n    }], Query);\n    /**\n     * ContentChild decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ContentChild = makePropDecorator('ContentChild', [['selector', undefined], {\n        first: true,\n        isViewQuery: false,\n        descendants: true,\n        read: undefined\n    }], Query);\n    /**\n     * ViewChildren decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ViewChildren = makePropDecorator('ViewChildren', [['selector', undefined], {\n        first: false,\n        isViewQuery: true,\n        descendants: true,\n        read: undefined\n    }], Query);\n    /**\n     * ViewChild decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ViewChild = makePropDecorator('ViewChild', [['selector', undefined], {\n        first: true,\n        isViewQuery: true,\n        descendants: true,\n        read: undefined\n    }], Query);\n\n    var ChangeDetectionStrategy = {};\n    ChangeDetectionStrategy.OnPush = 0;\n    ChangeDetectionStrategy.Default = 1;\n    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\n    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n    var ChangeDetectorStatus = {};\n    ChangeDetectorStatus.CheckOnce = 0;\n    ChangeDetectorStatus.Checked = 1;\n    ChangeDetectorStatus.CheckAlways = 2;\n    ChangeDetectorStatus.Detached = 3;\n    ChangeDetectorStatus.Errored = 4;\n    ChangeDetectorStatus.Destroyed = 5;\n    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\n    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n    /**\n     * @param {?} changeDetectionStrategy\n     * @return {?}\n     */\n    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n        return isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;\n    }\n\n    /**\n     * Directive decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Directive = makeDecorator('Directive', {\n        selector: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        host: undefined,\n        providers: undefined,\n        exportAs: undefined,\n        queries: undefined\n    });\n    /**\n     * Component decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Component = makeDecorator('Component', {\n        selector: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        host: undefined,\n        exportAs: undefined,\n        moduleId: undefined,\n        providers: undefined,\n        viewProviders: undefined,\n        changeDetection: ChangeDetectionStrategy.Default,\n        queries: undefined,\n        templateUrl: undefined,\n        template: undefined,\n        styleUrls: undefined,\n        styles: undefined,\n        animations: undefined,\n        encapsulation: undefined,\n        interpolation: undefined,\n        entryComponents: undefined\n    }, Directive);\n    /**\n     * Pipe decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Pipe = makeDecorator('Pipe', {\n        name: undefined,\n        pure: true\n    });\n    /**\n     * Input decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);\n    /**\n     * Output decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);\n    /**\n     * HostBinding decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);\n    /**\n     * HostListener decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);\n\n    /**\n     * Defines a schema that will allow:\n     * - any non-Angular elements with a `-` in their name,\n     * - any properties on elements with a `-` in their name which is the common rule for custom\n     * elements.\n     *\n     * @stable\n     */\n    var /** @type {?} */CUSTOM_ELEMENTS_SCHEMA = {\n        name: 'custom-elements'\n    };\n    /**\n     * Defines a schema that will allow any property on any element.\n     *\n     * @experimental\n     */\n    var /** @type {?} */NO_ERRORS_SCHEMA = {\n        name: 'no-errors-schema'\n    };\n    /**\n     * NgModule decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */NgModule = makeDecorator('NgModule', {\n        providers: undefined,\n        declarations: undefined,\n        imports: undefined,\n        exports: undefined,\n        entryComponents: undefined,\n        bootstrap: undefined,\n        schemas: undefined,\n        id: undefined\n    });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ViewEncapsulation = {};\n    ViewEncapsulation.Emulated = 0;\n    ViewEncapsulation.Native = 1;\n    ViewEncapsulation.None = 2;\n    ViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\n    ViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\n    ViewEncapsulation[ViewEncapsulation.None] = \"None\";\n    /**\n     * Metadata properties available for configuring Views.\n     *\n     * For details on the `\\@Component` annotation, see {\\@link Component}.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: 'Hello {{name}}!',\n     * })\n     * class Greet {\n     *   name: string;\n     *\n     *   constructor() {\n     *     this.name = 'World';\n     *   }\n     * }\n     * ```\n     *\n     * @deprecated Use Component instead.\n     *\n     * {\\@link Component}\n     */\n\n    var ViewMetadata =\n    /**\n     * @param {?=} __0\n     */\n    function ViewMetadata() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            templateUrl = _ref.templateUrl,\n            template = _ref.template,\n            encapsulation = _ref.encapsulation,\n            styles = _ref.styles,\n            styleUrls = _ref.styleUrls,\n            animations = _ref.animations,\n            interpolation = _ref.interpolation;\n\n        _classCallCheck(this, ViewMetadata);\n\n        this.templateUrl = templateUrl;\n        this.template = template;\n        this.styleUrls = styleUrls;\n        this.styles = styles;\n        this.encapsulation = encapsulation;\n        this.animations = animations;\n        this.interpolation = interpolation;\n    };\n\n    var Version = function () {\n        /**\n         * @param {?} full\n         */\n        function Version(full) {\n            _classCallCheck(this, Version);\n\n            this.full = full;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(Version, [{\n            key: 'major',\n            get: function get() {\n                return this.full.split('.')[0];\n            }\n        }, {\n            key: 'minor',\n            get: function get() {\n                return this.full.split('.')[1];\n            }\n        }, {\n            key: 'patch',\n            get: function get() {\n                return this.full.split('.').slice(2).join('.');\n            }\n        }]);\n\n        return Version;\n    }();\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */VERSION = new Version('4.0.0-rc.1');\n\n    /**\n     * Inject decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Inject = makeParamDecorator('Inject', [['token', undefined]]);\n    /**\n     * Optional decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Optional = makeParamDecorator('Optional', []);\n    /**\n     * Injectable decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Injectable = makeDecorator('Injectable', []);\n    /**\n     * Self decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Self = makeParamDecorator('Self', []);\n    /**\n     * SkipSelf decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */SkipSelf = makeParamDecorator('SkipSelf', []);\n    /**\n     * Host decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */Host = makeParamDecorator('Host', []);\n\n    /**\n     * Allows to refer to references which are not yet defined.\n     *\n     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n     * DI is declared,\n     * but not yet defined. It is also used when the `token` which we use when creating a query is not\n     * yet defined.\n     *\n     * ### Example\n     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n     * \\@experimental\n     * @param {?} forwardRefFn\n     * @return {?}\n     */\n    function forwardRef(forwardRefFn) {\n        forwardRefFn.__forward_ref__ = forwardRef;\n        forwardRefFn.toString = function () {\n            return stringify(this());\n        };\n        return forwardRefFn;\n    }\n    /**\n     * Lazily retrieves the reference value from a forwardRef.\n     *\n     * Acts as the identity function when given a non-forward-ref value.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n     *\n     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n     *\n     * See: {\\@link forwardRef}\n     * \\@experimental\n     * @param {?} type\n     * @return {?}\n     */\n    function resolveForwardRef(type) {\n        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {\n            return type();\n        } else {\n            return type;\n        }\n    }\n\n    var /** @type {?} */_THROW_IF_NOT_FOUND = new Object();\n    var /** @type {?} */THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n    var _NullInjector = function () {\n        function _NullInjector() {\n            _classCallCheck(this, _NullInjector);\n        }\n\n        _createClass(_NullInjector, [{\n            key: 'get',\n            value: function get(token) {\n                var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _THROW_IF_NOT_FOUND;\n\n                if (notFoundValue === _THROW_IF_NOT_FOUND) {\n                    throw new Error('No provider for ' + stringify(token) + '!');\n                }\n                return notFoundValue;\n            }\n        }]);\n\n        return _NullInjector;\n    }();\n\n    var Injector = function () {\n        function Injector() {\n            _classCallCheck(this, Injector);\n        }\n\n        _createClass(Injector, [{\n            key: 'get',\n            value: function get(token, notFoundValue) {}\n        }, {\n            key: 'get',\n            value: function get(token, notFoundValue) {}\n        }]);\n\n        return Injector;\n    }();\n\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new _NullInjector();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ERROR_TYPE = 'ngType';\n    var /** @type {?} */ERROR_COMPONENT_TYPE = 'ngComponentType';\n    var /** @type {?} */ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n    var /** @type {?} */ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    function getType(error) {\n        return error[ERROR_TYPE];\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    function getDebugContext(error) {\n        return error[ERROR_DEBUG_CONTEXT];\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    function getOriginalError(error) {\n        return error[ERROR_ORIGINAL_ERROR];\n    }\n\n    /**\n     * \\@whatItDoes Provides a hook for centralized exception handling.\n     *\n     * \\@description\n     *\n     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n     * intercept error handling, write a custom exception handler that replaces this default as\n     * appropriate for your app.\n     *\n     * ### Example\n     *\n     * ```\n     * class MyErrorHandler implements ErrorHandler {\n     *   handleError(error) {\n     *     // do something with the exception\n     *   }\n     * }\n     *\n     * \\@NgModule({\n     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     * \\@stable\n     */\n\n    var ErrorHandler = function () {\n        /**\n         * @param {?=} rethrowError\n         */\n        function ErrorHandler() {\n            var rethrowError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            _classCallCheck(this, ErrorHandler);\n\n            /**\n             * @internal\n             */\n            this._console = console;\n            this.rethrowError = rethrowError;\n        }\n        /**\n         * @param {?} error\n         * @return {?}\n         */\n\n\n        _createClass(ErrorHandler, [{\n            key: 'handleError',\n            value: function handleError(error) {\n                this._console.error('EXCEPTION: ' + this._extractMessage(error));\n                if (error instanceof Error) {\n                    var /** @type {?} */originalError = this._findOriginalError(error);\n                    var /** @type {?} */originalStack = this._findOriginalStack(error);\n                    var /** @type {?} */context = this._findContext(error);\n                    if (originalError) {\n                        this._console.error('ORIGINAL EXCEPTION: ' + this._extractMessage(originalError));\n                    }\n                    if (originalStack) {\n                        this._console.error('ORIGINAL STACKTRACE:');\n                        this._console.error(originalStack);\n                    }\n                    if (context) {\n                        this._console.error('ERROR CONTEXT:');\n                        this._console.error(context);\n                    }\n                }\n                // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n                // when an error happens. If we do not rethrow, bootstrap will always succeed.\n                if (this.rethrowError) throw error;\n            }\n        }, {\n            key: '_extractMessage',\n            value: function _extractMessage(error) {\n                return error instanceof Error ? error.message : error.toString();\n            }\n        }, {\n            key: '_findContext',\n            value: function _findContext(error) {\n                if (error) {\n                    return getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error));\n                }\n                return null;\n            }\n        }, {\n            key: '_findOriginalError',\n            value: function _findOriginalError(error) {\n                var /** @type {?} */e = getOriginalError(error);\n                while (e && getOriginalError(e)) {\n                    e = getOriginalError(e);\n                }\n                return e;\n            }\n        }, {\n            key: '_findOriginalStack',\n            value: function _findOriginalStack(error) {\n                var /** @type {?} */e = error;\n                var /** @type {?} */stack = e.stack;\n                while (e instanceof Error && getOriginalError(e)) {\n                    e = getOriginalError(e);\n                    if (e instanceof Error && e.stack) {\n                        stack = e.stack;\n                    }\n                }\n                return stack;\n            }\n        }]);\n\n        return ErrorHandler;\n    }();\n\n    /**\n     * @param {?} message\n     * @param {?} originalError\n     * @return {?}\n     */\n    function wrappedError(message, originalError) {\n        var /** @type {?} */msg = message + ' caused by: ' + (originalError instanceof Error ? originalError.message : originalError);\n        var /** @type {?} */error = Error(msg);\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n\n    /**\n     * @param {?} keys\n     * @return {?}\n     */\n    function findFirstClosedCycle(keys) {\n        var /** @type {?} */res = [];\n        for (var /** @type {?} */i = 0; i < keys.length; ++i) {\n            if (res.indexOf(keys[i]) > -1) {\n                res.push(keys[i]);\n                return res;\n            }\n            res.push(keys[i]);\n        }\n        return res;\n    }\n    /**\n     * @param {?} keys\n     * @return {?}\n     */\n    function constructResolvingPath(keys) {\n        if (keys.length > 1) {\n            var /** @type {?} */reversed = findFirstClosedCycle(keys.slice().reverse());\n            var /** @type {?} */tokenStrs = reversed.map(function (k) {\n                return stringify(k.token);\n            });\n            return ' (' + tokenStrs.join(' -> ') + ')';\n        }\n        return '';\n    }\n    /**\n     * @param {?} injector\n     * @param {?} key\n     * @param {?} constructResolvingMessage\n     * @param {?=} originalError\n     * @return {?}\n     */\n    function injectionError(injector, key, constructResolvingMessage, originalError) {\n        var /** @type {?} */error = originalError ? wrappedError('', originalError) : Error();\n        error.addKey = addKey;\n        error.keys = [key];\n        error.injectors = [injector];\n        error.constructResolvingMessage = constructResolvingMessage;\n        error.message = error.constructResolvingMessage();\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n    /**\n     * @this {?}\n     * @param {?} injector\n     * @param {?} key\n     * @return {?}\n     */\n    function addKey(injector, key) {\n        this.injectors.push(injector);\n        this.keys.push(key);\n        this.message = this.constructResolvingMessage();\n    }\n    /**\n     * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n     * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b:B) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     * @param {?} injector\n     * @param {?} key\n     * @return {?}\n     */\n    function noProviderError(injector, key) {\n        return injectionError(injector, key, function () {\n            var /** @type {?} */first = stringify(this.keys[0].token);\n            return 'No provider for ' + first + '!' + constructResolvingPath(this.keys);\n        });\n    }\n    /**\n     * Thrown when dependencies form a cycle.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n     * ]);\n     *\n     * expect(() => injector.get(\"one\")).toThrowError();\n     * ```\n     *\n     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n     * @param {?} injector\n     * @param {?} key\n     * @return {?}\n     */\n    function cyclicDependencyError(injector, key) {\n        return injectionError(injector, key, function () {\n            return 'Cannot instantiate cyclic dependency!' + constructResolvingPath(this.keys);\n        });\n    }\n    /**\n     * Thrown when a constructing type returns with an Error.\n     *\n     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n     * this object to be instantiated.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor() {\n     *     throw new Error('message');\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     * try {\n     *   injector.get(A);\n     * } catch (e) {\n     *   expect(e instanceof InstantiationError).toBe(true);\n     *   expect(e.originalException.message).toEqual(\"message\");\n     *   expect(e.originalStack).toBeDefined();\n     * }\n     * ```\n     * @param {?} injector\n     * @param {?} originalException\n     * @param {?} originalStack\n     * @param {?} key\n     * @return {?}\n     */\n    function instantiationError(injector, originalException, originalStack, key) {\n        return injectionError(injector, key, function () {\n            var /** @type {?} */first = stringify(this.keys[0].token);\n            return getOriginalError(this).message + ': Error during instantiation of ' + first + '!' + constructResolvingPath(this.keys) + '.';\n        }, originalException);\n    }\n    /**\n     * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n     * creation.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n     * ```\n     * @param {?} provider\n     * @return {?}\n     */\n    function invalidProviderError(provider) {\n        return Error('Invalid provider - only instances of Provider and Type are allowed, got: ' + provider);\n    }\n    /**\n     * Thrown when the class has no annotation information.\n     *\n     * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n     * need to be injected into the constructor.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     *\n     * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n     *\n     * ```typescript\n     * class B {}\n     *\n     * class A {\n     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n     * ```\n     * \\@stable\n     * @param {?} typeOrFunc\n     * @param {?} params\n     * @return {?}\n     */\n    function noAnnotationError(typeOrFunc, params) {\n        var /** @type {?} */signature = [];\n        for (var /** @type {?} */i = 0, /** @type {?} */ii = params.length; i < ii; i++) {\n            var /** @type {?} */parameter = params[i];\n            if (!parameter || parameter.length == 0) {\n                signature.push('?');\n            } else {\n                signature.push(parameter.map(stringify).join(' '));\n            }\n        }\n        return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' + stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n    }\n    /**\n     * Thrown when getting an object by index.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n     *\n     * ```typescript\n     * class A {}\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     *\n     * expect(() => injector.getAt(100)).toThrowError();\n     * ```\n     * \\@stable\n     * @param {?} index\n     * @return {?}\n     */\n    function outOfBoundsError(index) {\n        return Error('Index ' + index + ' is out-of-bounds.');\n    }\n    /**\n     * Thrown when a multi provider and a regular provider are bound to the same token.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\n     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n     * ])).toThrowError();\n     * ```\n     * @param {?} provider1\n     * @param {?} provider2\n     * @return {?}\n     */\n    function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n        return Error('Cannot mix multi providers and regular providers, got: ' + provider1 + ' ' + provider2);\n    }\n\n    /**\n     * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n     *\n     * Keys have:\n     * - a system-wide unique `id`.\n     * - a `token`.\n     *\n     * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n     * the\n     * injector to store created objects in a more efficient way.\n     *\n     * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n     * resolving\n     * providers.\n     * \\@experimental\n     */\n\n    var ReflectiveKey = function () {\n        /**\n         * Private\n         * @param {?} token\n         * @param {?} id\n         */\n        function ReflectiveKey(token, id) {\n            _classCallCheck(this, ReflectiveKey);\n\n            this.token = token;\n            this.id = id;\n            if (!token) {\n                throw new Error('Token must be defined!');\n            }\n        }\n        /**\n         * Returns a stringified token.\n         * @return {?}\n         */\n\n\n        _createClass(ReflectiveKey, [{\n            key: 'displayName',\n            get: function get() {\n                return stringify(this.token);\n            }\n        }], [{\n            key: 'get',\n            value: function get(token) {\n                return _globalKeyRegistry.get(resolveForwardRef(token));\n            }\n        }, {\n            key: 'numberOfKeys',\n            get: function get() {\n                return _globalKeyRegistry.numberOfKeys;\n            }\n        }]);\n\n        return ReflectiveKey;\n    }();\n\n    var KeyRegistry = function () {\n        function KeyRegistry() {\n            _classCallCheck(this, KeyRegistry);\n\n            this._allKeys = new Map();\n        }\n        /**\n         * @param {?} token\n         * @return {?}\n         */\n\n\n        _createClass(KeyRegistry, [{\n            key: 'get',\n            value: function get(token) {\n                if (token instanceof ReflectiveKey) return token;\n                if (this._allKeys.has(token)) {\n                    return this._allKeys.get(token);\n                }\n                var /** @type {?} */newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n                this._allKeys.set(token, newKey);\n                return newKey;\n            }\n        }, {\n            key: 'numberOfKeys',\n            get: function get() {\n                return this._allKeys.size;\n            }\n        }]);\n\n        return KeyRegistry;\n    }();\n\n    var /** @type {?} */_globalKeyRegistry = new KeyRegistry();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @whatItDoes Represents a type that a Component or other object is instances of.\n     *\n     * @description\n     *\n     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n     * the `MyCustomComponent` constructor function.\n     *\n     * @stable\n     */\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */var /** @type {?} */Type = Function;\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function isType(v) {\n        return typeof v === 'function';\n    }\n\n    /**\n     * Attention: This regex has to hold even if the code is minified!\n     */\n    var /** @type {?} */DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{\\s*(\"use strict\";)?\\s*(return\\s+)?(\\S+\\s+!==\\s+null\\s+&&\\s+)?\\S+\\.apply\\(this,\\s*arguments\\)/;\n\n    var ReflectionCapabilities = function () {\n        /**\n         * @param {?=} reflect\n         */\n        function ReflectionCapabilities(reflect) {\n            _classCallCheck(this, ReflectionCapabilities);\n\n            this._reflect = reflect || global$1.Reflect;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ReflectionCapabilities, [{\n            key: 'isReflectionEnabled',\n            value: function isReflectionEnabled() {\n                return true;\n            }\n        }, {\n            key: 'factory',\n            value: function factory(t) {\n                return function () {\n                    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                        args[_key4] = arguments[_key4];\n                    }\n\n                    return new (Function.prototype.bind.apply(t, [null].concat(args)))();\n                };\n            }\n        }, {\n            key: '_zipTypesAndAnnotations',\n            value: function _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n                var /** @type {?} */result = void 0;\n                if (typeof paramTypes === 'undefined') {\n                    result = new Array(paramAnnotations.length);\n                } else {\n                    result = new Array(paramTypes.length);\n                }\n                for (var /** @type {?} */i = 0; i < result.length; i++) {\n                    // TS outputs Object for parameters without types, while Traceur omits\n                    // the annotations. For now we preserve the Traceur behavior to aid\n                    // migration, but this can be revisited.\n                    if (typeof paramTypes === 'undefined') {\n                        result[i] = [];\n                    } else if (paramTypes[i] != Object) {\n                        result[i] = [paramTypes[i]];\n                    } else {\n                        result[i] = [];\n                    }\n                    if (paramAnnotations && isPresent(paramAnnotations[i])) {\n                        result[i] = result[i].concat(paramAnnotations[i]);\n                    }\n                }\n                return result;\n            }\n        }, {\n            key: '_ownParameters',\n            value: function _ownParameters(type, parentCtor) {\n                // If we have no decorators, we only have function.length as metadata.\n                // In that case, to detect whether a child class declared an own constructor or not,\n                // we need to look inside of that constructor to check whether it is\n                // just calling the parent.\n                // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n                // that sets 'design:paramtypes' to []\n                // if a class inherits from another class but has no ctor declared itself.\n                if (DELEGATE_CTOR.exec(type.toString())) {\n                    return null;\n                }\n                // Prefer the direct API.\n                if (type.parameters && type.parameters !== parentCtor.parameters) {\n                    return type.parameters;\n                }\n                // API of tsickle for lowering decorators to properties on the class.\n                var /** @type {?} */tsickleCtorParams = type.ctorParameters;\n                if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n                    // Newer tsickle uses a function closure\n                    // Retain the non-function case for compatibility with older tsickle\n                    var /** @type {?} */ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n                    var /** @type {?} */paramTypes = ctorParameters.map(function (ctorParam) {\n                        return ctorParam && ctorParam.type;\n                    });\n                    var /** @type {?} */paramAnnotations = ctorParameters.map(function (ctorParam) {\n                        return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n                    });\n                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n                }\n                // API for metadata created by invoking the decorators.\n                if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {\n                    var /** @type {?} */_paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n                    var /** @type {?} */_paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n                    if (_paramTypes || _paramAnnotations) {\n                        return this._zipTypesAndAnnotations(_paramTypes, _paramAnnotations);\n                    }\n                }\n                // If a class has no decorators, at least create metadata\n                // based on function.length.\n                // Note: We know that this is a real constructor as we checked\n                // the content of the constructor above.\n                return new Array(type.length).fill(undefined);\n            }\n        }, {\n            key: 'parameters',\n            value: function parameters(type) {\n                // Note: only report metadata if we have at least one class decorator\n                // to stay in sync with the static reflector.\n                if (!isType(type)) {\n                    return [];\n                }\n                var /** @type {?} */parentCtor = getParentCtor(type);\n                var /** @type {?} */parameters = this._ownParameters(type, parentCtor);\n                if (!parameters && parentCtor !== Object) {\n                    parameters = this.parameters(parentCtor);\n                }\n                return parameters || [];\n            }\n        }, {\n            key: '_ownAnnotations',\n            value: function _ownAnnotations(typeOrFunc, parentCtor) {\n                // Prefer the direct API.\n                if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n                    var /** @type {?} */annotations = typeOrFunc.annotations;\n                    if (typeof annotations === 'function' && annotations.annotations) {\n                        annotations = annotations.annotations;\n                    }\n                    return annotations;\n                }\n                // API of tsickle for lowering decorators to properties on the class.\n                if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n                    return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n                }\n                // API for metadata created by invoking the decorators.\n                if (this._reflect && this._reflect.getOwnMetadata) {\n                    return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n                }\n            }\n        }, {\n            key: 'annotations',\n            value: function annotations(typeOrFunc) {\n                if (!isType(typeOrFunc)) {\n                    return [];\n                }\n                var /** @type {?} */parentCtor = getParentCtor(typeOrFunc);\n                var /** @type {?} */ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n                var /** @type {?} */parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n                return parentAnnotations.concat(ownAnnotations);\n            }\n        }, {\n            key: '_ownPropMetadata',\n            value: function _ownPropMetadata(typeOrFunc, parentCtor) {\n                // Prefer the direct API.\n                if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n                    var /** @type {?} */propMetadata = typeOrFunc.propMetadata;\n                    if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                        propMetadata = propMetadata.propMetadata;\n                    }\n                    return propMetadata;\n                }\n                // API of tsickle for lowering decorators to properties on the class.\n                if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n                    var /** @type {?} */propDecorators = typeOrFunc.propDecorators;\n                    var /** @type {?} */_propMetadata = {};\n                    Object.keys(propDecorators).forEach(function (prop) {\n                        _propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n                    });\n                    return _propMetadata;\n                }\n                // API for metadata created by invoking the decorators.\n                if (this._reflect && this._reflect.getOwnMetadata) {\n                    return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n                }\n            }\n        }, {\n            key: 'propMetadata',\n            value: function propMetadata(typeOrFunc) {\n                if (!isType(typeOrFunc)) {\n                    return {};\n                }\n                var /** @type {?} */parentCtor = getParentCtor(typeOrFunc);\n                var /** @type {?} */propMetadata = {};\n                if (parentCtor !== Object) {\n                    var /** @type {?} */parentPropMetadata = this.propMetadata(parentCtor);\n                    Object.keys(parentPropMetadata).forEach(function (propName) {\n                        propMetadata[propName] = parentPropMetadata[propName];\n                    });\n                }\n                var /** @type {?} */ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n                if (ownPropMetadata) {\n                    Object.keys(ownPropMetadata).forEach(function (propName) {\n                        var /** @type {?} */decorators = [];\n                        if (propMetadata.hasOwnProperty(propName)) {\n                            decorators.push.apply(decorators, _toConsumableArray(propMetadata[propName]));\n                        }\n                        decorators.push.apply(decorators, _toConsumableArray(ownPropMetadata[propName]));\n                        propMetadata[propName] = decorators;\n                    });\n                }\n                return propMetadata;\n            }\n        }, {\n            key: 'hasLifecycleHook',\n            value: function hasLifecycleHook(type, lcProperty) {\n                return type instanceof Type && lcProperty in type.prototype;\n            }\n        }, {\n            key: 'getter',\n            value: function getter(name) {\n                return new Function('o', 'return o.' + name + ';');\n            }\n        }, {\n            key: 'setter',\n            value: function setter(name) {\n                return new Function('o', 'v', 'return o.' + name + ' = v;');\n            }\n        }, {\n            key: 'method',\n            value: function method(name) {\n                var /** @type {?} */functionBody = 'if (!o.' + name + ') throw new Error(\\'\"' + name + '\" is undefined\\');\\n        return o.' + name + '.apply(o, args);';\n                return new Function('o', 'args', functionBody);\n            }\n        }, {\n            key: 'importUri',\n            value: function importUri(type) {\n                // StaticSymbol\n                if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type['filePath']) {\n                    return type['filePath'];\n                }\n                // Runtime type\n                return './' + stringify(type);\n            }\n        }, {\n            key: 'resolveIdentifier',\n            value: function resolveIdentifier(name, moduleUrl, members, runtime) {\n                return runtime;\n            }\n        }, {\n            key: 'resolveEnum',\n            value: function resolveEnum(enumIdentifier, name) {\n                return enumIdentifier[name];\n            }\n        }]);\n\n        return ReflectionCapabilities;\n    }();\n\n    /**\n     * @param {?} decoratorInvocations\n     * @return {?}\n     */\n    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n        if (!decoratorInvocations) {\n            return [];\n        }\n        return decoratorInvocations.map(function (decoratorInvocation) {\n            var /** @type {?} */decoratorType = decoratorInvocation.type;\n            var /** @type {?} */annotationCls = decoratorType.annotationCls;\n            var /** @type {?} */annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n            return new (Function.prototype.bind.apply(annotationCls, [null].concat(_toConsumableArray(annotationArgs))))();\n        });\n    }\n    /**\n     * @param {?} ctor\n     * @return {?}\n     */\n    function getParentCtor(ctor) {\n        var /** @type {?} */parentProto = Object.getPrototypeOf(ctor.prototype);\n        var /** @type {?} */parentCtor = parentProto ? parentProto.constructor : null;\n        // Note: We always use `Object` as the null value\n        // to simplify checking later on.\n        return parentCtor || Object;\n    }\n\n    /**\n     * Provides read-only access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     * @abstract\n     */\n\n    var ReflectorReader = function () {\n        function ReflectorReader() {\n            _classCallCheck(this, ReflectorReader);\n        }\n\n        _createClass(ReflectorReader, [{\n            key: 'parameters',\n            value: function parameters(typeOrFunc) {}\n        }, {\n            key: 'annotations',\n            value: function annotations(typeOrFunc) {}\n        }, {\n            key: 'propMetadata',\n            value: function propMetadata(typeOrFunc) {}\n        }, {\n            key: 'importUri',\n            value: function importUri(typeOrFunc) {}\n        }, {\n            key: 'resolveIdentifier',\n            value: function resolveIdentifier(name, moduleUrl, members, runtime) {}\n        }, {\n            key: 'resolveEnum',\n            value: function resolveEnum(identifier, name) {}\n        }]);\n\n        return ReflectorReader;\n    }();\n\n    var Reflector = function (_ReflectorReader) {\n        _inherits(Reflector, _ReflectorReader);\n\n        /**\n         * @param {?} reflectionCapabilities\n         */\n        function Reflector(reflectionCapabilities) {\n            _classCallCheck(this, Reflector);\n\n            var _this3 = _possibleConstructorReturn(this, (Reflector.__proto__ || Object.getPrototypeOf(Reflector)).call(this));\n\n            _this3.reflectionCapabilities = reflectionCapabilities;\n            return _this3;\n        }\n        /**\n         * @param {?} caps\n         * @return {?}\n         */\n\n\n        _createClass(Reflector, [{\n            key: 'updateCapabilities',\n            value: function updateCapabilities(caps) {\n                this.reflectionCapabilities = caps;\n            }\n        }, {\n            key: 'factory',\n            value: function factory(type) {\n                return this.reflectionCapabilities.factory(type);\n            }\n        }, {\n            key: 'parameters',\n            value: function parameters(typeOrFunc) {\n                return this.reflectionCapabilities.parameters(typeOrFunc);\n            }\n        }, {\n            key: 'annotations',\n            value: function annotations(typeOrFunc) {\n                return this.reflectionCapabilities.annotations(typeOrFunc);\n            }\n        }, {\n            key: 'propMetadata',\n            value: function propMetadata(typeOrFunc) {\n                return this.reflectionCapabilities.propMetadata(typeOrFunc);\n            }\n        }, {\n            key: 'hasLifecycleHook',\n            value: function hasLifecycleHook(type, lcProperty) {\n                return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n            }\n        }, {\n            key: 'getter',\n            value: function getter(name) {\n                return this.reflectionCapabilities.getter(name);\n            }\n        }, {\n            key: 'setter',\n            value: function setter(name) {\n                return this.reflectionCapabilities.setter(name);\n            }\n        }, {\n            key: 'method',\n            value: function method(name) {\n                return this.reflectionCapabilities.method(name);\n            }\n        }, {\n            key: 'importUri',\n            value: function importUri(type) {\n                return this.reflectionCapabilities.importUri(type);\n            }\n        }, {\n            key: 'resolveIdentifier',\n            value: function resolveIdentifier(name, moduleUrl, members, runtime) {\n                return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n            }\n        }, {\n            key: 'resolveEnum',\n            value: function resolveEnum(identifier, name) {\n                return this.reflectionCapabilities.resolveEnum(identifier, name);\n            }\n        }]);\n\n        return Reflector;\n    }(ReflectorReader);\n\n    /**\n     * The {@link Reflector} used internally in Angular to access metadata\n     * about symbols.\n     */\n    var /** @type {?} */reflector = new Reflector(new ReflectionCapabilities());\n\n    /**\n     * `Dependency` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     */\n\n    var ReflectiveDependency = function () {\n        /**\n         * @param {?} key\n         * @param {?} optional\n         * @param {?} visibility\n         */\n        function ReflectiveDependency(key, optional, visibility) {\n            _classCallCheck(this, ReflectiveDependency);\n\n            this.key = key;\n            this.optional = optional;\n            this.visibility = visibility;\n        }\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n\n\n        _createClass(ReflectiveDependency, null, [{\n            key: 'fromKey',\n            value: function fromKey(key) {\n                return new ReflectiveDependency(key, false, null);\n            }\n        }]);\n\n        return ReflectiveDependency;\n    }();\n\n    var /** @type {?} */_EMPTY_LIST = [];\n\n    var ResolvedReflectiveProvider_ = function () {\n        /**\n         * @param {?} key\n         * @param {?} resolvedFactories\n         * @param {?} multiProvider\n         */\n        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n            _classCallCheck(this, ResolvedReflectiveProvider_);\n\n            this.key = key;\n            this.resolvedFactories = resolvedFactories;\n            this.multiProvider = multiProvider;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ResolvedReflectiveProvider_, [{\n            key: 'resolvedFactory',\n            get: function get() {\n                return this.resolvedFactories[0];\n            }\n        }]);\n\n        return ResolvedReflectiveProvider_;\n    }();\n\n    var ResolvedReflectiveFactory =\n    /**\n     * @param {?} factory\n     * @param {?} dependencies\n     */\n    function ResolvedReflectiveFactory(factory, dependencies) {\n        _classCallCheck(this, ResolvedReflectiveFactory);\n\n        this.factory = factory;\n        this.dependencies = dependencies;\n    };\n\n    /**\n     * Resolve a single provider.\n     * @param {?} provider\n     * @return {?}\n     */\n    function resolveReflectiveFactory(provider) {\n        var /** @type {?} */factoryFn = void 0;\n        var /** @type {?} */resolvedDeps = void 0;\n        if (provider.useClass) {\n            var /** @type {?} */useClass = resolveForwardRef(provider.useClass);\n            factoryFn = reflector.factory(useClass);\n            resolvedDeps = _dependenciesFor(useClass);\n        } else if (provider.useExisting) {\n            factoryFn = function factoryFn(aliasInstance) {\n                return aliasInstance;\n            };\n            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n        } else if (provider.useFactory) {\n            factoryFn = provider.useFactory;\n            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n        } else {\n            factoryFn = function factoryFn() {\n                return provider.useValue;\n            };\n            resolvedDeps = _EMPTY_LIST;\n        }\n        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n    }\n    /**\n     * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n     *\n     * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n     * convenience provider syntax.\n     * @param {?} provider\n     * @return {?}\n     */\n    function resolveReflectiveProvider(provider) {\n        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n    }\n    /**\n     * Resolve a list of Providers.\n     * @param {?} providers\n     * @return {?}\n     */\n    function resolveReflectiveProviders(providers) {\n        var /** @type {?} */normalized = _normalizeProviders(providers, []);\n        var /** @type {?} */resolved = normalized.map(resolveReflectiveProvider);\n        var /** @type {?} */resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n        return Array.from(resolvedProviderMap.values());\n    }\n    /**\n     * Merges a list of ResolvedProviders into a list where\n     * each key is contained exactly once and multi providers\n     * have been merged.\n     * @param {?} providers\n     * @param {?} normalizedProvidersMap\n     * @return {?}\n     */\n    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n        for (var /** @type {?} */i = 0; i < providers.length; i++) {\n            var /** @type {?} */provider = providers[i];\n            var /** @type {?} */existing = normalizedProvidersMap.get(provider.key.id);\n            if (existing) {\n                if (provider.multiProvider !== existing.multiProvider) {\n                    throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n                }\n                if (provider.multiProvider) {\n                    for (var /** @type {?} */j = 0; j < provider.resolvedFactories.length; j++) {\n                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                    }\n                } else {\n                    normalizedProvidersMap.set(provider.key.id, provider);\n                }\n            } else {\n                var /** @type {?} */resolvedProvider = void 0;\n                if (provider.multiProvider) {\n                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n                } else {\n                    resolvedProvider = provider;\n                }\n                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n            }\n        }\n        return normalizedProvidersMap;\n    }\n    /**\n     * @param {?} providers\n     * @param {?} res\n     * @return {?}\n     */\n    function _normalizeProviders(providers, res) {\n        providers.forEach(function (b) {\n            if (b instanceof Type) {\n                res.push({ provide: b, useClass: b });\n            } else if (b && (typeof b === 'undefined' ? 'undefined' : _typeof(b)) == 'object' && b.provide !== undefined) {\n                res.push( /** @type {?} */b);\n            } else if (b instanceof Array) {\n                _normalizeProviders(b, res);\n            } else {\n                throw invalidProviderError(b);\n            }\n        });\n        return res;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} dependencies\n     * @return {?}\n     */\n    function constructDependencies(typeOrFunc, dependencies) {\n        if (!dependencies) {\n            return _dependenciesFor(typeOrFunc);\n        } else {\n            var /** @type {?} */params = dependencies.map(function (t) {\n                return [t];\n            });\n            return dependencies.map(function (t) {\n                return _extractToken(typeOrFunc, t, params);\n            });\n        }\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function _dependenciesFor(typeOrFunc) {\n        var /** @type {?} */params = reflector.parameters(typeOrFunc);\n        if (!params) return [];\n        if (params.some(function (p) {\n            return p == null;\n        })) {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n        return params.map(function (p) {\n            return _extractToken(typeOrFunc, p, params);\n        });\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} metadata\n     * @param {?} params\n     * @return {?}\n     */\n    function _extractToken(typeOrFunc, metadata, params) {\n        var /** @type {?} */token = null;\n        var /** @type {?} */optional = false;\n        if (!Array.isArray(metadata)) {\n            if (metadata instanceof Inject) {\n                return _createDependency(metadata['token'], optional, null);\n            } else {\n                return _createDependency(metadata, optional, null);\n            }\n        }\n        var /** @type {?} */visibility = null;\n        for (var /** @type {?} */i = 0; i < metadata.length; ++i) {\n            var /** @type {?} */paramMetadata = metadata[i];\n            if (paramMetadata instanceof Type) {\n                token = paramMetadata;\n            } else if (paramMetadata instanceof Inject) {\n                token = paramMetadata['token'];\n            } else if (paramMetadata instanceof Optional) {\n                optional = true;\n            } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n                visibility = paramMetadata;\n            } else if (paramMetadata instanceof InjectionToken) {\n                token = paramMetadata;\n            }\n        }\n        token = resolveForwardRef(token);\n        if (token != null) {\n            return _createDependency(token, optional, visibility);\n        } else {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?} optional\n     * @param {?} visibility\n     * @return {?}\n     */\n    function _createDependency(token, optional, visibility) {\n        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n    }\n\n    // Threshold for the dynamic version\n    var /** @type {?} */UNDEFINED = new Object();\n    /**\n     * A ReflectiveDependency injection container used for instantiating objects and resolving\n     * dependencies.\n     *\n     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n     * constructor dependencies.\n     *\n     * In typical use, application code asks for the dependencies in the constructor and they are\n     * resolved by the `Injector`.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n     *\n     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * var car = injector.get(Car);\n     * expect(car instanceof Car).toBe(true);\n     * expect(car.engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n     * resolve all of the object's dependencies automatically.\n     *\n     * \\@stable\n     * @abstract\n     */\n\n    var ReflectiveInjector = function () {\n        function ReflectiveInjector() {\n            _classCallCheck(this, ReflectiveInjector);\n        }\n\n        _createClass(ReflectiveInjector, [{\n            key: 'parent',\n            value: function parent() {}\n        }, {\n            key: 'resolveAndCreateChild',\n            value: function resolveAndCreateChild(providers) {}\n        }, {\n            key: 'createChildFromResolved',\n            value: function createChildFromResolved(providers) {}\n        }, {\n            key: 'resolveAndInstantiate',\n            value: function resolveAndInstantiate(provider) {}\n        }, {\n            key: 'instantiateResolved',\n            value: function instantiateResolved(provider) {}\n        }, {\n            key: 'get',\n            value: function get(token, notFoundValue) {}\n        }], [{\n            key: 'resolve',\n            value: function resolve(providers) {\n                return resolveReflectiveProviders(providers);\n            }\n        }, {\n            key: 'resolveAndCreate',\n            value: function resolveAndCreate(providers) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                var /** @type {?} */ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n                return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n            }\n        }, {\n            key: 'fromResolvedProviders',\n            value: function fromResolvedProviders(providers) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                return new ReflectiveInjector_(providers, parent);\n            }\n        }]);\n\n        return ReflectiveInjector;\n    }();\n\n    var ReflectiveInjector_ = function () {\n        /**\n         * Private\n         * @param {?} _providers\n         * @param {?=} _parent\n         */\n        function ReflectiveInjector_(_providers) {\n            var _parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            _classCallCheck(this, ReflectiveInjector_);\n\n            /** @internal */\n            this._constructionCounter = 0;\n            this._providers = _providers;\n            this._parent = _parent;\n            var len = _providers.length;\n            this.keyIds = new Array(len);\n            this.objs = new Array(len);\n            for (var i = 0; i < len; i++) {\n                this.keyIds[i] = _providers[i].key.id;\n                this.objs[i] = UNDEFINED;\n            }\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n\n\n        _createClass(ReflectiveInjector_, [{\n            key: 'get',\n            value: function get(token) {\n                var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;\n\n                return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n            }\n        }, {\n            key: 'resolveAndCreateChild',\n            value: function resolveAndCreateChild(providers) {\n                var /** @type {?} */ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n                return this.createChildFromResolved(ResolvedReflectiveProviders);\n            }\n        }, {\n            key: 'createChildFromResolved',\n            value: function createChildFromResolved(providers) {\n                var /** @type {?} */inj = new ReflectiveInjector_(providers);\n                inj._parent = this;\n                return inj;\n            }\n        }, {\n            key: 'resolveAndInstantiate',\n            value: function resolveAndInstantiate(provider) {\n                return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n            }\n        }, {\n            key: 'instantiateResolved',\n            value: function instantiateResolved(provider) {\n                return this._instantiateProvider(provider);\n            }\n        }, {\n            key: 'getProviderAtIndex',\n            value: function getProviderAtIndex(index) {\n                if (index < 0 || index >= this._providers.length) {\n                    throw outOfBoundsError(index);\n                }\n                return this._providers[index];\n            }\n        }, {\n            key: '_new',\n            value: function _new(provider) {\n                if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n                    throw cyclicDependencyError(this, provider.key);\n                }\n                return this._instantiateProvider(provider);\n            }\n        }, {\n            key: '_getMaxNumberOfObjects',\n            value: function _getMaxNumberOfObjects() {\n                return this.objs.length;\n            }\n        }, {\n            key: '_instantiateProvider',\n            value: function _instantiateProvider(provider) {\n                if (provider.multiProvider) {\n                    var /** @type {?} */res = new Array(provider.resolvedFactories.length);\n                    for (var /** @type {?} */i = 0; i < provider.resolvedFactories.length; ++i) {\n                        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n                    }\n                    return res;\n                } else {\n                    return this._instantiate(provider, provider.resolvedFactories[0]);\n                }\n            }\n        }, {\n            key: '_instantiate',\n            value: function _instantiate(provider, ResolvedReflectiveFactory) {\n                var _this4 = this;\n\n                var /** @type {?} */factory = ResolvedReflectiveFactory.factory;\n                var /** @type {?} */deps = void 0;\n                try {\n                    deps = ResolvedReflectiveFactory.dependencies.map(function (dep) {\n                        return _this4._getByReflectiveDependency(dep);\n                    });\n                } catch (e) {\n                    if (e.addKey) {\n                        e.addKey(this, provider.key);\n                    }\n                    throw e;\n                }\n                var /** @type {?} */obj = void 0;\n                try {\n                    obj = factory.apply(undefined, _toConsumableArray(deps));\n                } catch (e) {\n                    throw instantiationError(this, e, e.stack, provider.key);\n                }\n                return obj;\n            }\n        }, {\n            key: '_getByReflectiveDependency',\n            value: function _getByReflectiveDependency(dep) {\n                return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n            }\n        }, {\n            key: '_getByKey',\n            value: function _getByKey(key, visibility, notFoundValue) {\n                if (key === INJECTOR_KEY) {\n                    return this;\n                }\n                if (visibility instanceof Self) {\n                    return this._getByKeySelf(key, notFoundValue);\n                } else {\n                    return this._getByKeyDefault(key, notFoundValue, visibility);\n                }\n            }\n        }, {\n            key: '_getObjByKeyId',\n            value: function _getObjByKeyId(keyId) {\n                for (var /** @type {?} */i = 0; i < this.keyIds.length; i++) {\n                    if (this.keyIds[i] === keyId) {\n                        if (this.objs[i] === UNDEFINED) {\n                            this.objs[i] = this._new(this._providers[i]);\n                        }\n                        return this.objs[i];\n                    }\n                }\n                return UNDEFINED;\n            }\n        }, {\n            key: '_throwOrNull',\n            value: function _throwOrNull(key, notFoundValue) {\n                if (notFoundValue !== THROW_IF_NOT_FOUND) {\n                    return notFoundValue;\n                } else {\n                    throw noProviderError(this, key);\n                }\n            }\n        }, {\n            key: '_getByKeySelf',\n            value: function _getByKeySelf(key, notFoundValue) {\n                var /** @type {?} */obj = this._getObjByKeyId(key.id);\n                return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);\n            }\n        }, {\n            key: '_getByKeyDefault',\n            value: function _getByKeyDefault(key, notFoundValue, visibility) {\n                var /** @type {?} */inj = void 0;\n                if (visibility instanceof SkipSelf) {\n                    inj = this._parent;\n                } else {\n                    inj = this;\n                }\n                while (inj instanceof ReflectiveInjector_) {\n                    var /** @type {?} */inj_ = inj;\n                    var /** @type {?} */obj = inj_._getObjByKeyId(key.id);\n                    if (obj !== UNDEFINED) return obj;\n                    inj = inj_._parent;\n                }\n                if (inj !== null) {\n                    return inj.get(key.token, notFoundValue);\n                } else {\n                    return this._throwOrNull(key, notFoundValue);\n                }\n            }\n        }, {\n            key: 'toString',\n            value: function toString() {\n                return this.displayName;\n            }\n        }, {\n            key: 'parent',\n            get: function get() {\n                return this._parent;\n            }\n        }, {\n            key: 'displayName',\n            get: function get() {\n                var /** @type {?} */providers = _mapProviders(this, function (b) {\n                    return ' \"' + b.key.displayName + '\" ';\n                }).join(', ');\n                return 'ReflectiveInjector(providers: [' + providers + '])';\n            }\n        }]);\n\n        return ReflectiveInjector_;\n    }();\n\n    var /** @type {?} */INJECTOR_KEY = ReflectiveKey.get(Injector);\n    /**\n     * @param {?} injector\n     * @param {?} fn\n     * @return {?}\n     */\n    function _mapProviders(injector, fn) {\n        var /** @type {?} */res = new Array(injector._providers.length);\n        for (var /** @type {?} */i = 0; i < injector._providers.length; ++i) {\n            res[i] = fn(injector.getProviderAtIndex(i));\n        }\n        return res;\n    }\n\n    /**\n     * Wraps Javascript Objects\n     */\n\n    var StringMapWrapper = function () {\n        function StringMapWrapper() {\n            _classCallCheck(this, StringMapWrapper);\n        }\n\n        _createClass(StringMapWrapper, null, [{\n            key: 'merge',\n            value: function merge(m1, m2) {\n                var /** @type {?} */m = {};\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = Object.keys(m1)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var k = _step.value;\n\n                        m[k] = m1[k];\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = Object.keys(m2)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _k = _step2.value;\n\n                        m[_k] = m2[_k];\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                return m;\n            }\n        }, {\n            key: 'equals',\n            value: function equals(m1, m2) {\n                var /** @type {?} */k1 = Object.keys(m1);\n                var /** @type {?} */k2 = Object.keys(m2);\n                if (k1.length != k2.length) {\n                    return false;\n                }\n                for (var /** @type {?} */i = 0; i < k1.length; i++) {\n                    var /** @type {?} */key = k1[i];\n                    if (m1[key] !== m2[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }]);\n\n        return StringMapWrapper;\n    }();\n\n    var ListWrapper = function () {\n        function ListWrapper() {\n            _classCallCheck(this, ListWrapper);\n        }\n\n        _createClass(ListWrapper, null, [{\n            key: 'findLast',\n            value: function findLast(arr, condition) {\n                for (var /** @type {?} */i = arr.length - 1; i >= 0; i--) {\n                    if (condition(arr[i])) {\n                        return arr[i];\n                    }\n                }\n                return null;\n            }\n        }, {\n            key: 'removeAll',\n            value: function removeAll(list, items) {\n                for (var /** @type {?} */i = 0; i < items.length; ++i) {\n                    var /** @type {?} */index = list.indexOf(items[i]);\n                    if (index > -1) {\n                        list.splice(index, 1);\n                    }\n                }\n            }\n        }, {\n            key: 'remove',\n            value: function remove(list, el) {\n                var /** @type {?} */index = list.indexOf(el);\n                if (index > -1) {\n                    list.splice(index, 1);\n                    return true;\n                }\n                return false;\n            }\n        }, {\n            key: 'equals',\n            value: function equals(a, b) {\n                if (a.length != b.length) return false;\n                for (var /** @type {?} */i = 0; i < a.length; ++i) {\n                    if (a[i] !== b[i]) return false;\n                }\n                return true;\n            }\n        }, {\n            key: 'flatten',\n            value: function flatten(list) {\n                return list.reduce(function (flat, item) {\n                    var /** @type {?} */flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n                    return flat.concat(flatItem);\n                }, []);\n            }\n        }]);\n\n        return ListWrapper;\n    }();\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj)) return false;\n        return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} comparator\n     * @return {?}\n     */\n    function areIterablesEqual(a, b, comparator) {\n        var /** @type {?} */iterator1 = a[getSymbolIterator()]();\n        var /** @type {?} */iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var /** @type {?} */item1 = iterator1.next();\n            var /** @type {?} */item2 = iterator2.next();\n            if (item1.done && item2.done) return true;\n            if (item1.done || item2.done) return false;\n            if (!comparator(item1.value, item2.value)) return false;\n        }\n    }\n    /**\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function iterateListLike(obj, fn) {\n        if (Array.isArray(obj)) {\n            for (var /** @type {?} */i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        } else {\n            var /** @type {?} */iterator = obj[getSymbolIterator()]();\n            var /** @type {?} */item = void 0;\n            while (!(item = iterator.next()).done) {\n                fn(item.value);\n            }\n        }\n    }\n\n    /**\n     * Determine if the argument is shaped like a Promise\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return !!obj && typeof obj.then === 'function';\n    }\n    /**\n     * Determine if the argument is an Observable\n     * @param {?} obj\n     * @return {?}\n     */\n    function isObservable(obj) {\n        return !!(obj && obj[_observable.$$observable]);\n    }\n\n    /**\n     * A function that will be executed when an application is initialized.\n     * @experimental\n     */\n    var /** @type {?} */APP_INITIALIZER = new InjectionToken('Application Initializer');\n    /**\n     * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n     *\n     * \\@experimental\n     */\n\n    var ApplicationInitStatus = function () {\n        /**\n         * @param {?} appInits\n         */\n        function ApplicationInitStatus(appInits) {\n            var _this5 = this;\n\n            _classCallCheck(this, ApplicationInitStatus);\n\n            this._done = false;\n            var asyncInitPromises = [];\n            if (appInits) {\n                for (var i = 0; i < appInits.length; i++) {\n                    var initResult = appInits[i]();\n                    if (isPromise(initResult)) {\n                        asyncInitPromises.push(initResult);\n                    }\n                }\n            }\n            this._donePromise = Promise.all(asyncInitPromises).then(function () {\n                _this5._done = true;\n            });\n            if (asyncInitPromises.length === 0) {\n                this._done = true;\n            }\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ApplicationInitStatus, [{\n            key: 'done',\n            get: function get() {\n                return this._done;\n            }\n        }, {\n            key: 'donePromise',\n            get: function get() {\n                return this._donePromise;\n            }\n        }]);\n\n        return ApplicationInitStatus;\n    }();\n\n    ApplicationInitStatus.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    ApplicationInitStatus.ctorParameters = function () {\n        return [{ type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER] }, { type: Optional }] }];\n    };\n\n    /**\n     * A DI Token representing a unique string id assigned to the application by Angular and used\n     * primarily for prefixing application attributes and CSS styles when\n     * {@link ViewEncapsulation#Emulated} is being used.\n     *\n     * If you need to avoid randomly generated value to be used as an application id, you can provide\n     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n     * using this token.\n     * @experimental\n     */\n    var /** @type {?} */APP_ID = new InjectionToken('AppId');\n    /**\n     * @return {?}\n     */\n    function _appIdRandomProviderFactory() {\n        return '' + _randomChar() + _randomChar() + _randomChar();\n    }\n    /**\n     * Providers that will generate a random APP_ID_TOKEN.\n     * @experimental\n     */\n    var /** @type {?} */APP_ID_RANDOM_PROVIDER = {\n        provide: APP_ID,\n        useFactory: _appIdRandomProviderFactory,\n        deps: /** @type {?} */[]\n    };\n    /**\n     * @return {?}\n     */\n    function _randomChar() {\n        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n    }\n    /**\n     * A function that will be executed when a platform is initialized.\n     * @experimental\n     */\n    var /** @type {?} */PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n    /**\n     * A token that indicates an opaque platform id.\n     * @experimental\n     */\n    var /** @type {?} */PLATFORM_ID = new InjectionToken('Platform ID');\n    /**\n     * All callbacks provided via this token will be called for every component that is bootstrapped.\n     * Signature of the callback:\n     *\n     * `(componentRef: ComponentRef) => void`.\n     *\n     * @experimental\n     */\n    var /** @type {?} */APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n    /**\n     * A token which indicates the root directory of the application\n     * @experimental\n     */\n    var /** @type {?} */PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n    var Console = function () {\n        function Console() {\n            _classCallCheck(this, Console);\n        }\n\n        _createClass(Console, [{\n            key: 'log',\n            value: function log(message) {\n                print(message);\n            }\n        }, {\n            key: 'warn',\n            value: function warn(message) {\n                _warn(message);\n            }\n        }]);\n\n        return Console;\n    }();\n\n    Console.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    Console.ctorParameters = function () {\n        return [];\n    };\n\n    /**\n     * Combination of NgModuleFactory and ComponentFactorys.\n     *\n     * \\@experimental\n     */\n\n    var ModuleWithComponentFactories =\n    /**\n     * @param {?} ngModuleFactory\n     * @param {?} componentFactories\n     */\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        _classCallCheck(this, ModuleWithComponentFactories);\n\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    };\n\n    /**\n     * @return {?}\n     */\n    function _throwError() {\n        throw new Error('Runtime compiler is not loaded');\n    }\n    /**\n     * Low-level service for running the angular compiler during runtime\n     * to create {\\@link ComponentFactory}s, which\n     * can later be used to create and render a Component instance.\n     *\n     * Each `\\@NgModule` provides an own `Compiler` to its injector,\n     * that will use the directives/pipes of the ng module for compilation\n     * of components.\n     * \\@stable\n     */\n\n    var Compiler = function () {\n        function Compiler() {\n            _classCallCheck(this, Compiler);\n        }\n\n        _createClass(Compiler, [{\n            key: 'compileModuleSync',\n            value: function compileModuleSync(moduleType) {\n                throw _throwError();\n            }\n        }, {\n            key: 'compileModuleAsync',\n            value: function compileModuleAsync(moduleType) {\n                throw _throwError();\n            }\n        }, {\n            key: 'compileModuleAndAllComponentsSync',\n            value: function compileModuleAndAllComponentsSync(moduleType) {\n                throw _throwError();\n            }\n        }, {\n            key: 'compileModuleAndAllComponentsAsync',\n            value: function compileModuleAndAllComponentsAsync(moduleType) {\n                throw _throwError();\n            }\n        }, {\n            key: 'getNgContentSelectors',\n            value: function getNgContentSelectors(component) {\n                throw _throwError();\n            }\n        }, {\n            key: 'clearCache',\n            value: function clearCache() {}\n        }, {\n            key: 'clearCacheFor',\n            value: function clearCacheFor(type) {}\n        }]);\n\n        return Compiler;\n    }();\n\n    Compiler.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    Compiler.ctorParameters = function () {\n        return [];\n    };\n    /**\n     * Token to provide CompilerOptions in the platform injector.\n     *\n     * @experimental\n     */\n    var /** @type {?} */COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n    /**\n     * A factory for creating a Compiler\n     *\n     * \\@experimental\n     * @abstract\n     */\n\n    var CompilerFactory = function () {\n        function CompilerFactory() {\n            _classCallCheck(this, CompilerFactory);\n        }\n\n        _createClass(CompilerFactory, [{\n            key: 'createCompiler',\n            value: function createCompiler(options) {}\n        }]);\n\n        return CompilerFactory;\n    }();\n\n    var ElementRef =\n    /**\n     * @param {?} nativeElement\n     */\n    function ElementRef(nativeElement) {\n        _classCallCheck(this, ElementRef);\n\n        this.nativeElement = nativeElement;\n    };\n\n    var EventEmitter = function (_Subject) {\n        _inherits(EventEmitter, _Subject);\n\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         * @param {?=} isAsync\n         */\n        function EventEmitter() {\n            var isAsync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            _classCallCheck(this, EventEmitter);\n\n            var _this6 = _possibleConstructorReturn(this, (EventEmitter.__proto__ || Object.getPrototypeOf(EventEmitter)).call(this));\n\n            _this6.__isAsync = isAsync;\n            return _this6;\n        }\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n\n\n        _createClass(EventEmitter, [{\n            key: 'emit',\n            value: function emit(value) {\n                _get(EventEmitter.prototype.__proto__ || Object.getPrototypeOf(EventEmitter.prototype), 'next', this).call(this, value);\n            }\n        }, {\n            key: 'subscribe',\n            value: function subscribe(generatorOrNext, error, complete) {\n                var /** @type {?} */schedulerFn = void 0;\n                var /** @type {?} */errorFn = function errorFn(err) {\n                    return null;\n                };\n                var /** @type {?} */completeFn = function completeFn() {\n                    return null;\n                };\n                if (generatorOrNext && (typeof generatorOrNext === 'undefined' ? 'undefined' : _typeof(generatorOrNext)) === 'object') {\n                    schedulerFn = this.__isAsync ? function (value) {\n                        setTimeout(function () {\n                            return generatorOrNext.next(value);\n                        });\n                    } : function (value) {\n                        generatorOrNext.next(value);\n                    };\n                    if (generatorOrNext.error) {\n                        errorFn = this.__isAsync ? function (err) {\n                            setTimeout(function () {\n                                return generatorOrNext.error(err);\n                            });\n                        } : function (err) {\n                            generatorOrNext.error(err);\n                        };\n                    }\n                    if (generatorOrNext.complete) {\n                        completeFn = this.__isAsync ? function () {\n                            setTimeout(function () {\n                                return generatorOrNext.complete();\n                            });\n                        } : function () {\n                            generatorOrNext.complete();\n                        };\n                    }\n                } else {\n                    schedulerFn = this.__isAsync ? function (value) {\n                        setTimeout(function () {\n                            return generatorOrNext(value);\n                        });\n                    } : function (value) {\n                        generatorOrNext(value);\n                    };\n                    if (error) {\n                        errorFn = this.__isAsync ? function (err) {\n                            setTimeout(function () {\n                                return error(err);\n                            });\n                        } : function (err) {\n                            error(err);\n                        };\n                    }\n                    if (complete) {\n                        completeFn = this.__isAsync ? function () {\n                            setTimeout(function () {\n                                return complete();\n                            });\n                        } : function () {\n                            complete();\n                        };\n                    }\n                }\n                return _get(EventEmitter.prototype.__proto__ || Object.getPrototypeOf(EventEmitter.prototype), 'subscribe', this).call(this, schedulerFn, errorFn, completeFn);\n            }\n        }]);\n\n        return EventEmitter;\n    }(_Subject2.Subject);\n\n    var NgZone = function () {\n        /**\n         * @param {?} __0\n         */\n        function NgZone(_ref2) {\n            var _ref2$enableLongStack = _ref2.enableLongStackTrace,\n                enableLongStackTrace = _ref2$enableLongStack === undefined ? false : _ref2$enableLongStack;\n\n            _classCallCheck(this, NgZone);\n\n            this._hasPendingMicrotasks = false;\n            this._hasPendingMacrotasks = false;\n            this._isStable = true;\n            this._nesting = 0;\n            this._onUnstable = new EventEmitter(false);\n            this._onMicrotaskEmpty = new EventEmitter(false);\n            this._onStable = new EventEmitter(false);\n            this._onErrorEvents = new EventEmitter(false);\n            if (typeof Zone == 'undefined') {\n                throw new Error('Angular requires Zone.js prolyfill.');\n            }\n            Zone.assertZonePatched();\n            this.outer = this.inner = Zone.current;\n            if (Zone['wtfZoneSpec']) {\n                this.inner = this.inner.fork(Zone['wtfZoneSpec']);\n            }\n            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);\n            }\n            this.forkInnerZoneWithAngularBehavior();\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(NgZone, [{\n            key: 'run',\n            value: function run(fn) {\n                return this.inner.run(fn);\n            }\n        }, {\n            key: 'runGuarded',\n            value: function runGuarded(fn) {\n                return this.inner.runGuarded(fn);\n            }\n        }, {\n            key: 'runOutsideAngular',\n            value: function runOutsideAngular(fn) {\n                return this.outer.run(fn);\n            }\n        }, {\n            key: 'checkStable',\n            value: function checkStable() {\n                var _this7 = this;\n\n                if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {\n                    try {\n                        this._nesting++;\n                        this._onMicrotaskEmpty.emit(null);\n                    } finally {\n                        this._nesting--;\n                        if (!this._hasPendingMicrotasks) {\n                            try {\n                                this.runOutsideAngular(function () {\n                                    return _this7._onStable.emit(null);\n                                });\n                            } finally {\n                                this._isStable = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }, {\n            key: 'forkInnerZoneWithAngularBehavior',\n            value: function forkInnerZoneWithAngularBehavior() {\n                var _this8 = this;\n\n                this.inner = this.inner.fork({\n                    name: 'angular',\n                    properties: /** @type {?} */{ 'isAngularZone': true },\n                    onInvokeTask: function onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {\n                        try {\n                            _this8.onEnter();\n                            return delegate.invokeTask(target, task, applyThis, applyArgs);\n                        } finally {\n                            _this8.onLeave();\n                        }\n                    },\n                    onInvoke: function onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {\n                        try {\n                            _this8.onEnter();\n                            return delegate.invoke(target, callback, applyThis, applyArgs, source);\n                        } finally {\n                            _this8.onLeave();\n                        }\n                    },\n                    onHasTask: function onHasTask(delegate, current, target, hasTaskState) {\n                        delegate.hasTask(target, hasTaskState);\n                        if (current === target) {\n                            // We are only interested in hasTask events which originate from our zone\n                            // (A child hasTask event is not interesting to us)\n                            if (hasTaskState.change == 'microTask') {\n                                _this8.setHasMicrotask(hasTaskState.microTask);\n                            } else if (hasTaskState.change == 'macroTask') {\n                                _this8.setHasMacrotask(hasTaskState.macroTask);\n                            }\n                        }\n                    },\n                    onHandleError: function onHandleError(delegate, current, target, error) {\n                        delegate.handleError(target, error);\n                        _this8.triggerError(error);\n                        return false;\n                    }\n                });\n            }\n        }, {\n            key: 'onEnter',\n            value: function onEnter() {\n                this._nesting++;\n                if (this._isStable) {\n                    this._isStable = false;\n                    this._onUnstable.emit(null);\n                }\n            }\n        }, {\n            key: 'onLeave',\n            value: function onLeave() {\n                this._nesting--;\n                this.checkStable();\n            }\n        }, {\n            key: 'setHasMicrotask',\n            value: function setHasMicrotask(hasMicrotasks) {\n                this._hasPendingMicrotasks = hasMicrotasks;\n                this.checkStable();\n            }\n        }, {\n            key: 'setHasMacrotask',\n            value: function setHasMacrotask(hasMacrotasks) {\n                this._hasPendingMacrotasks = hasMacrotasks;\n            }\n        }, {\n            key: 'triggerError',\n            value: function triggerError(error) {\n                this._onErrorEvents.emit(error);\n            }\n        }, {\n            key: 'onUnstable',\n            get: function get() {\n                return this._onUnstable;\n            }\n        }, {\n            key: 'onMicrotaskEmpty',\n            get: function get() {\n                return this._onMicrotaskEmpty;\n            }\n        }, {\n            key: 'onStable',\n            get: function get() {\n                return this._onStable;\n            }\n        }, {\n            key: 'onError',\n            get: function get() {\n                return this._onErrorEvents;\n            }\n        }, {\n            key: 'isStable',\n            get: function get() {\n                return this._isStable;\n            }\n        }, {\n            key: 'hasPendingMicrotasks',\n            get: function get() {\n                return this._hasPendingMicrotasks;\n            }\n        }, {\n            key: 'hasPendingMacrotasks',\n            get: function get() {\n                return this._hasPendingMacrotasks;\n            }\n        }], [{\n            key: 'isInAngularZone',\n            value: function isInAngularZone() {\n                return Zone.current.get('isAngularZone') === true;\n            }\n        }, {\n            key: 'assertInAngularZone',\n            value: function assertInAngularZone() {\n                if (!NgZone.isInAngularZone()) {\n                    throw new Error('Expected to be in Angular Zone, but it is not!');\n                }\n            }\n        }, {\n            key: 'assertNotInAngularZone',\n            value: function assertNotInAngularZone() {\n                if (NgZone.isInAngularZone()) {\n                    throw new Error('Expected to not be in Angular Zone, but it is!');\n                }\n            }\n        }]);\n\n        return NgZone;\n    }();\n\n    var AnimationQueue = function () {\n        /**\n         * @param {?} _zone\n         */\n        function AnimationQueue(_zone) {\n            _classCallCheck(this, AnimationQueue);\n\n            this._zone = _zone;\n            this.entries = [];\n        }\n        /**\n         * @param {?} player\n         * @return {?}\n         */\n\n\n        _createClass(AnimationQueue, [{\n            key: 'enqueue',\n            value: function enqueue(player) {\n                this.entries.push(player);\n            }\n        }, {\n            key: 'flush',\n            value: function flush() {\n                var _this9 = this;\n\n                // given that each animation player may set aside\n                // microtasks and rely on DOM-based events, this\n                // will cause Angular to run change detection after\n                // each request. This sidesteps the issue. If a user\n                // hooks into an animation via (@anim.start) or (@anim.done)\n                // then those methods will automatically trigger change\n                // detection by wrapping themselves inside of a zone\n                if (this.entries.length) {\n                    this._zone.runOutsideAngular(function () {\n                        // this code is wrapped into a single promise such that the\n                        // onStart and onDone player callbacks are triggered outside\n                        // of the digest cycle of animations\n                        Promise.resolve(null).then(function () {\n                            return _this9._triggerAnimations();\n                        });\n                    });\n                }\n            }\n        }, {\n            key: '_triggerAnimations',\n            value: function _triggerAnimations() {\n                NgZone.assertNotInAngularZone();\n                while (this.entries.length) {\n                    var /** @type {?} */player = this.entries.shift();\n                    // in the event that an animation throws an error then we do\n                    // not want to re-run animations on any previous animations\n                    // if they have already been kicked off beforehand\n                    if (!player.hasStarted()) {\n                        player.play();\n                    }\n                }\n            }\n        }]);\n\n        return AnimationQueue;\n    }();\n\n    AnimationQueue.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    AnimationQueue.ctorParameters = function () {\n        return [{ type: NgZone }];\n    };\n\n    var DefaultIterableDifferFactory = function () {\n        function DefaultIterableDifferFactory() {\n            _classCallCheck(this, DefaultIterableDifferFactory);\n        }\n        /**\n         * @param {?} obj\n         * @return {?}\n         */\n\n\n        _createClass(DefaultIterableDifferFactory, [{\n            key: 'supports',\n            value: function supports(obj) {\n                return isListLikeIterable(obj);\n            }\n        }, {\n            key: 'create',\n            value: function create(cdRefOrTrackBy, trackByFn) {\n                return new DefaultIterableDiffer(trackByFn || cdRefOrTrackBy);\n            }\n        }]);\n\n        return DefaultIterableDifferFactory;\n    }();\n\n    var /** @type {?} */trackByIdentity = function trackByIdentity(index, item) {\n        return item;\n    };\n    /**\n     * @deprecated v4.0.0 - Should not be part of public API.\n     */\n\n    var DefaultIterableDiffer = function () {\n        /**\n         * @param {?=} _trackByFn\n         */\n        function DefaultIterableDiffer(_trackByFn) {\n            _classCallCheck(this, DefaultIterableDiffer);\n\n            this._trackByFn = _trackByFn;\n            this._length = null;\n            this._collection = null;\n            this._linkedRecords = null;\n            this._unlinkedRecords = null;\n            this._previousItHead = null;\n            this._itHead = null;\n            this._itTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._movesHead = null;\n            this._movesTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n            this._identityChangesHead = null;\n            this._identityChangesTail = null;\n            this._trackByFn = this._trackByFn || trackByIdentity;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(DefaultIterableDiffer, [{\n            key: 'forEachItem',\n            value: function forEachItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._itHead; record !== null; record = record._next) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachOperation',\n            value: function forEachOperation(fn) {\n                var /** @type {?} */nextIt = this._itHead;\n                var /** @type {?} */nextRemove = this._removalsHead;\n                var /** @type {?} */addRemoveOffset = 0;\n                var /** @type {?} */moveOffsets = null;\n                while (nextIt || nextRemove) {\n                    // Figure out which is the next record to process\n                    // Order: remove, add, move\n                    var /** @type {?} */record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;\n                    var /** @type {?} */adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n                    var /** @type {?} */currentIndex = record.currentIndex;\n                    // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n                    if (record === nextRemove) {\n                        addRemoveOffset--;\n                        nextRemove = nextRemove._nextRemoved;\n                    } else {\n                        nextIt = nextIt._next;\n                        if (record.previousIndex == null) {\n                            addRemoveOffset++;\n                        } else {\n                            // INVARIANT:  currentIndex < previousIndex\n                            if (!moveOffsets) moveOffsets = [];\n                            var /** @type {?} */localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                            var /** @type {?} */localCurrentIndex = currentIndex - addRemoveOffset;\n                            if (localMovePreviousIndex != localCurrentIndex) {\n                                for (var /** @type {?} */i = 0; i < localMovePreviousIndex; i++) {\n                                    var /** @type {?} */offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;\n                                    var /** @type {?} */index = offset + i;\n                                    if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                        moveOffsets[i] = offset + 1;\n                                    }\n                                }\n                                var /** @type {?} */previousIndex = record.previousIndex;\n                                moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                            }\n                        }\n                    }\n                    if (adjPreviousIndex !== currentIndex) {\n                        fn(record, adjPreviousIndex, currentIndex);\n                    }\n                }\n            }\n        }, {\n            key: 'forEachPreviousItem',\n            value: function forEachPreviousItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachAddedItem',\n            value: function forEachAddedItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachMovedItem',\n            value: function forEachMovedItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachRemovedItem',\n            value: function forEachRemovedItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachIdentityChange',\n            value: function forEachIdentityChange(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'diff',\n            value: function diff(collection) {\n                if (isBlank(collection)) collection = [];\n                if (!isListLikeIterable(collection)) {\n                    throw new Error('Error trying to diff \\'' + collection + '\\'');\n                }\n                if (this.check(collection)) {\n                    return this;\n                } else {\n                    return null;\n                }\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy() {}\n        }, {\n            key: 'check',\n            value: function check(collection) {\n                var _this10 = this;\n\n                this._reset();\n                var /** @type {?} */record = this._itHead;\n                var /** @type {?} */mayBeDirty = false;\n                var /** @type {?} */index = void 0;\n                var /** @type {?} */item = void 0;\n                var /** @type {?} */itemTrackBy = void 0;\n                if (Array.isArray(collection)) {\n                    this._length = collection.length;\n                    for (var /** @type {?} */_index2 = 0; _index2 < this._length; _index2++) {\n                        item = collection[_index2];\n                        itemTrackBy = this._trackByFn(_index2, item);\n                        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                            record = this._mismatch(record, item, itemTrackBy, _index2);\n                            mayBeDirty = true;\n                        } else {\n                            if (mayBeDirty) {\n                                // TODO(misko): can we limit this to duplicates only?\n                                record = this._verifyReinsertion(record, item, itemTrackBy, _index2);\n                            }\n                            if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n                        }\n                        record = record._next;\n                    }\n                } else {\n                    index = 0;\n                    iterateListLike(collection, function (item) {\n                        itemTrackBy = _this10._trackByFn(index, item);\n                        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                            record = _this10._mismatch(record, item, itemTrackBy, index);\n                            mayBeDirty = true;\n                        } else {\n                            if (mayBeDirty) {\n                                // TODO(misko): can we limit this to duplicates only?\n                                record = _this10._verifyReinsertion(record, item, itemTrackBy, index);\n                            }\n                            if (!looseIdentical(record.item, item)) _this10._addIdentityChange(record, item);\n                        }\n                        record = record._next;\n                        index++;\n                    });\n                    this._length = index;\n                }\n                this._truncate(record);\n                this._collection = collection;\n                return this.isDirty;\n            }\n        }, {\n            key: '_reset',\n            value: function _reset() {\n                if (this.isDirty) {\n                    var /** @type {?} */record = void 0;\n                    var /** @type {?} */nextRecord = void 0;\n                    for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                        record._nextPrevious = record._next;\n                    }\n                    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                        record.previousIndex = record.currentIndex;\n                    }\n                    this._additionsHead = this._additionsTail = null;\n                    for (record = this._movesHead; record !== null; record = nextRecord) {\n                        record.previousIndex = record.currentIndex;\n                        nextRecord = record._nextMoved;\n                    }\n                    this._movesHead = this._movesTail = null;\n                    this._removalsHead = this._removalsTail = null;\n                    this._identityChangesHead = this._identityChangesTail = null;\n                }\n            }\n        }, {\n            key: '_mismatch',\n            value: function _mismatch(record, item, itemTrackBy, index) {\n                // The previous record after which we will append the current one.\n                var /** @type {?} */previousRecord = void 0;\n                if (record === null) {\n                    previousRecord = this._itTail;\n                } else {\n                    previousRecord = record._prev;\n                    // Remove the record from the collection since we know it does not match the item.\n                    this._remove(record);\n                }\n                // Attempt to see if we have seen the item before.\n                record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n                if (record !== null) {\n                    // We have seen this before, we need to move it forward in the collection.\n                    // But first we need to check if identity changed, so we can update in view if necessary\n                    if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n                    this._moveAfter(record, previousRecord, index);\n                } else {\n                    // Never seen it, check evicted list.\n                    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n                    if (record !== null) {\n                        // It is an item which we have evicted earlier: reinsert it back into the list.\n                        // But first we need to check if identity changed, so we can update in view if necessary\n                        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n                        this._reinsertAfter(record, previousRecord, index);\n                    } else {\n                        // It is a new item: add it.\n                        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n                    }\n                }\n                return record;\n            }\n        }, {\n            key: '_verifyReinsertion',\n            value: function _verifyReinsertion(record, item, itemTrackBy, index) {\n                var /** @type {?} */reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n                if (reinsertRecord !== null) {\n                    record = this._reinsertAfter(reinsertRecord, record._prev, index);\n                } else if (record.currentIndex != index) {\n                    record.currentIndex = index;\n                    this._addToMoves(record, index);\n                }\n                return record;\n            }\n        }, {\n            key: '_truncate',\n            value: function _truncate(record) {\n                // Anything after that needs to be removed;\n                while (record !== null) {\n                    var /** @type {?} */nextRecord = record._next;\n                    this._addToRemovals(this._unlink(record));\n                    record = nextRecord;\n                }\n                if (this._unlinkedRecords !== null) {\n                    this._unlinkedRecords.clear();\n                }\n                if (this._additionsTail !== null) {\n                    this._additionsTail._nextAdded = null;\n                }\n                if (this._movesTail !== null) {\n                    this._movesTail._nextMoved = null;\n                }\n                if (this._itTail !== null) {\n                    this._itTail._next = null;\n                }\n                if (this._removalsTail !== null) {\n                    this._removalsTail._nextRemoved = null;\n                }\n                if (this._identityChangesTail !== null) {\n                    this._identityChangesTail._nextIdentityChange = null;\n                }\n            }\n        }, {\n            key: '_reinsertAfter',\n            value: function _reinsertAfter(record, prevRecord, index) {\n                if (this._unlinkedRecords !== null) {\n                    this._unlinkedRecords.remove(record);\n                }\n                var /** @type {?} */prev = record._prevRemoved;\n                var /** @type {?} */next = record._nextRemoved;\n                if (prev === null) {\n                    this._removalsHead = next;\n                } else {\n                    prev._nextRemoved = next;\n                }\n                if (next === null) {\n                    this._removalsTail = prev;\n                } else {\n                    next._prevRemoved = prev;\n                }\n                this._insertAfter(record, prevRecord, index);\n                this._addToMoves(record, index);\n                return record;\n            }\n        }, {\n            key: '_moveAfter',\n            value: function _moveAfter(record, prevRecord, index) {\n                this._unlink(record);\n                this._insertAfter(record, prevRecord, index);\n                this._addToMoves(record, index);\n                return record;\n            }\n        }, {\n            key: '_addAfter',\n            value: function _addAfter(record, prevRecord, index) {\n                this._insertAfter(record, prevRecord, index);\n                if (this._additionsTail === null) {\n                    // todo(vicb)\n                    // assert(this._additionsHead === null);\n                    this._additionsTail = this._additionsHead = record;\n                } else {\n                    // todo(vicb)\n                    // assert(_additionsTail._nextAdded === null);\n                    // assert(record._nextAdded === null);\n                    this._additionsTail = this._additionsTail._nextAdded = record;\n                }\n                return record;\n            }\n        }, {\n            key: '_insertAfter',\n            value: function _insertAfter(record, prevRecord, index) {\n                // todo(vicb)\n                // assert(record != prevRecord);\n                // assert(record._next === null);\n                // assert(record._prev === null);\n                var /** @type {?} */next = prevRecord === null ? this._itHead : prevRecord._next;\n                // todo(vicb)\n                // assert(next != record);\n                // assert(prevRecord != record);\n                record._next = next;\n                record._prev = prevRecord;\n                if (next === null) {\n                    this._itTail = record;\n                } else {\n                    next._prev = record;\n                }\n                if (prevRecord === null) {\n                    this._itHead = record;\n                } else {\n                    prevRecord._next = record;\n                }\n                if (this._linkedRecords === null) {\n                    this._linkedRecords = new _DuplicateMap();\n                }\n                this._linkedRecords.put(record);\n                record.currentIndex = index;\n                return record;\n            }\n        }, {\n            key: '_remove',\n            value: function _remove(record) {\n                return this._addToRemovals(this._unlink(record));\n            }\n        }, {\n            key: '_unlink',\n            value: function _unlink(record) {\n                if (this._linkedRecords !== null) {\n                    this._linkedRecords.remove(record);\n                }\n                var /** @type {?} */prev = record._prev;\n                var /** @type {?} */next = record._next;\n                // todo(vicb)\n                // assert((record._prev = null) === null);\n                // assert((record._next = null) === null);\n                if (prev === null) {\n                    this._itHead = next;\n                } else {\n                    prev._next = next;\n                }\n                if (next === null) {\n                    this._itTail = prev;\n                } else {\n                    next._prev = prev;\n                }\n                return record;\n            }\n        }, {\n            key: '_addToMoves',\n            value: function _addToMoves(record, toIndex) {\n                // todo(vicb)\n                // assert(record._nextMoved === null);\n                if (record.previousIndex === toIndex) {\n                    return record;\n                }\n                if (this._movesTail === null) {\n                    // todo(vicb)\n                    // assert(_movesHead === null);\n                    this._movesTail = this._movesHead = record;\n                } else {\n                    // todo(vicb)\n                    // assert(_movesTail._nextMoved === null);\n                    this._movesTail = this._movesTail._nextMoved = record;\n                }\n                return record;\n            }\n        }, {\n            key: '_addToRemovals',\n            value: function _addToRemovals(record) {\n                if (this._unlinkedRecords === null) {\n                    this._unlinkedRecords = new _DuplicateMap();\n                }\n                this._unlinkedRecords.put(record);\n                record.currentIndex = null;\n                record._nextRemoved = null;\n                if (this._removalsTail === null) {\n                    // todo(vicb)\n                    // assert(_removalsHead === null);\n                    this._removalsTail = this._removalsHead = record;\n                    record._prevRemoved = null;\n                } else {\n                    // todo(vicb)\n                    // assert(_removalsTail._nextRemoved === null);\n                    // assert(record._nextRemoved === null);\n                    record._prevRemoved = this._removalsTail;\n                    this._removalsTail = this._removalsTail._nextRemoved = record;\n                }\n                return record;\n            }\n        }, {\n            key: '_addIdentityChange',\n            value: function _addIdentityChange(record, item) {\n                record.item = item;\n                if (this._identityChangesTail === null) {\n                    this._identityChangesTail = this._identityChangesHead = record;\n                } else {\n                    this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n                }\n                return record;\n            }\n        }, {\n            key: 'toString',\n            value: function toString() {\n                var /** @type {?} */list = [];\n                this.forEachItem(function (record) {\n                    return list.push(record);\n                });\n                var /** @type {?} */previous = [];\n                this.forEachPreviousItem(function (record) {\n                    return previous.push(record);\n                });\n                var /** @type {?} */additions = [];\n                this.forEachAddedItem(function (record) {\n                    return additions.push(record);\n                });\n                var /** @type {?} */moves = [];\n                this.forEachMovedItem(function (record) {\n                    return moves.push(record);\n                });\n                var /** @type {?} */removals = [];\n                this.forEachRemovedItem(function (record) {\n                    return removals.push(record);\n                });\n                var /** @type {?} */identityChanges = [];\n                this.forEachIdentityChange(function (record) {\n                    return identityChanges.push(record);\n                });\n                return 'collection: ' + list.join(', ') + '\\n' + 'previous: ' + previous.join(', ') + '\\n' + 'additions: ' + additions.join(', ') + '\\n' + 'moves: ' + moves.join(', ') + '\\n' + 'removals: ' + removals.join(', ') + '\\n' + 'identityChanges: ' + identityChanges.join(', ') + '\\n';\n            }\n        }, {\n            key: 'collection',\n            get: function get() {\n                return this._collection;\n            }\n        }, {\n            key: 'length',\n            get: function get() {\n                return this._length;\n            }\n        }, {\n            key: 'isDirty',\n            get: function get() {\n                return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;\n            }\n        }]);\n\n        return DefaultIterableDiffer;\n    }();\n\n    var IterableChangeRecord_ = function () {\n        /**\n         * @param {?} item\n         * @param {?} trackById\n         */\n        function IterableChangeRecord_(item, trackById) {\n            _classCallCheck(this, IterableChangeRecord_);\n\n            this.item = item;\n            this.trackById = trackById;\n            this.currentIndex = null;\n            this.previousIndex = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prevDup = null;\n            /** @internal */\n            this._nextDup = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextMoved = null;\n            /** @internal */\n            this._nextIdentityChange = null;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(IterableChangeRecord_, [{\n            key: 'toString',\n            value: function toString() {\n                return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n            }\n        }]);\n\n        return IterableChangeRecord_;\n    }();\n\n    var _DuplicateItemRecordList = function () {\n        function _DuplicateItemRecordList() {\n            _classCallCheck(this, _DuplicateItemRecordList);\n\n            /** @internal */\n            this._head = null;\n            /** @internal */\n            this._tail = null;\n        }\n        /**\n         * Append the record to the list of duplicates.\n         *\n         * Note: by design all records in the list of duplicates hold the same value in record.item.\n         * @param {?} record\n         * @return {?}\n         */\n\n\n        _createClass(_DuplicateItemRecordList, [{\n            key: 'add',\n            value: function add(record) {\n                if (this._head === null) {\n                    this._head = this._tail = record;\n                    record._nextDup = null;\n                    record._prevDup = null;\n                } else {\n                    // todo(vicb)\n                    // assert(record.item ==  _head.item ||\n                    //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n                    this._tail._nextDup = record;\n                    record._prevDup = this._tail;\n                    record._nextDup = null;\n                    this._tail = record;\n                }\n            }\n        }, {\n            key: 'get',\n            value: function get(trackById, afterIndex) {\n                var /** @type {?} */record = void 0;\n                for (record = this._head; record !== null; record = record._nextDup) {\n                    if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {\n                        return record;\n                    }\n                }\n                return null;\n            }\n        }, {\n            key: 'remove',\n            value: function remove(record) {\n                // todo(vicb)\n                // assert(() {\n                //  // verify that the record being removed is in the list.\n                //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n                //    if (identical(cursor, record)) return true;\n                //  }\n                //  return false;\n                //});\n                var /** @type {?} */prev = record._prevDup;\n                var /** @type {?} */next = record._nextDup;\n                if (prev === null) {\n                    this._head = next;\n                } else {\n                    prev._nextDup = next;\n                }\n                if (next === null) {\n                    this._tail = prev;\n                } else {\n                    next._prevDup = prev;\n                }\n                return this._head === null;\n            }\n        }]);\n\n        return _DuplicateItemRecordList;\n    }();\n\n    var _DuplicateMap = function () {\n        function _DuplicateMap() {\n            _classCallCheck(this, _DuplicateMap);\n\n            this.map = new Map();\n        }\n        /**\n         * @param {?} record\n         * @return {?}\n         */\n\n\n        _createClass(_DuplicateMap, [{\n            key: 'put',\n            value: function put(record) {\n                var /** @type {?} */key = record.trackById;\n                var /** @type {?} */duplicates = this.map.get(key);\n                if (!duplicates) {\n                    duplicates = new _DuplicateItemRecordList();\n                    this.map.set(key, duplicates);\n                }\n                duplicates.add(record);\n            }\n        }, {\n            key: 'get',\n            value: function get(trackById) {\n                var afterIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                var /** @type {?} */key = trackById;\n                var /** @type {?} */recordList = this.map.get(key);\n                return recordList ? recordList.get(trackById, afterIndex) : null;\n            }\n        }, {\n            key: 'remove',\n            value: function remove(record) {\n                var /** @type {?} */key = record.trackById;\n                var /** @type {?} */recordList = this.map.get(key);\n                // Remove the list of duplicates when it gets empty\n                if (recordList.remove(record)) {\n                    this.map.delete(key);\n                }\n                return record;\n            }\n        }, {\n            key: 'clear',\n            value: function clear() {\n                this.map.clear();\n            }\n        }, {\n            key: 'toString',\n            value: function toString() {\n                return '_DuplicateMap(' + stringify(this.map) + ')';\n            }\n        }, {\n            key: 'isEmpty',\n            get: function get() {\n                return this.map.size === 0;\n            }\n        }]);\n\n        return _DuplicateMap;\n    }();\n\n    /**\n     * @param {?} item\n     * @param {?} addRemoveOffset\n     * @param {?} moveOffsets\n     * @return {?}\n     */\n    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n        var /** @type {?} */previousIndex = item.previousIndex;\n        if (previousIndex === null) return previousIndex;\n        var /** @type {?} */moveOffset = 0;\n        if (moveOffsets && previousIndex < moveOffsets.length) {\n            moveOffset = moveOffsets[previousIndex];\n        }\n        return previousIndex + addRemoveOffset + moveOffset;\n    }\n\n    var DefaultKeyValueDifferFactory = function () {\n        function DefaultKeyValueDifferFactory() {\n            _classCallCheck(this, DefaultKeyValueDifferFactory);\n        }\n        /**\n         * @param {?} obj\n         * @return {?}\n         */\n\n\n        _createClass(DefaultKeyValueDifferFactory, [{\n            key: 'supports',\n            value: function supports(obj) {\n                return obj instanceof Map || isJsObject(obj);\n            }\n        }, {\n            key: 'create',\n            value: function create(cd) {\n                return new DefaultKeyValueDiffer();\n            }\n        }]);\n\n        return DefaultKeyValueDifferFactory;\n    }();\n\n    var DefaultKeyValueDiffer = function () {\n        function DefaultKeyValueDiffer() {\n            _classCallCheck(this, DefaultKeyValueDiffer);\n\n            this._records = new Map();\n            this._mapHead = null;\n            this._previousMapHead = null;\n            this._changesHead = null;\n            this._changesTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(DefaultKeyValueDiffer, [{\n            key: 'forEachItem',\n            value: function forEachItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._mapHead; record !== null; record = record._next) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachPreviousItem',\n            value: function forEachPreviousItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachChangedItem',\n            value: function forEachChangedItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachAddedItem',\n            value: function forEachAddedItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'forEachRemovedItem',\n            value: function forEachRemovedItem(fn) {\n                var /** @type {?} */record = void 0;\n                for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                    fn(record);\n                }\n            }\n        }, {\n            key: 'diff',\n            value: function diff(map) {\n                if (!map) {\n                    map = new Map();\n                } else if (!(map instanceof Map || isJsObject(map))) {\n                    throw new Error('Error trying to diff \\'' + map + '\\'');\n                }\n                return this.check(map) ? this : null;\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy() {}\n        }, {\n            key: 'check',\n            value: function check(map) {\n                var _this11 = this;\n\n                this._reset();\n                var /** @type {?} */records = this._records;\n                var /** @type {?} */oldSeqRecord = this._mapHead;\n                var /** @type {?} */lastOldSeqRecord = null;\n                var /** @type {?} */lastNewSeqRecord = null;\n                var /** @type {?} */seqChanged = false;\n                this._forEach(map, function (value, key) {\n                    var /** @type {?} */newSeqRecord = void 0;\n                    if (oldSeqRecord && key === oldSeqRecord.key) {\n                        newSeqRecord = oldSeqRecord;\n                        _this11._maybeAddToChanges(newSeqRecord, value);\n                    } else {\n                        seqChanged = true;\n                        if (oldSeqRecord !== null) {\n                            _this11._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n                            _this11._addToRemovals(oldSeqRecord);\n                        }\n                        if (records.has(key)) {\n                            newSeqRecord = records.get(key);\n                            _this11._maybeAddToChanges(newSeqRecord, value);\n                        } else {\n                            newSeqRecord = new KeyValueChangeRecord_(key);\n                            records.set(key, newSeqRecord);\n                            newSeqRecord.currentValue = value;\n                            _this11._addToAdditions(newSeqRecord);\n                        }\n                    }\n                    if (seqChanged) {\n                        if (_this11._isInRemovals(newSeqRecord)) {\n                            _this11._removeFromRemovals(newSeqRecord);\n                        }\n                        if (lastNewSeqRecord == null) {\n                            _this11._mapHead = newSeqRecord;\n                        } else {\n                            lastNewSeqRecord._next = newSeqRecord;\n                        }\n                    }\n                    lastOldSeqRecord = oldSeqRecord;\n                    lastNewSeqRecord = newSeqRecord;\n                    oldSeqRecord = oldSeqRecord && oldSeqRecord._next;\n                });\n                this._truncate(lastOldSeqRecord, oldSeqRecord);\n                return this.isDirty;\n            }\n        }, {\n            key: '_reset',\n            value: function _reset() {\n                if (this.isDirty) {\n                    var /** @type {?} */record = void 0;\n                    // Record the state of the mapping\n                    for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n                        record._nextPrevious = record._next;\n                    }\n                    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                        record.previousValue = record.currentValue;\n                    }\n                    for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                        record.previousValue = record.currentValue;\n                    }\n                    this._changesHead = this._changesTail = null;\n                    this._additionsHead = this._additionsTail = null;\n                    this._removalsHead = this._removalsTail = null;\n                }\n            }\n        }, {\n            key: '_truncate',\n            value: function _truncate(lastRecord, record) {\n                while (record !== null) {\n                    if (lastRecord === null) {\n                        this._mapHead = null;\n                    } else {\n                        lastRecord._next = null;\n                    }\n                    var /** @type {?} */nextRecord = record._next;\n                    this._addToRemovals(record);\n                    lastRecord = record;\n                    record = nextRecord;\n                }\n                for (var /** @type {?} */rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {\n                    rec.previousValue = rec.currentValue;\n                    rec.currentValue = null;\n                    this._records.delete(rec.key);\n                }\n            }\n        }, {\n            key: '_maybeAddToChanges',\n            value: function _maybeAddToChanges(record, newValue) {\n                if (!looseIdentical(newValue, record.currentValue)) {\n                    record.previousValue = record.currentValue;\n                    record.currentValue = newValue;\n                    this._addToChanges(record);\n                }\n            }\n        }, {\n            key: '_isInRemovals',\n            value: function _isInRemovals(record) {\n                return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;\n            }\n        }, {\n            key: '_addToRemovals',\n            value: function _addToRemovals(record) {\n                if (this._removalsHead === null) {\n                    this._removalsHead = this._removalsTail = record;\n                } else {\n                    this._removalsTail._nextRemoved = record;\n                    record._prevRemoved = this._removalsTail;\n                    this._removalsTail = record;\n                }\n            }\n        }, {\n            key: '_removeFromSeq',\n            value: function _removeFromSeq(prev, record) {\n                var /** @type {?} */next = record._next;\n                if (prev === null) {\n                    this._mapHead = next;\n                } else {\n                    prev._next = next;\n                }\n                record._next = null;\n            }\n        }, {\n            key: '_removeFromRemovals',\n            value: function _removeFromRemovals(record) {\n                var /** @type {?} */prev = record._prevRemoved;\n                var /** @type {?} */next = record._nextRemoved;\n                if (prev === null) {\n                    this._removalsHead = next;\n                } else {\n                    prev._nextRemoved = next;\n                }\n                if (next === null) {\n                    this._removalsTail = prev;\n                } else {\n                    next._prevRemoved = prev;\n                }\n                record._prevRemoved = record._nextRemoved = null;\n            }\n        }, {\n            key: '_addToAdditions',\n            value: function _addToAdditions(record) {\n                if (this._additionsHead === null) {\n                    this._additionsHead = this._additionsTail = record;\n                } else {\n                    this._additionsTail._nextAdded = record;\n                    this._additionsTail = record;\n                }\n            }\n        }, {\n            key: '_addToChanges',\n            value: function _addToChanges(record) {\n                if (this._changesHead === null) {\n                    this._changesHead = this._changesTail = record;\n                } else {\n                    this._changesTail._nextChanged = record;\n                    this._changesTail = record;\n                }\n            }\n        }, {\n            key: 'toString',\n            value: function toString() {\n                var /** @type {?} */items = [];\n                var /** @type {?} */previous = [];\n                var /** @type {?} */changes = [];\n                var /** @type {?} */additions = [];\n                var /** @type {?} */removals = [];\n                var /** @type {?} */record = void 0;\n                for (record = this._mapHead; record !== null; record = record._next) {\n                    items.push(stringify(record));\n                }\n                for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                    previous.push(stringify(record));\n                }\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    changes.push(stringify(record));\n                }\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    additions.push(stringify(record));\n                }\n                for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                    removals.push(stringify(record));\n                }\n                return 'map: ' + items.join(', ') + '\\n' + 'previous: ' + previous.join(', ') + '\\n' + 'additions: ' + additions.join(', ') + '\\n' + 'changes: ' + changes.join(', ') + '\\n' + 'removals: ' + removals.join(', ') + '\\n';\n            }\n        }, {\n            key: '_forEach',\n            value: function _forEach(obj, fn) {\n                if (obj instanceof Map) {\n                    obj.forEach(fn);\n                } else {\n                    Object.keys(obj).forEach(function (k) {\n                        return fn(obj[k], k);\n                    });\n                }\n            }\n        }, {\n            key: 'isDirty',\n            get: function get() {\n                return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;\n            }\n        }]);\n\n        return DefaultKeyValueDiffer;\n    }();\n\n    var KeyValueChangeRecord_ = function () {\n        /**\n         * @param {?} key\n         */\n        function KeyValueChangeRecord_(key) {\n            _classCallCheck(this, KeyValueChangeRecord_);\n\n            this.key = key;\n            this.previousValue = null;\n            this.currentValue = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextChanged = null;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(KeyValueChangeRecord_, [{\n            key: 'toString',\n            value: function toString() {\n                return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']';\n            }\n        }]);\n\n        return KeyValueChangeRecord_;\n    }();\n\n    var IterableDiffers = function () {\n        /**\n         * @param {?} factories\n         */\n        function IterableDiffers(factories) {\n            _classCallCheck(this, IterableDiffers);\n\n            this.factories = factories;\n        }\n        /**\n         * @param {?} factories\n         * @param {?=} parent\n         * @return {?}\n         */\n\n\n        _createClass(IterableDiffers, [{\n            key: 'find',\n            value: function find(iterable) {\n                var /** @type {?} */factory = this.factories.find(function (f) {\n                    return f.supports(iterable);\n                });\n                if (isPresent(factory)) {\n                    return factory;\n                } else {\n                    throw new Error('Cannot find a differ supporting object \\'' + iterable + '\\' of type \\'' + getTypeNameForDebugging(iterable) + '\\'');\n                }\n            }\n        }], [{\n            key: 'create',\n            value: function create(factories, parent) {\n                if (isPresent(parent)) {\n                    var /** @type {?} */copied = parent.factories.slice();\n                    factories = factories.concat(copied);\n                    return new IterableDiffers(factories);\n                } else {\n                    return new IterableDiffers(factories);\n                }\n            }\n        }, {\n            key: 'extend',\n            value: function extend(factories) {\n                return {\n                    provide: IterableDiffers,\n                    useFactory: function useFactory(parent) {\n                        if (!parent) {\n                            // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                            // to\n                            // bootstrap(), which would override default pipes instead of extending them.\n                            throw new Error('Cannot extend IterableDiffers without a parent injector');\n                        }\n                        return IterableDiffers.create(factories, parent);\n                    },\n                    // Dependency technically isn't optional, but we can provide a better error message this way.\n                    deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n                };\n            }\n        }]);\n\n        return IterableDiffers;\n    }();\n\n    var KeyValueDiffers = function () {\n        /**\n         * @param {?} factories\n         */\n        function KeyValueDiffers(factories) {\n            _classCallCheck(this, KeyValueDiffers);\n\n            this.factories = factories;\n        }\n        /**\n         * @param {?} factories\n         * @param {?=} parent\n         * @return {?}\n         */\n\n\n        _createClass(KeyValueDiffers, [{\n            key: 'find',\n            value: function find(kv) {\n                var /** @type {?} */factory = this.factories.find(function (f) {\n                    return f.supports(kv);\n                });\n                if (factory) {\n                    return factory;\n                }\n                throw new Error('Cannot find a differ supporting object \\'' + kv + '\\'');\n            }\n        }], [{\n            key: 'create',\n            value: function create(factories, parent) {\n                if (parent) {\n                    var /** @type {?} */copied = parent.factories.slice();\n                    factories = factories.concat(copied);\n                }\n                return new KeyValueDiffers(factories);\n            }\n        }, {\n            key: 'extend',\n            value: function extend(factories) {\n                return {\n                    provide: KeyValueDiffers,\n                    useFactory: function useFactory(parent) {\n                        if (!parent) {\n                            // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                            // to bootstrap(), which would override default pipes instead of extending them.\n                            throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                        }\n                        return KeyValueDiffers.create(factories, parent);\n                    },\n                    // Dependency technically isn't optional, but we can provide a better error message this way.\n                    deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n                };\n            }\n        }]);\n\n        return KeyValueDiffers;\n    }();\n\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function devModeEqual(a, b) {\n        if (isListLikeIterable(a) && isListLikeIterable(b)) {\n            return areIterablesEqual(a, b, devModeEqual);\n        } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n            return true;\n        } else {\n            return looseIdentical(a, b);\n        }\n    }\n    /**\n     * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n     * reference\n     * has not changed.\n     *\n     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n     *\n     * Example:\n     *\n     * ```\n     * if (this._latestValue === this._latestReturnedValue) {\n     *    return this._latestReturnedValue;\n     *  } else {\n     *    this._latestReturnedValue = this._latestValue;\n     *    return WrappedValue.wrap(this._latestValue); // this will force update\n     *  }\n     * ```\n     * \\@stable\n     */\n\n    var WrappedValue = function () {\n        /**\n         * @param {?} wrapped\n         */\n        function WrappedValue(wrapped) {\n            _classCallCheck(this, WrappedValue);\n\n            this.wrapped = wrapped;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n\n\n        _createClass(WrappedValue, null, [{\n            key: 'wrap',\n            value: function wrap(value) {\n                return new WrappedValue(value);\n            }\n        }]);\n\n        return WrappedValue;\n    }();\n\n    var ValueUnwrapper = function () {\n        function ValueUnwrapper() {\n            _classCallCheck(this, ValueUnwrapper);\n\n            this.hasWrappedValue = false;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n\n\n        _createClass(ValueUnwrapper, [{\n            key: 'unwrap',\n            value: function unwrap(value) {\n                if (value instanceof WrappedValue) {\n                    this.hasWrappedValue = true;\n                    return value.wrapped;\n                }\n                return value;\n            }\n        }, {\n            key: 'reset',\n            value: function reset() {\n                this.hasWrappedValue = false;\n            }\n        }]);\n\n        return ValueUnwrapper;\n    }();\n\n    var SimpleChange = function () {\n        /**\n         * @param {?} previousValue\n         * @param {?} currentValue\n         * @param {?} firstChange\n         */\n        function SimpleChange(previousValue, currentValue, firstChange) {\n            _classCallCheck(this, SimpleChange);\n\n            this.previousValue = previousValue;\n            this.currentValue = currentValue;\n            this.firstChange = firstChange;\n        }\n        /**\n         * Check whether the new value is the first value assigned.\n         * @return {?}\n         */\n\n\n        _createClass(SimpleChange, [{\n            key: 'isFirstChange',\n            value: function isFirstChange() {\n                return this.firstChange;\n            }\n        }]);\n\n        return SimpleChange;\n    }();\n\n    var ChangeDetectorRef = function () {\n        function ChangeDetectorRef() {\n            _classCallCheck(this, ChangeDetectorRef);\n        }\n\n        _createClass(ChangeDetectorRef, [{\n            key: 'markForCheck',\n            value: function markForCheck() {}\n        }, {\n            key: 'detach',\n            value: function detach() {}\n        }, {\n            key: 'detectChanges',\n            value: function detectChanges() {}\n        }, {\n            key: 'checkNoChanges',\n            value: function checkNoChanges() {}\n        }, {\n            key: 'reattach',\n            value: function reattach() {}\n        }]);\n\n        return ChangeDetectorRef;\n    }();\n\n    /**\n     * Structural diffing for `Object`s and `Map`s.\n     */\n    var /** @type {?} */keyValDiff = [new DefaultKeyValueDifferFactory()];\n    /**\n     * Structural diffing for `Iterable` types such as `Array`s.\n     */\n    var /** @type {?} */iterableDiff = [new DefaultIterableDifferFactory()];\n    var /** @type {?} */defaultIterableDiffers = new IterableDiffers(iterableDiff);\n    var /** @type {?} */defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n    /**\n     * @deprecated Use `RendererTypeV2` (and `RendererV2`) instead.\n     */\n\n    var RenderComponentType =\n    /**\n     * @param {?} id\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     */\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        _classCallCheck(this, RenderComponentType);\n\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    };\n\n    var RenderDebugInfo = function () {\n        function RenderDebugInfo() {\n            _classCallCheck(this, RenderDebugInfo);\n        }\n\n        _createClass(RenderDebugInfo, [{\n            key: 'injector',\n            value: function injector() {}\n        }, {\n            key: 'component',\n            value: function component() {}\n        }, {\n            key: 'providerTokens',\n            value: function providerTokens() {}\n        }, {\n            key: 'references',\n            value: function references() {}\n        }, {\n            key: 'context',\n            value: function context() {}\n        }, {\n            key: 'source',\n            value: function source() {}\n        }]);\n\n        return RenderDebugInfo;\n    }();\n\n    var RendererV1 = function () {\n        function RendererV1() {\n            _classCallCheck(this, RendererV1);\n        }\n\n        _createClass(RendererV1, [{\n            key: 'selectRootElement',\n            value: function selectRootElement(selectorOrNode, debugInfo) {}\n        }, {\n            key: 'createElement',\n            value: function createElement(parentElement, name, debugInfo) {}\n        }, {\n            key: 'createViewRoot',\n            value: function createViewRoot(hostElement) {}\n        }, {\n            key: 'createTemplateAnchor',\n            value: function createTemplateAnchor(parentElement, debugInfo) {}\n        }, {\n            key: 'createText',\n            value: function createText(parentElement, value, debugInfo) {}\n        }, {\n            key: 'projectNodes',\n            value: function projectNodes(parentElement, nodes) {}\n        }, {\n            key: 'attachViewAfter',\n            value: function attachViewAfter(node, viewRootNodes) {}\n        }, {\n            key: 'detachView',\n            value: function detachView(viewRootNodes) {}\n        }, {\n            key: 'destroyView',\n            value: function destroyView(hostElement, viewAllNodes) {}\n        }, {\n            key: 'listen',\n            value: function listen(renderElement, name, callback) {}\n        }, {\n            key: 'listenGlobal',\n            value: function listenGlobal(target, name, callback) {}\n        }, {\n            key: 'setElementProperty',\n            value: function setElementProperty(renderElement, propertyName, propertyValue) {}\n        }, {\n            key: 'setElementAttribute',\n            value: function setElementAttribute(renderElement, attributeName, attributeValue) {}\n        }, {\n            key: 'setBindingDebugInfo',\n            value: function setBindingDebugInfo(renderElement, propertyName, propertyValue) {}\n        }, {\n            key: 'setElementClass',\n            value: function setElementClass(renderElement, className, isAdd) {}\n        }, {\n            key: 'setElementStyle',\n            value: function setElementStyle(renderElement, styleName, styleValue) {}\n        }, {\n            key: 'invokeElementMethod',\n            value: function invokeElementMethod(renderElement, methodName, args) {}\n        }, {\n            key: 'setText',\n            value: function setText(renderNode, text) {}\n        }, {\n            key: 'animate',\n            value: function animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {}\n        }]);\n\n        return RendererV1;\n    }();\n\n    var /** @type {?} */RendererV2Interceptor = new InjectionToken('RendererV2Interceptor');\n    /**\n     * Injectable service that provides a low-level interface for modifying the UI.\n     *\n     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n     * not statically known, use {\\@link #setElementProperty} or {\\@link #setElementAttribute}\n     * respectively.\n     *\n     * If you are implementing a custom renderer, you must implement this interface.\n     *\n     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n     *\n     * @deprecated Use `RendererFactoryV2` instead.\n     * @abstract\n     */\n\n    var RootRenderer = function () {\n        function RootRenderer() {\n            _classCallCheck(this, RootRenderer);\n        }\n\n        _createClass(RootRenderer, [{\n            key: 'renderComponent',\n            value: function renderComponent(componentType) {}\n        }]);\n\n        return RootRenderer;\n    }();\n\n    var RendererFactoryV2 = function () {\n        function RendererFactoryV2() {\n            _classCallCheck(this, RendererFactoryV2);\n        }\n\n        _createClass(RendererFactoryV2, [{\n            key: 'createRenderer',\n            value: function createRenderer(hostElement, type) {}\n        }]);\n\n        return RendererFactoryV2;\n    }();\n\n    var RendererV2 = function () {\n        function RendererV2() {\n            _classCallCheck(this, RendererV2);\n        }\n\n        _createClass(RendererV2, [{\n            key: 'data',\n            value: function data() {}\n        }, {\n            key: 'destroy',\n            value: function destroy() {}\n        }, {\n            key: 'createElement',\n            value: function createElement(name, namespace) {}\n        }, {\n            key: 'createComment',\n            value: function createComment(value) {}\n        }, {\n            key: 'createText',\n            value: function createText(value) {}\n        }, {\n            key: 'appendChild',\n            value: function appendChild(parent, newChild) {}\n        }, {\n            key: 'insertBefore',\n            value: function insertBefore(parent, newChild, refChild) {}\n        }, {\n            key: 'removeChild',\n            value: function removeChild(parent, oldChild) {}\n        }, {\n            key: 'selectRootElement',\n            value: function selectRootElement(selectorOrNode) {}\n        }, {\n            key: 'parentNode',\n            value: function parentNode(node) {}\n        }, {\n            key: 'nextSibling',\n            value: function nextSibling(node) {}\n        }, {\n            key: 'setAttribute',\n            value: function setAttribute(el, name, value, namespace) {}\n        }, {\n            key: 'removeAttribute',\n            value: function removeAttribute(el, name, namespace) {}\n        }, {\n            key: 'addClass',\n            value: function addClass(el, name) {}\n        }, {\n            key: 'removeClass',\n            value: function removeClass(el, name) {}\n        }, {\n            key: 'setStyle',\n            value: function setStyle(el, style, value, hasVendorPrefix, hasImportant) {}\n        }, {\n            key: 'removeStyle',\n            value: function removeStyle(el, style, hasVendorPrefix) {}\n        }, {\n            key: 'setProperty',\n            value: function setProperty(el, name, value) {}\n        }, {\n            key: 'setValue',\n            value: function setValue(node, value) {}\n        }, {\n            key: 'listen',\n            value: function listen(target, eventName, callback) {}\n        }]);\n\n        return RendererV2;\n    }();\n\n    var SecurityContext = {};\n    SecurityContext.NONE = 0;\n    SecurityContext.HTML = 1;\n    SecurityContext.STYLE = 2;\n    SecurityContext.SCRIPT = 3;\n    SecurityContext.URL = 4;\n    SecurityContext.RESOURCE_URL = 5;\n    SecurityContext[SecurityContext.NONE] = \"NONE\";\n    SecurityContext[SecurityContext.HTML] = \"HTML\";\n    SecurityContext[SecurityContext.STYLE] = \"STYLE\";\n    SecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\n    SecurityContext[SecurityContext.URL] = \"URL\";\n    SecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n    /**\n     * Sanitizer is used by the views to sanitize potentially dangerous values.\n     *\n     * \\@stable\n     * @abstract\n     */\n\n    var Sanitizer = function () {\n        function Sanitizer() {\n            _classCallCheck(this, Sanitizer);\n        }\n\n        _createClass(Sanitizer, [{\n            key: 'sanitize',\n            value: function sanitize(context, value) {}\n        }]);\n\n        return Sanitizer;\n    }();\n\n    /**\n     * An error thrown if application changes model breaking the top-down data flow.\n     *\n     * This exception is only thrown in dev mode.\n     *\n     * <!-- TODO: Add a link once the dev mode option is configurable -->\n     *\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'parent',\n     *   template: '<child [prop]=\"parentProp\"></child>',\n     * })\n     * class Parent {\n     *   parentProp = 'init';\n     * }\n     *\n     * \\@Directive({selector: 'child', inputs: ['prop']})\n     * class Child {\n     *   constructor(public parent: Parent) {}\n     *\n     *   set prop(v) {\n     *     // this updates the parent property, which is disallowed during change detection\n     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n     *     this.parent.parentProp = 'updated';\n     *   }\n     * }\n     * ```\n     * @param {?} oldValue\n     * @param {?} currValue\n     * @param {?} isFirstCheck\n     * @return {?}\n     */\n    function expressionChangedAfterItHasBeenCheckedError(oldValue, currValue, isFirstCheck) {\n        var /** @type {?} */msg = 'Expression has changed after it was checked. Previous value: \\'' + oldValue + '\\'. Current value: \\'' + currValue + '\\'.';\n        if (isFirstCheck) {\n            msg += ' It seems like the view has been created after its parent and its children have been dirty checked.' + ' Has it been created in a change detection hook ?';\n        }\n        var /** @type {?} */error = Error(msg);\n        error[ERROR_TYPE] = expressionChangedAfterItHasBeenCheckedError;\n        return error;\n    }\n    /**\n     * Thrown when an exception was raised during view creation, change detection or destruction.\n     *\n     * This error wraps the original exception to attach additional contextual information that can\n     * be useful for debugging.\n     * @param {?} originalError\n     * @param {?} context\n     * @return {?}\n     */\n    function viewWrappedError(originalError, context) {\n        var /** @type {?} */error = wrappedError('Error in ' + context.source, originalError);\n        error[ERROR_DEBUG_CONTEXT] = context;\n        error[ERROR_TYPE] = viewWrappedError;\n        return error;\n    }\n    /**\n     * Thrown when a destroyed view is used.\n     *\n     * This error indicates a bug in the framework.\n     *\n     * This is an internal Angular error.\n     * @param {?} details\n     * @return {?}\n     */\n    function viewDestroyedError(details) {\n        return Error('Attempt to use a destroyed view: ' + details);\n    }\n\n    var ViewUtils = function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} sanitizer\n         * @param {?} animationQueue\n         */\n        function ViewUtils(_renderer, sanitizer, animationQueue) {\n            _classCallCheck(this, ViewUtils);\n\n            this._renderer = _renderer;\n            this.animationQueue = animationQueue;\n            this.sanitizer = sanitizer;\n        }\n        /**\n         * \\@internal\n         * @param {?} renderComponentType\n         * @return {?}\n         */\n\n\n        _createClass(ViewUtils, [{\n            key: 'renderComponent',\n            value: function renderComponent(renderComponentType) {\n                return this._renderer.renderComponent(renderComponentType);\n            }\n        }]);\n\n        return ViewUtils;\n    }();\n\n    ViewUtils.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    ViewUtils.ctorParameters = function () {\n        return [{ type: RootRenderer }, { type: Sanitizer }, { type: AnimationQueue }];\n    };\n    var /** @type {?} */nextRenderComponentTypeId = 0;\n    /**\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     * @return {?}\n     */\n    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {\n        return new RenderComponentType('' + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);\n    }\n    /**\n     * @param {?} e\n     * @param {?} array\n     * @return {?}\n     */\n    function addToArray(e, array) {\n        array.push(e);\n    }\n    /**\n     * @param {?} valueCount\n     * @param {?} constAndInterp\n     * @return {?}\n     */\n    function interpolate(valueCount, constAndInterp) {\n        var /** @type {?} */result = '';\n        for (var /** @type {?} */i = 0; i < valueCount * 2; i = i + 2) {\n            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n        }\n        return result + constAndInterp[valueCount * 2];\n    }\n    /**\n     * @param {?} valueCount\n     * @param {?} c0\n     * @param {?} a1\n     * @param {?} c1\n     * @param {?=} a2\n     * @param {?=} c2\n     * @param {?=} a3\n     * @param {?=} c3\n     * @param {?=} a4\n     * @param {?=} c4\n     * @param {?=} a5\n     * @param {?=} c5\n     * @param {?=} a6\n     * @param {?=} c6\n     * @param {?=} a7\n     * @param {?=} c7\n     * @param {?=} a8\n     * @param {?=} c8\n     * @param {?=} a9\n     * @param {?=} c9\n     * @return {?}\n     */\n    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n        switch (valueCount) {\n            case 1:\n                return c0 + _toStringWithNull(a1) + c1;\n            case 2:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n            case 3:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;\n            case 4:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;\n            case 5:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n            case 6:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n            case 7:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;\n            case 8:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n            case 9:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n            default:\n                throw new Error('Does not support more than 9 expressions');\n        }\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function _toStringWithNull(v) {\n        return v != null ? v.toString() : '';\n    }\n    /**\n     * @param {?} view\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?} forceUpdate\n     * @return {?}\n     */\n    function checkBinding(view, oldValue, newValue, forceUpdate) {\n        var /** @type {?} */isFirstCheck = view.numberOfChecks === 0;\n        if (view.throwOnChange) {\n            if (isFirstCheck || !devModeEqual(oldValue, newValue)) {\n                throw expressionChangedAfterItHasBeenCheckedError(oldValue, newValue, isFirstCheck);\n            }\n            return false;\n        } else {\n            return isFirstCheck || forceUpdate || !looseIdentical(oldValue, newValue);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?} forceUpdate\n     * @return {?}\n     */\n    function checkBindingChange(view, oldValue, newValue, forceUpdate) {\n        if (checkBinding(view, oldValue, newValue, forceUpdate)) {\n            return new SimpleChange(oldValue, newValue, view.numberOfChecks === 0);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderElement\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?} forceUpdate\n     * @return {?}\n     */\n    function checkRenderText(view, renderElement, oldValue, newValue, forceUpdate) {\n        if (checkBinding(view, oldValue, newValue, forceUpdate)) {\n            view.renderer.setText(renderElement, newValue);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderElement\n     * @param {?} propName\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?} forceUpdate\n     * @param {?} securityContext\n     * @return {?}\n     */\n    function checkRenderProperty(view, renderElement, propName, oldValue, newValue, forceUpdate, securityContext) {\n        if (checkBinding(view, oldValue, newValue, forceUpdate)) {\n            var /** @type {?} */renderValue = securityContext ? view.viewUtils.sanitizer.sanitize(securityContext, newValue) : newValue;\n            view.renderer.setElementProperty(renderElement, propName, renderValue);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderElement\n     * @param {?} attrName\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?} forceUpdate\n     * @param {?} securityContext\n     * @return {?}\n     */\n    function checkRenderAttribute(view, renderElement, attrName, oldValue, newValue, forceUpdate, securityContext) {\n        if (checkBinding(view, oldValue, newValue, forceUpdate)) {\n            var /** @type {?} */renderValue = securityContext ? view.viewUtils.sanitizer.sanitize(securityContext, newValue) : newValue;\n            renderValue = renderValue != null ? renderValue.toString() : null;\n            view.renderer.setElementAttribute(renderElement, attrName, renderValue);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?} forceUpdate\n     * @return {?}\n     */\n    function checkRenderClass(view, renderElement, className, oldValue, newValue, forceUpdate) {\n        if (checkBinding(view, oldValue, newValue, forceUpdate)) {\n            view.renderer.setElementClass(renderElement, className, newValue);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} unit\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @param {?} forceUpdate\n     * @param {?} securityContext\n     * @return {?}\n     */\n    function checkRenderStyle(view, renderElement, styleName, unit, oldValue, newValue, forceUpdate, securityContext) {\n        if (checkBinding(view, oldValue, newValue, forceUpdate)) {\n            var /** @type {?} */renderValue = securityContext ? view.viewUtils.sanitizer.sanitize(securityContext, newValue) : newValue;\n            if (renderValue != null) {\n                renderValue = renderValue.toString();\n                if (unit != null) {\n                    renderValue = renderValue + unit;\n                }\n            } else {\n                renderValue = null;\n            }\n            view.renderer.setElementStyle(renderElement, styleName, renderValue);\n        }\n    }\n    /**\n     * @param {?} input\n     * @param {?} value\n     * @return {?}\n     */\n    function castByValue(input, value) {\n        return input;\n    }\n    var /** @type {?} */EMPTY_ARRAY = [];\n    var /** @type {?} */EMPTY_MAP = {};\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy1(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0;\n        return function (p0) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0)) {\n                v0 = p0;\n                result = fn(p0);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy2(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0;\n        var /** @type {?} */v1 = void 0;\n        return function (p0, p1) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {\n                v0 = p0;\n                v1 = p1;\n                result = fn(p0, p1);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy3(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0;\n        var /** @type {?} */v1 = void 0;\n        var /** @type {?} */v2 = void 0;\n        return function (p0, p1, p2) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                result = fn(p0, p1, p2);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy4(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0,\n            /** @type {?} */v1 = void 0,\n            /** @type {?} */v2 = void 0,\n            /** @type {?} */v3 = void 0;\n        v0 = v1 = v2 = v3;\n        return function (p0, p1, p2, p3) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                result = fn(p0, p1, p2, p3);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy5(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0,\n            /** @type {?} */v1 = void 0,\n            /** @type {?} */v2 = void 0,\n            /** @type {?} */v3 = void 0,\n            /** @type {?} */v4 = void 0;\n        v0 = v1 = v2 = v3 = v4;\n        return function (p0, p1, p2, p3, p4) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                result = fn(p0, p1, p2, p3, p4);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy6(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0,\n            /** @type {?} */v1 = void 0,\n            /** @type {?} */v2 = void 0,\n            /** @type {?} */v3 = void 0,\n            /** @type {?} */v4 = void 0,\n            /** @type {?} */v5 = void 0;\n        v0 = v1 = v2 = v3 = v4 = v5;\n        return function (p0, p1, p2, p3, p4, p5) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                result = fn(p0, p1, p2, p3, p4, p5);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy7(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0,\n            /** @type {?} */v1 = void 0,\n            /** @type {?} */v2 = void 0,\n            /** @type {?} */v3 = void 0,\n            /** @type {?} */v4 = void 0,\n            /** @type {?} */v5 = void 0,\n            /** @type {?} */v6 = void 0;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6;\n        return function (p0, p1, p2, p3, p4, p5, p6) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                result = fn(p0, p1, p2, p3, p4, p5, p6);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy8(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0,\n            /** @type {?} */v1 = void 0,\n            /** @type {?} */v2 = void 0,\n            /** @type {?} */v3 = void 0,\n            /** @type {?} */v4 = void 0,\n            /** @type {?} */v5 = void 0,\n            /** @type {?} */v6 = void 0,\n            /** @type {?} */v7 = void 0;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy9(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0,\n            /** @type {?} */v1 = void 0,\n            /** @type {?} */v2 = void 0,\n            /** @type {?} */v3 = void 0,\n            /** @type {?} */v4 = void 0,\n            /** @type {?} */v5 = void 0,\n            /** @type {?} */v6 = void 0,\n            /** @type {?} */v7 = void 0,\n            /** @type {?} */v8 = void 0;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy10(fn) {\n        var /** @type {?} */numberOfChecks = 0;\n        var /** @type {?} */result = void 0;\n        var /** @type {?} */v0 = void 0,\n            /** @type {?} */v1 = void 0,\n            /** @type {?} */v2 = void 0,\n            /** @type {?} */v3 = void 0,\n            /** @type {?} */v4 = void 0,\n            /** @type {?} */v5 = void 0,\n            /** @type {?} */v6 = void 0,\n            /** @type {?} */v7 = void 0,\n            /** @type {?} */v8 = void 0,\n            /** @type {?} */v9 = void 0;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {\n            if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                v9 = p9;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} changes\n     * @return {?}\n     */\n    function setBindingDebugInfoForChanges(renderer, el, changes) {\n        Object.keys(changes).forEach(function (propName) {\n            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);\n        });\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} propName\n     * @param {?} value\n     * @return {?}\n     */\n    function setBindingDebugInfo(renderer, el, propName, value) {\n        try {\n            renderer.setBindingDebugInfo(el, 'ng-reflect-' + camelCaseToDashCase(propName), value ? value.toString() : null);\n        } catch (e) {\n            renderer.setBindingDebugInfo(el, 'ng-reflect-' + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');\n        }\n    }\n    var /** @type {?} */CAMEL_CASE_REGEXP = /([A-Z])/g;\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function camelCaseToDashCase(input) {\n        return input.replace(CAMEL_CASE_REGEXP, function () {\n            for (var _len5 = arguments.length, m = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                m[_key5] = arguments[_key5];\n            }\n\n            return '-' + m[1].toLowerCase();\n        });\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?} attrs\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {\n        var /** @type {?} */el = renderer.createElement(parentElement, name, debugInfo);\n        for (var /** @type {?} */i = 0; i < attrs.length; i += 2) {\n            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));\n        }\n        return el;\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} elementName\n     * @param {?} attrs\n     * @param {?} rootSelectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {\n        var /** @type {?} */hostElement = void 0;\n        if (isPresent(rootSelectorOrNode)) {\n            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);\n            for (var /** @type {?} */i = 0; i < attrs.length; i += 2) {\n                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));\n            }\n            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);\n        } else {\n            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);\n        }\n        return hostElement;\n    }\n    /**\n     * @param {?} view\n     * @param {?} element\n     * @param {?} eventNamesAndTargets\n     * @param {?} listener\n     * @return {?}\n     */\n    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {\n        var /** @type {?} */disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);\n        for (var /** @type {?} */i = 0; i < eventNamesAndTargets.length; i += 2) {\n            var /** @type {?} */eventName = eventNamesAndTargets.get(i);\n            var /** @type {?} */eventTarget = eventNamesAndTargets.get(i + 1);\n            var /** @type {?} */disposable = void 0;\n            if (eventTarget) {\n                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ':' + eventName));\n            } else {\n                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));\n            }\n            disposables.set(i / 2, disposable);\n        }\n        return disposeInlineArray.bind(null, disposables);\n    }\n    /**\n     * @param {?} disposables\n     * @return {?}\n     */\n    function disposeInlineArray(disposables) {\n        for (var /** @type {?} */i = 0; i < disposables.length; i++) {\n            disposables.get(i)();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    function noop() {}\n    /**\n     * @param {?} length\n     * @return {?}\n     */\n    function createEmptyInlineArray(length) {\n        var /** @type {?} */ctor = void 0;\n        if (length <= 2) {\n            ctor = InlineArray2;\n        } else if (length <= 4) {\n            ctor = InlineArray4;\n        } else if (length <= 8) {\n            ctor = InlineArray8;\n        } else if (length <= 16) {\n            ctor = InlineArray16;\n        } else {\n            ctor = InlineArrayDynamic;\n        }\n        return new ctor(length);\n    }\n\n    var InlineArray0 = function () {\n        function InlineArray0() {\n            _classCallCheck(this, InlineArray0);\n\n            this.length = 0;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n\n\n        _createClass(InlineArray0, [{\n            key: 'get',\n            value: function get(index) {\n                return undefined;\n            }\n        }, {\n            key: 'set',\n            value: function set(index, value) {}\n        }]);\n\n        return InlineArray0;\n    }();\n\n    var InlineArray2 = function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         */\n        function InlineArray2(length, _v0, _v1) {\n            _classCallCheck(this, InlineArray2);\n\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n\n\n        _createClass(InlineArray2, [{\n            key: 'get',\n            value: function get(index) {\n                switch (index) {\n                    case 0:\n                        return this._v0;\n                    case 1:\n                        return this._v1;\n                    default:\n                        return undefined;\n                }\n            }\n        }, {\n            key: 'set',\n            value: function set(index, value) {\n                switch (index) {\n                    case 0:\n                        this._v0 = value;\n                        break;\n                    case 1:\n                        this._v1 = value;\n                        break;\n                }\n            }\n        }]);\n\n        return InlineArray2;\n    }();\n\n    var InlineArray4 = function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         */\n        function InlineArray4(length, _v0, _v1, _v2, _v3) {\n            _classCallCheck(this, InlineArray4);\n\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n\n\n        _createClass(InlineArray4, [{\n            key: 'get',\n            value: function get(index) {\n                switch (index) {\n                    case 0:\n                        return this._v0;\n                    case 1:\n                        return this._v1;\n                    case 2:\n                        return this._v2;\n                    case 3:\n                        return this._v3;\n                    default:\n                        return undefined;\n                }\n            }\n        }, {\n            key: 'set',\n            value: function set(index, value) {\n                switch (index) {\n                    case 0:\n                        this._v0 = value;\n                        break;\n                    case 1:\n                        this._v1 = value;\n                        break;\n                    case 2:\n                        this._v2 = value;\n                        break;\n                    case 3:\n                        this._v3 = value;\n                        break;\n                }\n            }\n        }]);\n\n        return InlineArray4;\n    }();\n\n    var InlineArray8 = function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         * @param {?=} _v4\n         * @param {?=} _v5\n         * @param {?=} _v6\n         * @param {?=} _v7\n         */\n        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {\n            _classCallCheck(this, InlineArray8);\n\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n            this._v4 = _v4;\n            this._v5 = _v5;\n            this._v6 = _v6;\n            this._v7 = _v7;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n\n\n        _createClass(InlineArray8, [{\n            key: 'get',\n            value: function get(index) {\n                switch (index) {\n                    case 0:\n                        return this._v0;\n                    case 1:\n                        return this._v1;\n                    case 2:\n                        return this._v2;\n                    case 3:\n                        return this._v3;\n                    case 4:\n                        return this._v4;\n                    case 5:\n                        return this._v5;\n                    case 6:\n                        return this._v6;\n                    case 7:\n                        return this._v7;\n                    default:\n                        return undefined;\n                }\n            }\n        }, {\n            key: 'set',\n            value: function set(index, value) {\n                switch (index) {\n                    case 0:\n                        this._v0 = value;\n                        break;\n                    case 1:\n                        this._v1 = value;\n                        break;\n                    case 2:\n                        this._v2 = value;\n                        break;\n                    case 3:\n                        this._v3 = value;\n                        break;\n                    case 4:\n                        this._v4 = value;\n                        break;\n                    case 5:\n                        this._v5 = value;\n                        break;\n                    case 6:\n                        this._v6 = value;\n                        break;\n                    case 7:\n                        this._v7 = value;\n                        break;\n                }\n            }\n        }]);\n\n        return InlineArray8;\n    }();\n\n    var InlineArray16 = function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         * @param {?=} _v4\n         * @param {?=} _v5\n         * @param {?=} _v6\n         * @param {?=} _v7\n         * @param {?=} _v8\n         * @param {?=} _v9\n         * @param {?=} _v10\n         * @param {?=} _v11\n         * @param {?=} _v12\n         * @param {?=} _v13\n         * @param {?=} _v14\n         * @param {?=} _v15\n         */\n        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {\n            _classCallCheck(this, InlineArray16);\n\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n            this._v4 = _v4;\n            this._v5 = _v5;\n            this._v6 = _v6;\n            this._v7 = _v7;\n            this._v8 = _v8;\n            this._v9 = _v9;\n            this._v10 = _v10;\n            this._v11 = _v11;\n            this._v12 = _v12;\n            this._v13 = _v13;\n            this._v14 = _v14;\n            this._v15 = _v15;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n\n\n        _createClass(InlineArray16, [{\n            key: 'get',\n            value: function get(index) {\n                switch (index) {\n                    case 0:\n                        return this._v0;\n                    case 1:\n                        return this._v1;\n                    case 2:\n                        return this._v2;\n                    case 3:\n                        return this._v3;\n                    case 4:\n                        return this._v4;\n                    case 5:\n                        return this._v5;\n                    case 6:\n                        return this._v6;\n                    case 7:\n                        return this._v7;\n                    case 8:\n                        return this._v8;\n                    case 9:\n                        return this._v9;\n                    case 10:\n                        return this._v10;\n                    case 11:\n                        return this._v11;\n                    case 12:\n                        return this._v12;\n                    case 13:\n                        return this._v13;\n                    case 14:\n                        return this._v14;\n                    case 15:\n                        return this._v15;\n                    default:\n                        return undefined;\n                }\n            }\n        }, {\n            key: 'set',\n            value: function set(index, value) {\n                switch (index) {\n                    case 0:\n                        this._v0 = value;\n                        break;\n                    case 1:\n                        this._v1 = value;\n                        break;\n                    case 2:\n                        this._v2 = value;\n                        break;\n                    case 3:\n                        this._v3 = value;\n                        break;\n                    case 4:\n                        this._v4 = value;\n                        break;\n                    case 5:\n                        this._v5 = value;\n                        break;\n                    case 6:\n                        this._v6 = value;\n                        break;\n                    case 7:\n                        this._v7 = value;\n                        break;\n                    case 8:\n                        this._v8 = value;\n                        break;\n                    case 9:\n                        this._v9 = value;\n                        break;\n                    case 10:\n                        this._v10 = value;\n                        break;\n                    case 11:\n                        this._v11 = value;\n                        break;\n                    case 12:\n                        this._v12 = value;\n                        break;\n                    case 13:\n                        this._v13 = value;\n                        break;\n                    case 14:\n                        this._v14 = value;\n                        break;\n                    case 15:\n                        this._v15 = value;\n                        break;\n                }\n            }\n        }]);\n\n        return InlineArray16;\n    }();\n\n    var InlineArrayDynamic = function () {\n        /**\n         * @param {?} length\n         * @param {...?} values\n         */\n        function InlineArrayDynamic(length) {\n            _classCallCheck(this, InlineArrayDynamic);\n\n            this.length = length;\n\n            for (var _len6 = arguments.length, values = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n                values[_key6 - 1] = arguments[_key6];\n            }\n\n            this._values = values;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n\n\n        _createClass(InlineArrayDynamic, [{\n            key: 'get',\n            value: function get(index) {\n                return this._values[index];\n            }\n        }, {\n            key: 'set',\n            value: function set(index, value) {\n                this._values[index] = value;\n            }\n        }]);\n\n        return InlineArrayDynamic;\n    }();\n\n    var /** @type {?} */EMPTY_INLINE_ARRAY = new InlineArray0();\n    /**\n     * This is a private API only used by the compiler to read the view class.\n     * @param {?} componentFactory\n     * @return {?}\n     */\n    function getComponentFactoryViewClass(componentFactory) {\n        return componentFactory._viewClass;\n    }\n\n    /**\n     * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n     *\n     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n     * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n     * method.\n     * \\@stable\n     * @abstract\n     */\n\n    var ComponentRef = function () {\n        function ComponentRef() {\n            _classCallCheck(this, ComponentRef);\n        }\n\n        _createClass(ComponentRef, [{\n            key: 'location',\n            value: function location() {}\n        }, {\n            key: 'injector',\n            value: function injector() {}\n        }, {\n            key: 'instance',\n            value: function instance() {}\n        }, {\n            key: 'hostView',\n            value: function hostView() {}\n        }, {\n            key: 'changeDetectorRef',\n            value: function changeDetectorRef() {}\n        }, {\n            key: 'componentType',\n            value: function componentType() {}\n        }, {\n            key: 'destroy',\n            value: function destroy() {}\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {}\n        }]);\n\n        return ComponentRef;\n    }();\n\n    var ComponentRef_ = function (_ComponentRef) {\n        _inherits(ComponentRef_, _ComponentRef);\n\n        /**\n         * @param {?} _index\n         * @param {?} _parentView\n         * @param {?} _nativeElement\n         * @param {?} _component\n         */\n        function ComponentRef_(_index, _parentView, _nativeElement, _component) {\n            _classCallCheck(this, ComponentRef_);\n\n            var _this12 = _possibleConstructorReturn(this, (ComponentRef_.__proto__ || Object.getPrototypeOf(ComponentRef_)).call(this));\n\n            _this12._index = _index;\n            _this12._parentView = _parentView;\n            _this12._nativeElement = _nativeElement;\n            _this12._component = _component;\n            return _this12;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ComponentRef_, [{\n            key: 'destroy',\n            value: function destroy() {\n                this._parentView.detachAndDestroy();\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {\n                this.hostView.onDestroy(callback);\n            }\n        }, {\n            key: 'location',\n            get: function get() {\n                return new ElementRef(this._nativeElement);\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return this._parentView.injector(this._index);\n            }\n        }, {\n            key: 'instance',\n            get: function get() {\n                return this._component;\n            }\n        }, {\n            key: 'hostView',\n            get: function get() {\n                return this._parentView.ref;\n            }\n        }, {\n            key: 'changeDetectorRef',\n            get: function get() {\n                return this._parentView.ref;\n            }\n        }, {\n            key: 'componentType',\n            get: function get() {\n                return this._component.constructor;\n            }\n        }]);\n\n        return ComponentRef_;\n    }(ComponentRef);\n\n    var ComponentFactory = function () {\n        /**\n         * @param {?} selector\n         * @param {?} _viewClass\n         * @param {?} componentType\n         */\n        function ComponentFactory(selector, _viewClass, componentType) {\n            _classCallCheck(this, ComponentFactory);\n\n            this.selector = selector;\n            this.componentType = componentType;\n            this._viewClass = _viewClass;\n        }\n        /**\n         * Creates a new component.\n         * @param {?} injector\n         * @param {?=} projectableNodes\n         * @param {?=} rootSelectorOrNode\n         * @return {?}\n         */\n\n\n        _createClass(ComponentFactory, [{\n            key: 'create',\n            value: function create(injector) {\n                var projectableNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                var rootSelectorOrNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                var /** @type {?} */vu = injector.get(ViewUtils);\n                if (!projectableNodes) {\n                    projectableNodes = [];\n                }\n                var /** @type {?} */hostView = new this._viewClass(vu, null, null, null);\n                return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);\n            }\n        }]);\n\n        return ComponentFactory;\n    }();\n\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    function noComponentFactoryError(component) {\n        var /** @type {?} */error = Error('No component factory found for ' + stringify(component) + '. Did you add it to @NgModule.entryComponents?');\n        error[ERROR_COMPONENT] = component;\n        return error;\n    }\n    var /** @type {?} */ERROR_COMPONENT = 'ngComponent';\n\n    var _NullComponentFactoryResolver = function () {\n        function _NullComponentFactoryResolver() {\n            _classCallCheck(this, _NullComponentFactoryResolver);\n        }\n\n        _createClass(_NullComponentFactoryResolver, [{\n            key: 'resolveComponentFactory',\n            value: function resolveComponentFactory(component) {\n                throw noComponentFactoryError(component);\n            }\n        }]);\n\n        return _NullComponentFactoryResolver;\n    }();\n\n    var ComponentFactoryResolver = function () {\n        function ComponentFactoryResolver() {\n            _classCallCheck(this, ComponentFactoryResolver);\n        }\n\n        _createClass(ComponentFactoryResolver, [{\n            key: 'resolveComponentFactory',\n            value: function resolveComponentFactory(component) {}\n        }]);\n\n        return ComponentFactoryResolver;\n    }();\n\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n\n    var CodegenComponentFactoryResolver = function () {\n        /**\n         * @param {?} factories\n         * @param {?} _parent\n         */\n        function CodegenComponentFactoryResolver(factories, _parent) {\n            _classCallCheck(this, CodegenComponentFactoryResolver);\n\n            this._parent = _parent;\n            this._factories = new Map();\n            for (var i = 0; i < factories.length; i++) {\n                var factory = factories[i];\n                this._factories.set(factory.componentType, factory);\n            }\n        }\n        /**\n         * @param {?} component\n         * @return {?}\n         */\n\n\n        _createClass(CodegenComponentFactoryResolver, [{\n            key: 'resolveComponentFactory',\n            value: function resolveComponentFactory(component) {\n                var /** @type {?} */result = this._factories.get(component);\n                if (!result) {\n                    result = this._parent.resolveComponentFactory(component);\n                }\n                return result;\n            }\n        }]);\n\n        return CodegenComponentFactoryResolver;\n    }();\n\n    var /** @type {?} */trace = void 0;\n    var /** @type {?} */events = void 0;\n    /**\n     * @return {?}\n     */\n    function detectWTF() {\n        var /** @type {?} */wtf = global$1[/** TODO #9100 */'wtf'];\n        if (wtf) {\n            trace = wtf['trace'];\n            if (trace) {\n                events = trace['events'];\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} signature\n     * @param {?=} flags\n     * @return {?}\n     */\n    function createScope(signature) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        return events.createScope(signature, flags);\n    }\n    /**\n     * @param {?} scope\n     * @param {?=} returnValue\n     * @return {?}\n     */\n    function leave(scope, returnValue) {\n        trace.leaveScope(scope, returnValue);\n        return returnValue;\n    }\n    /**\n     * @param {?} rangeType\n     * @param {?} action\n     * @return {?}\n     */\n    function startTimeRange(rangeType, action) {\n        return trace.beginTimeRange(rangeType, action);\n    }\n    /**\n     * @param {?} range\n     * @return {?}\n     */\n    function endTimeRange(range) {\n        trace.endTimeRange(range);\n    }\n\n    /**\n     * True if WTF is enabled.\n     */\n    var /** @type {?} */wtfEnabled = detectWTF();\n    /**\n     * @param {?=} arg0\n     * @param {?=} arg1\n     * @return {?}\n     */\n    function noopScope(arg0, arg1) {\n        return null;\n    }\n    /**\n     * Create trace scope.\n     *\n     * Scopes must be strictly nested and are analogous to stack frames, but\n     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n     * nesting. You may want to use\n     * [Event\n     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n     * as they are defined in WTF.\n     *\n     * Used to mark scope entry. The return value is used to leave the scope.\n     *\n     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n     *\n     *     someMethod() {\n     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n     *        // DO SOME WORK HERE\n     *        return wtfLeave(s, 123); // Return value 123\n     *     }\n     *\n     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n     * negatively impact the performance of your application. For this reason we recommend that\n     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n     * an exception is expected during normal execution while profiling.\n     *\n     * @experimental\n     */\n    var /** @type {?} */wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) {\n        return noopScope;\n    };\n    /**\n     * Used to mark end of Scope.\n     *\n     * - `scope` to end.\n     * - `returnValue` (optional) to be passed to the WTF.\n     *\n     * Returns the `returnValue for easy chaining.\n     * @experimental\n     */\n    var /** @type {?} */wtfLeave = wtfEnabled ? leave : function (s, r) {\n        return r;\n    };\n    /**\n     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n     * enabled.\n     *\n     *     someMethod() {\n     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n     *        var future = new Future.delay(5).then((_) {\n     *          wtfEndTimeRange(s);\n     *        });\n     *     }\n     * @experimental\n     */\n    var /** @type {?} */wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) {\n        return null;\n    };\n    /**\n     * Ends a async time range operation.\n     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n     * enabled.\n     * @experimental\n     */\n    var /** @type {?} */wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) {\n        return null;\n    };\n\n    /**\n     * The Testability service provides testing hooks that can be accessed from\n     * the browser and by services such as Protractor. Each bootstrapped Angular\n     * application on the page will have an instance of Testability.\n     * \\@experimental\n     */\n\n    var Testability = function () {\n        /**\n         * @param {?} _ngZone\n         */\n        function Testability(_ngZone) {\n            _classCallCheck(this, Testability);\n\n            this._ngZone = _ngZone;\n            /** @internal */\n            this._pendingCount = 0;\n            /** @internal */\n            this._isZoneStable = true;\n            /**\n             * Whether any work was done since the last 'whenStable' callback. This is\n             * useful to detect if this could have potentially destabilized another\n             * component while it is stabilizing.\n             * @internal\n             */\n            this._didWork = false;\n            /** @internal */\n            this._callbacks = [];\n            this._watchAngularEvents();\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n\n\n        _createClass(Testability, [{\n            key: '_watchAngularEvents',\n            value: function _watchAngularEvents() {\n                var _this13 = this;\n\n                this._ngZone.onUnstable.subscribe({\n                    next: function next() {\n                        _this13._didWork = true;\n                        _this13._isZoneStable = false;\n                    }\n                });\n                this._ngZone.runOutsideAngular(function () {\n                    _this13._ngZone.onStable.subscribe({\n                        next: function next() {\n                            NgZone.assertNotInAngularZone();\n                            scheduleMicroTask(function () {\n                                _this13._isZoneStable = true;\n                                _this13._runCallbacksIfReady();\n                            });\n                        }\n                    });\n                });\n            }\n        }, {\n            key: 'increasePendingRequestCount',\n            value: function increasePendingRequestCount() {\n                this._pendingCount += 1;\n                this._didWork = true;\n                return this._pendingCount;\n            }\n        }, {\n            key: 'decreasePendingRequestCount',\n            value: function decreasePendingRequestCount() {\n                this._pendingCount -= 1;\n                if (this._pendingCount < 0) {\n                    throw new Error('pending async requests below zero');\n                }\n                this._runCallbacksIfReady();\n                return this._pendingCount;\n            }\n        }, {\n            key: 'isStable',\n            value: function isStable() {\n                return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n            }\n        }, {\n            key: '_runCallbacksIfReady',\n            value: function _runCallbacksIfReady() {\n                var _this14 = this;\n\n                if (this.isStable()) {\n                    // Schedules the call backs in a new frame so that it is always async.\n                    scheduleMicroTask(function () {\n                        while (_this14._callbacks.length !== 0) {\n                            _this14._callbacks.pop()(_this14._didWork);\n                        }\n                        _this14._didWork = false;\n                    });\n                } else {\n                    // Not Ready\n                    this._didWork = true;\n                }\n            }\n        }, {\n            key: 'whenStable',\n            value: function whenStable(callback) {\n                this._callbacks.push(callback);\n                this._runCallbacksIfReady();\n            }\n        }, {\n            key: 'getPendingRequestCount',\n            value: function getPendingRequestCount() {\n                return this._pendingCount;\n            }\n        }, {\n            key: 'findBindings',\n            value: function findBindings(using, provider, exactMatch) {\n                // TODO(juliemr): implement.\n                return [];\n            }\n        }, {\n            key: 'findProviders',\n            value: function findProviders(using, provider, exactMatch) {\n                // TODO(juliemr): implement.\n                return [];\n            }\n        }]);\n\n        return Testability;\n    }();\n\n    Testability.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    Testability.ctorParameters = function () {\n        return [{ type: NgZone }];\n    };\n    /**\n     * A global registry of {\\@link Testability} instances for specific elements.\n     * \\@experimental\n     */\n\n    var TestabilityRegistry = function () {\n        function TestabilityRegistry() {\n            _classCallCheck(this, TestabilityRegistry);\n\n            /** @internal */\n            this._applications = new Map();\n            _testabilityGetter.addToWindow(this);\n        }\n        /**\n         * @param {?} token\n         * @param {?} testability\n         * @return {?}\n         */\n\n\n        _createClass(TestabilityRegistry, [{\n            key: 'registerApplication',\n            value: function registerApplication(token, testability) {\n                this._applications.set(token, testability);\n            }\n        }, {\n            key: 'getTestability',\n            value: function getTestability(elem) {\n                return this._applications.get(elem);\n            }\n        }, {\n            key: 'getAllTestabilities',\n            value: function getAllTestabilities() {\n                return Array.from(this._applications.values());\n            }\n        }, {\n            key: 'getAllRootElements',\n            value: function getAllRootElements() {\n                return Array.from(this._applications.keys());\n            }\n        }, {\n            key: 'findTestabilityInTree',\n            value: function findTestabilityInTree(elem) {\n                var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n            }\n        }]);\n\n        return TestabilityRegistry;\n    }();\n\n    TestabilityRegistry.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    TestabilityRegistry.ctorParameters = function () {\n        return [];\n    };\n\n    var _NoopGetTestability = function () {\n        function _NoopGetTestability() {\n            _classCallCheck(this, _NoopGetTestability);\n        }\n\n        _createClass(_NoopGetTestability, [{\n            key: 'addToWindow',\n            value: function addToWindow(registry) {}\n        }, {\n            key: 'findTestabilityInTree',\n            value: function findTestabilityInTree(registry, elem, findInAncestors) {\n                return null;\n            }\n        }]);\n\n        return _NoopGetTestability;\n    }();\n\n    /**\n     * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n     * \\@experimental\n     * @param {?} getter\n     * @return {?}\n     */\n    function setTestabilityGetter(getter) {\n        _testabilityGetter = getter;\n    }\n    var /** @type {?} */_testabilityGetter = new _NoopGetTestability();\n\n    var /** @type {?} */_devMode = true;\n    var /** @type {?} */_runModeLocked = false;\n    var /** @type {?} */_platform = void 0;\n    var /** @type {?} */ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n    /**\n     * Disable Angular's development mode, which turns off assertions and other\n     * checks within the framework.\n     *\n     * One important assertion this disables verifies that a change detection pass\n     * does not result in additional changes to any bindings (also known as\n     * unidirectional data flow).\n     *\n     * \\@stable\n     * @return {?}\n     */\n    function enableProdMode() {\n        if (_runModeLocked) {\n            throw new Error('Cannot enable prod mode after platform setup.');\n        }\n        _devMode = false;\n    }\n    /**\n     * Returns whether Angular is in development mode. After called once,\n     * the value is locked and won't change any more.\n     *\n     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function isDevMode() {\n        _runModeLocked = true;\n        return _devMode;\n    }\n    /**\n     * A token for third-party components that can register themselves with NgProbe.\n     *\n     * \\@experimental\n     */\n\n    var NgProbeToken =\n    /**\n     * @param {?} name\n     * @param {?} token\n     */\n    function NgProbeToken(name, token) {\n        _classCallCheck(this, NgProbeToken);\n\n        this.name = name;\n        this.token = token;\n    };\n\n    /**\n     * Creates a platform.\n     * Platforms have to be eagerly created via this function.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} injector\n     * @return {?}\n     */\n    function createPlatform(injector) {\n        if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n        }\n        _platform = injector.get(PlatformRef);\n        var /** @type {?} */inits = injector.get(PLATFORM_INITIALIZER, null);\n        if (inits) inits.forEach(function (init) {\n            return init();\n        });\n        return _platform;\n    }\n    /**\n     * Creates a factory for a platform\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} parentPlatformFactory\n     * @param {?} name\n     * @param {?=} providers\n     * @return {?}\n     */\n    function createPlatformFactory(parentPlatformFactory, name) {\n        var providers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n        var /** @type {?} */marker = new InjectionToken('Platform: ' + name);\n        return function () {\n            var extraProviders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n            var /** @type {?} */platform = getPlatform();\n            if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n                if (parentPlatformFactory) {\n                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n                } else {\n                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\n                }\n            }\n            return assertPlatform(marker);\n        };\n    }\n    /**\n     * Checks that there currently is a platform which contains the given token as a provider.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} requiredToken\n     * @return {?}\n     */\n    function assertPlatform(requiredToken) {\n        var /** @type {?} */platform = getPlatform();\n        if (!platform) {\n            throw new Error('No platform exists!');\n        }\n        if (!platform.injector.get(requiredToken, null)) {\n            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n        }\n        return platform;\n    }\n    /**\n     * Destroy the existing platform.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function destroyPlatform() {\n        if (_platform && !_platform.destroyed) {\n            _platform.destroy();\n        }\n    }\n    /**\n     * Returns the current platform.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function getPlatform() {\n        return _platform && !_platform.destroyed ? _platform : null;\n    }\n    /**\n     * The Angular platform is the entry point for Angular on a web page. Each page\n     * has exactly one platform, and services (such as reflection) which are common\n     * to every Angular application running on the page are bound in its scope.\n     *\n     * A page's platform is initialized implicitly when {\\@link bootstrap}() is called, or\n     * explicitly by calling {\\@link createPlatform}().\n     *\n     * \\@stable\n     * @abstract\n     */\n\n    var PlatformRef = function () {\n        function PlatformRef() {\n            _classCallCheck(this, PlatformRef);\n        }\n\n        _createClass(PlatformRef, [{\n            key: 'bootstrapModuleFactory',\n            value: function bootstrapModuleFactory(moduleFactory) {}\n        }, {\n            key: 'bootstrapModule',\n            value: function bootstrapModule(moduleType, compilerOptions) {}\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {}\n        }, {\n            key: 'injector',\n            value: function injector() {}\n        }, {\n            key: 'destroy',\n            value: function destroy() {}\n        }, {\n            key: 'destroyed',\n            value: function destroyed() {}\n        }]);\n\n        return PlatformRef;\n    }();\n\n    /**\n     * @param {?} errorHandler\n     * @param {?} callback\n     * @return {?}\n     */\n    function _callAndReportToErrorHandler(errorHandler, callback) {\n        try {\n            var /** @type {?} */result = callback();\n            if (isPromise(result)) {\n                return result.catch(function (e) {\n                    errorHandler.handleError(e);\n                    // rethrow as the exception handler might not do it\n                    throw e;\n                });\n            }\n            return result;\n        } catch (e) {\n            errorHandler.handleError(e);\n            // rethrow as the exception handler might not do it\n            throw e;\n        }\n    }\n    /**\n     * workaround https://github.com/angular/tsickle/issues/350\n     * @suppress {checkTypes}\n     */\n\n    var PlatformRef_ = function (_PlatformRef) {\n        _inherits(PlatformRef_, _PlatformRef);\n\n        /**\n         * @param {?} _injector\n         */\n        function PlatformRef_(_injector) {\n            _classCallCheck(this, PlatformRef_);\n\n            var _this15 = _possibleConstructorReturn(this, (PlatformRef_.__proto__ || Object.getPrototypeOf(PlatformRef_)).call(this));\n\n            _this15._injector = _injector;\n            _this15._modules = [];\n            _this15._destroyListeners = [];\n            _this15._destroyed = false;\n            return _this15;\n        }\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n\n\n        _createClass(PlatformRef_, [{\n            key: 'onDestroy',\n            value: function onDestroy(callback) {\n                this._destroyListeners.push(callback);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                if (this._destroyed) {\n                    throw new Error('The platform has already been destroyed!');\n                }\n                this._modules.slice().forEach(function (module) {\n                    return module.destroy();\n                });\n                this._destroyListeners.forEach(function (listener) {\n                    return listener();\n                });\n                this._destroyed = true;\n            }\n        }, {\n            key: 'bootstrapModuleFactory',\n            value: function bootstrapModuleFactory(moduleFactory) {\n                return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n            }\n        }, {\n            key: '_bootstrapModuleFactoryWithZone',\n            value: function _bootstrapModuleFactoryWithZone(moduleFactory, ngZone) {\n                var _this16 = this;\n\n                // Note: We need to create the NgZone _before_ we instantiate the module,\n                // as instantiating the module creates some providers eagerly.\n                // So we create a mini parent injector that just contains the new NgZone and\n                // pass that as parent to the NgModuleFactory.\n                if (!ngZone) ngZone = new NgZone({ enableLongStackTrace: isDevMode() });\n                // Attention: Don't use ApplicationRef.run here,\n                // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n                return ngZone.run(function () {\n                    var /** @type {?} */ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this16.injector);\n                    var /** @type {?} */moduleRef = moduleFactory.create(ngZoneInjector);\n                    var /** @type {?} */exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n                    if (!exceptionHandler) {\n                        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n                    }\n                    moduleRef.onDestroy(function () {\n                        return ListWrapper.remove(_this16._modules, moduleRef);\n                    });\n                    ngZone.onError.subscribe({ next: function next(error) {\n                            exceptionHandler.handleError(error);\n                        } });\n                    return _callAndReportToErrorHandler(exceptionHandler, function () {\n                        var /** @type {?} */initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                        return initStatus.donePromise.then(function () {\n                            _this16._moduleDoBootstrap(moduleRef);\n                            return moduleRef;\n                        });\n                    });\n                });\n            }\n        }, {\n            key: 'bootstrapModule',\n            value: function bootstrapModule(moduleType) {\n                var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n                return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n            }\n        }, {\n            key: '_bootstrapModuleWithZone',\n            value: function _bootstrapModuleWithZone(moduleType) {\n                var _this17 = this;\n\n                var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n                var ngZone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                var /** @type {?} */compilerFactory = this.injector.get(CompilerFactory);\n                var /** @type {?} */compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n                return compiler.compileModuleAsync(moduleType).then(function (moduleFactory) {\n                    return _this17._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);\n                });\n            }\n        }, {\n            key: '_moduleDoBootstrap',\n            value: function _moduleDoBootstrap(moduleRef) {\n                var /** @type {?} */appRef = moduleRef.injector.get(ApplicationRef);\n                if (moduleRef.bootstrapFactories.length > 0) {\n                    moduleRef.bootstrapFactories.forEach(function (compFactory) {\n                        return appRef.bootstrap(compFactory);\n                    });\n                } else if (moduleRef.instance.ngDoBootstrap) {\n                    moduleRef.instance.ngDoBootstrap(appRef);\n                } else {\n                    throw new Error('The module ' + stringify(moduleRef.instance.constructor) + ' was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ' + 'Please define one of these.');\n                }\n                this._modules.push(moduleRef);\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return this._injector;\n            }\n        }, {\n            key: 'destroyed',\n            get: function get() {\n                return this._destroyed;\n            }\n        }]);\n\n        return PlatformRef_;\n    }(PlatformRef);\n\n    PlatformRef_.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    PlatformRef_.ctorParameters = function () {\n        return [{ type: Injector }];\n    };\n    /**\n     * A reference to an Angular application running on a page.\n     *\n     * For more about Angular applications, see the documentation for {\\@link bootstrap}.\n     *\n     * \\@stable\n     * @abstract\n     */\n\n    var ApplicationRef = function () {\n        function ApplicationRef() {\n            _classCallCheck(this, ApplicationRef);\n        }\n\n        _createClass(ApplicationRef, [{\n            key: 'bootstrap',\n            value: function bootstrap(componentFactory) {}\n        }, {\n            key: 'tick',\n            value: function tick() {}\n        }, {\n            key: 'componentTypes',\n            value: function componentTypes() {}\n        }, {\n            key: 'components',\n            value: function components() {}\n        }, {\n            key: 'attachView',\n            value: function attachView(view) {}\n        }, {\n            key: 'detachView',\n            value: function detachView(view) {}\n        }, {\n            key: 'viewCount',\n            value: function viewCount() {}\n        }, {\n            key: 'isStable',\n            value: function isStable() {}\n        }]);\n\n        return ApplicationRef;\n    }();\n\n    var ApplicationRef_ = function (_ApplicationRef) {\n        _inherits(ApplicationRef_, _ApplicationRef);\n\n        /**\n         * @param {?} _zone\n         * @param {?} _console\n         * @param {?} _injector\n         * @param {?} _exceptionHandler\n         * @param {?} _componentFactoryResolver\n         * @param {?} _initStatus\n         * @param {?} _testabilityRegistry\n         * @param {?} _testability\n         */\n        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {\n            _classCallCheck(this, ApplicationRef_);\n\n            var _this18 = _possibleConstructorReturn(this, (ApplicationRef_.__proto__ || Object.getPrototypeOf(ApplicationRef_)).call(this));\n\n            _this18._zone = _zone;\n            _this18._console = _console;\n            _this18._injector = _injector;\n            _this18._exceptionHandler = _exceptionHandler;\n            _this18._componentFactoryResolver = _componentFactoryResolver;\n            _this18._initStatus = _initStatus;\n            _this18._testabilityRegistry = _testabilityRegistry;\n            _this18._testability = _testability;\n            _this18._bootstrapListeners = [];\n            _this18._rootComponents = [];\n            _this18._rootComponentTypes = [];\n            _this18._views = [];\n            _this18._runningTick = false;\n            _this18._enforceNoNewChanges = false;\n            _this18._stable = true;\n            _this18._enforceNoNewChanges = isDevMode();\n            _this18._zone.onMicrotaskEmpty.subscribe({ next: function next() {\n                    _this18._zone.run(function () {\n                        _this18.tick();\n                    });\n                } });\n            var isCurrentlyStable = new _Observable.Observable(function (observer) {\n                _this18._stable = _this18._zone.isStable && !_this18._zone.hasPendingMacrotasks && !_this18._zone.hasPendingMicrotasks;\n                _this18._zone.runOutsideAngular(function () {\n                    observer.next(_this18._stable);\n                    observer.complete();\n                });\n            });\n            var isStable = new _Observable.Observable(function (observer) {\n                var stableSub = _this18._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this18._stable && !_this18._zone.hasPendingMacrotasks && !_this18._zone.hasPendingMicrotasks) {\n                            _this18._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n                var unstableSub = _this18._zone.onUnstable.subscribe(function () {\n                    NgZone.assertInAngularZone();\n                    if (_this18._stable) {\n                        _this18._stable = false;\n                        _this18._zone.runOutsideAngular(function () {\n                            observer.next(false);\n                        });\n                    }\n                });\n                return function () {\n                    stableSub.unsubscribe();\n                    unstableSub.unsubscribe();\n                };\n            });\n            _this18._isStable = (0, _merge.merge)(isCurrentlyStable, _share.share.call(isStable));\n            return _this18;\n        }\n        /**\n         * @param {?} viewRef\n         * @return {?}\n         */\n\n\n        _createClass(ApplicationRef_, [{\n            key: 'attachView',\n            value: function attachView(viewRef) {\n                var /** @type {?} */view = viewRef;\n                this._views.push(view);\n                view.attachToAppRef(this);\n            }\n        }, {\n            key: 'detachView',\n            value: function detachView(viewRef) {\n                var /** @type {?} */view = viewRef;\n                ListWrapper.remove(this._views, view);\n                view.detachFromAppRef();\n            }\n        }, {\n            key: 'bootstrap',\n            value: function bootstrap(componentOrFactory) {\n                var _this19 = this;\n\n                if (!this._initStatus.done) {\n                    throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n                }\n                var /** @type {?} */componentFactory = void 0;\n                if (componentOrFactory instanceof ComponentFactory) {\n                    componentFactory = componentOrFactory;\n                } else {\n                    componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n                }\n                this._rootComponentTypes.push(componentFactory.componentType);\n                var /** @type {?} */compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n                compRef.onDestroy(function () {\n                    _this19._unloadComponent(compRef);\n                });\n                var /** @type {?} */testability = compRef.injector.get(Testability, null);\n                if (testability) {\n                    compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);\n                }\n                this._loadComponent(compRef);\n                if (isDevMode()) {\n                    this._console.log('Angular is running in the development mode. Call enableProdMode() to enable the production mode.');\n                }\n                return compRef;\n            }\n        }, {\n            key: '_loadComponent',\n            value: function _loadComponent(componentRef) {\n                this.attachView(componentRef.hostView);\n                this.tick();\n                this._rootComponents.push(componentRef);\n                // Get the listeners lazily to prevent DI cycles.\n                var /** @type {?} */listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n                listeners.forEach(function (listener) {\n                    return listener(componentRef);\n                });\n            }\n        }, {\n            key: '_unloadComponent',\n            value: function _unloadComponent(componentRef) {\n                this.detachView(componentRef.hostView);\n                ListWrapper.remove(this._rootComponents, componentRef);\n            }\n        }, {\n            key: 'tick',\n            value: function tick() {\n                if (this._runningTick) {\n                    throw new Error('ApplicationRef.tick is called recursively');\n                }\n                var /** @type {?} */scope = ApplicationRef_._tickScope();\n                try {\n                    this._runningTick = true;\n                    this._views.forEach(function (view) {\n                        return view.detectChanges();\n                    });\n                    if (this._enforceNoNewChanges) {\n                        this._views.forEach(function (view) {\n                            return view.checkNoChanges();\n                        });\n                    }\n                } finally {\n                    this._runningTick = false;\n                    wtfLeave(scope);\n                }\n            }\n        }, {\n            key: 'ngOnDestroy',\n            value: function ngOnDestroy() {\n                // TODO(alxhub): Dispose of the NgZone.\n                this._views.slice().forEach(function (view) {\n                    return view.destroy();\n                });\n            }\n        }, {\n            key: 'viewCount',\n            get: function get() {\n                return this._views.length;\n            }\n        }, {\n            key: 'componentTypes',\n            get: function get() {\n                return this._rootComponentTypes;\n            }\n        }, {\n            key: 'components',\n            get: function get() {\n                return this._rootComponents;\n            }\n        }, {\n            key: 'isStable',\n            get: function get() {\n                return this._isStable;\n            }\n        }]);\n\n        return ApplicationRef_;\n    }(ApplicationRef);\n\n    /** @internal */\n    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef_.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    ApplicationRef_.ctorParameters = function () {\n        return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }, { type: TestabilityRegistry, decorators: [{ type: Optional }] }, { type: Testability, decorators: [{ type: Optional }] }];\n    };\n\n    /**\n     * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n     *\n     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n     * NgModule Instance.\n     *\n     * \\@stable\n     * @abstract\n     */\n\n    var NgModuleRef = function () {\n        function NgModuleRef() {\n            _classCallCheck(this, NgModuleRef);\n        }\n\n        _createClass(NgModuleRef, [{\n            key: 'injector',\n            value: function injector() {}\n        }, {\n            key: 'componentFactoryResolver',\n            value: function componentFactoryResolver() {}\n        }, {\n            key: 'instance',\n            value: function instance() {}\n        }, {\n            key: 'destroy',\n            value: function destroy() {}\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {}\n        }]);\n\n        return NgModuleRef;\n    }();\n\n    var NgModuleFactory = function () {\n        /**\n         * @param {?} _injectorClass\n         * @param {?} _moduleType\n         */\n        function NgModuleFactory(_injectorClass, _moduleType) {\n            _classCallCheck(this, NgModuleFactory);\n\n            this._injectorClass = _injectorClass;\n            this._moduleType = _moduleType;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(NgModuleFactory, [{\n            key: 'create',\n            value: function create(parentInjector) {\n                if (!parentInjector) {\n                    parentInjector = Injector.NULL;\n                }\n                var /** @type {?} */instance = new this._injectorClass(parentInjector);\n                instance.create();\n                return instance;\n            }\n        }, {\n            key: 'moduleType',\n            get: function get() {\n                return this._moduleType;\n            }\n        }]);\n\n        return NgModuleFactory;\n    }();\n\n    var /** @type {?} */_UNDEFINED = new Object();\n    /**\n     * @abstract\n     */\n\n    var NgModuleInjector = function (_CodegenComponentFact) {\n        _inherits(NgModuleInjector, _CodegenComponentFact);\n\n        /**\n         * @param {?} parent\n         * @param {?} factories\n         * @param {?} bootstrapFactories\n         */\n        function NgModuleInjector(parent, factories, bootstrapFactories) {\n            _classCallCheck(this, NgModuleInjector);\n\n            var _this20 = _possibleConstructorReturn(this, (NgModuleInjector.__proto__ || Object.getPrototypeOf(NgModuleInjector)).call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL)));\n\n            _this20.parent = parent;\n            _this20.bootstrapFactories = bootstrapFactories;\n            _this20._destroyListeners = [];\n            _this20._destroyed = false;\n            return _this20;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(NgModuleInjector, [{\n            key: 'create',\n            value: function create() {\n                this.instance = this.createInternal();\n            }\n        }, {\n            key: 'createInternal',\n            value: function createInternal() {}\n        }, {\n            key: 'get',\n            value: function get(token) {\n                var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;\n\n                if (token === Injector || token === ComponentFactoryResolver) {\n                    return this;\n                }\n                var /** @type {?} */result = this.getInternal(token, _UNDEFINED);\n                return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;\n            }\n        }, {\n            key: 'getInternal',\n            value: function getInternal(token, notFoundValue) {}\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                if (this._destroyed) {\n                    throw new Error('The ng module ' + stringify(this.instance.constructor) + ' has already been destroyed.');\n                }\n                this._destroyed = true;\n                this.destroyInternal();\n                this._destroyListeners.forEach(function (listener) {\n                    return listener();\n                });\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {\n                this._destroyListeners.push(callback);\n            }\n        }, {\n            key: 'destroyInternal',\n            value: function destroyInternal() {}\n        }, {\n            key: 'injector',\n            get: function get() {\n                return this;\n            }\n        }, {\n            key: 'componentFactoryResolver',\n            get: function get() {\n                return this;\n            }\n        }]);\n\n        return NgModuleInjector;\n    }(CodegenComponentFactoryResolver);\n\n    var NgModuleFactoryLoader = function () {\n        function NgModuleFactoryLoader() {\n            _classCallCheck(this, NgModuleFactoryLoader);\n        }\n\n        _createClass(NgModuleFactoryLoader, [{\n            key: 'load',\n            value: function load(path) {}\n        }]);\n\n        return NgModuleFactoryLoader;\n    }();\n\n    var /** @type {?} */moduleFactories = new Map();\n    /**\n     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n     * \\@experimental\n     * @param {?} id\n     * @param {?} factory\n     * @return {?}\n     */\n    function registerModuleFactory(id, factory) {\n        var /** @type {?} */existing = moduleFactories.get(id);\n        if (existing) {\n            throw new Error('Duplicate module registered for ' + id + ' - ' + existing.moduleType.name + ' vs ' + factory.moduleType.name);\n        }\n        moduleFactories.set(id, factory);\n    }\n    /**\n     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n     * cannot be found.\n     * \\@experimental\n     * @param {?} id\n     * @return {?}\n     */\n    function getModuleFactory(id) {\n        var /** @type {?} */factory = moduleFactories.get(id);\n        if (!factory) throw new Error('No module with ID ' + id + ' loaded');\n        return factory;\n    }\n\n    /**\n     * An unmodifiable list of items that Angular keeps up to date when the state\n     * of the application changes.\n     *\n     * The type of object that {\\@link Query} and {\\@link ViewQueryMetadata} provide.\n     *\n     * Implements an iterable interface, therefore it can be used in both ES6\n     * javascript `for (var i of items)` loops as well as in Angular templates with\n     * `*ngFor=\"let i of myList\"`.\n     *\n     * Changes can be observed by subscribing to the changes `Observable`.\n     *\n     * NOTE: In the future this class will implement an `Observable` interface.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n     * ```typescript\n     * \\@Component({...})\n     * class Container {\n     *   \\@ViewChildren(Item) items:QueryList<Item>;\n     * }\n     * ```\n     * \\@stable\n     */\n\n    var QueryList = function () {\n        function QueryList() {\n            _classCallCheck(this, QueryList);\n\n            this._dirty = true;\n            this._results = [];\n            this._emitter = new EventEmitter();\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(QueryList, [{\n            key: 'map',\n            value: function map(fn) {\n                return this._results.map(fn);\n            }\n        }, {\n            key: 'filter',\n            value: function filter(fn) {\n                return this._results.filter(fn);\n            }\n        }, {\n            key: 'find',\n            value: function find(fn) {\n                return this._results.find(fn);\n            }\n        }, {\n            key: 'reduce',\n            value: function reduce(fn, init) {\n                return this._results.reduce(fn, init);\n            }\n        }, {\n            key: 'forEach',\n            value: function forEach(fn) {\n                this._results.forEach(fn);\n            }\n        }, {\n            key: 'some',\n            value: function some(fn) {\n                return this._results.some(fn);\n            }\n        }, {\n            key: 'toArray',\n            value: function toArray() {\n                return this._results.slice();\n            }\n        }, {\n            key: getSymbolIterator(),\n            value: function value() {\n                return this._results[getSymbolIterator()]();\n            }\n        }, {\n            key: 'toString',\n            value: function toString() {\n                return this._results.toString();\n            }\n        }, {\n            key: 'reset',\n            value: function reset(res) {\n                this._results = ListWrapper.flatten(res);\n                this._dirty = false;\n            }\n        }, {\n            key: 'notifyOnChanges',\n            value: function notifyOnChanges() {\n                this._emitter.emit(this);\n            }\n        }, {\n            key: 'setDirty',\n            value: function setDirty() {\n                this._dirty = true;\n            }\n        }, {\n            key: 'changes',\n            get: function get() {\n                return this._emitter;\n            }\n        }, {\n            key: 'length',\n            get: function get() {\n                return this._results.length;\n            }\n        }, {\n            key: 'first',\n            get: function get() {\n                return this._results[0];\n            }\n        }, {\n            key: 'last',\n            get: function get() {\n                return this._results[this.length - 1];\n            }\n        }, {\n            key: 'dirty',\n            get: function get() {\n                return this._dirty;\n            }\n        }]);\n\n        return QueryList;\n    }();\n\n    var /** @type {?} */_SEPARATOR = '#';\n    var /** @type {?} */FACTORY_CLASS_SUFFIX = 'NgFactory';\n    /**\n     * Configuration for SystemJsNgModuleLoader.\n     * token.\n     *\n     * \\@experimental\n     * @abstract\n     */\n\n    var SystemJsNgModuleLoaderConfig = function SystemJsNgModuleLoaderConfig() {\n        _classCallCheck(this, SystemJsNgModuleLoaderConfig);\n    };\n\n    var /** @type {?} */DEFAULT_CONFIG = {\n        factoryPathPrefix: '',\n        factoryPathSuffix: '.ngfactory'\n    };\n    /**\n     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n     * \\@experimental\n     */\n\n    var SystemJsNgModuleLoader = function () {\n        /**\n         * @param {?} _compiler\n         * @param {?=} config\n         */\n        function SystemJsNgModuleLoader(_compiler, config) {\n            _classCallCheck(this, SystemJsNgModuleLoader);\n\n            this._compiler = _compiler;\n            this._config = config || DEFAULT_CONFIG;\n        }\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n\n\n        _createClass(SystemJsNgModuleLoader, [{\n            key: 'load',\n            value: function load(path) {\n                var /** @type {?} */offlineMode = this._compiler instanceof Compiler;\n                return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n            }\n        }, {\n            key: 'loadAndCompile',\n            value: function loadAndCompile(path) {\n                var _this21 = this;\n\n                var _path$split = path.split(_SEPARATOR),\n                    _path$split2 = _slicedToArray(_path$split, 2),\n                    module = _path$split2[0],\n                    exportName = _path$split2[1];\n\n                if (exportName === undefined) {\n                    exportName = 'default';\n                }\n                return System.import(module).then(function (module) {\n                    return module[exportName];\n                }).then(function (type) {\n                    return checkNotEmpty(type, module, exportName);\n                }).then(function (type) {\n                    return _this21._compiler.compileModuleAsync(type);\n                });\n            }\n        }, {\n            key: 'loadFactory',\n            value: function loadFactory(path) {\n                var _path$split3 = path.split(_SEPARATOR),\n                    _path$split4 = _slicedToArray(_path$split3, 2),\n                    module = _path$split4[0],\n                    exportName = _path$split4[1];\n\n                var /** @type {?} */factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n                if (exportName === undefined) {\n                    exportName = 'default';\n                    factoryClassSuffix = '';\n                }\n                return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {\n                    return module[exportName + factoryClassSuffix];\n                }).then(function (factory) {\n                    return checkNotEmpty(factory, module, exportName);\n                });\n            }\n        }]);\n\n        return SystemJsNgModuleLoader;\n    }();\n\n    SystemJsNgModuleLoader.decorators = [{ type: Injectable }];\n    /** @nocollapse */\n    SystemJsNgModuleLoader.ctorParameters = function () {\n        return [{ type: Compiler }, { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }];\n    };\n    /**\n     * @param {?} value\n     * @param {?} modulePath\n     * @param {?} exportName\n     * @return {?}\n     */\n    function checkNotEmpty(value, modulePath, exportName) {\n        if (!value) {\n            throw new Error('Cannot find \\'' + exportName + '\\' in \\'' + modulePath + '\\'');\n        }\n        return value;\n    }\n\n    /**\n     * Represents an Embedded Template that can be used to instantiate Embedded Views.\n     *\n     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element\n     * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into\n     * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for\n     * the `TemplateRef` from a Component or a Directive via {\\@link Query}.\n     *\n     * To instantiate Embedded Views based on a Template, use\n     * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n     * View Container.\n     * \\@stable\n     * @abstract\n     */\n\n    var TemplateRef = function () {\n        function TemplateRef() {\n            _classCallCheck(this, TemplateRef);\n        }\n\n        _createClass(TemplateRef, [{\n            key: 'elementRef',\n            value: function elementRef() {}\n        }, {\n            key: 'createEmbeddedView',\n            value: function createEmbeddedView(context) {}\n        }]);\n\n        return TemplateRef;\n    }();\n\n    var TemplateRef_ = function (_TemplateRef) {\n        _inherits(TemplateRef_, _TemplateRef);\n\n        /**\n         * @param {?} _parentView\n         * @param {?} _nodeIndex\n         * @param {?} _nativeElement\n         */\n        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {\n            _classCallCheck(this, TemplateRef_);\n\n            var _this22 = _possibleConstructorReturn(this, (TemplateRef_.__proto__ || Object.getPrototypeOf(TemplateRef_)).call(this));\n\n            _this22._parentView = _parentView;\n            _this22._nodeIndex = _nodeIndex;\n            _this22._nativeElement = _nativeElement;\n            return _this22;\n        }\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n\n\n        _createClass(TemplateRef_, [{\n            key: 'createEmbeddedView',\n            value: function createEmbeddedView(context) {\n                var /** @type {?} */view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);\n                view.create(context || {});\n                return view.ref;\n            }\n        }, {\n            key: 'elementRef',\n            get: function get() {\n                return new ElementRef(this._nativeElement);\n            }\n        }]);\n\n        return TemplateRef_;\n    }(TemplateRef);\n\n    var ViewContainerRef = function () {\n        function ViewContainerRef() {\n            _classCallCheck(this, ViewContainerRef);\n        }\n\n        _createClass(ViewContainerRef, [{\n            key: 'element',\n            value: function element() {}\n        }, {\n            key: 'injector',\n            value: function injector() {}\n        }, {\n            key: 'parentInjector',\n            value: function parentInjector() {}\n        }, {\n            key: 'clear',\n            value: function clear() {}\n        }, {\n            key: 'get',\n            value: function get(index) {}\n        }, {\n            key: 'length',\n            value: function length() {}\n        }, {\n            key: 'createEmbeddedView',\n            value: function createEmbeddedView(templateRef, context, index) {}\n        }, {\n            key: 'createComponent',\n            value: function createComponent(componentFactory, index, injector, projectableNodes) {}\n        }, {\n            key: 'insert',\n            value: function insert(viewRef, index) {}\n        }, {\n            key: 'move',\n            value: function move(viewRef, currentIndex) {}\n        }, {\n            key: 'indexOf',\n            value: function indexOf(viewRef) {}\n        }, {\n            key: 'remove',\n            value: function remove(index) {}\n        }, {\n            key: 'detach',\n            value: function detach(index) {}\n        }]);\n\n        return ViewContainerRef;\n    }();\n\n    var ViewContainerRef_ = function () {\n        /**\n         * @param {?} _element\n         */\n        function ViewContainerRef_(_element) {\n            _classCallCheck(this, ViewContainerRef_);\n\n            this._element = _element;\n            /** @internal */\n            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');\n            /** @internal */\n            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');\n            /** @internal */\n            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');\n            /** @internal */\n            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n\n\n        _createClass(ViewContainerRef_, [{\n            key: 'get',\n            value: function get(index) {\n                return this._element.nestedViews[index].ref;\n            }\n        }, {\n            key: 'createEmbeddedView',\n            value: function createEmbeddedView(templateRef) {\n                var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n                var /** @type {?} */viewRef = templateRef.createEmbeddedView(context);\n                this.insert(viewRef, index);\n                return viewRef;\n            }\n        }, {\n            key: 'createComponent',\n            value: function createComponent(componentFactory) {\n                var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n                var injector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n                var projectableNodes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n                var /** @type {?} */s = this._createComponentInContainerScope();\n                var /** @type {?} */contextInjector = injector || this._element.parentInjector;\n                var /** @type {?} */componentRef = componentFactory.create(contextInjector, projectableNodes);\n                this.insert(componentRef.hostView, index);\n                return wtfLeave(s, componentRef);\n            }\n        }, {\n            key: 'insert',\n            value: function insert(viewRef) {\n                var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n                var /** @type {?} */s = this._insertScope();\n                if (index == -1) index = this.length;\n                var /** @type {?} */viewRef_ = viewRef;\n                this._element.attachView(viewRef_.internalView, index);\n                return wtfLeave(s, viewRef_);\n            }\n        }, {\n            key: 'move',\n            value: function move(viewRef, currentIndex) {\n                var /** @type {?} */s = this._insertScope();\n                if (currentIndex == -1) return;\n                var /** @type {?} */viewRef_ = viewRef;\n                this._element.moveView(viewRef_.internalView, currentIndex);\n                return wtfLeave(s, viewRef_);\n            }\n        }, {\n            key: 'indexOf',\n            value: function indexOf(viewRef) {\n                return this.length ? this._element.nestedViews.indexOf(viewRef.internalView) : -1;\n            }\n        }, {\n            key: 'remove',\n            value: function remove() {\n                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n\n                var /** @type {?} */s = this._removeScope();\n                if (index == -1) index = this.length - 1;\n                var /** @type {?} */view = this._element.detachView(index);\n                view.destroy();\n                // view is intentionally not returned to the client.\n                wtfLeave(s);\n            }\n        }, {\n            key: 'detach',\n            value: function detach() {\n                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n\n                var /** @type {?} */s = this._detachScope();\n                if (index == -1) index = this.length - 1;\n                var /** @type {?} */view = this._element.detachView(index);\n                return wtfLeave(s, view.ref);\n            }\n        }, {\n            key: 'clear',\n            value: function clear() {\n                for (var /** @type {?} */i = this.length - 1; i >= 0; i--) {\n                    this.remove(i);\n                }\n            }\n        }, {\n            key: 'length',\n            get: function get() {\n                var /** @type {?} */views = this._element.nestedViews;\n                return views ? views.length : 0;\n            }\n        }, {\n            key: 'element',\n            get: function get() {\n                return this._element.elementRef;\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return this._element.injector;\n            }\n        }, {\n            key: 'parentInjector',\n            get: function get() {\n                return this._element.parentInjector;\n            }\n        }]);\n\n        return ViewContainerRef_;\n    }();\n\n    var ViewRef = function (_ChangeDetectorRef) {\n        _inherits(ViewRef, _ChangeDetectorRef);\n\n        function ViewRef() {\n            _classCallCheck(this, ViewRef);\n\n            return _possibleConstructorReturn(this, (ViewRef.__proto__ || Object.getPrototypeOf(ViewRef)).apply(this, arguments));\n        }\n\n        _createClass(ViewRef, [{\n            key: 'destroy',\n            value: function destroy() {}\n        }, {\n            key: 'destroyed',\n            value: function destroyed() {}\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {}\n        }]);\n\n        return ViewRef;\n    }(ChangeDetectorRef);\n\n    var EmbeddedViewRef = function (_ViewRef) {\n        _inherits(EmbeddedViewRef, _ViewRef);\n\n        function EmbeddedViewRef() {\n            _classCallCheck(this, EmbeddedViewRef);\n\n            return _possibleConstructorReturn(this, (EmbeddedViewRef.__proto__ || Object.getPrototypeOf(EmbeddedViewRef)).apply(this, arguments));\n        }\n\n        _createClass(EmbeddedViewRef, [{\n            key: 'context',\n            value: function context() {}\n        }, {\n            key: 'rootNodes',\n            value: function rootNodes() {}\n        }]);\n\n        return EmbeddedViewRef;\n    }(ViewRef);\n\n    var ViewRef_ = function () {\n        /**\n         * @param {?} _view\n         * @param {?} animationQueue\n         */\n        function ViewRef_(_view, animationQueue) {\n            _classCallCheck(this, ViewRef_);\n\n            this._view = _view;\n            this.animationQueue = animationQueue;\n            this._view = _view;\n            this._originalMode = this._view.cdMode;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ViewRef_, [{\n            key: 'markForCheck',\n            value: function markForCheck() {\n                this._view.markPathToRootAsCheckOnce();\n            }\n        }, {\n            key: 'detach',\n            value: function detach() {\n                this._view.cdMode = ChangeDetectorStatus.Detached;\n            }\n        }, {\n            key: 'detectChanges',\n            value: function detectChanges() {\n                this._view.detectChanges(false);\n                this.animationQueue.flush();\n            }\n        }, {\n            key: 'checkNoChanges',\n            value: function checkNoChanges() {\n                this._view.detectChanges(true);\n            }\n        }, {\n            key: 'reattach',\n            value: function reattach() {\n                this._view.cdMode = this._originalMode;\n                this.markForCheck();\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {\n                if (!this._view.disposables) {\n                    this._view.disposables = [];\n                }\n                this._view.disposables.push(callback);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this._view.detachAndDestroy();\n            }\n        }, {\n            key: 'detachFromAppRef',\n            value: function detachFromAppRef() {\n                this._view.detach();\n            }\n        }, {\n            key: 'attachToAppRef',\n            value: function attachToAppRef(appRef) {\n                this._view.attachToAppRef(appRef);\n            }\n        }, {\n            key: 'internalView',\n            get: function get() {\n                return this._view;\n            }\n        }, {\n            key: 'rootNodes',\n            get: function get() {\n                return this._view.flatRootNodes;\n            }\n        }, {\n            key: 'context',\n            get: function get() {\n                return this._view.context;\n            }\n        }, {\n            key: 'destroyed',\n            get: function get() {\n                return this._view.destroyed;\n            }\n        }]);\n\n        return ViewRef_;\n    }();\n\n    var EventListener =\n    /**\n     * @param {?} name\n     * @param {?} callback\n     */\n    function EventListener(name, callback) {\n        _classCallCheck(this, EventListener);\n\n        this.name = name;\n        this.callback = callback;\n    };\n\n    var DebugNode = function () {\n        /**\n         * @param {?} nativeNode\n         * @param {?} parent\n         * @param {?} _debugInfo\n         */\n        function DebugNode(nativeNode, parent, _debugInfo) {\n            _classCallCheck(this, DebugNode);\n\n            this._debugInfo = _debugInfo;\n            this.nativeNode = nativeNode;\n            if (parent && parent instanceof DebugElement) {\n                parent.addChild(this);\n            } else {\n                this.parent = null;\n            }\n            this.listeners = [];\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(DebugNode, [{\n            key: 'injector',\n            get: function get() {\n                return this._debugInfo ? this._debugInfo.injector : null;\n            }\n        }, {\n            key: 'componentInstance',\n            get: function get() {\n                return this._debugInfo ? this._debugInfo.component : null;\n            }\n        }, {\n            key: 'context',\n            get: function get() {\n                return this._debugInfo ? this._debugInfo.context : null;\n            }\n        }, {\n            key: 'references',\n            get: function get() {\n                return this._debugInfo ? this._debugInfo.references : null;\n            }\n        }, {\n            key: 'providerTokens',\n            get: function get() {\n                return this._debugInfo ? this._debugInfo.providerTokens : null;\n            }\n        }, {\n            key: 'source',\n            get: function get() {\n                return this._debugInfo ? this._debugInfo.source : null;\n            }\n        }]);\n\n        return DebugNode;\n    }();\n\n    var DebugElement = function (_DebugNode) {\n        _inherits(DebugElement, _DebugNode);\n\n        /**\n         * @param {?} nativeNode\n         * @param {?} parent\n         * @param {?} _debugInfo\n         */\n        function DebugElement(nativeNode, parent, _debugInfo) {\n            _classCallCheck(this, DebugElement);\n\n            var _this25 = _possibleConstructorReturn(this, (DebugElement.__proto__ || Object.getPrototypeOf(DebugElement)).call(this, nativeNode, parent, _debugInfo));\n\n            _this25.properties = {};\n            _this25.attributes = {};\n            _this25.classes = {};\n            _this25.styles = {};\n            _this25.childNodes = [];\n            _this25.nativeElement = nativeNode;\n            return _this25;\n        }\n        /**\n         * @param {?} child\n         * @return {?}\n         */\n\n\n        _createClass(DebugElement, [{\n            key: 'addChild',\n            value: function addChild(child) {\n                if (child) {\n                    this.childNodes.push(child);\n                    child.parent = this;\n                }\n            }\n        }, {\n            key: 'removeChild',\n            value: function removeChild(child) {\n                var /** @type {?} */childIndex = this.childNodes.indexOf(child);\n                if (childIndex !== -1) {\n                    child.parent = null;\n                    this.childNodes.splice(childIndex, 1);\n                }\n            }\n        }, {\n            key: 'insertChildrenAfter',\n            value: function insertChildrenAfter(child, newChildren) {\n                var _this26 = this;\n\n                var /** @type {?} */siblingIndex = this.childNodes.indexOf(child);\n                if (siblingIndex !== -1) {\n                    var _childNodes;\n\n                    (_childNodes = this.childNodes).splice.apply(_childNodes, [siblingIndex + 1, 0].concat(_toConsumableArray(newChildren)));\n                    newChildren.forEach(function (c) {\n                        if (c.parent) {\n                            c.parent.removeChild(c);\n                        }\n                        c.parent = _this26;\n                    });\n                }\n            }\n        }, {\n            key: 'insertBefore',\n            value: function insertBefore(refChild, newChild) {\n                var /** @type {?} */refIndex = this.childNodes.indexOf(refChild);\n                if (refIndex === -1) {\n                    this.addChild(newChild);\n                } else {\n                    if (newChild.parent) {\n                        newChild.parent.removeChild(newChild);\n                    }\n                    newChild.parent = this;\n                    this.childNodes.splice(refIndex, 0, newChild);\n                }\n            }\n        }, {\n            key: 'query',\n            value: function query(predicate) {\n                var /** @type {?} */results = this.queryAll(predicate);\n                return results[0] || null;\n            }\n        }, {\n            key: 'queryAll',\n            value: function queryAll(predicate) {\n                var /** @type {?} */matches = [];\n                _queryElementChildren(this, predicate, matches);\n                return matches;\n            }\n        }, {\n            key: 'queryAllNodes',\n            value: function queryAllNodes(predicate) {\n                var /** @type {?} */matches = [];\n                _queryNodeChildren(this, predicate, matches);\n                return matches;\n            }\n        }, {\n            key: 'triggerEventHandler',\n            value: function triggerEventHandler(eventName, eventObj) {\n                this.listeners.forEach(function (listener) {\n                    if (listener.name == eventName) {\n                        listener.callback(eventObj);\n                    }\n                });\n            }\n        }, {\n            key: 'children',\n            get: function get() {\n                return this.childNodes.filter(function (node) {\n                    return node instanceof DebugElement;\n                });\n            }\n        }]);\n\n        return DebugElement;\n    }(DebugNode);\n\n    /**\n     * \\@experimental\n     * @param {?} debugEls\n     * @return {?}\n     */\n    function asNativeElements(debugEls) {\n        return debugEls.map(function (el) {\n            return el.nativeElement;\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?} predicate\n     * @param {?} matches\n     * @return {?}\n     */\n    function _queryElementChildren(element, predicate, matches) {\n        element.childNodes.forEach(function (node) {\n            if (node instanceof DebugElement) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                _queryElementChildren(node, predicate, matches);\n            }\n        });\n    }\n    /**\n     * @param {?} parentNode\n     * @param {?} predicate\n     * @param {?} matches\n     * @return {?}\n     */\n    function _queryNodeChildren(parentNode, predicate, matches) {\n        if (parentNode instanceof DebugElement) {\n            parentNode.childNodes.forEach(function (node) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                if (node instanceof DebugElement) {\n                    _queryNodeChildren(node, predicate, matches);\n                }\n            });\n        }\n    }\n    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n    var /** @type {?} */_nativeNodeToDebugNode = new Map();\n    /**\n     * \\@experimental\n     * @param {?} nativeNode\n     * @return {?}\n     */\n    function getDebugNode(nativeNode) {\n        return _nativeNodeToDebugNode.get(nativeNode);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function indexDebugNode(node) {\n        _nativeNodeToDebugNode.set(node.nativeNode, node);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function removeDebugNodeFromIndex(node) {\n        _nativeNodeToDebugNode.delete(node.nativeNode);\n    }\n\n    /**\n     * @return {?}\n     */\n    function _reflector() {\n        return reflector;\n    }\n    var /** @type {?} */_CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' }, PlatformRef_, { provide: PlatformRef, useExisting: PlatformRef_ }, { provide: Reflector, useFactory: _reflector, deps: [] }, { provide: ReflectorReader, useExisting: Reflector }, TestabilityRegistry, Console];\n    /**\n     * This platform has to be included in any other platform\n     *\n     * @experimental\n     */\n    var /** @type {?} */platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */LOCALE_ID = new InjectionToken('LocaleId');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */TRANSLATIONS = new InjectionToken('Translations');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n    var MissingTranslationStrategy = {};\n    MissingTranslationStrategy.Error = 0;\n    MissingTranslationStrategy.Warning = 1;\n    MissingTranslationStrategy.Ignore = 2;\n    MissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ArgumentType = {};\n    ArgumentType.Inline = 0;\n    ArgumentType.Dynamic = 1;\n    ArgumentType[ArgumentType.Inline] = \"Inline\";\n    ArgumentType[ArgumentType.Dynamic] = \"Dynamic\";\n    var ViewFlags = {};\n    ViewFlags.None = 0;\n    ViewFlags.OnPush = 2;\n    ViewFlags[ViewFlags.None] = \"None\";\n    ViewFlags[ViewFlags.OnPush] = \"OnPush\";\n    var NodeType = {};\n    NodeType.Element = 0;\n    NodeType.Text = 1;\n    NodeType.Directive = 2;\n    NodeType.Provider = 3;\n    NodeType.Pipe = 4;\n    NodeType.PureExpression = 5;\n    NodeType.Query = 6;\n    NodeType.NgContent = 7;\n    NodeType[NodeType.Element] = \"Element\";\n    NodeType[NodeType.Text] = \"Text\";\n    NodeType[NodeType.Directive] = \"Directive\";\n    NodeType[NodeType.Provider] = \"Provider\";\n    NodeType[NodeType.Pipe] = \"Pipe\";\n    NodeType[NodeType.PureExpression] = \"PureExpression\";\n    NodeType[NodeType.Query] = \"Query\";\n    NodeType[NodeType.NgContent] = \"NgContent\";\n    var NodeFlags = {};\n    NodeFlags.None = 0;\n    NodeFlags.OnInit = 1;\n    NodeFlags.OnDestroy = 2;\n    NodeFlags.DoCheck = 4;\n    NodeFlags.OnChanges = 8;\n    NodeFlags.AfterContentInit = 16;\n    NodeFlags.AfterContentChecked = 32;\n    NodeFlags.AfterViewInit = 64;\n    NodeFlags.AfterViewChecked = 128;\n    NodeFlags.HasEmbeddedViews = 256;\n    NodeFlags.HasComponent = 512;\n    NodeFlags.IsComponent = 1024;\n    NodeFlags.HasContentQuery = 2048;\n    NodeFlags.HasStaticQuery = 4096;\n    NodeFlags.HasDynamicQuery = 8192;\n    NodeFlags.HasViewQuery = 16384;\n    NodeFlags.LazyProvider = 32768;\n    NodeFlags.PrivateProvider = 65536;\n    NodeFlags[NodeFlags.None] = \"None\";\n    NodeFlags[NodeFlags.OnInit] = \"OnInit\";\n    NodeFlags[NodeFlags.OnDestroy] = \"OnDestroy\";\n    NodeFlags[NodeFlags.DoCheck] = \"DoCheck\";\n    NodeFlags[NodeFlags.OnChanges] = \"OnChanges\";\n    NodeFlags[NodeFlags.AfterContentInit] = \"AfterContentInit\";\n    NodeFlags[NodeFlags.AfterContentChecked] = \"AfterContentChecked\";\n    NodeFlags[NodeFlags.AfterViewInit] = \"AfterViewInit\";\n    NodeFlags[NodeFlags.AfterViewChecked] = \"AfterViewChecked\";\n    NodeFlags[NodeFlags.HasEmbeddedViews] = \"HasEmbeddedViews\";\n    NodeFlags[NodeFlags.HasComponent] = \"HasComponent\";\n    NodeFlags[NodeFlags.IsComponent] = \"IsComponent\";\n    NodeFlags[NodeFlags.HasContentQuery] = \"HasContentQuery\";\n    NodeFlags[NodeFlags.HasStaticQuery] = \"HasStaticQuery\";\n    NodeFlags[NodeFlags.HasDynamicQuery] = \"HasDynamicQuery\";\n    NodeFlags[NodeFlags.HasViewQuery] = \"HasViewQuery\";\n    NodeFlags[NodeFlags.LazyProvider] = \"LazyProvider\";\n    NodeFlags[NodeFlags.PrivateProvider] = \"PrivateProvider\";\n    var BindingType = {};\n    BindingType.ElementAttribute = 0;\n    BindingType.ElementClass = 1;\n    BindingType.ElementStyle = 2;\n    BindingType.ElementProperty = 3;\n    BindingType.ComponentHostProperty = 4;\n    BindingType.DirectiveProperty = 5;\n    BindingType.TextInterpolation = 6;\n    BindingType.PureExpressionProperty = 7;\n    BindingType[BindingType.ElementAttribute] = \"ElementAttribute\";\n    BindingType[BindingType.ElementClass] = \"ElementClass\";\n    BindingType[BindingType.ElementStyle] = \"ElementStyle\";\n    BindingType[BindingType.ElementProperty] = \"ElementProperty\";\n    BindingType[BindingType.ComponentHostProperty] = \"ComponentHostProperty\";\n    BindingType[BindingType.DirectiveProperty] = \"DirectiveProperty\";\n    BindingType[BindingType.TextInterpolation] = \"TextInterpolation\";\n    BindingType[BindingType.PureExpressionProperty] = \"PureExpressionProperty\";\n    var OutputType = {};\n    OutputType.ElementOutput = 0;\n    OutputType.DirectiveOutput = 1;\n    OutputType[OutputType.ElementOutput] = \"ElementOutput\";\n    OutputType[OutputType.DirectiveOutput] = \"DirectiveOutput\";\n    var QueryValueType = {};\n    QueryValueType.ElementRef = 0;\n    QueryValueType.RenderElement = 1;\n    QueryValueType.TemplateRef = 2;\n    QueryValueType.ViewContainerRef = 3;\n    QueryValueType.Provider = 4;\n    QueryValueType[QueryValueType.ElementRef] = \"ElementRef\";\n    QueryValueType[QueryValueType.RenderElement] = \"RenderElement\";\n    QueryValueType[QueryValueType.TemplateRef] = \"TemplateRef\";\n    QueryValueType[QueryValueType.ViewContainerRef] = \"ViewContainerRef\";\n    QueryValueType[QueryValueType.Provider] = \"Provider\";\n    var ProviderType = {};\n    ProviderType.Value = 0;\n    ProviderType.Class = 1;\n    ProviderType.Factory = 2;\n    ProviderType.UseExisting = 3;\n    ProviderType[ProviderType.Value] = \"Value\";\n    ProviderType[ProviderType.Class] = \"Class\";\n    ProviderType[ProviderType.Factory] = \"Factory\";\n    ProviderType[ProviderType.UseExisting] = \"UseExisting\";\n    var DepFlags = {};\n    DepFlags.None = 0;\n    DepFlags.SkipSelf = 1;\n    DepFlags.Optional = 2;\n    DepFlags.Value = 8;\n    DepFlags[DepFlags.None] = \"None\";\n    DepFlags[DepFlags.SkipSelf] = \"SkipSelf\";\n    DepFlags[DepFlags.Optional] = \"Optional\";\n    DepFlags[DepFlags.Value] = \"Value\";\n    var PureExpressionType = {};\n    PureExpressionType.Array = 0;\n    PureExpressionType.Object = 1;\n    PureExpressionType.Pipe = 2;\n    PureExpressionType[PureExpressionType.Array] = \"Array\";\n    PureExpressionType[PureExpressionType.Object] = \"Object\";\n    PureExpressionType[PureExpressionType.Pipe] = \"Pipe\";\n    var QueryBindingType = {};\n    QueryBindingType.First = 0;\n    QueryBindingType.All = 1;\n    QueryBindingType[QueryBindingType.First] = \"First\";\n    QueryBindingType[QueryBindingType.All] = \"All\";\n    var ViewState = {};\n    ViewState.FirstCheck = 1;\n    ViewState.ChecksEnabled = 2;\n    ViewState.Errored = 4;\n    ViewState.Destroyed = 8;\n    ViewState[ViewState.FirstCheck] = \"FirstCheck\";\n    ViewState[ViewState.ChecksEnabled] = \"ChecksEnabled\";\n    ViewState[ViewState.Errored] = \"Errored\";\n    ViewState[ViewState.Destroyed] = \"Destroyed\";\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     * @param {?} view\n     * @param {?} index\n     * @return {?}\n     */\n    function asTextData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     * @param {?} view\n     * @param {?} index\n     * @return {?}\n     */\n    function asElementData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     * @param {?} view\n     * @param {?} index\n     * @return {?}\n     */\n    function asProviderData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     * @param {?} view\n     * @param {?} index\n     * @return {?}\n     */\n    function asPureExpressionData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     * @param {?} view\n     * @param {?} index\n     * @return {?}\n     */\n    function asQueryList(view, index) {\n        return view.nodes[index];\n    }\n    var CheckType = {};\n    CheckType.CheckAndUpdate = 0;\n    CheckType.CheckNoChanges = 1;\n    CheckType[CheckType.CheckAndUpdate] = \"CheckAndUpdate\";\n    CheckType[CheckType.CheckNoChanges] = \"CheckNoChanges\";\n    /**\n     * This object is used to prevent cycles in the source files and to have a place where\n     * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n     */\n    var /** @type {?} */Services = {\n        setCurrentNode: undefined,\n        createRootView: undefined,\n        createEmbeddedView: undefined,\n        checkAndUpdateView: undefined,\n        checkNoChangesView: undefined,\n        destroyView: undefined,\n        resolveDep: undefined,\n        createDebugContext: undefined,\n        handleEvent: undefined,\n        updateDirectives: undefined,\n        updateRenderer: undefined,\n        dirtyParentQueries: undefined\n    };\n\n    /**\n     * @param {?} context\n     * @param {?} oldValue\n     * @param {?} currValue\n     * @param {?} isFirstCheck\n     * @return {?}\n     */\n    function expressionChangedAfterItHasBeenCheckedError$1(context, oldValue, currValue, isFirstCheck) {\n        var /** @type {?} */msg = 'ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: \\'' + oldValue + '\\'. Current value: \\'' + currValue + '\\'.';\n        if (isFirstCheck) {\n            msg += ' It seems like the view has been created after its parent and its children have been dirty checked.' + ' Has it been created in a change detection hook ?';\n        }\n        return viewDebugError(msg, context);\n    }\n    /**\n     * @param {?} originalError\n     * @param {?} context\n     * @return {?}\n     */\n    function viewWrappedDebugError(originalError, context) {\n        var /** @type {?} */err = viewDebugError(originalError.message, context);\n        err[ERROR_ORIGINAL_ERROR] = originalError;\n        return err;\n    }\n    /**\n     * @param {?} msg\n     * @param {?} context\n     * @return {?}\n     */\n    function viewDebugError(msg, context) {\n        var /** @type {?} */err = new Error(msg);\n        err[ERROR_DEBUG_CONTEXT] = context;\n        err.stack = context.source;\n        return err;\n    }\n    /**\n     * @param {?} err\n     * @return {?}\n     */\n    function isViewDebugError(err) {\n        return !!getDebugContext(err);\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    function viewDestroyedError$1(action) {\n        return new Error('ViewDestroyedError: Attempt to use a destroyed view: ' + action);\n    }\n\n    var /** @type {?} */_tokenKeyCache = new Map();\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function tokenKey(token) {\n        var /** @type {?} */key = _tokenKeyCache.get(token);\n        if (!key) {\n            key = stringify(token) + '_' + _tokenKeyCache.size;\n            _tokenKeyCache.set(token, key);\n        }\n        return key;\n    }\n    var /** @type {?} */unwrapCounter = 0;\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function unwrapValue(value) {\n        if (value instanceof WrappedValue) {\n            value = value.wrapped;\n            unwrapCounter++;\n        }\n        return value;\n    }\n    var /** @type {?} */_renderCompCount = 0;\n    /**\n     * @param {?} values\n     * @return {?}\n     */\n    function createRendererTypeV2(values) {\n        var /** @type {?} */isFilled = values && (values.encapsulation !== ViewEncapsulation.None || values.styles.length || Object.keys(values.data).length);\n        if (isFilled) {\n            var /** @type {?} */id = 'c' + _renderCompCount++;\n            return { id: id, styles: values.styles, encapsulation: values.encapsulation, data: values.data };\n        } else {\n            return null;\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} bindingIdx\n     * @param {?} value\n     * @return {?}\n     */\n    function checkBinding$1(view, def, bindingIdx, value) {\n        var /** @type {?} */oldValues = view.oldValues;\n        if (unwrapCounter > 0 || !!(view.state & ViewState.FirstCheck) || !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n            unwrapCounter = 0;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} bindingIdx\n     * @param {?} value\n     * @return {?}\n     */\n    function checkAndUpdateBinding(view, def, bindingIdx, value) {\n        if (checkBinding$1(view, def, bindingIdx, value)) {\n            view.oldValues[def.bindingIndex + bindingIdx] = value;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} bindingIdx\n     * @param {?} value\n     * @return {?}\n     */\n    function checkBindingNoChanges(view, def, bindingIdx, value) {\n        var /** @type {?} */oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n        if (unwrapCounter || view.state & ViewState.FirstCheck || !devModeEqual(oldValue, value)) {\n            unwrapCounter = 0;\n            throw expressionChangedAfterItHasBeenCheckedError$1(Services.createDebugContext(view, def.index), oldValue, value, (view.state & ViewState.FirstCheck) !== 0);\n        }\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function markParentViewsForCheck(view) {\n        var /** @type {?} */currView = view;\n        while (currView) {\n            if (currView.def.flags & ViewFlags.OnPush) {\n                currView.state |= ViewState.ChecksEnabled;\n            }\n            currView = currView.viewContainerParent || currView.parent;\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} eventName\n     * @param {?} event\n     * @return {?}\n     */\n    function dispatchEvent(view, nodeIndex, eventName, event) {\n        markParentViewsForCheck(view);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function declaredViewContainer(view) {\n        if (view.parent) {\n            var /** @type {?} */parentView = view.parent;\n            return asElementData(parentView, view.parentNodeDef.index);\n        }\n        return undefined;\n    }\n    /**\n     * for component views, this is the host element.\n     * for embedded views, this is the index of the parent node\n     * that contains the view container.\n     * @param {?} view\n     * @return {?}\n     */\n    function viewParentEl(view) {\n        var /** @type {?} */parentView = view.parent;\n        if (parentView) {\n            return view.parentNodeDef.parent;\n        } else {\n            return null;\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @return {?}\n     */\n    function renderNode(view, def) {\n        switch (def.type) {\n            case NodeType.Element:\n                return asElementData(view, def.index).renderElement;\n            case NodeType.Text:\n                return asTextData(view, def.index).renderText;\n        }\n    }\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @return {?}\n     */\n    function elementEventFullName(target, name) {\n        return target ? target + ':' + name : name;\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function isComponentView(view) {\n        return view.component === view.context && !!view.parent;\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function isEmbeddedView(view) {\n        return view.component !== view.context && !!view.parent;\n    }\n    /**\n     * @param {?} queryId\n     * @return {?}\n     */\n    function filterQueryId(queryId) {\n        return 1 << queryId % 32;\n    }\n    /**\n     * @param {?} matchedQueriesDsl\n     * @return {?}\n     */\n    function splitMatchedQueriesDsl(matchedQueriesDsl) {\n        var /** @type {?} */matchedQueries = {};\n        var /** @type {?} */matchedQueryIds = 0;\n        var /** @type {?} */references = {};\n        if (matchedQueriesDsl) {\n            matchedQueriesDsl.forEach(function (_ref3) {\n                var _ref4 = _slicedToArray(_ref3, 2),\n                    queryId = _ref4[0],\n                    valueType = _ref4[1];\n\n                if (typeof queryId === 'number') {\n                    matchedQueries[queryId] = valueType;\n                    matchedQueryIds |= filterQueryId(queryId);\n                } else {\n                    references[queryId] = valueType;\n                }\n            });\n        }\n        return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderHost\n     * @param {?} def\n     * @return {?}\n     */\n    function getParentRenderElement(view, renderHost, def) {\n        var /** @type {?} */renderParent = def.renderParent;\n        if (renderParent) {\n            if (renderParent.type !== NodeType.Element || (renderParent.flags & NodeFlags.HasComponent) === 0 || renderParent.element.componentRendererType && renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native) {\n                // only children of non components, or children of components with native encapsulation should\n                // be attached.\n                return asElementData(view, def.renderParent.index).renderElement;\n            }\n        } else {\n            return renderHost;\n        }\n    }\n    var /** @type {?} */VIEW_DEFINITION_CACHE = new WeakMap();\n    /**\n     * @param {?} factory\n     * @return {?}\n     */\n    function resolveViewDefinition(factory) {\n        var /** @type {?} */value = VIEW_DEFINITION_CACHE.get(factory);\n        if (!value) {\n            value = factory();\n            VIEW_DEFINITION_CACHE.set(factory, value);\n        }\n        return value;\n    }\n    /**\n     * @param {?} start\n     * @param {?} end\n     * @return {?}\n     */\n    function sliceErrorStack(start, end) {\n        var /** @type {?} */err = void 0;\n        try {\n            throw new Error();\n        } catch (e) {\n            err = e;\n        }\n        var /** @type {?} */stack = err.stack || '';\n        var /** @type {?} */lines = stack.split('\\n');\n        if (lines[0].startsWith('Error')) {\n            // Chrome always adds the message to the stack as well...\n            start++;\n            end++;\n        }\n        return lines.slice(start, end).join('\\n');\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function rootRenderNodes(view) {\n        var /** @type {?} */renderNodes = [];\n        visitRootRenderNodes(view, RenderNodeAction.Collect, undefined, undefined, renderNodes);\n        return renderNodes;\n    }\n    var RenderNodeAction = {};\n    RenderNodeAction.Collect = 0;\n    RenderNodeAction.AppendChild = 1;\n    RenderNodeAction.InsertBefore = 2;\n    RenderNodeAction.RemoveChild = 3;\n    RenderNodeAction[RenderNodeAction.Collect] = \"Collect\";\n    RenderNodeAction[RenderNodeAction.AppendChild] = \"AppendChild\";\n    RenderNodeAction[RenderNodeAction.InsertBefore] = \"InsertBefore\";\n    RenderNodeAction[RenderNodeAction.RemoveChild] = \"RemoveChild\";\n    /**\n     * @param {?} view\n     * @param {?} action\n     * @param {?} parentNode\n     * @param {?} nextSibling\n     * @param {?} target\n     * @return {?}\n     */\n    function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n        // We need to re-compute the parent node in case the nodes have been moved around manually\n        if (action === RenderNodeAction.RemoveChild) {\n            parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));\n        }\n        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n    }\n    /**\n     * @param {?} view\n     * @param {?} action\n     * @param {?} startIndex\n     * @param {?} endIndex\n     * @param {?} parentNode\n     * @param {?} nextSibling\n     * @param {?} target\n     * @return {?}\n     */\n    function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n        for (var /** @type {?} */i = startIndex; i <= endIndex; i++) {\n            var /** @type {?} */nodeDef = view.def.nodes[i];\n            if (nodeDef.type === NodeType.Element || nodeDef.type === NodeType.Text || nodeDef.type === NodeType.NgContent) {\n                visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} ngContentIndex\n     * @param {?} action\n     * @param {?} parentNode\n     * @param {?} nextSibling\n     * @param {?} target\n     * @return {?}\n     */\n    function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n        var /** @type {?} */compView = view;\n        while (compView && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        var /** @type {?} */hostView = compView.parent;\n        var /** @type {?} */hostElDef = viewParentEl(compView);\n        var /** @type {?} */startIndex = hostElDef.index + 1;\n        var /** @type {?} */endIndex = hostElDef.index + hostElDef.childCount;\n        for (var /** @type {?} */i = startIndex; i <= endIndex; i++) {\n            var /** @type {?} */nodeDef = hostView.def.nodes[i];\n            if (nodeDef.ngContentIndex === ngContentIndex) {\n                visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n        if (!hostView.parent) {\n            // a root view\n            var /** @type {?} */projectedNodes = view.root.projectableNodes[ngContentIndex];\n            if (projectedNodes) {\n                for (var /** @type {?} */_i = 0; _i < projectedNodes.length; _i++) {\n                    execRenderNodeAction(view, projectedNodes[_i], action, parentNode, nextSibling, target);\n                }\n            }\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} action\n     * @param {?} parentNode\n     * @param {?} nextSibling\n     * @param {?} target\n     * @return {?}\n     */\n    function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n        if (nodeDef.type === NodeType.NgContent) {\n            visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);\n        } else {\n            var /** @type {?} */rn = renderNode(view, nodeDef);\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            if (nodeDef.flags & NodeFlags.HasEmbeddedViews) {\n                var /** @type {?} */embeddedViews = asElementData(view, nodeDef.index).embeddedViews;\n                if (embeddedViews) {\n                    for (var /** @type {?} */k = 0; k < embeddedViews.length; k++) {\n                        visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n                    }\n                }\n            }\n            if (nodeDef.type === NodeType.Element && !nodeDef.element.name) {\n                visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);\n            }\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderNode\n     * @param {?} action\n     * @param {?} parentNode\n     * @param {?} nextSibling\n     * @param {?} target\n     * @return {?}\n     */\n    function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n        var /** @type {?} */renderer = view.renderer;\n        switch (action) {\n            case RenderNodeAction.AppendChild:\n                renderer.appendChild(parentNode, renderNode);\n                break;\n            case RenderNodeAction.InsertBefore:\n                renderer.insertBefore(parentNode, renderNode, nextSibling);\n                break;\n            case RenderNodeAction.RemoveChild:\n                renderer.removeChild(parentNode, renderNode);\n                break;\n            case RenderNodeAction.Collect:\n                target.push(renderNode);\n                break;\n        }\n    }\n    var /** @type {?} */NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    function splitNamespace(name) {\n        if (name[0] === ':') {\n            var /** @type {?} */match = name.match(NS_PREFIX_RE);\n            return [match[1], match[2]];\n        }\n        return ['', name];\n    }\n\n    var /** @type {?} */NOOP = function NOOP() {};\n    /**\n     * @param {?} flags\n     * @param {?} matchedQueriesDsl\n     * @param {?} ngContentIndex\n     * @param {?} childCount\n     * @param {?=} handleEvent\n     * @param {?=} templateFactory\n     * @return {?}\n     */\n    function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n        if (!handleEvent) {\n            handleEvent = NOOP;\n        }\n\n        var _splitMatchedQueriesD = splitMatchedQueriesDsl(matchedQueriesDsl),\n            matchedQueries = _splitMatchedQueriesD.matchedQueries,\n            references = _splitMatchedQueriesD.references,\n            matchedQueryIds = _splitMatchedQueriesD.matchedQueryIds;\n\n        // skip the call to sliceErrorStack itself + the call to this function.\n        var /** @type {?} */source = isDevMode() ? sliceErrorStack(2, 3) : '';\n        var /** @type {?} */template = templateFactory ? resolveViewDefinition(templateFactory) : null;\n        return {\n            type: NodeType.Element,\n            // will bet set by the view definition\n            index: undefined,\n            reverseChildIndex: undefined,\n            parent: undefined,\n            renderParent: undefined,\n            bindingIndex: undefined,\n            outputIndex: undefined,\n            // regular values\n            flags: flags,\n            childFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: [],\n            outputs: [],\n            element: {\n                ns: undefined,\n                name: undefined,\n                attrs: undefined, template: template, source: source,\n                componentProvider: undefined,\n                componentView: undefined,\n                componentRendererType: undefined,\n                publicProviders: undefined,\n                allProviders: undefined, handleEvent: handleEvent\n            },\n            provider: undefined,\n            text: undefined,\n            pureExpression: undefined,\n            query: undefined,\n            ngContent: undefined\n        };\n    }\n    /**\n     * @param {?} flags\n     * @param {?} matchedQueriesDsl\n     * @param {?} ngContentIndex\n     * @param {?} childCount\n     * @param {?} namespaceAndName\n     * @param {?=} fixedAttrs\n     * @param {?=} bindings\n     * @param {?=} outputs\n     * @param {?=} handleEvent\n     * @param {?=} componentView\n     * @param {?=} componentRendererType\n     * @return {?}\n     */\n    function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName) {\n        var fixedAttrs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var bindings = arguments[6];\n        var outputs = arguments[7];\n        var handleEvent = arguments[8];\n        var componentView = arguments[9];\n        var componentRendererType = arguments[10];\n\n        if (!handleEvent) {\n            handleEvent = NOOP;\n        }\n        // skip the call to sliceErrorStack itself + the call to this function.\n        var /** @type {?} */source = isDevMode() ? sliceErrorStack(2, 3) : '';\n\n        var _splitMatchedQueriesD2 = splitMatchedQueriesDsl(matchedQueriesDsl),\n            matchedQueries = _splitMatchedQueriesD2.matchedQueries,\n            references = _splitMatchedQueriesD2.references,\n            matchedQueryIds = _splitMatchedQueriesD2.matchedQueryIds;\n\n        var /** @type {?} */ns = void 0;\n        var /** @type {?} */name = void 0;\n        if (namespaceAndName) {\n            var _splitNamespace = splitNamespace(namespaceAndName);\n\n            var _splitNamespace2 = _slicedToArray(_splitNamespace, 2);\n\n            ns = _splitNamespace2[0];\n            name = _splitNamespace2[1];\n        }\n        bindings = bindings || [];\n        var /** @type {?} */bindingDefs = new Array(bindings.length);\n        for (var /** @type {?} */i = 0; i < bindings.length; i++) {\n            var /** @type {?} */entry = bindings[i];\n            var /** @type {?} */bindingDef = void 0;\n            var /** @type {?} */bindingType = entry[0];\n\n            var _splitNamespace3 = splitNamespace(entry[1]),\n                _splitNamespace4 = _slicedToArray(_splitNamespace3, 2),\n                _ns = _splitNamespace4[0],\n                _name = _splitNamespace4[1];\n\n            var /** @type {?} */securityContext = void 0;\n            var /** @type {?} */suffix = void 0;\n            switch (bindingType) {\n                case BindingType.ElementStyle:\n                    suffix = entry[2];\n                    break;\n                case BindingType.ElementAttribute:\n                case BindingType.ElementProperty:\n                case BindingType.ComponentHostProperty:\n                    securityContext = entry[2];\n                    break;\n            }\n            bindingDefs[i] = { type: bindingType, ns: _ns, name: _name, nonMinifiedName: _name, securityContext: securityContext, suffix: suffix };\n        }\n        outputs = outputs || [];\n        var /** @type {?} */outputDefs = new Array(outputs.length);\n        for (var /** @type {?} */_i2 = 0; _i2 < outputs.length; _i2++) {\n            var _outputs$_i = _slicedToArray(outputs[_i2], 2),\n                target = _outputs$_i[0],\n                eventName = _outputs$_i[1];\n\n            outputDefs[_i2] = {\n                type: OutputType.ElementOutput,\n                target: /** @type {?} */target, eventName: eventName,\n                propName: undefined\n            };\n        }\n        fixedAttrs = fixedAttrs || [];\n        var /** @type {?} */attrs = fixedAttrs.map(function (_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 2),\n                namespaceAndName = _ref6[0],\n                value = _ref6[1];\n\n            var _splitNamespace5 = splitNamespace(namespaceAndName),\n                _splitNamespace6 = _slicedToArray(_splitNamespace5, 2),\n                ns = _splitNamespace6[0],\n                name = _splitNamespace6[1];\n\n            return [ns, name, value];\n        });\n        // This is needed as the jit compiler always uses an empty hash as default RendererTypeV2,\n        // which is not filled for host views.\n        if (componentRendererType && componentRendererType.encapsulation == null) {\n            componentRendererType = null;\n        }\n        if (componentView) {\n            flags |= NodeFlags.HasComponent;\n        }\n        return {\n            type: NodeType.Element,\n            // will bet set by the view definition\n            index: undefined,\n            reverseChildIndex: undefined,\n            parent: undefined,\n            renderParent: undefined,\n            bindingIndex: undefined,\n            outputIndex: undefined,\n            // regular values\n            flags: flags,\n            childFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: bindingDefs,\n            outputs: outputDefs,\n            element: {\n                ns: ns,\n                name: name,\n                attrs: attrs,\n                source: source,\n                template: undefined,\n                // will bet set by the view definition\n                componentProvider: undefined, componentView: componentView, componentRendererType: componentRendererType,\n                publicProviders: undefined,\n                allProviders: undefined, handleEvent: handleEvent\n            },\n            provider: undefined,\n            text: undefined,\n            pureExpression: undefined,\n            query: undefined,\n            ngContent: undefined\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderHost\n     * @param {?} def\n     * @return {?}\n     */\n    function createElement(view, renderHost, def) {\n        var /** @type {?} */elDef = def.element;\n        var /** @type {?} */rootSelectorOrNode = view.root.selectorOrNode;\n        var /** @type {?} */renderer = view.renderer;\n        var /** @type {?} */el = void 0;\n        if (view.parent || !rootSelectorOrNode) {\n            if (elDef.name) {\n                el = renderer.createElement(elDef.name, elDef.ns);\n            } else {\n                el = renderer.createComment('');\n            }\n            var /** @type {?} */parentEl = getParentRenderElement(view, renderHost, def);\n            if (parentEl) {\n                renderer.appendChild(parentEl, el);\n            }\n        } else {\n            el = renderer.selectRootElement(rootSelectorOrNode);\n        }\n        if (elDef.attrs) {\n            for (var /** @type {?} */i = 0; i < elDef.attrs.length; i++) {\n                var _elDef$attrs$i = _slicedToArray(elDef.attrs[i], 3),\n                    ns = _elDef$attrs$i[0],\n                    name = _elDef$attrs$i[1],\n                    value = _elDef$attrs$i[2];\n\n                renderer.setAttribute(el, name, value, ns);\n            }\n        }\n        return el;\n    }\n    /**\n     * @param {?} view\n     * @param {?} compView\n     * @param {?} def\n     * @param {?} el\n     * @return {?}\n     */\n    function listenToElementOutputs(view, compView, def, el) {\n        for (var /** @type {?} */i = 0; i < def.outputs.length; i++) {\n            var /** @type {?} */output = def.outputs[i];\n            var /** @type {?} */handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));\n            var /** @type {?} */listenTarget = output.target;\n            var /** @type {?} */listenerView = view;\n            if (output.target === 'component') {\n                listenTarget = null;\n                listenerView = compView;\n            }\n            var /** @type {?} */disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\n            view.disposables[def.outputIndex + i] = disposable;\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} index\n     * @param {?} eventName\n     * @return {?}\n     */\n    function renderEventHandlerClosure(view, index, eventName) {\n        return function (event) {\n            return dispatchEvent(view, index, eventName, event);\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} v0\n     * @param {?} v1\n     * @param {?} v2\n     * @param {?} v3\n     * @param {?} v4\n     * @param {?} v5\n     * @param {?} v6\n     * @param {?} v7\n     * @param {?} v8\n     * @param {?} v9\n     * @return {?}\n     */\n    function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */bindLen = def.bindings.length;\n        var /** @type {?} */changed = false;\n        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;\n        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;\n        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;\n        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;\n        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;\n        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;\n        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;\n        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;\n        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;\n        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} values\n     * @return {?}\n     */\n    function checkAndUpdateElementDynamic(view, def, values) {\n        var /** @type {?} */changed = false;\n        for (var /** @type {?} */i = 0; i < values.length; i++) {\n            if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;\n        }\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} bindingIdx\n     * @param {?} value\n     * @return {?}\n     */\n    function checkAndUpdateElementValue(view, def, bindingIdx, value) {\n        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n            return false;\n        }\n        var /** @type {?} */binding = def.bindings[bindingIdx];\n        var /** @type {?} */elData = asElementData(view, def.index);\n        var /** @type {?} */renderNode = elData.renderElement;\n        var /** @type {?} */name = binding.name;\n        switch (binding.type) {\n            case BindingType.ElementAttribute:\n                setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n                break;\n            case BindingType.ElementClass:\n                setElementClass(view, renderNode, name, value);\n                break;\n            case BindingType.ElementStyle:\n                setElementStyle(view, binding, renderNode, name, value);\n                break;\n            case BindingType.ElementProperty:\n                setElementProperty(view, binding, renderNode, name, value);\n                break;\n            case BindingType.ComponentHostProperty:\n                setElementProperty(elData.componentView, binding, renderNode, name, value);\n                break;\n        }\n        return true;\n    }\n    /**\n     * @param {?} view\n     * @param {?} binding\n     * @param {?} renderNode\n     * @param {?} ns\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function setElementAttribute(view, binding, renderNode, ns, name, value) {\n        var /** @type {?} */securityContext = binding.securityContext;\n        var /** @type {?} */renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        renderValue = renderValue != null ? renderValue.toString() : null;\n        var /** @type {?} */renderer = view.renderer;\n        if (value != null) {\n            renderer.setAttribute(renderNode, name, renderValue, ns);\n        } else {\n            renderer.removeAttribute(renderNode, name, ns);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderNode\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function setElementClass(view, renderNode, name, value) {\n        var /** @type {?} */renderer = view.renderer;\n        if (value) {\n            renderer.addClass(renderNode, name);\n        } else {\n            renderer.removeClass(renderNode, name);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} binding\n     * @param {?} renderNode\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function setElementStyle(view, binding, renderNode, name, value) {\n        var /** @type {?} */renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);\n        if (renderValue != null) {\n            renderValue = renderValue.toString();\n            var /** @type {?} */unit = binding.suffix;\n            if (unit != null) {\n                renderValue = renderValue + unit;\n            }\n        } else {\n            renderValue = null;\n        }\n        var /** @type {?} */renderer = view.renderer;\n        if (renderValue != null) {\n            renderer.setStyle(renderNode, name, renderValue, false, false);\n        } else {\n            renderer.removeStyle(renderNode, name, false);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} binding\n     * @param {?} renderNode\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function setElementProperty(view, binding, renderNode, name, value) {\n        var /** @type {?} */securityContext = binding.securityContext;\n        var /** @type {?} */renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        view.renderer.setProperty(renderNode, name, renderValue);\n    }\n\n    /**\n     * @param {?} ngContentIndex\n     * @param {?} index\n     * @return {?}\n     */\n    function ngContentDef(ngContentIndex, index) {\n        return {\n            type: NodeType.NgContent,\n            // will bet set by the view definition\n            index: undefined,\n            reverseChildIndex: undefined,\n            parent: undefined,\n            renderParent: undefined,\n            bindingIndex: undefined,\n            outputIndex: undefined,\n            // regular values\n            flags: 0,\n            childFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0,\n            bindings: [],\n            outputs: [],\n            element: undefined,\n            provider: undefined,\n            text: undefined,\n            pureExpression: undefined,\n            query: undefined,\n            ngContent: { index: index }\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderHost\n     * @param {?} def\n     * @return {?}\n     */\n    function appendNgContent(view, renderHost, def) {\n        var /** @type {?} */parentEl = getParentRenderElement(view, renderHost, def);\n        if (!parentEl) {\n            // Nothing to do if there is no parent element.\n            return;\n        }\n        var /** @type {?} */ngContentIndex = def.ngContent.index;\n        visitProjectedRenderNodes(view, ngContentIndex, RenderNodeAction.AppendChild, parentEl, undefined, undefined);\n    }\n\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n\n    var AnimationPlayer = function () {\n        function AnimationPlayer() {\n            _classCallCheck(this, AnimationPlayer);\n        }\n\n        _createClass(AnimationPlayer, [{\n            key: 'onDone',\n            value: function onDone(fn) {}\n        }, {\n            key: 'onStart',\n            value: function onStart(fn) {}\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(fn) {}\n        }, {\n            key: 'init',\n            value: function init() {}\n        }, {\n            key: 'hasStarted',\n            value: function hasStarted() {}\n        }, {\n            key: 'play',\n            value: function play() {}\n        }, {\n            key: 'pause',\n            value: function pause() {}\n        }, {\n            key: 'restart',\n            value: function restart() {}\n        }, {\n            key: 'finish',\n            value: function finish() {}\n        }, {\n            key: 'destroy',\n            value: function destroy() {}\n        }, {\n            key: 'reset',\n            value: function reset() {}\n        }, {\n            key: 'setPosition',\n            value: function setPosition(p) {}\n        }, {\n            key: 'getPosition',\n            value: function getPosition() {}\n        }, {\n            key: 'parentPlayer',\n            get: function get() {\n                throw new Error('NOT IMPLEMENTED: Base Class');\n            },\n            set: function set(player) {\n                throw new Error('NOT IMPLEMENTED: Base Class');\n            }\n        }]);\n\n        return AnimationPlayer;\n    }();\n\n    var NoOpAnimationPlayer = function () {\n        function NoOpAnimationPlayer() {\n            var _this27 = this;\n\n            _classCallCheck(this, NoOpAnimationPlayer);\n\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._onDestroyFns = [];\n            this._started = false;\n            this._destroyed = false;\n            this._finished = false;\n            this.parentPlayer = null;\n            scheduleMicroTask(function () {\n                return _this27._onFinish();\n            });\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(NoOpAnimationPlayer, [{\n            key: '_onFinish',\n            value: function _onFinish() {\n                if (!this._finished) {\n                    this._finished = true;\n                    this._onDoneFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDoneFns = [];\n                }\n            }\n        }, {\n            key: 'onStart',\n            value: function onStart(fn) {\n                this._onStartFns.push(fn);\n            }\n        }, {\n            key: 'onDone',\n            value: function onDone(fn) {\n                this._onDoneFns.push(fn);\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(fn) {\n                this._onDestroyFns.push(fn);\n            }\n        }, {\n            key: 'hasStarted',\n            value: function hasStarted() {\n                return this._started;\n            }\n        }, {\n            key: 'init',\n            value: function init() {}\n        }, {\n            key: 'play',\n            value: function play() {\n                if (!this.hasStarted()) {\n                    this._onStartFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onStartFns = [];\n                }\n                this._started = true;\n            }\n        }, {\n            key: 'pause',\n            value: function pause() {}\n        }, {\n            key: 'restart',\n            value: function restart() {}\n        }, {\n            key: 'finish',\n            value: function finish() {\n                this._onFinish();\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                if (!this._destroyed) {\n                    this._destroyed = true;\n                    this.finish();\n                    this._onDestroyFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDestroyFns = [];\n                }\n            }\n        }, {\n            key: 'reset',\n            value: function reset() {}\n        }, {\n            key: 'setPosition',\n            value: function setPosition(p) {}\n        }, {\n            key: 'getPosition',\n            value: function getPosition() {\n                return 0;\n            }\n        }]);\n\n        return NoOpAnimationPlayer;\n    }();\n\n    /**\n     * @param {?} parentView\n     * @param {?} elementData\n     * @param {?} viewIndex\n     * @param {?} view\n     * @return {?}\n     */\n    function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n        var /** @type {?} */embeddedViews = elementData.embeddedViews;\n        if (viewIndex == null) {\n            viewIndex = embeddedViews.length;\n        }\n        view.viewContainerParent = parentView;\n        addToArray$1(embeddedViews, viewIndex, view);\n        var /** @type {?} */dvcElementData = declaredViewContainer(view);\n        if (dvcElementData && dvcElementData !== elementData) {\n            var /** @type {?} */projectedViews = dvcElementData.projectedViews;\n            if (!projectedViews) {\n                projectedViews = dvcElementData.projectedViews = [];\n            }\n            projectedViews.push(view);\n        }\n        Services.dirtyParentQueries(view);\n        var /** @type {?} */prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n    }\n    /**\n     * @param {?} elementData\n     * @param {?} viewIndex\n     * @return {?}\n     */\n    function detachEmbeddedView(elementData, viewIndex) {\n        var /** @type {?} */embeddedViews = elementData.embeddedViews;\n        if (viewIndex == null || viewIndex >= embeddedViews.length) {\n            viewIndex = embeddedViews.length - 1;\n        }\n        if (viewIndex < 0) {\n            return null;\n        }\n        var /** @type {?} */view = embeddedViews[viewIndex];\n        view.viewContainerParent = undefined;\n        removeFromArray(embeddedViews, viewIndex);\n        var /** @type {?} */dvcElementData = declaredViewContainer(view);\n        if (dvcElementData && dvcElementData !== elementData) {\n            var /** @type {?} */projectedViews = dvcElementData.projectedViews;\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n        }\n        Services.dirtyParentQueries(view);\n        renderDetachView(view);\n        return view;\n    }\n    /**\n     * @param {?} elementData\n     * @param {?} oldViewIndex\n     * @param {?} newViewIndex\n     * @return {?}\n     */\n    function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n        var /** @type {?} */embeddedViews = elementData.embeddedViews;\n        var /** @type {?} */view = embeddedViews[oldViewIndex];\n        removeFromArray(embeddedViews, oldViewIndex);\n        if (newViewIndex == null) {\n            newViewIndex = embeddedViews.length;\n        }\n        addToArray$1(embeddedViews, newViewIndex, view);\n        // Note: Don't need to change projectedViews as the order in there\n        // as always invalid...\n        Services.dirtyParentQueries(view);\n        renderDetachView(view);\n        var /** @type {?} */prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n        return view;\n    }\n    /**\n     * @param {?} elementData\n     * @param {?} prevView\n     * @param {?} view\n     * @return {?}\n     */\n    function renderAttachEmbeddedView(elementData, prevView, view) {\n        var /** @type {?} */prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;\n        var /** @type {?} */parentNode = view.renderer.parentNode(prevRenderNode);\n        var /** @type {?} */nextSibling = view.renderer.nextSibling(prevRenderNode);\n        // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n        // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n        visitRootRenderNodes(view, RenderNodeAction.InsertBefore, parentNode, nextSibling, undefined);\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function renderDetachView(view) {\n        visitRootRenderNodes(view, RenderNodeAction.RemoveChild, null, null, undefined);\n    }\n    /**\n     * @param {?} arr\n     * @param {?} index\n     * @param {?} value\n     * @return {?}\n     */\n    function addToArray$1(arr, index, value) {\n        // perf: array.push is faster than array.splice!\n        if (index >= arr.length) {\n            arr.push(value);\n        } else {\n            arr.splice(index, 0, value);\n        }\n    }\n    /**\n     * @param {?} arr\n     * @param {?} index\n     * @return {?}\n     */\n    function removeFromArray(arr, index) {\n        // perf: array.pop is faster than array.splice!\n        if (index >= arr.length - 1) {\n            arr.pop();\n        } else {\n            arr.splice(index, 1);\n        }\n    }\n\n    var /** @type {?} */EMPTY_CONTEXT = new Object();\n    /**\n     * @param {?} selector\n     * @param {?} componentType\n     * @param {?} viewDefFactory\n     * @return {?}\n     */\n    function createComponentFactory(selector, componentType, viewDefFactory) {\n        return new ComponentFactory_(selector, componentType, viewDefFactory);\n    }\n\n    var ComponentFactory_ = function (_ComponentFactory) {\n        _inherits(ComponentFactory_, _ComponentFactory);\n\n        /**\n         * @param {?} selector\n         * @param {?} componentType\n         * @param {?} viewDefFactory\n         */\n        function ComponentFactory_(selector, componentType, viewDefFactory) {\n            _classCallCheck(this, ComponentFactory_);\n\n            return _possibleConstructorReturn(this, (ComponentFactory_.__proto__ || Object.getPrototypeOf(ComponentFactory_)).call(this, selector, viewDefFactory, componentType));\n        }\n        /**\n         * Creates a new component.\n         * @param {?} injector\n         * @param {?=} projectableNodes\n         * @param {?=} rootSelectorOrNode\n         * @return {?}\n         */\n\n\n        _createClass(ComponentFactory_, [{\n            key: 'create',\n            value: function create(injector) {\n                var projectableNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                var rootSelectorOrNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                var /** @type {?} */viewDef = resolveViewDefinition(this._viewClass);\n                var /** @type {?} */componentNodeIndex = viewDef.nodes[0].element.componentProvider.index;\n                var /** @type {?} */view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, EMPTY_CONTEXT);\n                var /** @type {?} */component = asProviderData(view, componentNodeIndex).instance;\n                view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n                return new ComponentRef_$1(view, new ViewRef_$1(view), component);\n            }\n        }]);\n\n        return ComponentFactory_;\n    }(ComponentFactory);\n\n    var ComponentRef_$1 = function (_ComponentRef2) {\n        _inherits(ComponentRef_$1, _ComponentRef2);\n\n        /**\n         * @param {?} _view\n         * @param {?} _viewRef\n         * @param {?} _component\n         */\n        function ComponentRef_$1(_view, _viewRef, _component) {\n            _classCallCheck(this, ComponentRef_$1);\n\n            var _this29 = _possibleConstructorReturn(this, (ComponentRef_$1.__proto__ || Object.getPrototypeOf(ComponentRef_$1)).call(this));\n\n            _this29._view = _view;\n            _this29._viewRef = _viewRef;\n            _this29._component = _component;\n            _this29._elDef = _this29._view.def.nodes[0];\n            return _this29;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ComponentRef_$1, [{\n            key: 'destroy',\n            value: function destroy() {\n                this._viewRef.destroy();\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {\n                this._viewRef.onDestroy(callback);\n            }\n        }, {\n            key: 'location',\n            get: function get() {\n                return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return new Injector_(this._view, this._elDef);\n            }\n        }, {\n            key: 'instance',\n            get: function get() {\n                return this._component;\n            }\n        }, {\n            key: 'hostView',\n            get: function get() {\n                return this._viewRef;\n            }\n        }, {\n            key: 'changeDetectorRef',\n            get: function get() {\n                return this._viewRef;\n            }\n        }, {\n            key: 'componentType',\n            get: function get() {\n                return this._component.constructor;\n            }\n        }]);\n\n        return ComponentRef_$1;\n    }(ComponentRef);\n\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     * @return {?}\n     */\n    function createViewContainerRef(view, elDef) {\n        return new ViewContainerRef_$1(view, elDef);\n    }\n\n    var ViewContainerRef_$1 = function () {\n        /**\n         * @param {?} _view\n         * @param {?} _elDef\n         */\n        function ViewContainerRef_$1(_view, _elDef) {\n            _classCallCheck(this, ViewContainerRef_$1);\n\n            this._view = _view;\n            this._elDef = _elDef;\n            this._data = asElementData(_view, _elDef.index);\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ViewContainerRef_$1, [{\n            key: 'clear',\n            value: function clear() {\n                var /** @type {?} */len = this._data.embeddedViews.length;\n                for (var /** @type {?} */i = len - 1; i >= 0; i--) {\n                    var /** @type {?} */view = detachEmbeddedView(this._data, i);\n                    Services.destroyView(view);\n                }\n            }\n        }, {\n            key: 'get',\n            value: function get(index) {\n                var /** @type {?} */view = this._data.embeddedViews[index];\n                if (view) {\n                    var /** @type {?} */ref = new ViewRef_$1(view);\n                    ref.attachToViewContainerRef(this);\n                    return ref;\n                }\n                return null;\n            }\n        }, {\n            key: 'createEmbeddedView',\n            value: function createEmbeddedView(templateRef, context, index) {\n                var /** @type {?} */viewRef = templateRef.createEmbeddedView(context || {});\n                this.insert(viewRef, index);\n                return viewRef;\n            }\n        }, {\n            key: 'createComponent',\n            value: function createComponent(componentFactory, index, injector, projectableNodes) {\n                var /** @type {?} */contextInjector = injector || this.parentInjector;\n                var /** @type {?} */componentRef = componentFactory.create(contextInjector, projectableNodes);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            }\n        }, {\n            key: 'insert',\n            value: function insert(viewRef, index) {\n                var /** @type {?} */viewRef_ = viewRef;\n                var /** @type {?} */viewData = viewRef_._view;\n                attachEmbeddedView(this._view, this._data, index, viewData);\n                viewRef_.attachToViewContainerRef(this);\n                return viewRef;\n            }\n        }, {\n            key: 'move',\n            value: function move(viewRef, currentIndex) {\n                var /** @type {?} */previousIndex = this._data.embeddedViews.indexOf(viewRef._view);\n                moveEmbeddedView(this._data, previousIndex, currentIndex);\n                return viewRef;\n            }\n        }, {\n            key: 'indexOf',\n            value: function indexOf(viewRef) {\n                return this._data.embeddedViews.indexOf(viewRef._view);\n            }\n        }, {\n            key: 'remove',\n            value: function remove(index) {\n                var /** @type {?} */viewData = detachEmbeddedView(this._data, index);\n                if (viewData) {\n                    Services.destroyView(viewData);\n                }\n            }\n        }, {\n            key: 'detach',\n            value: function detach(index) {\n                var /** @type {?} */view = detachEmbeddedView(this._data, index);\n                return view ? new ViewRef_$1(view) : null;\n            }\n        }, {\n            key: 'element',\n            get: function get() {\n                return new ElementRef(this._data.renderElement);\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return new Injector_(this._view, this._elDef);\n            }\n        }, {\n            key: 'parentInjector',\n            get: function get() {\n                var /** @type {?} */view = this._view;\n                var /** @type {?} */elDef = this._elDef.parent;\n                while (!elDef && view) {\n                    elDef = viewParentEl(view);\n                    view = view.parent;\n                }\n                return view ? new Injector_(view, elDef) : this._view.root.injector;\n            }\n        }, {\n            key: 'length',\n            get: function get() {\n                return this._data.embeddedViews.length;\n            }\n        }]);\n\n        return ViewContainerRef_$1;\n    }();\n\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function createChangeDetectorRef(view) {\n        return new ViewRef_$1(view);\n    }\n\n    var ViewRef_$1 = function () {\n        /**\n         * @param {?} _view\n         */\n        function ViewRef_$1(_view) {\n            _classCallCheck(this, ViewRef_$1);\n\n            this._view = _view;\n            this._viewContainerRef = null;\n            this._appRef = null;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ViewRef_$1, [{\n            key: 'markForCheck',\n            value: function markForCheck() {\n                markParentViewsForCheck(this._view);\n            }\n        }, {\n            key: 'detach',\n            value: function detach() {\n                this._view.state &= ~ViewState.ChecksEnabled;\n            }\n        }, {\n            key: 'detectChanges',\n            value: function detectChanges() {\n                Services.checkAndUpdateView(this._view);\n            }\n        }, {\n            key: 'checkNoChanges',\n            value: function checkNoChanges() {\n                Services.checkNoChangesView(this._view);\n            }\n        }, {\n            key: 'reattach',\n            value: function reattach() {\n                this._view.state |= ViewState.ChecksEnabled;\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(callback) {\n                if (!this._view.disposables) {\n                    this._view.disposables = [];\n                }\n                this._view.disposables.push( /** @type {?} */callback);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                if (this._appRef) {\n                    this._appRef.detachView(this);\n                } else if (this._viewContainerRef) {\n                    this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n                }\n                Services.destroyView(this._view);\n            }\n        }, {\n            key: 'detachFromAppRef',\n            value: function detachFromAppRef() {\n                this._appRef = null;\n                renderDetachView(this._view);\n                Services.dirtyParentQueries(this._view);\n            }\n        }, {\n            key: 'attachToAppRef',\n            value: function attachToAppRef(appRef) {\n                if (this._viewContainerRef) {\n                    throw new Error('This view is already attached to a ViewContainer!');\n                }\n                this._appRef = appRef;\n            }\n        }, {\n            key: 'attachToViewContainerRef',\n            value: function attachToViewContainerRef(vcRef) {\n                if (this._appRef) {\n                    throw new Error('This view is already attached directly to the ApplicationRef!');\n                }\n                this._viewContainerRef = vcRef;\n            }\n        }, {\n            key: 'rootNodes',\n            get: function get() {\n                return rootRenderNodes(this._view);\n            }\n        }, {\n            key: 'context',\n            get: function get() {\n                return this._view.context;\n            }\n        }, {\n            key: 'destroyed',\n            get: function get() {\n                return (this._view.state & ViewState.Destroyed) !== 0;\n            }\n        }]);\n\n        return ViewRef_$1;\n    }();\n\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @return {?}\n     */\n    function createTemplateRef(view, def) {\n        return new TemplateRef_$1(view, def);\n    }\n\n    var TemplateRef_$1 = function (_TemplateRef2) {\n        _inherits(TemplateRef_$1, _TemplateRef2);\n\n        /**\n         * @param {?} _parentView\n         * @param {?} _def\n         */\n        function TemplateRef_$1(_parentView, _def) {\n            _classCallCheck(this, TemplateRef_$1);\n\n            var _this30 = _possibleConstructorReturn(this, (TemplateRef_$1.__proto__ || Object.getPrototypeOf(TemplateRef_$1)).call(this));\n\n            _this30._parentView = _parentView;\n            _this30._def = _def;\n            return _this30;\n        }\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n\n\n        _createClass(TemplateRef_$1, [{\n            key: 'createEmbeddedView',\n            value: function createEmbeddedView(context) {\n                return new ViewRef_$1(Services.createEmbeddedView(this._parentView, this._def, context));\n            }\n        }, {\n            key: 'elementRef',\n            get: function get() {\n                return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);\n            }\n        }]);\n\n        return TemplateRef_$1;\n    }(TemplateRef);\n\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     * @return {?}\n     */\n    function createInjector(view, elDef) {\n        return new Injector_(view, elDef);\n    }\n\n    var Injector_ = function () {\n        /**\n         * @param {?} view\n         * @param {?} elDef\n         */\n        function Injector_(view, elDef) {\n            _classCallCheck(this, Injector_);\n\n            this.view = view;\n            this.elDef = elDef;\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n\n\n        _createClass(Injector_, [{\n            key: 'get',\n            value: function get(token) {\n                var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;\n\n                var /** @type {?} */allowPrivateServices = (this.elDef.flags & NodeFlags.HasComponent) !== 0;\n                return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: DepFlags.None, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n            }\n        }]);\n\n        return Injector_;\n    }();\n\n    /**\n     * @param {?} view\n     * @param {?} index\n     * @return {?}\n     */\n    function nodeValue(view, index) {\n        var /** @type {?} */def = view.def.nodes[index];\n        switch (def.type) {\n            case NodeType.Element:\n                if (def.element.template) {\n                    return createTemplateRef(view, def);\n                } else {\n                    return asElementData(view, def.index).renderElement;\n                }\n            case NodeType.Text:\n                return asTextData(view, def.index).renderText;\n            case NodeType.Directive:\n            case NodeType.Pipe:\n            case NodeType.Provider:\n                return asProviderData(view, def.index).instance;\n        }\n        return undefined;\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function createRendererV1(view) {\n        return new RendererAdapter(view.renderer);\n    }\n\n    var RendererAdapter = function () {\n        /**\n         * @param {?} delegate\n         */\n        function RendererAdapter(delegate) {\n            _classCallCheck(this, RendererAdapter);\n\n            this.delegate = delegate;\n        }\n        /**\n         * @param {?} selectorOrNode\n         * @return {?}\n         */\n\n\n        _createClass(RendererAdapter, [{\n            key: 'selectRootElement',\n            value: function selectRootElement(selectorOrNode) {\n                return this.delegate.selectRootElement(selectorOrNode);\n            }\n        }, {\n            key: 'createElement',\n            value: function createElement(parent, namespaceAndName) {\n                var _splitNamespace7 = splitNamespace(namespaceAndName),\n                    _splitNamespace8 = _slicedToArray(_splitNamespace7, 2),\n                    ns = _splitNamespace8[0],\n                    name = _splitNamespace8[1];\n\n                var /** @type {?} */el = this.delegate.createElement(name, ns);\n                if (parent) {\n                    this.delegate.appendChild(parent, el);\n                }\n                return el;\n            }\n        }, {\n            key: 'createViewRoot',\n            value: function createViewRoot(hostElement) {\n                return hostElement;\n            }\n        }, {\n            key: 'createTemplateAnchor',\n            value: function createTemplateAnchor(parentElement) {\n                var /** @type {?} */comment = this.delegate.createComment('');\n                if (parentElement) {\n                    this.delegate.appendChild(parentElement, comment);\n                }\n                return comment;\n            }\n        }, {\n            key: 'createText',\n            value: function createText(parentElement, value) {\n                var /** @type {?} */node = this.delegate.createText(value);\n                if (parentElement) {\n                    this.delegate.appendChild(parentElement, node);\n                }\n                return node;\n            }\n        }, {\n            key: 'projectNodes',\n            value: function projectNodes(parentElement, nodes) {\n                for (var /** @type {?} */i = 0; i < nodes.length; i++) {\n                    this.delegate.appendChild(parentElement, nodes[i]);\n                }\n            }\n        }, {\n            key: 'attachViewAfter',\n            value: function attachViewAfter(node, viewRootNodes) {\n                var /** @type {?} */parentElement = this.delegate.parentNode(node);\n                var /** @type {?} */nextSibling = this.delegate.nextSibling(node);\n                for (var /** @type {?} */i = 0; i < viewRootNodes.length; i++) {\n                    this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n                }\n            }\n        }, {\n            key: 'detachView',\n            value: function detachView(viewRootNodes) {\n                for (var /** @type {?} */i = 0; i < viewRootNodes.length; i++) {\n                    var /** @type {?} */node = viewRootNodes[i];\n                    var /** @type {?} */parentElement = this.delegate.parentNode(node);\n                    this.delegate.removeChild(parentElement, node);\n                }\n            }\n        }, {\n            key: 'destroyView',\n            value: function destroyView(hostElement, viewAllNodes) {\n                for (var /** @type {?} */i = 0; i < viewAllNodes.length; i++) {\n                    this.delegate.destroyNode(viewAllNodes[i]);\n                }\n            }\n        }, {\n            key: 'listen',\n            value: function listen(renderElement, name, callback) {\n                return this.delegate.listen(renderElement, name, /** @type {?} */callback);\n            }\n        }, {\n            key: 'listenGlobal',\n            value: function listenGlobal(target, name, callback) {\n                return this.delegate.listen(target, name, /** @type {?} */callback);\n            }\n        }, {\n            key: 'setElementProperty',\n            value: function setElementProperty(renderElement, propertyName, propertyValue) {\n                this.delegate.setProperty(renderElement, propertyName, propertyValue);\n            }\n        }, {\n            key: 'setElementAttribute',\n            value: function setElementAttribute(renderElement, namespaceAndName, attributeValue) {\n                var _splitNamespace9 = splitNamespace(namespaceAndName),\n                    _splitNamespace10 = _slicedToArray(_splitNamespace9, 2),\n                    ns = _splitNamespace10[0],\n                    name = _splitNamespace10[1];\n\n                if (attributeValue != null) {\n                    this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n                } else {\n                    this.delegate.removeAttribute(renderElement, name, ns);\n                }\n            }\n        }, {\n            key: 'setBindingDebugInfo',\n            value: function setBindingDebugInfo(renderElement, propertyName, propertyValue) {}\n        }, {\n            key: 'setElementClass',\n            value: function setElementClass(renderElement, className, isAdd) {\n                if (isAdd) {\n                    this.delegate.addClass(renderElement, className);\n                } else {\n                    this.delegate.removeClass(renderElement, className);\n                }\n            }\n        }, {\n            key: 'setElementStyle',\n            value: function setElementStyle(renderElement, styleName, styleValue) {\n                if (styleValue != null) {\n                    this.delegate.setStyle(renderElement, styleName, styleValue, false, false);\n                } else {\n                    this.delegate.removeStyle(renderElement, styleName, false);\n                }\n            }\n        }, {\n            key: 'invokeElementMethod',\n            value: function invokeElementMethod(renderElement, methodName, args) {\n                renderElement[methodName].apply(renderElement, args);\n            }\n        }, {\n            key: 'setText',\n            value: function setText(renderNode, text) {\n                this.delegate.setValue(renderNode, text);\n            }\n        }, {\n            key: 'animate',\n            value: function animate() {\n                return new NoOpAnimationPlayer();\n            }\n        }]);\n\n        return RendererAdapter;\n    }();\n\n    var /** @type {?} */RendererV1TokenKey = tokenKey(RendererV1);\n    var /** @type {?} */RendererV2TokenKey = tokenKey(RendererV2);\n    var /** @type {?} */ElementRefTokenKey = tokenKey(ElementRef);\n    var /** @type {?} */ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n    var /** @type {?} */TemplateRefTokenKey = tokenKey(TemplateRef);\n    var /** @type {?} */ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n    var /** @type {?} */InjectorRefTokenKey = tokenKey(Injector);\n    var /** @type {?} */NOT_CREATED = new Object();\n    /**\n     * @param {?} flags\n     * @param {?} matchedQueries\n     * @param {?} childCount\n     * @param {?} ctor\n     * @param {?} deps\n     * @param {?=} props\n     * @param {?=} outputs\n     * @return {?}\n     */\n    function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n        var /** @type {?} */bindings = [];\n        if (props) {\n            for (var /** @type {?} */prop in props) {\n                var _props$prop = _slicedToArray(props[prop], 2),\n                    bindingIndex = _props$prop[0],\n                    nonMinifiedName = _props$prop[1];\n\n                bindings[bindingIndex] = {\n                    type: BindingType.DirectiveProperty,\n                    name: prop, nonMinifiedName: nonMinifiedName,\n                    ns: undefined,\n                    securityContext: undefined,\n                    suffix: undefined\n                };\n            }\n        }\n        var /** @type {?} */outputDefs = [];\n        if (outputs) {\n            for (var /** @type {?} */propName in outputs) {\n                outputDefs.push({ type: OutputType.DirectiveOutput, propName: propName, target: null, eventName: outputs[propName] });\n            }\n        }\n        return _def(NodeType.Directive, flags, matchedQueries, childCount, ProviderType.Class, ctor, ctor, deps, bindings, outputDefs);\n    }\n    /**\n     * @param {?} flags\n     * @param {?} ctor\n     * @param {?} deps\n     * @return {?}\n     */\n    function pipeDef(flags, ctor, deps) {\n        return _def(NodeType.Pipe, flags, null, 0, ProviderType.Class, ctor, ctor, deps);\n    }\n    /**\n     * @param {?} flags\n     * @param {?} matchedQueries\n     * @param {?} type\n     * @param {?} token\n     * @param {?} value\n     * @param {?} deps\n     * @return {?}\n     */\n    function providerDef(flags, matchedQueries, type, token, value, deps) {\n        return _def(NodeType.Provider, flags, matchedQueries, 0, type, token, value, deps);\n    }\n    /**\n     * @param {?} type\n     * @param {?} flags\n     * @param {?} matchedQueriesDsl\n     * @param {?} childCount\n     * @param {?} providerType\n     * @param {?} token\n     * @param {?} value\n     * @param {?} deps\n     * @param {?=} bindings\n     * @param {?=} outputs\n     * @return {?}\n     */\n    function _def(type, flags, matchedQueriesDsl, childCount, providerType, token, value, deps, bindings, outputs) {\n        var _splitMatchedQueriesD3 = splitMatchedQueriesDsl(matchedQueriesDsl),\n            matchedQueries = _splitMatchedQueriesD3.matchedQueries,\n            references = _splitMatchedQueriesD3.references,\n            matchedQueryIds = _splitMatchedQueriesD3.matchedQueryIds;\n\n        if (!outputs) {\n            outputs = [];\n        }\n        if (!bindings) {\n            bindings = [];\n        }\n        var /** @type {?} */depDefs = deps.map(function (value) {\n            var /** @type {?} */token = void 0;\n            var /** @type {?} */flags = void 0;\n            if (Array.isArray(value)) {\n                var _value = _slicedToArray(value, 2);\n\n                flags = _value[0];\n                token = _value[1];\n            } else {\n                flags = DepFlags.None;\n                token = value;\n            }\n            return { flags: flags, token: token, tokenKey: tokenKey(token) };\n        });\n        return {\n            type: type,\n            // will bet set by the view definition\n            index: undefined,\n            reverseChildIndex: undefined,\n            parent: undefined,\n            renderParent: undefined,\n            bindingIndex: undefined,\n            outputIndex: undefined,\n            // regular values\n            flags: flags,\n            childFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n            ngContentIndex: undefined, childCount: childCount, bindings: bindings, outputs: outputs,\n            element: undefined,\n            provider: { type: providerType, token: token, tokenKey: tokenKey(token), value: value, deps: depDefs },\n            text: undefined,\n            pureExpression: undefined,\n            query: undefined,\n            ngContent: undefined\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @return {?}\n     */\n    function createProviderInstance(view, def) {\n        return def.flags & NodeFlags.LazyProvider ? NOT_CREATED : _createProviderInstance(view, def);\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @return {?}\n     */\n    function createPipeInstance(view, def) {\n        // deps are looked up from component.\n        var /** @type {?} */compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        // pipes can see the private services of the component\n        var /** @type {?} */allowPrivateServices = true;\n        // pipes are always eager and classes!\n        return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @return {?}\n     */\n    function createDirectiveInstance(view, def) {\n        // components can see other private services, other directives can't.\n        var /** @type {?} */allowPrivateServices = (def.flags & NodeFlags.IsComponent) > 0;\n        var /** @type {?} */providerDef = def.provider;\n        // directives are always eager and classes!\n        var /** @type {?} */instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);\n        if (def.outputs.length) {\n            for (var /** @type {?} */i = 0; i < def.outputs.length; i++) {\n                var /** @type {?} */output = def.outputs[i];\n                var /** @type {?} */subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.index, output.eventName));\n                view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n        }\n        return instance;\n    }\n    /**\n     * @param {?} view\n     * @param {?} index\n     * @param {?} eventName\n     * @return {?}\n     */\n    function eventHandlerClosure(view, index, eventName) {\n        return function (event) {\n            return dispatchEvent(view, index, eventName, event);\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} v0\n     * @param {?} v1\n     * @param {?} v2\n     * @param {?} v3\n     * @param {?} v4\n     * @param {?} v5\n     * @param {?} v6\n     * @param {?} v7\n     * @param {?} v8\n     * @param {?} v9\n     * @return {?}\n     */\n    function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */providerData = asProviderData(view, def.index);\n        var /** @type {?} */directive = providerData.instance;\n        var /** @type {?} */changed = false;\n        var /** @type {?} */changes = void 0;\n        var /** @type {?} */bindLen = def.bindings.length;\n        if (bindLen > 0 && checkBinding$1(view, def, 0, v0)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 0, v0, changes);\n        }\n        ;\n        if (bindLen > 1 && checkBinding$1(view, def, 1, v1)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 1, v1, changes);\n        }\n        ;\n        if (bindLen > 2 && checkBinding$1(view, def, 2, v2)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 2, v2, changes);\n        }\n        ;\n        if (bindLen > 3 && checkBinding$1(view, def, 3, v3)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 3, v3, changes);\n        }\n        ;\n        if (bindLen > 4 && checkBinding$1(view, def, 4, v4)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 4, v4, changes);\n        }\n        ;\n        if (bindLen > 5 && checkBinding$1(view, def, 5, v5)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 5, v5, changes);\n        }\n        ;\n        if (bindLen > 6 && checkBinding$1(view, def, 6, v6)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 6, v6, changes);\n        }\n        ;\n        if (bindLen > 7 && checkBinding$1(view, def, 7, v7)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 7, v7, changes);\n        }\n        ;\n        if (bindLen > 8 && checkBinding$1(view, def, 8, v8)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 8, v8, changes);\n        }\n        ;\n        if (bindLen > 9 && checkBinding$1(view, def, 9, v9)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 9, v9, changes);\n        }\n        ;\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if (view.state & ViewState.FirstCheck && def.flags & NodeFlags.OnInit) {\n            directive.ngOnInit();\n        }\n        if (def.flags & NodeFlags.DoCheck) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} values\n     * @return {?}\n     */\n    function checkAndUpdateDirectiveDynamic(view, def, values) {\n        var /** @type {?} */providerData = asProviderData(view, def.index);\n        var /** @type {?} */directive = providerData.instance;\n        var /** @type {?} */changed = false;\n        var /** @type {?} */changes = void 0;\n        for (var /** @type {?} */i = 0; i < values.length; i++) {\n            if (checkBinding$1(view, def, i, values[i])) {\n                changed = true;\n                changes = updateProp(view, providerData, def, i, values[i], changes);\n            }\n        }\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if (view.state & ViewState.FirstCheck && def.flags & NodeFlags.OnInit) {\n            directive.ngOnInit();\n        }\n        if (def.flags & NodeFlags.DoCheck) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @return {?}\n     */\n    function _createProviderInstance(view, def) {\n        // private services can see other private services\n        var /** @type {?} */allowPrivateServices = (def.flags & NodeFlags.PrivateProvider) > 0;\n        var /** @type {?} */providerDef = def.provider;\n        var /** @type {?} */injectable = void 0;\n        switch (providerDef.type) {\n            case ProviderType.Class:\n                injectable = createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n                break;\n            case ProviderType.Factory:\n                injectable = callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n                break;\n            case ProviderType.UseExisting:\n                injectable = resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);\n                break;\n            case ProviderType.Value:\n                injectable = providerDef.value;\n                break;\n        }\n        return injectable;\n    }\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     * @param {?} allowPrivateServices\n     * @param {?} ctor\n     * @param {?} deps\n     * @return {?}\n     */\n    function createClass(view, elDef, allowPrivateServices, ctor, deps) {\n        var /** @type {?} */len = deps.length;\n        var /** @type {?} */injectable = void 0;\n        switch (len) {\n            case 0:\n                injectable = new ctor();\n                break;\n            case 1:\n                injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n                break;\n            case 2:\n                injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n                break;\n            case 3:\n                injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n                break;\n            default:\n                var /** @type {?} */depValues = new Array(len);\n                for (var /** @type {?} */i = 0; i < len; i++) {\n                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n                }\n                injectable = new (Function.prototype.bind.apply(ctor, [null].concat(depValues)))();\n        }\n        return injectable;\n    }\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     * @param {?} allowPrivateServices\n     * @param {?} factory\n     * @param {?} deps\n     * @return {?}\n     */\n    function callFactory(view, elDef, allowPrivateServices, factory, deps) {\n        var /** @type {?} */len = deps.length;\n        var /** @type {?} */injectable = void 0;\n        switch (len) {\n            case 0:\n                injectable = factory();\n                break;\n            case 1:\n                injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n                break;\n            case 2:\n                injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n                break;\n            case 3:\n                injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n                break;\n            default:\n                var /** @type {?} */depValues = Array(len);\n                for (var /** @type {?} */i = 0; i < len; i++) {\n                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n                }\n                injectable = factory.apply(undefined, _toConsumableArray(depValues));\n        }\n        return injectable;\n    }\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     * @param {?} allowPrivateServices\n     * @param {?} depDef\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function resolveDep(view, elDef, allowPrivateServices, depDef) {\n        var notFoundValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Injector.THROW_IF_NOT_FOUND;\n\n        if (depDef.flags & DepFlags.Value) {\n            return depDef.token;\n        }\n        var /** @type {?} */startView = view;\n        if (depDef.flags & DepFlags.Optional) {\n            notFoundValue = null;\n        }\n        var /** @type {?} */tokenKey = depDef.tokenKey;\n        if (depDef.flags & DepFlags.SkipSelf) {\n            allowPrivateServices = false;\n            elDef = elDef.parent;\n        }\n        while (view) {\n            if (elDef) {\n                switch (tokenKey) {\n                    case RendererV1TokenKey:\n                        {\n                            var /** @type {?} */compView = findCompView(view, elDef, allowPrivateServices);\n                            return createRendererV1(compView);\n                        }\n                    case RendererV2TokenKey:\n                        {\n                            var /** @type {?} */_compView = findCompView(view, elDef, allowPrivateServices);\n                            return _compView.renderer;\n                        }\n                    case ElementRefTokenKey:\n                        return new ElementRef(asElementData(view, elDef.index).renderElement);\n                    case ViewContainerRefTokenKey:\n                        return createViewContainerRef(view, elDef);\n                    case TemplateRefTokenKey:\n                        {\n                            if (elDef.element.template) {\n                                return createTemplateRef(view, elDef);\n                            }\n                            break;\n                        }\n                    case ChangeDetectorRefTokenKey:\n                        {\n                            var /** @type {?} */cdView = findCompView(view, elDef, allowPrivateServices);\n                            return createChangeDetectorRef(cdView);\n                        }\n                    case InjectorRefTokenKey:\n                        return createInjector(view, elDef);\n                    default:\n                        var /** @type {?} */_providerDef = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey];\n                        if (_providerDef) {\n                            var /** @type {?} */providerData = asProviderData(view, _providerDef.index);\n                            if (providerData.instance === NOT_CREATED) {\n                                providerData.instance = _createProviderInstance(view, _providerDef);\n                            }\n                            return providerData.instance;\n                        }\n                }\n            }\n            allowPrivateServices = isComponentView(view);\n            elDef = viewParentEl(view);\n            view = view.parent;\n        }\n        return startView.root.injector.get(depDef.token, notFoundValue);\n    }\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     * @param {?} allowPrivateServices\n     * @return {?}\n     */\n    function findCompView(view, elDef, allowPrivateServices) {\n        var /** @type {?} */compView = void 0;\n        if (allowPrivateServices) {\n            compView = asElementData(view, elDef.index).componentView;\n        } else {\n            compView = view;\n            while (compView.parent && !isComponentView(compView)) {\n                compView = compView.parent;\n            }\n        }\n        return compView;\n    }\n    /**\n     * @param {?} view\n     * @param {?} providerData\n     * @param {?} def\n     * @param {?} bindingIdx\n     * @param {?} value\n     * @param {?} changes\n     * @return {?}\n     */\n    function updateProp(view, providerData, def, bindingIdx, value, changes) {\n        if (def.flags & NodeFlags.IsComponent) {\n            var /** @type {?} */compView = asElementData(view, def.parent.index).componentView;\n            if (compView.def.flags & ViewFlags.OnPush) {\n                compView.state |= ViewState.ChecksEnabled;\n            }\n        }\n        var /** @type {?} */binding = def.bindings[bindingIdx];\n        var /** @type {?} */propName = binding.name;\n        // Note: This is still safe with Closure Compiler as\n        // the user passed in the property name as an object has to `providerDef`,\n        // so Closure Compiler will have renamed the property correctly already.\n        providerData.instance[propName] = value;\n        if (def.flags & NodeFlags.OnChanges) {\n            changes = changes || {};\n            var /** @type {?} */oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n            var /** @type {?} */_binding = def.bindings[bindingIdx];\n            changes[_binding.nonMinifiedName] = new SimpleChange(oldValue, value, (view.state & ViewState.FirstCheck) !== 0);\n        }\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return changes;\n    }\n    /**\n     * @param {?} view\n     * @param {?} lifecycles\n     * @return {?}\n     */\n    function callLifecycleHooksChildrenFirst(view, lifecycles) {\n        if (!(view.def.nodeFlags & lifecycles)) {\n            return;\n        }\n        var /** @type {?} */len = view.def.nodes.length;\n        for (var /** @type {?} */i = 0; i < len; i++) {\n            // We use the reverse child oreder to call providers of children first.\n            var /** @type {?} */nodeDef = view.def.reverseChildNodes[i];\n            var /** @type {?} */nodeIndex = nodeDef.index;\n            if (nodeDef.flags & lifecycles) {\n                // a leaf\n                Services.setCurrentNode(view, nodeIndex);\n                callProviderLifecycles(asProviderData(view, nodeIndex).instance, nodeDef.flags & lifecycles);\n            } else if ((nodeDef.childFlags & lifecycles) === 0) {\n                // a parent with leafs\n                // no child matches one of the lifecycles,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    /**\n     * @param {?} provider\n     * @param {?} lifecycles\n     * @return {?}\n     */\n    function callProviderLifecycles(provider, lifecycles) {\n        if (lifecycles & NodeFlags.AfterContentInit) {\n            provider.ngAfterContentInit();\n        }\n        if (lifecycles & NodeFlags.AfterContentChecked) {\n            provider.ngAfterContentChecked();\n        }\n        if (lifecycles & NodeFlags.AfterViewInit) {\n            provider.ngAfterViewInit();\n        }\n        if (lifecycles & NodeFlags.AfterViewChecked) {\n            provider.ngAfterViewChecked();\n        }\n        if (lifecycles & NodeFlags.OnDestroy) {\n            provider.ngOnDestroy();\n        }\n    }\n\n    /**\n     * @param {?} argCount\n     * @return {?}\n     */\n    function purePipeDef(argCount) {\n        // argCount + 1 to include the pipe as first arg\n        return _pureExpressionDef(PureExpressionType.Pipe, new Array(argCount + 1));\n    }\n    /**\n     * @param {?} argCount\n     * @return {?}\n     */\n    function pureArrayDef(argCount) {\n        return _pureExpressionDef(PureExpressionType.Array, new Array(argCount));\n    }\n    /**\n     * @param {?} propertyNames\n     * @return {?}\n     */\n    function pureObjectDef(propertyNames) {\n        return _pureExpressionDef(PureExpressionType.Object, propertyNames);\n    }\n    /**\n     * @param {?} type\n     * @param {?} propertyNames\n     * @return {?}\n     */\n    function _pureExpressionDef(type, propertyNames) {\n        var /** @type {?} */bindings = new Array(propertyNames.length);\n        for (var /** @type {?} */i = 0; i < propertyNames.length; i++) {\n            var /** @type {?} */prop = propertyNames[i];\n            bindings[i] = {\n                type: BindingType.PureExpressionProperty,\n                name: prop,\n                ns: undefined,\n                nonMinifiedName: prop,\n                securityContext: undefined,\n                suffix: undefined\n            };\n        }\n        return {\n            type: NodeType.PureExpression,\n            // will bet set by the view definition\n            index: undefined,\n            reverseChildIndex: undefined,\n            parent: undefined,\n            renderParent: undefined,\n            bindingIndex: undefined,\n            outputIndex: undefined,\n            // regular values\n            flags: 0,\n            childFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            ngContentIndex: undefined,\n            childCount: 0, bindings: bindings,\n            outputs: [],\n            element: undefined,\n            provider: undefined,\n            text: undefined,\n            pureExpression: { type: type },\n            query: undefined,\n            ngContent: undefined\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @return {?}\n     */\n    function createPureExpression(view, def) {\n        return { value: undefined };\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} v0\n     * @param {?} v1\n     * @param {?} v2\n     * @param {?} v3\n     * @param {?} v4\n     * @param {?} v5\n     * @param {?} v6\n     * @param {?} v7\n     * @param {?} v8\n     * @param {?} v9\n     * @return {?}\n     */\n    function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */bindings = def.bindings;\n        var /** @type {?} */changed = false;\n        var /** @type {?} */bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;\n        if (changed) {\n            var /** @type {?} */data = asPureExpressionData(view, def.index);\n            var /** @type {?} */value = void 0;\n            switch (def.pureExpression.type) {\n                case PureExpressionType.Array:\n                    value = new Array(bindings.length);\n                    if (bindLen > 0) value[0] = v0;\n                    if (bindLen > 1) value[1] = v1;\n                    if (bindLen > 2) value[2] = v2;\n                    if (bindLen > 3) value[3] = v3;\n                    if (bindLen > 4) value[4] = v4;\n                    if (bindLen > 5) value[5] = v5;\n                    if (bindLen > 6) value[6] = v6;\n                    if (bindLen > 7) value[7] = v7;\n                    if (bindLen > 8) value[8] = v8;\n                    if (bindLen > 9) value[9] = v9;\n                    break;\n                case PureExpressionType.Object:\n                    value = {};\n                    if (bindLen > 0) value[bindings[0].name] = v0;\n                    if (bindLen > 1) value[bindings[1].name] = v1;\n                    if (bindLen > 2) value[bindings[2].name] = v2;\n                    if (bindLen > 3) value[bindings[3].name] = v3;\n                    if (bindLen > 4) value[bindings[4].name] = v4;\n                    if (bindLen > 5) value[bindings[5].name] = v5;\n                    if (bindLen > 6) value[bindings[6].name] = v6;\n                    if (bindLen > 7) value[bindings[7].name] = v7;\n                    if (bindLen > 8) value[bindings[8].name] = v8;\n                    if (bindLen > 9) value[bindings[9].name] = v9;\n                    break;\n                case PureExpressionType.Pipe:\n                    var /** @type {?} */pipe = v0;\n                    switch (bindLen) {\n                        case 1:\n                            value = pipe.transform(v0);\n                            break;\n                        case 2:\n                            value = pipe.transform(v1);\n                            break;\n                        case 3:\n                            value = pipe.transform(v1, v2);\n                            break;\n                        case 4:\n                            value = pipe.transform(v1, v2, v3);\n                            break;\n                        case 5:\n                            value = pipe.transform(v1, v2, v3, v4);\n                            break;\n                        case 6:\n                            value = pipe.transform(v1, v2, v3, v4, v5);\n                            break;\n                        case 7:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                            break;\n                        case 8:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                            break;\n                        case 9:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                            break;\n                        case 10:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                            break;\n                    }\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} values\n     * @return {?}\n     */\n    function checkAndUpdatePureExpressionDynamic(view, def, values) {\n        var /** @type {?} */bindings = def.bindings;\n        var /** @type {?} */changed = false;\n        for (var /** @type {?} */i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var /** @type {?} */data = asPureExpressionData(view, def.index);\n            var /** @type {?} */value = void 0;\n            switch (def.pureExpression.type) {\n                case PureExpressionType.Array:\n                    value = values;\n                    break;\n                case PureExpressionType.Object:\n                    value = {};\n                    for (var /** @type {?} */_i3 = 0; _i3 < values.length; _i3++) {\n                        value[bindings[_i3].name] = values[_i3];\n                    }\n                    break;\n                case PureExpressionType.Pipe:\n                    var /** @type {?} */pipe = values[0];\n                    var /** @type {?} */params = values.slice(1);\n                    value = pipe.transform.apply(pipe, _toConsumableArray(params));\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n\n    /**\n     * @param {?} flags\n     * @param {?} id\n     * @param {?} bindings\n     * @return {?}\n     */\n    function queryDef(flags, id, bindings) {\n        var /** @type {?} */bindingDefs = [];\n        for (var /** @type {?} */propName in bindings) {\n            var /** @type {?} */bindingType = bindings[propName];\n            bindingDefs.push({ propName: propName, bindingType: bindingType });\n        }\n        return {\n            type: NodeType.Query,\n            // will bet set by the view definition\n            index: undefined,\n            reverseChildIndex: undefined,\n            parent: undefined,\n            renderParent: undefined,\n            bindingIndex: undefined,\n            outputIndex: undefined,\n            // regular values\n            flags: flags,\n            childFlags: 0,\n            childMatchedQueries: 0,\n            ngContentIndex: undefined,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            childCount: 0,\n            bindings: [],\n            outputs: [],\n            element: undefined,\n            provider: undefined,\n            text: undefined,\n            pureExpression: undefined,\n            query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n            ngContent: undefined\n        };\n    }\n    /**\n     * @return {?}\n     */\n    function createQuery() {\n        return new QueryList();\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function dirtyParentQueries(view) {\n        var /** @type {?} */queryIds = view.def.nodeMatchedQueries;\n        while (view.parent && isEmbeddedView(view)) {\n            var /** @type {?} */tplDef = view.parentNodeDef;\n            view = view.parent;\n            // content queries\n            var /** @type {?} */end = tplDef.index + tplDef.childCount;\n            for (var /** @type {?} */i = 0; i <= end; i++) {\n                var /** @type {?} */nodeDef = view.def.nodes[i];\n                if (nodeDef.flags & NodeFlags.HasContentQuery && nodeDef.flags & NodeFlags.HasDynamicQuery && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {\n                    asQueryList(view, i).setDirty();\n                }\n                if (nodeDef.type === NodeType.Element && i + nodeDef.childCount < tplDef.index || !(nodeDef.childFlags & NodeFlags.HasContentQuery) || !(nodeDef.childFlags & NodeFlags.HasDynamicQuery)) {\n                    // skip elements that don't contain the template element or no query.\n                    i += nodeDef.childCount;\n                }\n            }\n        }\n        // view queries\n        if (view.def.nodeFlags & NodeFlags.HasViewQuery) {\n            for (var /** @type {?} */_i4 = 0; _i4 < view.def.nodes.length; _i4++) {\n                var /** @type {?} */_nodeDef = view.def.nodes[_i4];\n                if (_nodeDef.flags & NodeFlags.HasViewQuery && _nodeDef.flags & NodeFlags.HasDynamicQuery) {\n                    asQueryList(view, _i4).setDirty();\n                }\n                // only visit the root nodes\n                _i4 += _nodeDef.childCount;\n            }\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @return {?}\n     */\n    function checkAndUpdateQuery(view, nodeDef) {\n        var /** @type {?} */queryList = asQueryList(view, nodeDef.index);\n        if (!queryList.dirty) {\n            return;\n        }\n        var /** @type {?} */directiveInstance = void 0;\n        var /** @type {?} */newValues = void 0;\n        if (nodeDef.flags & NodeFlags.HasContentQuery) {\n            var /** @type {?} */_elementDef = nodeDef.parent.parent;\n            newValues = calcQueryValues(view, _elementDef.index, _elementDef.index + _elementDef.childCount, nodeDef.query, []);\n            directiveInstance = asProviderData(view, nodeDef.parent.index).instance;\n        } else if (nodeDef.flags & NodeFlags.HasViewQuery) {\n            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);\n            directiveInstance = view.component;\n        }\n        queryList.reset(newValues);\n        var /** @type {?} */bindings = nodeDef.query.bindings;\n        var /** @type {?} */notify = false;\n        for (var /** @type {?} */i = 0; i < bindings.length; i++) {\n            var /** @type {?} */binding = bindings[i];\n            var /** @type {?} */boundValue = void 0;\n            switch (binding.bindingType) {\n                case QueryBindingType.First:\n                    boundValue = queryList.first;\n                    break;\n                case QueryBindingType.All:\n                    boundValue = queryList;\n                    notify = true;\n                    break;\n            }\n            directiveInstance[binding.propName] = boundValue;\n        }\n        if (notify) {\n            queryList.notifyOnChanges();\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} startIndex\n     * @param {?} endIndex\n     * @param {?} queryDef\n     * @param {?} values\n     * @return {?}\n     */\n    function calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n        for (var /** @type {?} */i = startIndex; i <= endIndex; i++) {\n            var /** @type {?} */nodeDef = view.def.nodes[i];\n            var /** @type {?} */valueType = nodeDef.matchedQueries[queryDef.id];\n            if (valueType != null) {\n                values.push(getQueryValue(view, nodeDef, valueType));\n            }\n            if (nodeDef.type === NodeType.Element && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                // check embedded views that were attached at the place of their template.\n                var /** @type {?} */elementData = asElementData(view, i);\n                var /** @type {?} */embeddedViews = elementData.embeddedViews;\n                if (embeddedViews) {\n                    for (var /** @type {?} */k = 0; k < embeddedViews.length; k++) {\n                        var /** @type {?} */embeddedView = embeddedViews[k];\n                        var /** @type {?} */dvc = declaredViewContainer(embeddedView);\n                        if (dvc && dvc === elementData) {\n                            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                        }\n                    }\n                }\n                var /** @type {?} */projectedViews = elementData.projectedViews;\n                if (projectedViews) {\n                    for (var /** @type {?} */_k2 = 0; _k2 < projectedViews.length; _k2++) {\n                        var /** @type {?} */projectedView = projectedViews[_k2];\n                        calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n                // if no child matches the query, skip the children.\n                i += nodeDef.childCount;\n            }\n        }\n        return values;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} queryValueType\n     * @return {?}\n     */\n    function getQueryValue(view, nodeDef, queryValueType) {\n        if (queryValueType != null) {\n            // a match\n            var /** @type {?} */value = void 0;\n            switch (queryValueType) {\n                case QueryValueType.RenderElement:\n                    value = asElementData(view, nodeDef.index).renderElement;\n                    break;\n                case QueryValueType.ElementRef:\n                    value = new ElementRef(asElementData(view, nodeDef.index).renderElement);\n                    break;\n                case QueryValueType.TemplateRef:\n                    value = createTemplateRef(view, nodeDef);\n                    break;\n                case QueryValueType.ViewContainerRef:\n                    value = createViewContainerRef(view, nodeDef);\n                    break;\n                case QueryValueType.Provider:\n                    value = asProviderData(view, nodeDef.index).instance;\n                    break;\n            }\n            return value;\n        }\n    }\n\n    /**\n     * @param {?} ngContentIndex\n     * @param {?} constants\n     * @return {?}\n     */\n    function textDef(ngContentIndex, constants) {\n        // skip the call to sliceErrorStack itself + the call to this function.\n        var /** @type {?} */source = isDevMode() ? sliceErrorStack(2, 3) : '';\n        var /** @type {?} */bindings = new Array(constants.length - 1);\n        for (var /** @type {?} */i = 1; i < constants.length; i++) {\n            bindings[i - 1] = {\n                type: BindingType.TextInterpolation,\n                name: undefined,\n                ns: undefined,\n                nonMinifiedName: undefined,\n                securityContext: undefined,\n                suffix: constants[i]\n            };\n        }\n        return {\n            type: NodeType.Text,\n            // will bet set by the view definition\n            index: undefined,\n            reverseChildIndex: undefined,\n            parent: undefined,\n            renderParent: undefined,\n            bindingIndex: undefined,\n            outputIndex: undefined,\n            // regular values\n            flags: 0,\n            childFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0, bindings: bindings,\n            outputs: [],\n            element: undefined,\n            provider: undefined,\n            text: { prefix: constants[0], source: source },\n            pureExpression: undefined,\n            query: undefined,\n            ngContent: undefined\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} renderHost\n     * @param {?} def\n     * @return {?}\n     */\n    function createText(view, renderHost, def) {\n        var /** @type {?} */renderNode = void 0;\n        var /** @type {?} */renderer = view.renderer;\n        renderNode = renderer.createText(def.text.prefix);\n        var /** @type {?} */parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, renderNode);\n        }\n        return { renderText: renderNode };\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} v0\n     * @param {?} v1\n     * @param {?} v2\n     * @param {?} v3\n     * @param {?} v4\n     * @param {?} v5\n     * @param {?} v6\n     * @param {?} v7\n     * @param {?} v8\n     * @param {?} v9\n     * @return {?}\n     */\n    function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */changed = false;\n        var /** @type {?} */bindings = def.bindings;\n        var /** @type {?} */bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;\n        if (changed) {\n            var /** @type {?} */value = def.text.prefix;\n            if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);\n            if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);\n            if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);\n            if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);\n            if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);\n            if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);\n            if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);\n            if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);\n            if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);\n            if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);\n            var /** @type {?} */_renderNode = asTextData(view, def.index).renderText;\n            view.renderer.setValue(_renderNode, value);\n        }\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} def\n     * @param {?} values\n     * @return {?}\n     */\n    function checkAndUpdateTextDynamic(view, def, values) {\n        var /** @type {?} */bindings = def.bindings;\n        var /** @type {?} */changed = false;\n        for (var /** @type {?} */i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var /** @type {?} */value = '';\n            for (var /** @type {?} */_i5 = 0; _i5 < values.length; _i5++) {\n                value = value + _addInterpolationPart(values[_i5], bindings[_i5]);\n            }\n            value = def.text.prefix + value;\n            var /** @type {?} */_renderNode2 = asTextData(view, def.index).renderText;\n            view.renderer.setValue(_renderNode2, value);\n        }\n        return changed;\n    }\n    /**\n     * @param {?} value\n     * @param {?} binding\n     * @return {?}\n     */\n    function _addInterpolationPart(value, binding) {\n        var /** @type {?} */valueStr = value != null ? value.toString() : '';\n        return valueStr + binding.suffix;\n    }\n\n    var /** @type {?} */NOOP$1 = function NOOP$1() {\n        return undefined;\n    };\n    /**\n     * @param {?} flags\n     * @param {?} nodes\n     * @param {?=} updateDirectives\n     * @param {?=} updateRenderer\n     * @return {?}\n     */\n    function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n        // clone nodes and set auto calculated values\n        if (nodes.length === 0) {\n            throw new Error('Illegal State: Views without nodes are not allowed!');\n        }\n        var /** @type {?} */reverseChildNodes = new Array(nodes.length);\n        var /** @type {?} */viewBindingCount = 0;\n        var /** @type {?} */viewDisposableCount = 0;\n        var /** @type {?} */viewNodeFlags = 0;\n        var /** @type {?} */viewMatchedQueries = 0;\n        var /** @type {?} */currentParent = null;\n        var /** @type {?} */currentElementHasPublicProviders = false;\n        var /** @type {?} */currentElementHasPrivateProviders = false;\n        var /** @type {?} */lastRenderRootNode = null;\n        for (var /** @type {?} */i = 0; i < nodes.length; i++) {\n            while (currentParent && i > currentParent.index + currentParent.childCount) {\n                var /** @type {?} */newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n            }\n            var /** @type {?} */node = nodes[i];\n            node.index = i;\n            node.parent = currentParent;\n            node.bindingIndex = viewBindingCount;\n            node.outputIndex = viewDisposableCount;\n            node.reverseChildIndex = calculateReverseChildIndex(currentParent, i, node.childCount, nodes.length);\n            // renderParent needs to account for ng-container!\n            var /** @type {?} */currentRenderParent = void 0;\n            if (currentParent && currentParent.type === NodeType.Element && !currentParent.element.name) {\n                currentRenderParent = currentParent.renderParent;\n            } else {\n                currentRenderParent = currentParent;\n            }\n            node.renderParent = currentRenderParent;\n            if (node.element) {\n                var /** @type {?} */elDef = node.element;\n                elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null);\n                elDef.allProviders = elDef.publicProviders;\n                // Note: We assume that all providers of an element are before any child element!\n                currentElementHasPublicProviders = false;\n                currentElementHasPrivateProviders = false;\n            }\n            reverseChildNodes[node.reverseChildIndex] = node;\n            validateNode(currentParent, node, nodes.length);\n            viewNodeFlags |= node.flags;\n            viewMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n            if (currentParent) {\n                currentParent.childFlags |= node.flags;\n                currentParent.childMatchedQueries |= node.matchedQueryIds;\n                if (node.element && node.element.template) {\n                    currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n                }\n            }\n            viewBindingCount += node.bindings.length;\n            viewDisposableCount += node.outputs.length;\n            if (!currentRenderParent && (node.type === NodeType.Element || node.type === NodeType.Text)) {\n                lastRenderRootNode = node;\n            }\n            if (node.type === NodeType.Provider || node.type === NodeType.Directive) {\n                if (!currentElementHasPublicProviders) {\n                    currentElementHasPublicProviders = true;\n                    // Use protoypical inheritance to not get O(n^2) complexity...\n                    currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders);\n                    currentParent.element.allProviders = currentParent.element.publicProviders;\n                }\n                var /** @type {?} */isPrivateService = (node.flags & NodeFlags.PrivateProvider) !== 0;\n                var /** @type {?} */isComponent = (node.flags & NodeFlags.IsComponent) !== 0;\n                if (!isPrivateService || isComponent) {\n                    currentParent.element.publicProviders[node.provider.tokenKey] = node;\n                } else {\n                    if (!currentElementHasPrivateProviders) {\n                        currentElementHasPrivateProviders = true;\n                        // Use protoypical inheritance to not get O(n^2) complexity...\n                        currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);\n                    }\n                    currentParent.element.allProviders[node.provider.tokenKey] = node;\n                }\n                if (isComponent) {\n                    currentParent.element.componentProvider = node;\n                }\n            }\n            if (node.childCount) {\n                currentParent = node;\n            }\n        }\n        while (currentParent) {\n            var /** @type {?} */_newParent = currentParent.parent;\n            if (_newParent) {\n                _newParent.childFlags |= currentParent.childFlags;\n                _newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n            }\n            currentParent = _newParent;\n        }\n        var /** @type {?} */handleEvent = function handleEvent(view, nodeIndex, eventName, event) {\n            return nodes[nodeIndex].element.handleEvent(view, eventName, event);\n        };\n        return {\n            nodeFlags: viewNodeFlags,\n            nodeMatchedQueries: viewMatchedQueries, flags: flags,\n            nodes: nodes, reverseChildNodes: reverseChildNodes,\n            updateDirectives: updateDirectives || NOOP$1,\n            updateRenderer: updateRenderer || NOOP$1,\n            handleEvent: handleEvent || NOOP$1,\n            bindingCount: viewBindingCount,\n            outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n        };\n    }\n    /**\n     * @param {?} currentParent\n     * @param {?} i\n     * @param {?} childCount\n     * @param {?} nodeCount\n     * @return {?}\n     */\n    function calculateReverseChildIndex(currentParent, i, childCount, nodeCount) {\n        // Notes about reverse child order:\n        // - Every node is directly before its children, in dfs and reverse child order.\n        // - node.childCount contains all children, in dfs and reverse child order.\n        // - In dfs order, every node is before its first child\n        // - In reverse child order, every node is before its last child\n        // Algorithm, main idea:\n        // - In reverse child order, the ranges for each child + its transitive children are mirrored\n        //   regarding their position inside of their parent\n        // Visualization:\n        // Given the following tree:\n        // Nodes: n0\n        //             n1         n2\n        //                n11 n12    n21 n22\n        // dfs:    0   1   2   3  4   5   6\n        // result: 0   4   6   5  1   3   2\n        //\n        // Example:\n        // Current node = 1\n        // 1) lastChildIndex = 3\n        // 2) lastChildOffsetRelativeToParentInDfsOrder = 2\n        // 3) parentEndIndexInReverseChildOrder = 6\n        // 4) result = 4\n        var /** @type {?} */lastChildOffsetRelativeToParentInDfsOrder = void 0;\n        var /** @type {?} */parentEndIndexInReverseChildOrder = void 0;\n        if (currentParent) {\n            var /** @type {?} */lastChildIndex = i + childCount;\n            lastChildOffsetRelativeToParentInDfsOrder = lastChildIndex - currentParent.index - 1;\n            parentEndIndexInReverseChildOrder = currentParent.reverseChildIndex + currentParent.childCount;\n        } else {\n            lastChildOffsetRelativeToParentInDfsOrder = i + childCount;\n            parentEndIndexInReverseChildOrder = nodeCount - 1;\n        }\n        return parentEndIndexInReverseChildOrder - lastChildOffsetRelativeToParentInDfsOrder;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} node\n     * @param {?} nodeCount\n     * @return {?}\n     */\n    function validateNode(parent, node, nodeCount) {\n        var /** @type {?} */template = node.element && node.element.template;\n        if (template) {\n            if (template.lastRenderRootNode && template.lastRenderRootNode.flags & NodeFlags.HasEmbeddedViews) {\n                throw new Error('Illegal State: Last root node of a template can\\'t have embedded views, at index ' + node.index + '!');\n            }\n        }\n        if (node.type === NodeType.Provider || node.type === NodeType.Directive) {\n            var /** @type {?} */parentType = parent ? parent.type : null;\n            if (parentType !== NodeType.Element) {\n                throw new Error('Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index ' + node.index + '!');\n            }\n        }\n        if (node.query) {\n            if (node.flags & NodeFlags.HasContentQuery && (!parent || parent.type !== NodeType.Directive)) {\n                throw new Error('Illegal State: Content Query nodes need to be children of directives, at index ' + node.index + '!');\n            }\n            if (node.flags & NodeFlags.HasViewQuery && parent) {\n                throw new Error('Illegal State: View Query nodes have to be top level nodes, at index ' + node.index + '!');\n            }\n        }\n        if (node.childCount) {\n            var /** @type {?} */parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;\n            if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {\n                throw new Error('Illegal State: childCount of node leads outside of parent, at index ' + node.index + '!');\n            }\n        }\n    }\n    /**\n     * @param {?} parent\n     * @param {?} anchorDef\n     * @param {?=} context\n     * @return {?}\n     */\n    function createEmbeddedView(parent, anchorDef, context) {\n        // embedded views are seen as siblings to the anchor, so we need\n        // to get the parent of the anchor and use it as parentIndex.\n        var /** @type {?} */view = createView(parent.root, parent.renderer, parent, anchorDef, anchorDef.element.template);\n        initView(view, parent.component, context);\n        createViewNodes(view);\n        return view;\n    }\n    /**\n     * @param {?} root\n     * @param {?} def\n     * @param {?=} context\n     * @return {?}\n     */\n    function createRootView(root, def, context) {\n        var /** @type {?} */view = createView(root, root.renderer, null, null, def);\n        initView(view, context, context);\n        createViewNodes(view);\n        return view;\n    }\n    /**\n     * @param {?} root\n     * @param {?} renderer\n     * @param {?} parent\n     * @param {?} parentNodeDef\n     * @param {?} def\n     * @return {?}\n     */\n    function createView(root, renderer, parent, parentNodeDef, def) {\n        var /** @type {?} */nodes = new Array(def.nodes.length);\n        var /** @type {?} */disposables = def.outputCount ? new Array(def.outputCount) : undefined;\n        var /** @type {?} */view = {\n            def: def,\n            parent: parent,\n            viewContainerParent: undefined, parentNodeDef: parentNodeDef,\n            context: undefined,\n            component: undefined, nodes: nodes,\n            state: ViewState.FirstCheck | ViewState.ChecksEnabled, root: root, renderer: renderer,\n            oldValues: new Array(def.bindingCount), disposables: disposables\n        };\n        return view;\n    }\n    /**\n     * @param {?} view\n     * @param {?} component\n     * @param {?} context\n     * @return {?}\n     */\n    function initView(view, component, context) {\n        view.component = component;\n        view.context = context;\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function createViewNodes(view) {\n        var /** @type {?} */renderHost = void 0;\n        if (isComponentView(view)) {\n            var /** @type {?} */hostDef = view.parentNodeDef;\n            renderHost = asElementData(view.parent, hostDef.parent.index).renderElement;\n        }\n        var /** @type {?} */def = view.def;\n        var /** @type {?} */nodes = view.nodes;\n        for (var /** @type {?} */i = 0; i < def.nodes.length; i++) {\n            var /** @type {?} */nodeDef = def.nodes[i];\n            Services.setCurrentNode(view, i);\n            var /** @type {?} */nodeData = void 0;\n            switch (nodeDef.type) {\n                case NodeType.Element:\n                    var /** @type {?} */el = createElement(view, renderHost, nodeDef);\n                    var /** @type {?} */componentView = void 0;\n                    if (nodeDef.flags & NodeFlags.HasComponent) {\n                        var /** @type {?} */compViewDef = resolveViewDefinition(nodeDef.element.componentView);\n                        var /** @type {?} */rendererType = nodeDef.element.componentRendererType;\n                        var /** @type {?} */compRenderer = void 0;\n                        if (!rendererType) {\n                            compRenderer = view.root.renderer;\n                        } else {\n                            compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);\n                        }\n                        componentView = createView(view.root, compRenderer, view, nodeDef.element.componentProvider, compViewDef);\n                    }\n                    listenToElementOutputs(view, componentView, nodeDef, el);\n                    nodeData = {\n                        renderElement: el,\n                        componentView: componentView,\n                        embeddedViews: nodeDef.flags & NodeFlags.HasEmbeddedViews ? [] : undefined,\n                        projectedViews: undefined\n                    };\n                    break;\n                case NodeType.Text:\n                    nodeData = createText(view, renderHost, nodeDef);\n                    break;\n                case NodeType.Provider:\n                    {\n                        var /** @type {?} */instance = createProviderInstance(view, nodeDef);\n                        nodeData = { instance: instance };\n                        break;\n                    }\n                case NodeType.Pipe:\n                    {\n                        var /** @type {?} */_instance = createPipeInstance(view, nodeDef);\n                        nodeData = { instance: _instance };\n                        break;\n                    }\n                case NodeType.Directive:\n                    {\n                        var /** @type {?} */_instance2 = createDirectiveInstance(view, nodeDef);\n                        nodeData = { instance: _instance2 };\n                        if (nodeDef.flags & NodeFlags.IsComponent) {\n                            var /** @type {?} */compView = asElementData(view, nodeDef.parent.index).componentView;\n                            initView(compView, _instance2, _instance2);\n                        }\n                        break;\n                    }\n                case NodeType.PureExpression:\n                    nodeData = createPureExpression(view, nodeDef);\n                    break;\n                case NodeType.Query:\n                    nodeData = createQuery();\n                    break;\n                case NodeType.NgContent:\n                    appendNgContent(view, renderHost, nodeDef);\n                    // no runtime data needed for NgContent...\n                    nodeData = undefined;\n                    break;\n            }\n            nodes[i] = nodeData;\n        }\n        // Create the ViewData.nodes of component views after we created everything else,\n        // so that e.g. ng-content works\n        execComponentViewsAction(view, ViewAction.CreateViewNodes);\n        // fill static content and view queries\n        execQueriesAction(view, NodeFlags.HasContentQuery | NodeFlags.HasViewQuery, NodeFlags.HasStaticQuery, CheckType.CheckAndUpdate);\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function checkNoChangesView(view) {\n        Services.updateDirectives(view, CheckType.CheckNoChanges);\n        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n        execQueriesAction(view, NodeFlags.HasContentQuery, NodeFlags.HasDynamicQuery, CheckType.CheckNoChanges);\n        Services.updateRenderer(view, CheckType.CheckNoChanges);\n        execComponentViewsAction(view, ViewAction.CheckNoChanges);\n        execQueriesAction(view, NodeFlags.HasViewQuery, NodeFlags.HasDynamicQuery, CheckType.CheckNoChanges);\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function checkAndUpdateView(view) {\n        Services.updateDirectives(view, CheckType.CheckAndUpdate);\n        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, NodeFlags.HasContentQuery, NodeFlags.HasDynamicQuery, CheckType.CheckAndUpdate);\n        callLifecycleHooksChildrenFirst(view, NodeFlags.AfterContentChecked | (view.state & ViewState.FirstCheck ? NodeFlags.AfterContentInit : 0));\n        Services.updateRenderer(view, CheckType.CheckAndUpdate);\n        execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, NodeFlags.HasViewQuery, NodeFlags.HasDynamicQuery, CheckType.CheckAndUpdate);\n        callLifecycleHooksChildrenFirst(view, NodeFlags.AfterViewChecked | (view.state & ViewState.FirstCheck ? NodeFlags.AfterViewInit : 0));\n        if (view.def.flags & ViewFlags.OnPush) {\n            view.state &= ~ViewState.ChecksEnabled;\n        }\n        view.state &= ~ViewState.FirstCheck;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} argStyle\n     * @param {?=} v0\n     * @param {?=} v1\n     * @param {?=} v2\n     * @param {?=} v3\n     * @param {?=} v4\n     * @param {?=} v5\n     * @param {?=} v6\n     * @param {?=} v7\n     * @param {?=} v8\n     * @param {?=} v9\n     * @return {?}\n     */\n    function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === ArgumentType.Inline) {\n            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        } else {\n            return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?=} v0\n     * @param {?=} v1\n     * @param {?=} v2\n     * @param {?=} v3\n     * @param {?=} v4\n     * @param {?=} v5\n     * @param {?=} v6\n     * @param {?=} v7\n     * @param {?=} v8\n     * @param {?=} v9\n     * @return {?}\n     */\n    function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */changed = false;\n        switch (nodeDef.type) {\n            case NodeType.Element:\n                changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                break;\n            case NodeType.Text:\n                changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                break;\n            case NodeType.Directive:\n                changed = checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                break;\n            case NodeType.PureExpression:\n                changed = checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                break;\n        }\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} values\n     * @return {?}\n     */\n    function checkAndUpdateNodeDynamic(view, nodeDef, values) {\n        var /** @type {?} */changed = false;\n        switch (nodeDef.type) {\n            case NodeType.Element:\n                changed = checkAndUpdateElementDynamic(view, nodeDef, values);\n                break;\n            case NodeType.Text:\n                changed = checkAndUpdateTextDynamic(view, nodeDef, values);\n                break;\n            case NodeType.Directive:\n                changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n                break;\n            case NodeType.PureExpression:\n                changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n                break;\n        }\n        if (changed) {\n            // Update oldValues after all bindings have been updated,\n            // as a setter for a property might update other properties.\n            var /** @type {?} */bindLen = nodeDef.bindings.length;\n            var /** @type {?} */bindingStart = nodeDef.bindingIndex;\n            var /** @type {?} */oldValues = view.oldValues;\n            for (var /** @type {?} */i = 0; i < bindLen; i++) {\n                oldValues[bindingStart + i] = values[i];\n            }\n        }\n        return changed;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} argStyle\n     * @param {?=} v0\n     * @param {?=} v1\n     * @param {?=} v2\n     * @param {?=} v3\n     * @param {?=} v4\n     * @param {?=} v5\n     * @param {?=} v6\n     * @param {?=} v7\n     * @param {?=} v8\n     * @param {?=} v9\n     * @return {?}\n     */\n    function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === ArgumentType.Inline) {\n            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        } else {\n            checkNoChangesNodeDynamic(view, nodeDef, v0);\n        }\n        // Returning false is ok here as we would have thrown in case of a change.\n        return false;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} v0\n     * @param {?} v1\n     * @param {?} v2\n     * @param {?} v3\n     * @param {?} v4\n     * @param {?} v5\n     * @param {?} v6\n     * @param {?} v7\n     * @param {?} v8\n     * @param {?} v9\n     * @return {?}\n     */\n    function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */bindLen = nodeDef.bindings.length;\n        if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);\n        if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);\n        if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);\n        if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);\n        if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);\n        if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);\n        if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);\n        if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);\n        if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);\n        if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} values\n     * @return {?}\n     */\n    function checkNoChangesNodeDynamic(view, nodeDef, values) {\n        for (var /** @type {?} */i = 0; i < values.length; i++) {\n            checkBindingNoChanges(view, nodeDef, i, values[i]);\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @return {?}\n     */\n    function checkNoChangesQuery(view, nodeDef) {\n        var /** @type {?} */queryList = asQueryList(view, nodeDef.index);\n        if (queryList.dirty) {\n            throw expressionChangedAfterItHasBeenCheckedError$1(Services.createDebugContext(view, nodeDef.index), 'Query ' + nodeDef.query.id + ' not dirty', 'Query ' + nodeDef.query.id + ' dirty', (view.state & ViewState.FirstCheck) !== 0);\n        }\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function destroyView(view) {\n        if (view.state & ViewState.Destroyed) {\n            return;\n        }\n        execEmbeddedViewsAction(view, ViewAction.Destroy);\n        execComponentViewsAction(view, ViewAction.Destroy);\n        callLifecycleHooksChildrenFirst(view, NodeFlags.OnDestroy);\n        if (view.disposables) {\n            for (var /** @type {?} */i = 0; i < view.disposables.length; i++) {\n                view.disposables[i]();\n            }\n        }\n        if (view.renderer.destroyNode) {\n            destroyViewNodes(view);\n        }\n        if (isComponentView(view)) {\n            view.renderer.destroy();\n        }\n        view.state |= ViewState.Destroyed;\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function destroyViewNodes(view) {\n        var /** @type {?} */len = view.def.nodes.length;\n        for (var /** @type {?} */i = 0; i < len; i++) {\n            var /** @type {?} */def = view.def.nodes[i];\n            if (def.type === NodeType.Element) {\n                view.renderer.destroyNode(asElementData(view, i).renderElement);\n            } else if (def.type === NodeType.Text) {\n                view.renderer.destroyNode(asTextData(view, i).renderText);\n            }\n        }\n    }\n    var ViewAction = {};\n    ViewAction.CreateViewNodes = 0;\n    ViewAction.CheckNoChanges = 1;\n    ViewAction.CheckAndUpdate = 2;\n    ViewAction.Destroy = 3;\n    ViewAction[ViewAction.CreateViewNodes] = \"CreateViewNodes\";\n    ViewAction[ViewAction.CheckNoChanges] = \"CheckNoChanges\";\n    ViewAction[ViewAction.CheckAndUpdate] = \"CheckAndUpdate\";\n    ViewAction[ViewAction.Destroy] = \"Destroy\";\n    /**\n     * @param {?} view\n     * @param {?} action\n     * @return {?}\n     */\n    function execComponentViewsAction(view, action) {\n        var /** @type {?} */def = view.def;\n        if (!(def.nodeFlags & NodeFlags.HasComponent)) {\n            return;\n        }\n        for (var /** @type {?} */i = 0; i < def.nodes.length; i++) {\n            var /** @type {?} */nodeDef = def.nodes[i];\n            if (nodeDef.flags & NodeFlags.HasComponent) {\n                // a leaf\n                callViewAction(asElementData(view, i).componentView, action);\n            } else if ((nodeDef.childFlags & NodeFlags.HasComponent) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} action\n     * @return {?}\n     */\n    function execEmbeddedViewsAction(view, action) {\n        var /** @type {?} */def = view.def;\n        if (!(def.nodeFlags & NodeFlags.HasEmbeddedViews)) {\n            return;\n        }\n        for (var /** @type {?} */i = 0; i < def.nodes.length; i++) {\n            var /** @type {?} */nodeDef = def.nodes[i];\n            if (nodeDef.flags & NodeFlags.HasEmbeddedViews) {\n                // a leaf\n                var /** @type {?} */embeddedViews = asElementData(view, i).embeddedViews;\n                if (embeddedViews) {\n                    for (var /** @type {?} */k = 0; k < embeddedViews.length; k++) {\n                        callViewAction(embeddedViews[k], action);\n                    }\n                }\n            } else if ((nodeDef.childFlags & NodeFlags.HasEmbeddedViews) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} action\n     * @return {?}\n     */\n    function callViewAction(view, action) {\n        var /** @type {?} */viewState = view.state;\n        switch (action) {\n            case ViewAction.CheckNoChanges:\n                if (viewState & ViewState.ChecksEnabled && (viewState & (ViewState.Errored | ViewState.Destroyed)) === 0) {\n                    checkNoChangesView(view);\n                }\n                break;\n            case ViewAction.CheckAndUpdate:\n                if (viewState & ViewState.ChecksEnabled && (viewState & (ViewState.Errored | ViewState.Destroyed)) === 0) {\n                    checkAndUpdateView(view);\n                }\n                break;\n            case ViewAction.Destroy:\n                destroyView(view);\n                break;\n            case ViewAction.CreateViewNodes:\n                createViewNodes(view);\n                break;\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} queryFlags\n     * @param {?} staticDynamicQueryFlag\n     * @param {?} checkType\n     * @return {?}\n     */\n    function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n            return;\n        }\n        var /** @type {?} */nodeCount = view.def.nodes.length;\n        for (var /** @type {?} */i = 0; i < nodeCount; i++) {\n            var /** @type {?} */nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {\n                Services.setCurrentNode(view, nodeDef.index);\n                switch (checkType) {\n                    case CheckType.CheckAndUpdate:\n                        checkAndUpdateQuery(view, nodeDef);\n                        break;\n                    case CheckType.CheckNoChanges:\n                        checkNoChangesQuery(view, nodeDef);\n                        break;\n                }\n            }\n            if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n                // no child has a matching query\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n\n    var /** @type {?} */initialized = false;\n    /**\n     * @return {?}\n     */\n    function initServicesIfNeeded() {\n        if (initialized) {\n            return;\n        }\n        initialized = true;\n        var /** @type {?} */services = isDevMode() ? createDebugServices() : createProdServices();\n        Services.setCurrentNode = services.setCurrentNode;\n        Services.createRootView = services.createRootView;\n        Services.createEmbeddedView = services.createEmbeddedView;\n        Services.checkAndUpdateView = services.checkAndUpdateView;\n        Services.checkNoChangesView = services.checkNoChangesView;\n        Services.destroyView = services.destroyView;\n        Services.resolveDep = resolveDep;\n        Services.createDebugContext = services.createDebugContext;\n        Services.handleEvent = services.handleEvent;\n        Services.updateDirectives = services.updateDirectives;\n        Services.updateRenderer = services.updateRenderer;\n        Services.dirtyParentQueries = dirtyParentQueries;\n    }\n    /**\n     * @return {?}\n     */\n    function createProdServices() {\n        return {\n            setCurrentNode: function setCurrentNode() {},\n            createRootView: createProdRootView,\n            createEmbeddedView: createEmbeddedView,\n            checkAndUpdateView: checkAndUpdateView,\n            checkNoChangesView: checkNoChangesView,\n            destroyView: destroyView,\n            createDebugContext: function createDebugContext(view, nodeIndex) {\n                return new DebugContext_(view, nodeIndex);\n            },\n            handleEvent: function handleEvent(view, nodeIndex, eventName, event) {\n                return view.def.handleEvent(view, nodeIndex, eventName, event);\n            },\n            updateDirectives: function updateDirectives(view, checkType) {\n                return view.def.updateDirectives(checkType === CheckType.CheckAndUpdate ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);\n            },\n            updateRenderer: function updateRenderer(view, checkType) {\n                return view.def.updateRenderer(checkType === CheckType.CheckAndUpdate ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);\n            }\n        };\n    }\n    /**\n     * @return {?}\n     */\n    function createDebugServices() {\n        return {\n            setCurrentNode: debugSetCurrentNode,\n            createRootView: debugCreateRootView,\n            createEmbeddedView: debugCreateEmbeddedView,\n            checkAndUpdateView: debugCheckAndUpdateView,\n            checkNoChangesView: debugCheckNoChangesView,\n            destroyView: debugDestroyView,\n            createDebugContext: function createDebugContext(view, nodeIndex) {\n                return new DebugContext_(view, nodeIndex);\n            },\n            handleEvent: debugHandleEvent,\n            updateDirectives: debugUpdateDirectives,\n            updateRenderer: debugUpdateRenderer\n        };\n    }\n    /**\n     * @param {?} injector\n     * @param {?} projectableNodes\n     * @param {?} rootSelectorOrNode\n     * @param {?} def\n     * @param {?=} context\n     * @return {?}\n     */\n    function createProdRootView(injector, projectableNodes, rootSelectorOrNode, def, context) {\n        var /** @type {?} */rendererFactory = injector.get(RendererFactoryV2);\n        return createRootView(createRootData(injector, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n    }\n    /**\n     * @param {?} injector\n     * @param {?} projectableNodes\n     * @param {?} rootSelectorOrNode\n     * @param {?} def\n     * @param {?=} context\n     * @return {?}\n     */\n    function debugCreateRootView(injector, projectableNodes, rootSelectorOrNode, def, context) {\n        var /** @type {?} */rendererFactory = injector.get(RendererFactoryV2);\n        var /** @type {?} */root = createRootData(injector, new DebugRendererFactoryV2(rendererFactory), projectableNodes, rootSelectorOrNode);\n        return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);\n    }\n    /**\n     * @param {?} injector\n     * @param {?} rendererFactory\n     * @param {?} projectableNodes\n     * @param {?} rootSelectorOrNode\n     * @return {?}\n     */\n    function createRootData(injector, rendererFactory, projectableNodes, rootSelectorOrNode) {\n        var /** @type {?} */sanitizer = injector.get(Sanitizer);\n        var /** @type {?} */renderer = rendererFactory.createRenderer(null, null);\n        return {\n            injector: injector,\n            projectableNodes: projectableNodes,\n            selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer\n        };\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {?=} v0\n     * @param {?=} v1\n     * @param {?=} v2\n     * @param {?=} v3\n     * @param {?=} v4\n     * @param {?=} v5\n     * @param {?=} v6\n     * @param {?=} v7\n     * @param {?=} v8\n     * @param {?=} v9\n     * @return {?}\n     */\n    function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];\n        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return nodeDef.type === NodeType.PureExpression ? asPureExpressionData(view, nodeIndex).value : undefined;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {?=} v0\n     * @param {?=} v1\n     * @param {?=} v2\n     * @param {?=} v3\n     * @param {?=} v4\n     * @param {?=} v5\n     * @param {?=} v6\n     * @param {?=} v7\n     * @param {?=} v8\n     * @param {?=} v9\n     * @return {?}\n     */\n    function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];\n        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return nodeDef.type === NodeType.PureExpression ? asPureExpressionData(view, nodeIndex).value : undefined;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} anchorDef\n     * @param {?=} context\n     * @return {?}\n     */\n    function debugCreateEmbeddedView(parent, anchorDef, context) {\n        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function debugCheckAndUpdateView(view) {\n        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function debugCheckNoChangesView(view) {\n        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n    }\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function debugDestroyView(view) {\n        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n    }\n    var DebugAction = {};\n    DebugAction.create = 0;\n    DebugAction.detectChanges = 1;\n    DebugAction.checkNoChanges = 2;\n    DebugAction.destroy = 3;\n    DebugAction.handleEvent = 4;\n    DebugAction[DebugAction.create] = \"create\";\n    DebugAction[DebugAction.detectChanges] = \"detectChanges\";\n    DebugAction[DebugAction.checkNoChanges] = \"checkNoChanges\";\n    DebugAction[DebugAction.destroy] = \"destroy\";\n    DebugAction[DebugAction.handleEvent] = \"handleEvent\";\n    var /** @type {?} */_currentAction = void 0;\n    var /** @type {?} */_currentView = void 0;\n    var /** @type {?} */_currentNodeIndex = void 0;\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @return {?}\n     */\n    function debugSetCurrentNode(view, nodeIndex) {\n        _currentView = view;\n        _currentNodeIndex = nodeIndex;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} eventName\n     * @param {?} event\n     * @return {?}\n     */\n    function debugHandleEvent(view, nodeIndex, eventName, event) {\n        debugSetCurrentNode(view, nodeIndex);\n        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n    }\n    /**\n     * @param {?} view\n     * @param {?} checkType\n     * @return {?}\n     */\n    function debugUpdateDirectives(view, checkType) {\n        if (view.state & ViewState.Destroyed) {\n            throw viewDestroyedError$1(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n        return view.def.updateDirectives(debugCheckDirectivesFn, view);\n        /**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @param {?} argStyle\n         * @param {...?} values\n         * @return {?}\n         */\n        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n            var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];\n\n            for (var _len7 = arguments.length, values = Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {\n                values[_key7 - 3] = arguments[_key7];\n            }\n\n            if (checkType === CheckType.CheckAndUpdate) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            } else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.type === NodeType.Directive) {\n                debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n            }\n            return nodeDef.type === NodeType.PureExpression ? asPureExpressionData(view, nodeDef.index).value : undefined;\n        }\n        ;\n    }\n    /**\n     * @param {?} view\n     * @param {?} checkType\n     * @return {?}\n     */\n    function debugUpdateRenderer(view, checkType) {\n        if (view.state & ViewState.Destroyed) {\n            throw viewDestroyedError$1(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n        return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n        /**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @param {?} argStyle\n         * @param {...?} values\n         * @return {?}\n         */\n        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n            var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];\n\n            for (var _len8 = arguments.length, values = Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {\n                values[_key8 - 3] = arguments[_key8];\n            }\n\n            if (checkType === CheckType.CheckAndUpdate) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            } else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.type === NodeType.Element || nodeDef.type === NodeType.Text) {\n                debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n            }\n            return nodeDef.type === NodeType.PureExpression ? asPureExpressionData(view, nodeDef.index).value : undefined;\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} argStyle\n     * @param {?} givenValues\n     * @return {?}\n     */\n    function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n        var /** @type {?} */changed = checkAndUpdateNode.apply(undefined, [view, nodeDef, argStyle].concat(_toConsumableArray(givenValues)));\n        if (changed) {\n            var /** @type {?} */values = argStyle === ArgumentType.Dynamic ? givenValues[0] : givenValues;\n            if (nodeDef.type === NodeType.Directive || nodeDef.type === NodeType.Element) {\n                var /** @type {?} */bindingValues = {};\n                for (var /** @type {?} */i = 0; i < nodeDef.bindings.length; i++) {\n                    var /** @type {?} */binding = nodeDef.bindings[i];\n                    var /** @type {?} */value = values[i];\n                    if (binding.type === BindingType.ElementProperty || binding.type === BindingType.ComponentHostProperty || binding.type === BindingType.DirectiveProperty) {\n                        bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value);\n                    }\n                }\n                var /** @type {?} */elDef = nodeDef.type === NodeType.Directive ? nodeDef.parent : nodeDef;\n                var /** @type {?} */el = asElementData(view, elDef.index).renderElement;\n                if (!elDef.element.name) {\n                    // a comment.\n                    view.renderer.setValue(el, 'bindings=' + JSON.stringify(bindingValues, null, 2));\n                } else {\n                    // a regular element.\n                    for (var /** @type {?} */attr in bindingValues) {\n                        var /** @type {?} */_value2 = bindingValues[attr];\n                        if (_value2 != null) {\n                            view.renderer.setAttribute(el, attr, _value2);\n                        } else {\n                            view.renderer.removeAttribute(el, attr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} argStyle\n     * @param {?} values\n     * @return {?}\n     */\n    function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n        checkNoChangesNode.apply(undefined, [view, nodeDef, argStyle].concat(_toConsumableArray(values)));\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    function normalizeDebugBindingName(name) {\n        // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n        name = camelCaseToDashCase$1(name.replace(/[$@]/g, '_'));\n        return 'ng-reflect-' + name;\n    }\n    var /** @type {?} */CAMEL_CASE_REGEXP$1 = /([A-Z])/g;\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function camelCaseToDashCase$1(input) {\n        return input.replace(CAMEL_CASE_REGEXP$1, function () {\n            for (var _len9 = arguments.length, m = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n                m[_key9] = arguments[_key9];\n            }\n\n            return '-' + m[1].toLowerCase();\n        });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function normalizeDebugBindingValue(value) {\n        try {\n            // Limit the size of the value as otherwise the DOM just gets polluted.\n            return value ? value.toString().slice(0, 30) : value;\n        } catch (e) {\n            return '[ERROR] Exception while trying to serialize the value';\n        }\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @return {?}\n     */\n    function nextDirectiveWithBinding(view, nodeIndex) {\n        for (var /** @type {?} */i = nodeIndex; i < view.def.nodes.length; i++) {\n            var /** @type {?} */nodeDef = view.def.nodes[i];\n            if (nodeDef.type === NodeType.Directive && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @return {?}\n     */\n    function nextRenderNodeWithBinding(view, nodeIndex) {\n        for (var /** @type {?} */i = nodeIndex; i < view.def.nodes.length; i++) {\n            var /** @type {?} */nodeDef = view.def.nodes[i];\n            if ((nodeDef.type === NodeType.Element || nodeDef.type === NodeType.Text) && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return undefined;\n    }\n\n    var DebugContext_ = function () {\n        /**\n         * @param {?} view\n         * @param {?} nodeIndex\n         */\n        function DebugContext_(view, nodeIndex) {\n            _classCallCheck(this, DebugContext_);\n\n            this.view = view;\n            this.nodeIndex = nodeIndex;\n            if (nodeIndex == null) {\n                this.nodeIndex = nodeIndex = 0;\n            }\n            this.nodeDef = view.def.nodes[nodeIndex];\n            var elDef = this.nodeDef;\n            var elView = view;\n            while (elDef && elDef.type !== NodeType.Element) {\n                elDef = elDef.parent;\n            }\n            if (!elDef) {\n                while (!elDef && elView) {\n                    elDef = viewParentEl(elView);\n                    elView = elView.parent;\n                }\n            }\n            this.elDef = elDef;\n            this.elView = elView;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(DebugContext_, [{\n            key: 'elOrCompView',\n            get: function get() {\n                // Has to be done lazily as we use the DebugContext also during creation of elements...\n                return asElementData(this.elView, this.elDef.index).componentView || this.view;\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return createInjector(this.elView, this.elDef);\n            }\n        }, {\n            key: 'component',\n            get: function get() {\n                return this.elOrCompView.component;\n            }\n        }, {\n            key: 'context',\n            get: function get() {\n                return this.elOrCompView.context;\n            }\n        }, {\n            key: 'providerTokens',\n            get: function get() {\n                var /** @type {?} */tokens = [];\n                if (this.elDef) {\n                    for (var /** @type {?} */i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {\n                        var /** @type {?} */childDef = this.elView.def.nodes[i];\n                        if (childDef.type === NodeType.Provider || childDef.type === NodeType.Directive) {\n                            tokens.push(childDef.provider.token);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return tokens;\n            }\n        }, {\n            key: 'references',\n            get: function get() {\n                var /** @type {?} */references = {};\n                if (this.elDef) {\n                    collectReferences(this.elView, this.elDef, references);\n                    for (var /** @type {?} */i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {\n                        var /** @type {?} */childDef = this.elView.def.nodes[i];\n                        if (childDef.type === NodeType.Provider || childDef.type === NodeType.Directive) {\n                            collectReferences(this.elView, childDef, references);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return references;\n            }\n        }, {\n            key: 'source',\n            get: function get() {\n                if (this.nodeDef.type === NodeType.Text) {\n                    return this.nodeDef.text.source;\n                } else {\n                    return this.elDef.element.source;\n                }\n            }\n        }, {\n            key: 'componentRenderElement',\n            get: function get() {\n                var /** @type {?} */elData = findHostElement(this.elOrCompView);\n                return elData ? elData.renderElement : undefined;\n            }\n        }, {\n            key: 'renderNode',\n            get: function get() {\n                return this.nodeDef.type === NodeType.Text ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);\n            }\n        }]);\n\n        return DebugContext_;\n    }();\n\n    /**\n     * @param {?} view\n     * @return {?}\n     */\n    function findHostElement(view) {\n        while (view && !isComponentView(view)) {\n            view = view.parent;\n        }\n        if (view.parent) {\n            return asElementData(view.parent, viewParentEl(view).index);\n        }\n        return undefined;\n    }\n    /**\n     * @param {?} view\n     * @param {?} nodeDef\n     * @param {?} references\n     * @return {?}\n     */\n    function collectReferences(view, nodeDef, references) {\n        for (var /** @type {?} */refName in nodeDef.references) {\n            references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n        }\n    }\n    /**\n     * @param {?} action\n     * @param {?} fn\n     * @param {?} self\n     * @param {?} args\n     * @return {?}\n     */\n    function callWithDebugContext(action, fn, self, args) {\n        var /** @type {?} */oldAction = _currentAction;\n        var /** @type {?} */oldView = _currentView;\n        var /** @type {?} */oldNodeIndex = _currentNodeIndex;\n        try {\n            _currentAction = action;\n            var /** @type {?} */result = fn.apply(self, args);\n            _currentView = oldView;\n            _currentNodeIndex = oldNodeIndex;\n            _currentAction = oldAction;\n            return result;\n        } catch (e) {\n            if (isViewDebugError(e) || !_currentView) {\n                throw e;\n            }\n            _currentView.state |= ViewState.Errored;\n            throw viewWrappedDebugError(e, getCurrentDebugContext());\n        }\n    }\n    /**\n     * @return {?}\n     */\n    function getCurrentDebugContext() {\n        return new DebugContext_(_currentView, _currentNodeIndex);\n    }\n\n    var DebugRendererFactoryV2 = function () {\n        /**\n         * @param {?} delegate\n         */\n        function DebugRendererFactoryV2(delegate) {\n            _classCallCheck(this, DebugRendererFactoryV2);\n\n            this.delegate = delegate;\n        }\n        /**\n         * @param {?} element\n         * @param {?} renderData\n         * @return {?}\n         */\n\n\n        _createClass(DebugRendererFactoryV2, [{\n            key: 'createRenderer',\n            value: function createRenderer(element, renderData) {\n                return new DebugRendererV2(this.delegate.createRenderer(element, renderData));\n            }\n        }]);\n\n        return DebugRendererFactoryV2;\n    }();\n\n    var DebugRendererV2 = function () {\n        /**\n         * @param {?} delegate\n         */\n        function DebugRendererV2(delegate) {\n            _classCallCheck(this, DebugRendererV2);\n\n            this.delegate = delegate;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(DebugRendererV2, [{\n            key: 'destroyNode',\n            value: function destroyNode(node) {\n                removeDebugNodeFromIndex(getDebugNode(node));\n                if (this.delegate.destroyNode) {\n                    this.delegate.destroyNode(node);\n                }\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.delegate.destroy();\n            }\n        }, {\n            key: 'createElement',\n            value: function createElement(name, namespace) {\n                var /** @type {?} */el = this.delegate.createElement(name, namespace);\n                var /** @type {?} */debugEl = new DebugElement(el, null, getCurrentDebugContext());\n                debugEl.name = name;\n                indexDebugNode(debugEl);\n                return el;\n            }\n        }, {\n            key: 'createComment',\n            value: function createComment(value) {\n                var /** @type {?} */comment = this.delegate.createComment(value);\n                var /** @type {?} */debugEl = new DebugNode(comment, null, getCurrentDebugContext());\n                indexDebugNode(debugEl);\n                return comment;\n            }\n        }, {\n            key: 'createText',\n            value: function createText(value) {\n                var /** @type {?} */text = this.delegate.createText(value);\n                var /** @type {?} */debugEl = new DebugNode(text, null, getCurrentDebugContext());\n                indexDebugNode(debugEl);\n                return text;\n            }\n        }, {\n            key: 'appendChild',\n            value: function appendChild(parent, newChild) {\n                var /** @type {?} */debugEl = getDebugNode(parent);\n                var /** @type {?} */debugChildEl = getDebugNode(newChild);\n                if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n                    debugEl.addChild(debugChildEl);\n                }\n                this.delegate.appendChild(parent, newChild);\n            }\n        }, {\n            key: 'insertBefore',\n            value: function insertBefore(parent, newChild, refChild) {\n                var /** @type {?} */debugEl = getDebugNode(parent);\n                var /** @type {?} */debugChildEl = getDebugNode(newChild);\n                var /** @type {?} */debugRefEl = getDebugNode(refChild);\n                if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n                    debugEl.insertBefore(debugRefEl, debugChildEl);\n                }\n                this.delegate.insertBefore(parent, newChild, refChild);\n            }\n        }, {\n            key: 'removeChild',\n            value: function removeChild(parent, oldChild) {\n                var /** @type {?} */debugEl = getDebugNode(parent);\n                var /** @type {?} */debugChildEl = getDebugNode(oldChild);\n                if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n                    debugEl.removeChild(debugChildEl);\n                }\n                this.delegate.removeChild(parent, oldChild);\n            }\n        }, {\n            key: 'selectRootElement',\n            value: function selectRootElement(selectorOrNode) {\n                var /** @type {?} */el = this.delegate.selectRootElement(selectorOrNode);\n                var /** @type {?} */debugEl = new DebugElement(el, null, getCurrentDebugContext());\n                indexDebugNode(debugEl);\n                return el;\n            }\n        }, {\n            key: 'setAttribute',\n            value: function setAttribute(el, name, value, namespace) {\n                var /** @type {?} */debugEl = getDebugNode(el);\n                if (debugEl && debugEl instanceof DebugElement) {\n                    var /** @type {?} */fullName = namespace ? namespace + ':' + name : name;\n                    debugEl.attributes[fullName] = value;\n                }\n                this.delegate.setAttribute(el, name, value, namespace);\n            }\n        }, {\n            key: 'removeAttribute',\n            value: function removeAttribute(el, name, namespace) {\n                var /** @type {?} */debugEl = getDebugNode(el);\n                if (debugEl && debugEl instanceof DebugElement) {\n                    var /** @type {?} */fullName = namespace ? namespace + ':' + name : name;\n                    debugEl.attributes[fullName] = null;\n                }\n                this.delegate.removeAttribute(el, name, namespace);\n            }\n        }, {\n            key: 'addClass',\n            value: function addClass(el, name) {\n                var /** @type {?} */debugEl = getDebugNode(el);\n                if (debugEl && debugEl instanceof DebugElement) {\n                    debugEl.classes[name] = true;\n                }\n                this.delegate.addClass(el, name);\n            }\n        }, {\n            key: 'removeClass',\n            value: function removeClass(el, name) {\n                var /** @type {?} */debugEl = getDebugNode(el);\n                if (debugEl && debugEl instanceof DebugElement) {\n                    debugEl.classes[name] = false;\n                }\n                this.delegate.removeClass(el, name);\n            }\n        }, {\n            key: 'setStyle',\n            value: function setStyle(el, style, value, hasVendorPrefix, hasImportant) {\n                var /** @type {?} */debugEl = getDebugNode(el);\n                if (debugEl && debugEl instanceof DebugElement) {\n                    debugEl.styles[style] = value;\n                }\n                this.delegate.setStyle(el, style, value, hasVendorPrefix, hasImportant);\n            }\n        }, {\n            key: 'removeStyle',\n            value: function removeStyle(el, style, hasVendorPrefix) {\n                var /** @type {?} */debugEl = getDebugNode(el);\n                if (debugEl && debugEl instanceof DebugElement) {\n                    debugEl.styles[style] = null;\n                }\n                this.delegate.removeStyle(el, style, hasVendorPrefix);\n            }\n        }, {\n            key: 'setProperty',\n            value: function setProperty(el, name, value) {\n                var /** @type {?} */debugEl = getDebugNode(el);\n                if (debugEl && debugEl instanceof DebugElement) {\n                    debugEl.properties[name] = value;\n                }\n                this.delegate.setProperty(el, name, value);\n            }\n        }, {\n            key: 'listen',\n            value: function listen(target, eventName, callback) {\n                if (typeof target !== 'string') {\n                    var /** @type {?} */debugEl = getDebugNode(target);\n                    if (debugEl) {\n                        debugEl.listeners.push(new EventListener(eventName, callback));\n                    }\n                }\n                return this.delegate.listen(target, eventName, callback);\n            }\n        }, {\n            key: 'parentNode',\n            value: function parentNode(node) {\n                return this.delegate.parentNode(node);\n            }\n        }, {\n            key: 'nextSibling',\n            value: function nextSibling(node) {\n                return this.delegate.nextSibling(node);\n            }\n        }, {\n            key: 'setValue',\n            value: function setValue(node, value) {\n                return this.delegate.setValue(node, value);\n            }\n        }, {\n            key: 'data',\n            get: function get() {\n                return this.delegate.data;\n            }\n        }]);\n\n        return DebugRendererV2;\n    }();\n\n    /**\n     * @return {?}\n     */\n    function _iterableDiffersFactory() {\n        return defaultIterableDiffers;\n    }\n    /**\n     * @return {?}\n     */\n    function _keyValueDiffersFactory() {\n        return defaultKeyValueDiffers;\n    }\n    /**\n     * @param {?=} locale\n     * @return {?}\n     */\n    function _localeFactory(locale) {\n        return locale || 'en-US';\n    }\n    /**\n     * @return {?}\n     */\n    function _initViewEngine() {\n        initServicesIfNeeded();\n    }\n    /**\n     * This module includes the providers of \\@angular/core that are needed\n     * to bootstrap components via `ApplicationRef`.\n     *\n     * \\@experimental\n     */\n\n    var ApplicationModule = function ApplicationModule() {\n        _classCallCheck(this, ApplicationModule);\n    };\n\n    ApplicationModule.decorators = [{ type: NgModule, args: [{\n            providers: [ApplicationRef_, { provide: ApplicationRef, useExisting: ApplicationRef_ }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, AnimationQueue, { provide: IterableDiffers, useFactory: _iterableDiffersFactory }, { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory }, {\n                provide: LOCALE_ID,\n                useFactory: _localeFactory,\n                deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n            }, { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: true }]\n        }] }];\n    /** @nocollapse */\n    ApplicationModule.ctorParameters = function () {\n        return [];\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */var /** @type {?} */FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean\n    // TODO (matsko): change to boolean\n    var /** @type {?} */ANY_STATE = '*';\n    var /** @type {?} */DEFAULT_STATE = '*';\n    var /** @type {?} */EMPTY_STATE = 'void';\n\n    var AnimationGroupPlayer = function () {\n        /**\n         * @param {?} _players\n         */\n        function AnimationGroupPlayer(_players) {\n            var _this31 = this;\n\n            _classCallCheck(this, AnimationGroupPlayer);\n\n            this._players = _players;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._started = false;\n            this._destroyed = false;\n            this._onDestroyFns = [];\n            this.parentPlayer = null;\n            var count = 0;\n            var total = this._players.length;\n            if (total == 0) {\n                scheduleMicroTask(function () {\n                    return _this31._onFinish();\n                });\n            } else {\n                this._players.forEach(function (player) {\n                    player.parentPlayer = _this31;\n                    player.onDone(function () {\n                        if (++count >= total) {\n                            _this31._onFinish();\n                        }\n                    });\n                });\n            }\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(AnimationGroupPlayer, [{\n            key: '_onFinish',\n            value: function _onFinish() {\n                if (!this._finished) {\n                    this._finished = true;\n                    this._onDoneFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDoneFns = [];\n                }\n            }\n        }, {\n            key: 'init',\n            value: function init() {\n                this._players.forEach(function (player) {\n                    return player.init();\n                });\n            }\n        }, {\n            key: 'onStart',\n            value: function onStart(fn) {\n                this._onStartFns.push(fn);\n            }\n        }, {\n            key: 'onDone',\n            value: function onDone(fn) {\n                this._onDoneFns.push(fn);\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(fn) {\n                this._onDestroyFns.push(fn);\n            }\n        }, {\n            key: 'hasStarted',\n            value: function hasStarted() {\n                return this._started;\n            }\n        }, {\n            key: 'play',\n            value: function play() {\n                if (!isPresent(this.parentPlayer)) {\n                    this.init();\n                }\n                if (!this.hasStarted()) {\n                    this._onStartFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onStartFns = [];\n                    this._started = true;\n                }\n                this._players.forEach(function (player) {\n                    return player.play();\n                });\n            }\n        }, {\n            key: 'pause',\n            value: function pause() {\n                this._players.forEach(function (player) {\n                    return player.pause();\n                });\n            }\n        }, {\n            key: 'restart',\n            value: function restart() {\n                this._players.forEach(function (player) {\n                    return player.restart();\n                });\n            }\n        }, {\n            key: 'finish',\n            value: function finish() {\n                this._onFinish();\n                this._players.forEach(function (player) {\n                    return player.finish();\n                });\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                if (!this._destroyed) {\n                    this._onFinish();\n                    this._players.forEach(function (player) {\n                        return player.destroy();\n                    });\n                    this._destroyed = true;\n                    this._onDestroyFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDestroyFns = [];\n                }\n            }\n        }, {\n            key: 'reset',\n            value: function reset() {\n                this._players.forEach(function (player) {\n                    return player.reset();\n                });\n                this._destroyed = false;\n                this._finished = false;\n                this._started = false;\n            }\n        }, {\n            key: 'setPosition',\n            value: function setPosition(p) {\n                this._players.forEach(function (player) {\n                    player.setPosition(p);\n                });\n            }\n        }, {\n            key: 'getPosition',\n            value: function getPosition() {\n                var /** @type {?} */min = 0;\n                this._players.forEach(function (player) {\n                    var /** @type {?} */p = player.getPosition();\n                    min = Math.min(p, min);\n                });\n                return min;\n            }\n        }, {\n            key: 'players',\n            get: function get() {\n                return this._players;\n            }\n        }]);\n\n        return AnimationGroupPlayer;\n    }();\n\n    var AnimationKeyframe =\n    /**\n     * @param {?} offset\n     * @param {?} styles\n     */\n    function AnimationKeyframe(offset, styles) {\n        _classCallCheck(this, AnimationKeyframe);\n\n        this.offset = offset;\n        this.styles = styles;\n    };\n\n    var AnimationSequencePlayer = function () {\n        /**\n         * @param {?} _players\n         */\n        function AnimationSequencePlayer(_players) {\n            var _this32 = this;\n\n            _classCallCheck(this, AnimationSequencePlayer);\n\n            this._players = _players;\n            this._currentIndex = 0;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._onDestroyFns = [];\n            this._finished = false;\n            this._started = false;\n            this._destroyed = false;\n            this.parentPlayer = null;\n            this._players.forEach(function (player) {\n                player.parentPlayer = _this32;\n            });\n            this._onNext(false);\n        }\n        /**\n         * @param {?} start\n         * @return {?}\n         */\n\n\n        _createClass(AnimationSequencePlayer, [{\n            key: '_onNext',\n            value: function _onNext(start) {\n                var _this33 = this;\n\n                if (this._finished) return;\n                if (this._players.length == 0) {\n                    this._activePlayer = new NoOpAnimationPlayer();\n                    scheduleMicroTask(function () {\n                        return _this33._onFinish();\n                    });\n                } else if (this._currentIndex >= this._players.length) {\n                    this._activePlayer = new NoOpAnimationPlayer();\n                    this._onFinish();\n                } else {\n                    var /** @type {?} */player = this._players[this._currentIndex++];\n                    player.onDone(function () {\n                        return _this33._onNext(true);\n                    });\n                    this._activePlayer = player;\n                    if (start) {\n                        player.play();\n                    }\n                }\n            }\n        }, {\n            key: '_onFinish',\n            value: function _onFinish() {\n                if (!this._finished) {\n                    this._finished = true;\n                    this._onDoneFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDoneFns = [];\n                }\n            }\n        }, {\n            key: 'init',\n            value: function init() {\n                this._players.forEach(function (player) {\n                    return player.init();\n                });\n            }\n        }, {\n            key: 'onStart',\n            value: function onStart(fn) {\n                this._onStartFns.push(fn);\n            }\n        }, {\n            key: 'onDone',\n            value: function onDone(fn) {\n                this._onDoneFns.push(fn);\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(fn) {\n                this._onDestroyFns.push(fn);\n            }\n        }, {\n            key: 'hasStarted',\n            value: function hasStarted() {\n                return this._started;\n            }\n        }, {\n            key: 'play',\n            value: function play() {\n                if (!isPresent(this.parentPlayer)) {\n                    this.init();\n                }\n                if (!this.hasStarted()) {\n                    this._onStartFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onStartFns = [];\n                    this._started = true;\n                }\n                this._activePlayer.play();\n            }\n        }, {\n            key: 'pause',\n            value: function pause() {\n                this._activePlayer.pause();\n            }\n        }, {\n            key: 'restart',\n            value: function restart() {\n                this.reset();\n                if (this._players.length > 0) {\n                    this._players[0].restart();\n                }\n            }\n        }, {\n            key: 'reset',\n            value: function reset() {\n                this._players.forEach(function (player) {\n                    return player.reset();\n                });\n                this._destroyed = false;\n                this._finished = false;\n                this._started = false;\n            }\n        }, {\n            key: 'finish',\n            value: function finish() {\n                this._onFinish();\n                this._players.forEach(function (player) {\n                    return player.finish();\n                });\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                if (!this._destroyed) {\n                    this._onFinish();\n                    this._players.forEach(function (player) {\n                        return player.destroy();\n                    });\n                    this._destroyed = true;\n                    this._activePlayer = new NoOpAnimationPlayer();\n                    this._onDestroyFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDestroyFns = [];\n                }\n            }\n        }, {\n            key: 'setPosition',\n            value: function setPosition(p) {\n                this._players[0].setPosition(p);\n            }\n        }, {\n            key: 'getPosition',\n            value: function getPosition() {\n                return this._players[0].getPosition();\n            }\n        }, {\n            key: 'players',\n            get: function get() {\n                return this._players;\n            }\n        }]);\n\n        return AnimationSequencePlayer;\n    }();\n\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var /** @type {?} */AUTO_STYLE = '*';\n\n    /**\n     * @param {?} previousStyles\n     * @param {?} newStyles\n     * @param {?=} nullValue\n     * @return {?}\n     */\n    function prepareFinalAnimationStyles(previousStyles, newStyles) {\n        var nullValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        var /** @type {?} */finalStyles = {};\n        Object.keys(newStyles).forEach(function (prop) {\n            var /** @type {?} */value = newStyles[prop];\n            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();\n        });\n        Object.keys(previousStyles).forEach(function (prop) {\n            if (!isPresent(finalStyles[prop])) {\n                finalStyles[prop] = nullValue;\n            }\n        });\n        return finalStyles;\n    }\n    /**\n     * @param {?} collectedStyles\n     * @param {?} finalStateStyles\n     * @param {?} keyframes\n     * @return {?}\n     */\n    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {\n        var /** @type {?} */limit = keyframes.length - 1;\n        var /** @type {?} */firstKeyframe = keyframes[0];\n        // phase 1: copy all the styles from the first keyframe into the lookup map\n        var /** @type {?} */flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);\n        var /** @type {?} */extraFirstKeyframeStyles = {};\n        var /** @type {?} */hasExtraFirstStyles = false;\n        Object.keys(collectedStyles).forEach(function (prop) {\n            var /** @type {?} */value = collectedStyles[prop];\n            // if the style is already defined in the first keyframe then\n            // we do not replace it.\n            if (!flatenedFirstKeyframeStyles[prop]) {\n                flatenedFirstKeyframeStyles[prop] = value;\n                extraFirstKeyframeStyles[prop] = value;\n                hasExtraFirstStyles = true;\n            }\n        });\n        var /** @type {?} */keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);\n        // phase 2: normalize the final keyframe\n        var /** @type {?} */finalKeyframe = keyframes[limit];\n        finalKeyframe.styles.styles.unshift(finalStateStyles);\n        var /** @type {?} */flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);\n        var /** @type {?} */extraFinalKeyframeStyles = {};\n        var /** @type {?} */hasExtraFinalStyles = false;\n        Object.keys(keyframeCollectedStyles).forEach(function (prop) {\n            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {\n                extraFinalKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFinalStyles = true;\n            }\n        });\n        if (hasExtraFinalStyles) {\n            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);\n        }\n        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {\n            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {\n                extraFirstKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFirstStyles = true;\n            }\n        });\n        if (hasExtraFirstStyles) {\n            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);\n        }\n        collectAndResolveStyles(collectedStyles, [finalStateStyles]);\n        return keyframes;\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    function clearStyles(styles) {\n        var /** @type {?} */finalStyles = {};\n        Object.keys(styles).forEach(function (key) {\n            finalStyles[key] = null;\n        });\n        return finalStyles;\n    }\n    /**\n     * @param {?} collection\n     * @param {?} styles\n     * @return {?}\n     */\n    function collectAndResolveStyles(collection, styles) {\n        return styles.map(function (entry) {\n            var /** @type {?} */stylesObj = {};\n            Object.keys(entry).forEach(function (prop) {\n                var /** @type {?} */value = entry[prop];\n                if (value == FILL_STYLE_FLAG) {\n                    value = collection[prop];\n                    if (!isPresent(value)) {\n                        value = AUTO_STYLE;\n                    }\n                }\n                collection[prop] = value;\n                stylesObj[prop] = value;\n            });\n            return stylesObj;\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?} styles\n     * @return {?}\n     */\n    function renderStyles(element, renderer, styles) {\n        Object.keys(styles).forEach(function (prop) {\n            renderer.setElementStyle(element, prop, styles[prop]);\n        });\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    function flattenStyles(styles) {\n        var /** @type {?} */finalStyles = {};\n        styles.forEach(function (entry) {\n            Object.keys(entry).forEach(function (prop) {\n                finalStyles[prop] = entry[prop];\n            });\n        });\n        return finalStyles;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data\n     * that can either be used as initial styling data or apart of a series of keyframes within an\n     * animation.\n     * This class is mostly internal, and it is designed to be used alongside\n     * {\\@link AnimationKeyframe `AnimationKeyframe`} and {\\@link Renderer#animate-anchor\n     * `Renderer.animate`}.\n     *\n     * \\@experimental Animation support is experimental\n     */\n\n    var AnimationStyles =\n    /**\n     * @param {?} styles\n     */\n    function AnimationStyles(styles) {\n        _classCallCheck(this, AnimationStyles);\n\n        this.styles = styles;\n    };\n\n    var AnimationTransitionEvent =\n    /**\n     * @param {?} __0\n     */\n    function AnimationTransitionEvent(_ref7) {\n        var fromState = _ref7.fromState,\n            toState = _ref7.toState,\n            totalTime = _ref7.totalTime,\n            phaseName = _ref7.phaseName,\n            element = _ref7.element,\n            triggerName = _ref7.triggerName;\n\n        _classCallCheck(this, AnimationTransitionEvent);\n\n        this.fromState = fromState;\n        this.toState = toState;\n        this.totalTime = totalTime;\n        this.phaseName = phaseName;\n        this.element = new ElementRef(element);\n        this.triggerName = triggerName;\n    };\n\n    var AnimationTransition = function () {\n        /**\n         * @param {?} _player\n         * @param {?} _element\n         * @param {?} _triggerName\n         * @param {?} _fromState\n         * @param {?} _toState\n         * @param {?} _totalTime\n         */\n        function AnimationTransition(_player, _element, _triggerName, _fromState, _toState, _totalTime) {\n            _classCallCheck(this, AnimationTransition);\n\n            this._player = _player;\n            this._element = _element;\n            this._triggerName = _triggerName;\n            this._fromState = _fromState;\n            this._toState = _toState;\n            this._totalTime = _totalTime;\n        }\n        /**\n         * @param {?} phaseName\n         * @return {?}\n         */\n\n\n        _createClass(AnimationTransition, [{\n            key: '_createEvent',\n            value: function _createEvent(phaseName) {\n                return new AnimationTransitionEvent({\n                    fromState: this._fromState,\n                    toState: this._toState,\n                    totalTime: this._totalTime,\n                    phaseName: phaseName,\n                    element: this._element,\n                    triggerName: this._triggerName\n                });\n            }\n        }, {\n            key: 'onStart',\n            value: function onStart(callback) {\n                var _this34 = this;\n\n                var /** @type {?} */fn = Zone.current.wrap(function () {\n                    return callback(_this34._createEvent('start'));\n                }, 'player.onStart');\n                this._player.onStart(fn);\n            }\n        }, {\n            key: 'onDone',\n            value: function onDone(callback) {\n                var _this35 = this;\n\n                var /** @type {?} */fn = Zone.current.wrap(function () {\n                    return callback(_this35._createEvent('done'));\n                }, 'player.onDone');\n                this._player.onDone(fn);\n            }\n        }]);\n\n        return AnimationTransition;\n    }();\n\n    var DebugDomRootRenderer = function () {\n        /**\n         * @param {?} _delegate\n         */\n        function DebugDomRootRenderer(_delegate) {\n            _classCallCheck(this, DebugDomRootRenderer);\n\n            this._delegate = _delegate;\n            throw new Error('RootRenderer is no longer supported. Please use the `RendererFactoryV2` instead!');\n        }\n        /**\n         * @param {?} componentProto\n         * @return {?}\n         */\n\n\n        _createClass(DebugDomRootRenderer, [{\n            key: 'renderComponent',\n            value: function renderComponent(componentProto) {\n                return new DebugDomRenderer(this._delegate.renderComponent(componentProto));\n            }\n        }]);\n\n        return DebugDomRootRenderer;\n    }();\n\n    var DebugDomRenderer = function () {\n        /**\n         * @param {?} _delegate\n         */\n        function DebugDomRenderer(_delegate) {\n            _classCallCheck(this, DebugDomRenderer);\n\n            this._delegate = _delegate;\n        }\n        /**\n         * @param {?} selectorOrNode\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n\n\n        _createClass(DebugDomRenderer, [{\n            key: 'selectRootElement',\n            value: function selectRootElement(selectorOrNode, debugInfo) {\n                var /** @type {?} */nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);\n                var /** @type {?} */debugEl = new DebugElement(nativeEl, null, debugInfo);\n                indexDebugNode(debugEl);\n                return nativeEl;\n            }\n        }, {\n            key: 'createElement',\n            value: function createElement(parentElement, name, debugInfo) {\n                var /** @type {?} */nativeEl = this._delegate.createElement(parentElement, name, debugInfo);\n                var /** @type {?} */debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);\n                debugEl.name = name;\n                indexDebugNode(debugEl);\n                return nativeEl;\n            }\n        }, {\n            key: 'createViewRoot',\n            value: function createViewRoot(hostElement) {\n                return this._delegate.createViewRoot(hostElement);\n            }\n        }, {\n            key: 'createTemplateAnchor',\n            value: function createTemplateAnchor(parentElement, debugInfo) {\n                var /** @type {?} */comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);\n                var /** @type {?} */debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);\n                indexDebugNode(debugEl);\n                return comment;\n            }\n        }, {\n            key: 'createText',\n            value: function createText(parentElement, value, debugInfo) {\n                var /** @type {?} */text = this._delegate.createText(parentElement, value, debugInfo);\n                var /** @type {?} */debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);\n                indexDebugNode(debugEl);\n                return text;\n            }\n        }, {\n            key: 'projectNodes',\n            value: function projectNodes(parentElement, nodes) {\n                var /** @type {?} */debugParent = getDebugNode(parentElement);\n                if (isPresent(debugParent) && debugParent instanceof DebugElement) {\n                    var /** @type {?} */debugElement = debugParent;\n                    nodes.forEach(function (node) {\n                        debugElement.addChild(getDebugNode(node));\n                    });\n                }\n                this._delegate.projectNodes(parentElement, nodes);\n            }\n        }, {\n            key: 'attachViewAfter',\n            value: function attachViewAfter(node, viewRootNodes) {\n                var /** @type {?} */debugNode = getDebugNode(node);\n                if (isPresent(debugNode)) {\n                    var /** @type {?} */debugParent = debugNode.parent;\n                    if (viewRootNodes.length > 0 && isPresent(debugParent)) {\n                        var /** @type {?} */debugViewRootNodes = [];\n                        viewRootNodes.forEach(function (rootNode) {\n                            return debugViewRootNodes.push(getDebugNode(rootNode));\n                        });\n                        debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);\n                    }\n                }\n                this._delegate.attachViewAfter(node, viewRootNodes);\n            }\n        }, {\n            key: 'detachView',\n            value: function detachView(viewRootNodes) {\n                viewRootNodes.forEach(function (node) {\n                    var /** @type {?} */debugNode = getDebugNode(node);\n                    if (debugNode && debugNode.parent) {\n                        debugNode.parent.removeChild(debugNode);\n                    }\n                });\n                this._delegate.detachView(viewRootNodes);\n            }\n        }, {\n            key: 'destroyView',\n            value: function destroyView(hostElement, viewAllNodes) {\n                viewAllNodes = viewAllNodes || [];\n                viewAllNodes.forEach(function (node) {\n                    removeDebugNodeFromIndex(getDebugNode(node));\n                });\n                this._delegate.destroyView(hostElement, viewAllNodes);\n            }\n        }, {\n            key: 'listen',\n            value: function listen(renderElement, name, callback) {\n                var /** @type {?} */debugEl = getDebugNode(renderElement);\n                if (isPresent(debugEl)) {\n                    debugEl.listeners.push(new EventListener(name, callback));\n                }\n                return this._delegate.listen(renderElement, name, callback);\n            }\n        }, {\n            key: 'listenGlobal',\n            value: function listenGlobal(target, name, callback) {\n                return this._delegate.listenGlobal(target, name, callback);\n            }\n        }, {\n            key: 'setElementProperty',\n            value: function setElementProperty(renderElement, propertyName, propertyValue) {\n                var /** @type {?} */debugEl = getDebugNode(renderElement);\n                if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                    debugEl.properties[propertyName] = propertyValue;\n                }\n                this._delegate.setElementProperty(renderElement, propertyName, propertyValue);\n            }\n        }, {\n            key: 'setElementAttribute',\n            value: function setElementAttribute(renderElement, attributeName, attributeValue) {\n                var /** @type {?} */debugEl = getDebugNode(renderElement);\n                if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                    debugEl.attributes[attributeName] = attributeValue;\n                }\n                this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);\n            }\n        }, {\n            key: 'setBindingDebugInfo',\n            value: function setBindingDebugInfo(renderElement, propertyName, propertyValue) {\n                this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);\n            }\n        }, {\n            key: 'setElementClass',\n            value: function setElementClass(renderElement, className, isAdd) {\n                var /** @type {?} */debugEl = getDebugNode(renderElement);\n                if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                    debugEl.classes[className] = isAdd;\n                }\n                this._delegate.setElementClass(renderElement, className, isAdd);\n            }\n        }, {\n            key: 'setElementStyle',\n            value: function setElementStyle(renderElement, styleName, styleValue) {\n                var /** @type {?} */debugEl = getDebugNode(renderElement);\n                if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                    debugEl.styles[styleName] = styleValue;\n                }\n                this._delegate.setElementStyle(renderElement, styleName, styleValue);\n            }\n        }, {\n            key: 'invokeElementMethod',\n            value: function invokeElementMethod(renderElement, methodName, args) {\n                this._delegate.invokeElementMethod(renderElement, methodName, args);\n            }\n        }, {\n            key: 'setText',\n            value: function setText(renderNode, text) {\n                this._delegate.setText(renderNode, text);\n            }\n        }, {\n            key: 'animate',\n            value: function animate(element, startingStyles, keyframes, duration, delay, easing) {\n                var previousPlayers = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n\n                return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);\n            }\n        }]);\n\n        return DebugDomRenderer;\n    }();\n\n    var ViewType = {};\n    ViewType.HOST = 0;\n    ViewType.COMPONENT = 1;\n    ViewType.EMBEDDED = 2;\n    ViewType[ViewType.HOST] = \"HOST\";\n    ViewType[ViewType.COMPONENT] = \"COMPONENT\";\n    ViewType[ViewType.EMBEDDED] = \"EMBEDDED\";\n\n    var StaticNodeDebugInfo =\n    /**\n     * @param {?} providerTokens\n     * @param {?} componentToken\n     * @param {?} refTokens\n     */\n    function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {\n        _classCallCheck(this, StaticNodeDebugInfo);\n\n        this.providerTokens = providerTokens;\n        this.componentToken = componentToken;\n        this.refTokens = refTokens;\n    };\n\n    var DebugContext$1 = function () {\n        /**\n         * @param {?} _view\n         * @param {?} _nodeIndex\n         * @param {?} _tplRow\n         * @param {?} _tplCol\n         */\n        function DebugContext$1(_view, _nodeIndex, _tplRow, _tplCol) {\n            _classCallCheck(this, DebugContext$1);\n\n            this._view = _view;\n            this._nodeIndex = _nodeIndex;\n            this._tplRow = _tplRow;\n            this._tplCol = _tplCol;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(DebugContext$1, [{\n            key: '_staticNodeInfo',\n            get: function get() {\n                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n            }\n        }, {\n            key: 'context',\n            get: function get() {\n                return this._view.context;\n            }\n        }, {\n            key: 'component',\n            get: function get() {\n                var /** @type {?} */staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n                    return this.injector.get(staticNodeInfo.componentToken);\n                }\n                return null;\n            }\n        }, {\n            key: 'componentRenderElement',\n            get: function get() {\n                var /** @type {?} */componentView = this._view;\n                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {\n                    componentView = componentView.parentView;\n                }\n                return componentView.parentElement;\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return this._view.injector(this._nodeIndex);\n            }\n        }, {\n            key: 'renderNode',\n            get: function get() {\n                if (isPresent(this._nodeIndex) && this._view.allNodes) {\n                    return this._view.allNodes[this._nodeIndex];\n                } else {\n                    return null;\n                }\n            }\n        }, {\n            key: 'providerTokens',\n            get: function get() {\n                var /** @type {?} */staticNodeInfo = this._staticNodeInfo;\n                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n            }\n        }, {\n            key: 'source',\n            get: function get() {\n                return this._view.componentType.templateUrl + ':' + this._tplRow + ':' + this._tplCol;\n            }\n        }, {\n            key: 'references',\n            get: function get() {\n                var _this36 = this;\n\n                var /** @type {?} */varValues = {};\n                var /** @type {?} */staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo)) {\n                    var /** @type {?} */refs = staticNodeInfo.refTokens;\n                    Object.keys(refs).forEach(function (refName) {\n                        var /** @type {?} */refToken = refs[refName];\n                        var /** @type {?} */varValue = void 0;\n                        if (isBlank(refToken)) {\n                            varValue = _this36._view.allNodes ? _this36._view.allNodes[_this36._nodeIndex] : null;\n                        } else {\n                            varValue = _this36._view.injectorGet(refToken, _this36._nodeIndex, null);\n                        }\n                        varValues[refName] = varValue;\n                    });\n                }\n                return varValues;\n            }\n        }]);\n\n        return DebugContext$1;\n    }();\n\n    var ViewAnimationMap = function () {\n        function ViewAnimationMap() {\n            _classCallCheck(this, ViewAnimationMap);\n\n            this._map = new Map();\n            this._allPlayers = [];\n        }\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @return {?}\n         */\n\n\n        _createClass(ViewAnimationMap, [{\n            key: 'find',\n            value: function find(element, animationName) {\n                var /** @type {?} */playersByAnimation = this._map.get(element);\n                if (isPresent(playersByAnimation)) {\n                    return playersByAnimation[animationName];\n                }\n            }\n        }, {\n            key: 'findAllPlayersByElement',\n            value: function findAllPlayersByElement(element) {\n                var /** @type {?} */el = this._map.get(element);\n                return el ? Object.keys(el).map(function (k) {\n                    return el[k];\n                }) : [];\n            }\n        }, {\n            key: 'set',\n            value: function set(element, animationName, player) {\n                var /** @type {?} */playersByAnimation = this._map.get(element);\n                if (!isPresent(playersByAnimation)) {\n                    playersByAnimation = {};\n                }\n                var /** @type {?} */existingEntry = playersByAnimation[animationName];\n                if (isPresent(existingEntry)) {\n                    this.remove(element, animationName);\n                }\n                playersByAnimation[animationName] = player;\n                this._allPlayers.push(player);\n                this._map.set(element, playersByAnimation);\n            }\n        }, {\n            key: 'getAllPlayers',\n            value: function getAllPlayers() {\n                return this._allPlayers;\n            }\n        }, {\n            key: 'remove',\n            value: function remove(element, animationName) {\n                var targetPlayer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                var /** @type {?} */playersByAnimation = this._map.get(element);\n                if (playersByAnimation) {\n                    var /** @type {?} */player = playersByAnimation[animationName];\n                    if (!targetPlayer || player === targetPlayer) {\n                        delete playersByAnimation[animationName];\n                        var /** @type {?} */index = this._allPlayers.indexOf(player);\n                        this._allPlayers.splice(index, 1);\n                        if (Object.keys(playersByAnimation).length === 0) {\n                            this._map.delete(element);\n                        }\n                    }\n                }\n            }\n        }]);\n\n        return ViewAnimationMap;\n    }();\n\n    var AnimationViewContext = function () {\n        /**\n         * @param {?} _animationQueue\n         */\n        function AnimationViewContext(_animationQueue) {\n            _classCallCheck(this, AnimationViewContext);\n\n            this._animationQueue = _animationQueue;\n            this._players = new ViewAnimationMap();\n        }\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n\n\n        _createClass(AnimationViewContext, [{\n            key: 'onAllActiveAnimationsDone',\n            value: function onAllActiveAnimationsDone(callback) {\n                var /** @type {?} */activeAnimationPlayers = this._players.getAllPlayers();\n                // we check for the length to avoid having GroupAnimationPlayer\n                // issue an unnecessary microtask when zero players are passed in\n                if (activeAnimationPlayers.length) {\n                    new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () {\n                        return callback();\n                    });\n                } else {\n                    callback();\n                }\n            }\n        }, {\n            key: 'queueAnimation',\n            value: function queueAnimation(element, animationName, player) {\n                var _this37 = this;\n\n                this._animationQueue.enqueue(player);\n                this._players.set(element, animationName, player);\n                player.onDone(function () {\n                    return _this37._players.remove(element, animationName, player);\n                });\n            }\n        }, {\n            key: 'getAnimationPlayers',\n            value: function getAnimationPlayers(element) {\n                var animationName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                var /** @type {?} */players = [];\n                if (animationName) {\n                    var /** @type {?} */currentPlayer = this._players.find(element, animationName);\n                    if (currentPlayer) {\n                        _recursePlayers(currentPlayer, players);\n                    }\n                } else {\n                    this._players.findAllPlayersByElement(element).forEach(function (player) {\n                        return _recursePlayers(player, players);\n                    });\n                }\n                return players;\n            }\n        }]);\n\n        return AnimationViewContext;\n    }();\n\n    /**\n     * @param {?} player\n     * @param {?} collectedPlayers\n     * @return {?}\n     */\n    function _recursePlayers(player, collectedPlayers) {\n        if (player instanceof AnimationGroupPlayer || player instanceof AnimationSequencePlayer) {\n            player.players.forEach(function (player) {\n                return _recursePlayers(player, collectedPlayers);\n            });\n        } else {\n            collectedPlayers.push(player);\n        }\n    }\n\n    var ElementInjector = function (_Injector) {\n        _inherits(ElementInjector, _Injector);\n\n        /**\n         * @param {?} _view\n         * @param {?} _nodeIndex\n         */\n        function ElementInjector(_view, _nodeIndex) {\n            _classCallCheck(this, ElementInjector);\n\n            var _this38 = _possibleConstructorReturn(this, (ElementInjector.__proto__ || Object.getPrototypeOf(ElementInjector)).call(this));\n\n            _this38._view = _view;\n            _this38._nodeIndex = _nodeIndex;\n            return _this38;\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n\n\n        _createClass(ElementInjector, [{\n            key: 'get',\n            value: function get(token) {\n                var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;\n\n                return this._view.injectorGet(token, this._nodeIndex, notFoundValue);\n            }\n        }]);\n\n        return ElementInjector;\n    }(Injector);\n\n    var /** @type {?} */_scope_check = wtfCreateScope('AppView#check(ascii id)');\n    /**\n     * @experimental\n     */\n    var /** @type {?} */EMPTY_CONTEXT$1 = new Object();\n    var /** @type {?} */UNDEFINED$1 = new Object();\n    /**\n     * Cost of making objects: http://jsperf.com/instantiate-size-of-object\n     *\n     * @abstract\n     */\n\n    var AppView = function () {\n        /**\n         * @param {?} clazz\n         * @param {?} componentType\n         * @param {?} type\n         * @param {?} viewUtils\n         * @param {?} parentView\n         * @param {?} parentIndex\n         * @param {?} parentElement\n         * @param {?} cdMode\n         * @param {?=} declaredViewContainer\n         */\n        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode) {\n            var declaredViewContainer = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n\n            _classCallCheck(this, AppView);\n\n            this.clazz = clazz;\n            this.componentType = componentType;\n            this.type = type;\n            this.viewUtils = viewUtils;\n            this.parentView = parentView;\n            this.parentIndex = parentIndex;\n            this.parentElement = parentElement;\n            this.cdMode = cdMode;\n            this.declaredViewContainer = declaredViewContainer;\n            this.numberOfChecks = 0;\n            this.throwOnChange = false;\n            this.ref = new ViewRef_(this, viewUtils.animationQueue);\n            if (type === ViewType.COMPONENT || type === ViewType.HOST) {\n                this.renderer = viewUtils.renderComponent(componentType);\n            } else {\n                this.renderer = parentView.renderer;\n            }\n            this._directRenderer = this.renderer.directRenderer;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(AppView, [{\n            key: 'create',\n            value: function create(context) {\n                this.context = context;\n                return this.createInternal(null);\n            }\n        }, {\n            key: 'createHostView',\n            value: function createHostView(rootSelectorOrNode, hostInjector, projectableNodes) {\n                this.context = EMPTY_CONTEXT$1;\n                this._hasExternalHostElement = isPresent(rootSelectorOrNode);\n                this._hostInjector = hostInjector;\n                this._hostProjectableNodes = projectableNodes;\n                return this.createInternal(rootSelectorOrNode);\n            }\n        }, {\n            key: 'createInternal',\n            value: function createInternal(rootSelectorOrNode) {\n                return null;\n            }\n        }, {\n            key: 'createEmbeddedViewInternal',\n            value: function createEmbeddedViewInternal(templateNodeIndex) {\n                return null;\n            }\n        }, {\n            key: 'init',\n            value: function init(lastRootNode, allNodes, disposables) {\n                this.lastRootNode = lastRootNode;\n                this.allNodes = allNodes;\n                this.disposables = disposables;\n                if (this.type === ViewType.COMPONENT) {\n                    this.dirtyParentQueriesInternal();\n                }\n            }\n        }, {\n            key: 'injectorGet',\n            value: function injectorGet(token, nodeIndex) {\n                var notFoundValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : THROW_IF_NOT_FOUND;\n\n                var /** @type {?} */result = UNDEFINED$1;\n                var /** @type {?} */view = this;\n                while (result === UNDEFINED$1) {\n                    if (isPresent(nodeIndex)) {\n                        result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);\n                    }\n                    if (result === UNDEFINED$1 && view.type === ViewType.HOST) {\n                        result = view._hostInjector.get(token, notFoundValue);\n                    }\n                    nodeIndex = view.parentIndex;\n                    view = view.parentView;\n                }\n                return result;\n            }\n        }, {\n            key: 'injectorGetInternal',\n            value: function injectorGetInternal(token, nodeIndex, notFoundResult) {\n                return notFoundResult;\n            }\n        }, {\n            key: 'injector',\n            value: function injector(nodeIndex) {\n                return new ElementInjector(this, nodeIndex);\n            }\n        }, {\n            key: 'detachAndDestroy',\n            value: function detachAndDestroy() {\n                if (this.viewContainer) {\n                    this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));\n                } else if (this.appRef) {\n                    this.appRef.detachView(this.ref);\n                } else if (this._hasExternalHostElement) {\n                    this.detach();\n                }\n                this.destroy();\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                var _this39 = this;\n\n                if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                    return;\n                }\n                var /** @type {?} */hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;\n                if (this.disposables) {\n                    for (var /** @type {?} */i = 0; i < this.disposables.length; i++) {\n                        this.disposables[i]();\n                    }\n                }\n                this.destroyInternal();\n                this.dirtyParentQueriesInternal();\n                if (this._animationContext) {\n                    this._animationContext.onAllActiveAnimationsDone(function () {\n                        return _this39.renderer.destroyView(hostElement, _this39.allNodes);\n                    });\n                } else {\n                    this.renderer.destroyView(hostElement, this.allNodes);\n                }\n                this.cdMode = ChangeDetectorStatus.Destroyed;\n            }\n        }, {\n            key: 'destroyInternal',\n            value: function destroyInternal() {}\n        }, {\n            key: 'detachInternal',\n            value: function detachInternal() {}\n        }, {\n            key: 'detach',\n            value: function detach() {\n                var _this40 = this;\n\n                this.detachInternal();\n                if (this._animationContext) {\n                    this._animationContext.onAllActiveAnimationsDone(function () {\n                        return _this40._renderDetach();\n                    });\n                } else {\n                    this._renderDetach();\n                }\n                if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer && this.declaredViewContainer.projectedViews) {\n                    var /** @type {?} */projectedViews = this.declaredViewContainer.projectedViews;\n                    var /** @type {?} */index = projectedViews.indexOf(this);\n                    // perf: pop is faster than splice!\n                    if (index >= projectedViews.length - 1) {\n                        projectedViews.pop();\n                    } else {\n                        projectedViews.splice(index, 1);\n                    }\n                }\n                this.appRef = null;\n                this.viewContainer = null;\n                this.dirtyParentQueriesInternal();\n            }\n        }, {\n            key: '_renderDetach',\n            value: function _renderDetach() {\n                if (this._directRenderer) {\n                    this.visitRootNodesInternal(this._directRenderer.remove, null);\n                } else {\n                    this.renderer.detachView(this.flatRootNodes);\n                }\n            }\n        }, {\n            key: 'attachToAppRef',\n            value: function attachToAppRef(appRef) {\n                if (this.viewContainer) {\n                    throw new Error('This view is already attached to a ViewContainer!');\n                }\n                this.appRef = appRef;\n                this.dirtyParentQueriesInternal();\n            }\n        }, {\n            key: 'attachAfter',\n            value: function attachAfter(viewContainer, prevView) {\n                if (this.appRef) {\n                    throw new Error('This view is already attached directly to the ApplicationRef!');\n                }\n                this._renderAttach(viewContainer, prevView);\n                this.viewContainer = viewContainer;\n                if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {\n                    if (!this.declaredViewContainer.projectedViews) {\n                        this.declaredViewContainer.projectedViews = [];\n                    }\n                    this.declaredViewContainer.projectedViews.push(this);\n                }\n                this.dirtyParentQueriesInternal();\n            }\n        }, {\n            key: 'moveAfter',\n            value: function moveAfter(viewContainer, prevView) {\n                this._renderAttach(viewContainer, prevView);\n                this.dirtyParentQueriesInternal();\n            }\n        }, {\n            key: '_renderAttach',\n            value: function _renderAttach(viewContainer, prevView) {\n                var /** @type {?} */prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;\n                if (this._directRenderer) {\n                    var /** @type {?} */nextSibling = this._directRenderer.nextSibling(prevNode);\n                    if (nextSibling) {\n                        this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);\n                    } else {\n                        var /** @type {?} */parentElement = this._directRenderer.parentElement(prevNode);\n                        if (parentElement) {\n                            this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);\n                        }\n                    }\n                } else {\n                    this.renderer.attachViewAfter(prevNode, this.flatRootNodes);\n                }\n            }\n        }, {\n            key: 'projectNodes',\n            value: function projectNodes(parentElement, ngContentIndex) {\n                if (this._directRenderer) {\n                    this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);\n                } else {\n                    var /** @type {?} */nodes = [];\n                    this.visitProjectedNodes(ngContentIndex, addToArray, nodes);\n                    this.renderer.projectNodes(parentElement, nodes);\n                }\n            }\n        }, {\n            key: 'visitProjectedNodes',\n            value: function visitProjectedNodes(ngContentIndex, cb, c) {\n                switch (this.type) {\n                    case ViewType.EMBEDDED:\n                        this.parentView.visitProjectedNodes(ngContentIndex, cb, c);\n                        break;\n                    case ViewType.COMPONENT:\n                        if (this.parentView.type === ViewType.HOST) {\n                            var /** @type {?} */nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];\n                            for (var /** @type {?} */i = 0; i < nodes.length; i++) {\n                                cb(nodes[i], c);\n                            }\n                        } else {\n                            this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);\n                        }\n                        break;\n                }\n            }\n        }, {\n            key: 'visitRootNodesInternal',\n            value: function visitRootNodesInternal(cb, c) {}\n        }, {\n            key: 'visitProjectableNodesInternal',\n            value: function visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, c) {}\n        }, {\n            key: 'dirtyParentQueriesInternal',\n            value: function dirtyParentQueriesInternal() {}\n        }, {\n            key: 'internalDetectChanges',\n            value: function internalDetectChanges(throwOnChange) {\n                if (this.cdMode !== ChangeDetectorStatus.Detached) {\n                    this.detectChanges(throwOnChange);\n                }\n            }\n        }, {\n            key: 'detectChanges',\n            value: function detectChanges(throwOnChange) {\n                var /** @type {?} */s = _scope_check(this.clazz);\n                if (this.cdMode === ChangeDetectorStatus.Checked || this.cdMode === ChangeDetectorStatus.Errored) return;\n                if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                    this.throwDestroyedError('detectChanges');\n                }\n                this.throwOnChange = throwOnChange;\n                this.detectChangesInternal();\n                if (this.cdMode === ChangeDetectorStatus.CheckOnce) this.cdMode = ChangeDetectorStatus.Checked;\n                this.numberOfChecks++;\n                wtfLeave(s);\n            }\n        }, {\n            key: 'detectChangesInternal',\n            value: function detectChangesInternal() {}\n        }, {\n            key: 'markAsCheckOnce',\n            value: function markAsCheckOnce() {\n                this.cdMode = ChangeDetectorStatus.CheckOnce;\n            }\n        }, {\n            key: 'markPathToRootAsCheckOnce',\n            value: function markPathToRootAsCheckOnce() {\n                var /** @type {?} */c = this;\n                while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {\n                    if (c.cdMode === ChangeDetectorStatus.Checked) {\n                        c.cdMode = ChangeDetectorStatus.CheckOnce;\n                    }\n                    if (c.type === ViewType.COMPONENT) {\n                        c = c.parentView;\n                    } else {\n                        c = c.viewContainer ? c.viewContainer.parentView : null;\n                    }\n                }\n            }\n        }, {\n            key: 'eventHandler',\n            value: function eventHandler(cb) {\n                return cb;\n            }\n        }, {\n            key: 'throwDestroyedError',\n            value: function throwDestroyedError(details) {\n                throw viewDestroyedError(details);\n            }\n        }, {\n            key: 'animationContext',\n            get: function get() {\n                if (!this._animationContext) {\n                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);\n                }\n                return this._animationContext;\n            }\n        }, {\n            key: 'destroyed',\n            get: function get() {\n                return this.cdMode === ChangeDetectorStatus.Destroyed;\n            }\n        }, {\n            key: 'changeDetectorRef',\n            get: function get() {\n                return this.ref;\n            }\n        }, {\n            key: 'flatRootNodes',\n            get: function get() {\n                var /** @type {?} */nodes = [];\n                this.visitRootNodesInternal(addToArray, nodes);\n                return nodes;\n            }\n        }]);\n\n        return AppView;\n    }();\n\n    var DebugAppView = function (_AppView) {\n        _inherits(DebugAppView, _AppView);\n\n        /**\n         * @param {?} clazz\n         * @param {?} componentType\n         * @param {?} type\n         * @param {?} viewUtils\n         * @param {?} parentView\n         * @param {?} parentIndex\n         * @param {?} parentNode\n         * @param {?} cdMode\n         * @param {?} staticNodeDebugInfos\n         * @param {?=} declaredViewContainer\n         */\n        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos) {\n            var declaredViewContainer = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n\n            _classCallCheck(this, DebugAppView);\n\n            var _this41 = _possibleConstructorReturn(this, (DebugAppView.__proto__ || Object.getPrototypeOf(DebugAppView)).call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer));\n\n            _this41.staticNodeDebugInfos = staticNodeDebugInfos;\n            _this41._currentDebugContext = null;\n            return _this41;\n        }\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n\n\n        _createClass(DebugAppView, [{\n            key: 'create',\n            value: function create(context) {\n                this._resetDebug();\n                try {\n                    return _get(DebugAppView.prototype.__proto__ || Object.getPrototypeOf(DebugAppView.prototype), 'create', this).call(this, context);\n                } catch (e) {\n                    this._rethrowWithContext(e);\n                    throw e;\n                }\n            }\n        }, {\n            key: 'createHostView',\n            value: function createHostView(rootSelectorOrNode, injector) {\n                var projectableNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                this._resetDebug();\n                try {\n                    return _get(DebugAppView.prototype.__proto__ || Object.getPrototypeOf(DebugAppView.prototype), 'createHostView', this).call(this, rootSelectorOrNode, injector, projectableNodes);\n                } catch (e) {\n                    this._rethrowWithContext(e);\n                    throw e;\n                }\n            }\n        }, {\n            key: 'injectorGet',\n            value: function injectorGet(token, nodeIndex, notFoundResult) {\n                this._resetDebug();\n                try {\n                    return _get(DebugAppView.prototype.__proto__ || Object.getPrototypeOf(DebugAppView.prototype), 'injectorGet', this).call(this, token, nodeIndex, notFoundResult);\n                } catch (e) {\n                    this._rethrowWithContext(e);\n                    throw e;\n                }\n            }\n        }, {\n            key: 'detach',\n            value: function detach() {\n                this._resetDebug();\n                try {\n                    _get(DebugAppView.prototype.__proto__ || Object.getPrototypeOf(DebugAppView.prototype), 'detach', this).call(this);\n                } catch (e) {\n                    this._rethrowWithContext(e);\n                    throw e;\n                }\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this._resetDebug();\n                try {\n                    _get(DebugAppView.prototype.__proto__ || Object.getPrototypeOf(DebugAppView.prototype), 'destroy', this).call(this);\n                } catch (e) {\n                    this._rethrowWithContext(e);\n                    throw e;\n                }\n            }\n        }, {\n            key: 'detectChanges',\n            value: function detectChanges(throwOnChange) {\n                this._resetDebug();\n                try {\n                    _get(DebugAppView.prototype.__proto__ || Object.getPrototypeOf(DebugAppView.prototype), 'detectChanges', this).call(this, throwOnChange);\n                } catch (e) {\n                    this._rethrowWithContext(e);\n                    throw e;\n                }\n            }\n        }, {\n            key: '_resetDebug',\n            value: function _resetDebug() {\n                this._currentDebugContext = null;\n            }\n        }, {\n            key: 'debug',\n            value: function debug(nodeIndex, rowNum, colNum) {\n                return this._currentDebugContext = new DebugContext$1(this, nodeIndex, rowNum, colNum);\n            }\n        }, {\n            key: '_rethrowWithContext',\n            value: function _rethrowWithContext(e) {\n                if (!(getType(e) == viewWrappedError)) {\n                    if (!(getType(e) == expressionChangedAfterItHasBeenCheckedError)) {\n                        this.cdMode = ChangeDetectorStatus.Errored;\n                    }\n                    if (isPresent(this._currentDebugContext)) {\n                        throw viewWrappedError(e, this._currentDebugContext);\n                    }\n                }\n            }\n        }, {\n            key: 'eventHandler',\n            value: function eventHandler(cb) {\n                var _this42 = this;\n\n                var /** @type {?} */superHandler = _get(DebugAppView.prototype.__proto__ || Object.getPrototypeOf(DebugAppView.prototype), 'eventHandler', this).call(this, cb);\n                return function (eventName, event) {\n                    _this42._resetDebug();\n                    try {\n                        return superHandler.call(_this42, eventName, event);\n                    } catch (e) {\n                        _this42._rethrowWithContext(e);\n                        throw e;\n                    }\n                };\n            }\n        }]);\n\n        return DebugAppView;\n    }(AppView);\n\n    var ViewContainer = function () {\n        /**\n         * @param {?} index\n         * @param {?} parentIndex\n         * @param {?} parentView\n         * @param {?} nativeElement\n         */\n        function ViewContainer(index, parentIndex, parentView, nativeElement) {\n            _classCallCheck(this, ViewContainer);\n\n            this.index = index;\n            this.parentIndex = parentIndex;\n            this.parentView = parentView;\n            this.nativeElement = nativeElement;\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(ViewContainer, [{\n            key: 'detectChangesInNestedViews',\n            value: function detectChangesInNestedViews(throwOnChange) {\n                if (this.nestedViews) {\n                    for (var /** @type {?} */i = 0; i < this.nestedViews.length; i++) {\n                        this.nestedViews[i].detectChanges(throwOnChange);\n                    }\n                }\n            }\n        }, {\n            key: 'destroyNestedViews',\n            value: function destroyNestedViews() {\n                if (this.nestedViews) {\n                    for (var /** @type {?} */i = 0; i < this.nestedViews.length; i++) {\n                        this.nestedViews[i].destroy();\n                    }\n                }\n            }\n        }, {\n            key: 'visitNestedViewRootNodes',\n            value: function visitNestedViewRootNodes(cb, c) {\n                if (this.nestedViews) {\n                    for (var /** @type {?} */i = 0; i < this.nestedViews.length; i++) {\n                        this.nestedViews[i].visitRootNodesInternal(cb, c);\n                    }\n                }\n            }\n        }, {\n            key: 'mapNestedViews',\n            value: function mapNestedViews(nestedViewClass, callback) {\n                var /** @type {?} */result = [];\n                if (this.nestedViews) {\n                    for (var /** @type {?} */i = 0; i < this.nestedViews.length; i++) {\n                        var /** @type {?} */nestedView = this.nestedViews[i];\n                        if (nestedView.clazz === nestedViewClass) {\n                            result.push(callback(nestedView));\n                        }\n                    }\n                }\n                if (this.projectedViews) {\n                    for (var /** @type {?} */_i6 = 0; _i6 < this.projectedViews.length; _i6++) {\n                        var /** @type {?} */projectedView = this.projectedViews[_i6];\n                        if (projectedView.clazz === nestedViewClass) {\n                            result.push(callback(projectedView));\n                        }\n                    }\n                }\n                return result;\n            }\n        }, {\n            key: 'moveView',\n            value: function moveView(view, toIndex) {\n                var /** @type {?} */fromIndex = this.nestedViews.indexOf(view);\n                if (view.type === ViewType.COMPONENT) {\n                    throw new Error('Component views can\\'t be moved!');\n                }\n                var /** @type {?} */nestedViews = this.nestedViews;\n                if (nestedViews == null) {\n                    nestedViews = [];\n                    this.nestedViews = nestedViews;\n                }\n                nestedViews.splice(fromIndex, 1);\n                nestedViews.splice(toIndex, 0, view);\n                var /** @type {?} */prevView = toIndex > 0 ? nestedViews[toIndex - 1] : null;\n                view.moveAfter(this, prevView);\n            }\n        }, {\n            key: 'attachView',\n            value: function attachView(view, viewIndex) {\n                if (view.type === ViewType.COMPONENT) {\n                    throw new Error('Component views can\\'t be moved!');\n                }\n                var /** @type {?} */nestedViews = this.nestedViews;\n                if (nestedViews == null) {\n                    nestedViews = [];\n                    this.nestedViews = nestedViews;\n                }\n                // perf: array.push is faster than array.splice!\n                if (viewIndex >= nestedViews.length) {\n                    nestedViews.push(view);\n                } else {\n                    nestedViews.splice(viewIndex, 0, view);\n                }\n                var /** @type {?} */prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;\n                view.attachAfter(this, prevView);\n            }\n        }, {\n            key: 'detachView',\n            value: function detachView(viewIndex) {\n                var /** @type {?} */view = this.nestedViews[viewIndex];\n                // perf: array.pop is faster than array.splice!\n                if (viewIndex >= this.nestedViews.length - 1) {\n                    this.nestedViews.pop();\n                } else {\n                    this.nestedViews.splice(viewIndex, 1);\n                }\n                if (view.type === ViewType.COMPONENT) {\n                    throw new Error('Component views can\\'t be moved!');\n                }\n                view.detach();\n                return view;\n            }\n        }, {\n            key: 'elementRef',\n            get: function get() {\n                return new ElementRef(this.nativeElement);\n            }\n        }, {\n            key: 'vcRef',\n            get: function get() {\n                return new ViewContainerRef_(this);\n            }\n        }, {\n            key: 'parentInjector',\n            get: function get() {\n                return this.parentView.injector(this.parentIndex);\n            }\n        }, {\n            key: 'injector',\n            get: function get() {\n                return this.parentView.injector(this.index);\n            }\n        }]);\n\n        return ViewContainer;\n    }();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var LifecycleHooks = {};\n    LifecycleHooks.OnInit = 0;\n    LifecycleHooks.OnDestroy = 1;\n    LifecycleHooks.DoCheck = 2;\n    LifecycleHooks.OnChanges = 3;\n    LifecycleHooks.AfterContentInit = 4;\n    LifecycleHooks.AfterContentChecked = 5;\n    LifecycleHooks.AfterViewInit = 6;\n    LifecycleHooks.AfterViewChecked = 7;\n    LifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\n    LifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\n    LifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\n    LifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\n    LifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\n    LifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\n    LifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\n    LifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\n    var /** @type {?} */LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];\n\n    /**\n     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n     * transition transition} entries that will be evaluated when the expression bound to the trigger\n     * changes.\n     *\n     * Triggers are registered within the component annotation data under the {\\@link\n     * Component#animations-anchor animations section}. An animation trigger can be placed on an element\n     * within a template by referencing the name of the trigger followed by the expression value that the\n     * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\n     *\n     * ### Usage\n     *\n     * `trigger` will create an animation trigger reference based on the provided `name` value. The\n     * provided `animation` value is expected to be an array consisting of {\\@link state state} and {\\@link\n     * transition transition} declarations.\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'my-component-tpl.html',\n     *   animations: [\n     *     trigger(\"myAnimationTrigger\", [\n     *       state(...),\n     *       state(...),\n     *       transition(...),\n     *       transition(...)\n     *     ])\n     *   ]\n     * })\n     * class MyComponent {\n     *   myStatusExp = \"something\";\n     * }\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger` animation\n     * trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * tools/gulp-tasks/validate-commit-message.js ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} name\n     * @param {?} definitions\n     * @return {?}\n     */\n    function trigger$2(name, definitions) {\n        return { name: name, definitions: definitions };\n    }\n    /**\n     * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `animate` specifies an animation step that will apply the provided `styles` data for a given\n     * amount of time based on the provided `timing` expression value. Calls to `animate` are expected\n     * to be used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link\n     * transition transition}.\n     *\n     * ### Usage\n     *\n     * The `animate` function accepts two input parameters: `timing` and `styles`:\n     *\n     * - `timing` is a string based value that can be a combination of a duration with optional delay\n     * and easing values. The format for the expression breaks down to `duration delay easing`\n     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n     * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the\n     * `duration` value in millisecond form.\n     * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n     * keyframes keyframes}. If left empty then the styles from the destination state will be collected\n     * and used (this is useful when describing an animation step that will complete an animation by\n     * {\\@link transition#the-final-animate-call animating to the final state}).\n     *\n     * ```typescript\n     * // various functions for specifying timing data\n     * animate(500, style(...))\n     * animate(\"1s\", style(...))\n     * animate(\"100ms 0.5s\", style(...))\n     * animate(\"5s ease\", style(...))\n     * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n     *\n     * // either style() of keyframes() can be used\n     * animate(500, style({ background: \"red\" }))\n     * animate(500, keyframes([\n     *   style({ background: \"blue\" })),\n     *   style({ background: \"red\" }))\n     * ])\n     * ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} timings\n     * @param {?=} styles\n     * @return {?}\n     */\n    function animate$2(timings) {\n        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        return { type: 4 /* Animate */, styles: styles, timings: timings };\n    }\n    /**\n     * `group` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are\n     * useful when a series of styles must be animated/closed off at different statrting/ending times.\n     *\n     * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n     * transition} and it will only continue to the next instruction once all of the inner animation\n     * steps have completed.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `group` animation function can either consist of {\\@link\n     * style style} or {\\@link animate animate} function calls. Each call to `style()` or `animate()`\n     * within a group will be executed instantly (use {\\@link keyframes keyframes} or a {\\@link\n     * animate#usage animate() with a delay value} to offset styles to be applied at a later time).\n     *\n     * ```typescript\n     * group([\n     *   animate(\"1s\", { background: \"black\" }))\n     *   animate(\"2s\", { color: \"white\" }))\n     * ])\n     * ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function group$2(steps) {\n        return { type: 3 /* Group */, steps: steps };\n    }\n    /**\n     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by\n     * default when an array is passed as animation data into {\\@link transition transition}.)\n     *\n     * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n     * transition} and it will only continue to the next instruction once each of the inner animation\n     * steps have completed.\n     *\n     * To perform animation styling in parallel with other animation steps then have a look at the\n     * {\\@link group group} animation function.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `sequence` animation function can either consist of\n     * {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply the\n     * provided styling data immediately while a call to `animate()` will apply its styling data over a\n     * given time depending on its timing data.\n     *\n     * ```typescript\n     * sequence([\n     *   style({ opacity: 0 })),\n     *   animate(\"1s\", { opacity: 1 }))\n     * ])\n     * ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function sequence$2(steps) {\n        return { type: 2 /* Sequence */, steps: steps };\n    }\n    /**\n     * `style` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `style` declares a key/value object containing CSS properties/styles that can then be used for\n     * {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as styling data\n     * for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n     *\n     * ### Usage\n     *\n     * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs\n     * to be defined.\n     *\n     * ```typescript\n     * // string values are used for css properties\n     * style({ background: \"red\", color: \"blue\" })\n     *\n     * // numerical (pixel) values are also supported\n     * style({ width: 100, height: 0 })\n     * ```\n     *\n     * #### Auto-styles (using `*`)\n     *\n     * When an asterix (`*`) character is used as a value then it will be detected from the element\n     * being animated and applied as animation data when the animation starts.\n     *\n     * This feature proves useful for a state depending on layout and/or environment factors; in such\n     * cases the styles are calculated just before the animation starts.\n     *\n     * ```typescript\n     * // the steps below will animate from 0 to the\n     * // actual height of the element\n     * style({ height: 0 }),\n     * animate(\"1s\", style({ height: \"*\" }))\n     * ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} tokens\n     * @return {?}\n     */\n    function style$2(tokens) {\n        var /** @type {?} */input = void 0;\n        var /** @type {?} */offset = null;\n        if (Array.isArray(tokens)) {\n            input = tokens;\n        } else {\n            input = [/** @type {?} */tokens];\n        }\n        input.forEach(function (entry) {\n            var /** @type {?} */entryOffset = entry['offset'];\n            if (entryOffset != null) {\n                offset = offset == null ? parseFloat( /** @type {?} */entryOffset) : offset;\n            }\n        });\n        return _style(offset, input);\n    }\n    /**\n     * @param {?} offset\n     * @param {?} styles\n     * @return {?}\n     */\n    function _style(offset, styles) {\n        return { type: 6 /* Style */, styles: styles, offset: offset };\n    }\n    /**\n     * `state` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `state` declares an animation state within the given trigger. When a state is active within a\n     * component then its associated styles will persist on the element that the trigger is attached to\n     * (even when the animation ends).\n     *\n     * To animate between states, have a look at the animation {\\@link transition transition} DSL\n     * function. To register states to an animation trigger please have a look at the {\\@link trigger\n     * trigger} function.\n     *\n     * #### The `void` state\n     *\n     * The `void` state value is a reserved word that angular uses to determine when the element is not\n     * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n     * associated element is void).\n     *\n     * #### The `*` (default) state\n     *\n     * The `*` state (when styled) is a fallback state that will be used if the state that is being\n     * animated is not declared within the trigger.\n     *\n     * ### Usage\n     *\n     * `state` will declare an animation state with its associated styles\n     * within the given trigger.\n     *\n     * - `stateNameExpr` can be one or more state names separated by commas.\n     * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n     * the state has been reached.\n     *\n     * ```typescript\n     * // \"void\" is a reserved name for a state and is used to represent\n     * // the state in which an element is detached from from the application.\n     * state(\"void\", style({ height: 0 }))\n     *\n     * // user-defined states\n     * state(\"closed\", style({ height: 0 }))\n     * state(\"open, visible\", style({ height: \"*\" }))\n     * ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} name\n     * @param {?} styles\n     * @return {?}\n     */\n    function state$2(name, styles) {\n        return { type: 0 /* State */, name: name, styles: styles };\n    }\n    /**\n     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n     * by an `offset` value.\n     *\n     * ### Usage\n     *\n     * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n     * animation function. Instead of applying animations from where they are currently to their\n     * destination, keyframes can describe how each style entry is applied and at what point within the\n     * animation arc (much like CSS Keyframe Animations do).\n     *\n     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what\n     * percentage of the animate time the styles will be applied.\n     *\n     * ```typescript\n     * // the provided offset values describe when each backgroundColor value is applied.\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\", offset: 0 }),\n     *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n     *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n     *   style({ backgroundColor: \"black\", offset: 1 })\n     * ]))\n     * ```\n     *\n     * Alternatively, if there are no `offset` values used within the style entries then the offsets\n     * will be calculated automatically.\n     *\n     * ```typescript\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\" }) // offset = 0\n     *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n     *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n     *   style({ backgroundColor: \"black\" }) // offset = 1\n     * ]))\n     * ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function keyframes$2(steps) {\n        return { type: 5 /* KeyframeSequence */, steps: steps };\n    }\n    /**\n     * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation DSL language. If this information is new, please navigate to the {\\@link\n     * Component#animations-anchor component animations metadata page} to gain a better understanding of\n     * how animations in Angular2 are used.\n     *\n     * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n     * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>\n     * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting\n     * and/or ending state).\n     *\n     * A function can also be provided as the `stateChangeExpr` argument for a transition and this\n     * function will be executed each time a state change occurs. If the value returned within the\n     * function is true then the associated animation will be run.\n     *\n     * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n     * to animate to a state value and persist its styles then one or more {\\@link state animation\n     * states} is expected to be defined.\n     *\n     * ### Usage\n     *\n     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n     * what the previous state is and what the current state has become. In other words, if a transition\n     * is defined that matches the old/current state criteria then the associated animation will be\n     * triggered.\n     *\n     * ```typescript\n     * // all transition/state changes are defined within an animation trigger\n     * trigger(\"myAnimationTrigger\", [\n     *   // if a state is defined then its styles will be persisted when the\n     *   // animation has fully completed itself\n     *   state(\"on\", style({ background: \"green\" })),\n     *   state(\"off\", style({ background: \"grey\" })),\n     *\n     *   // a transition animation that will be kicked off when the state value\n     *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n     *   transition(\"on => off\", animate(500)),\n     *\n     *   // it is also possible to do run the same animation for both directions\n     *   transition(\"on <=> off\", animate(500)),\n     *\n     *   // or to define multiple states pairs separated by commas\n     *   transition(\"on => off, off => void\", animate(500)),\n     *\n     *   // this is a catch-all state change for when an element is inserted into\n     *   // the page and the destination state is unknown\n     *   transition(\"void => *\", [\n     *     style({ opacity: 0 }),\n     *     animate(500)\n     *   ]),\n     *\n     *   // this will capture a state change between any states\n     *   transition(\"* => *\", animate(\"1s 0s\")),\n     *\n     *   // you can also go full out and include a function\n     *   transition((fromState, toState) => {\n     *     // when `true` then it will allow the animation below to be invoked\n     *     return fromState == \"off\" && toState == \"on\";\n     *   }, animate(\"1s 0s\"))\n     * ])\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger` animation\n     * trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * ```\n     *\n     * #### The final `animate` call\n     *\n     * If the final step within the transition steps is a call to `animate()` that **only** uses a\n     * timing value with **no style data** then it will be automatically used as the final animation arc\n     * for the element to animate itself to the final state. This involves an automatic mix of\n     * adding/removing CSS styles so that the element will be in the exact state it should be for the\n     * applied state to be presented correctly.\n     *\n     * ```\n     * // start off by hiding the element, but make sure that it animates properly to whatever state\n     * // is currently active for \"myAnimationTrigger\"\n     * transition(\"void => *\", [\n     *   style({ opacity: 0 }),\n     *   animate(500)\n     * ])\n     * ```\n     *\n     * ### Transition Aliases (`:enter` and `:leave`)\n     *\n     * Given that enter (insertion) and leave (removal) animations are so common, the `transition`\n     * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*\n     * => void` state changes.\n     *\n     * ```\n     * transition(\":enter\", [\n     *   style({ opacity: 0 }),\n     *   animate(500, style({ opacity: 1 }))\n     * ])\n     * transition(\":leave\", [\n     *   animate(500, style({ opacity: 0 }))\n     * ])\n     * ```\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} stateChangeExpr\n     * @param {?} steps\n     * @return {?}\n     */\n    function transition$2(stateChangeExpr, steps) {\n        return {\n            type: 1 /* Transition */\n            , expr: stateChangeExpr,\n            animation: Array.isArray(steps) ? sequence$2(steps) : steps\n        };\n    }\n\n    /**\n     * @deprecated This symbol has moved. Please Import from @angular/animations instead!\n     */\n    var /** @type {?} */AUTO_STYLE$1 = '*';\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} name\n     * @param {?} definitions\n     * @return {?}\n     */\n    function trigger$1(name, definitions) {\n        return trigger$2(name, definitions);\n    }\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} timings\n     * @param {?=} styles\n     * @return {?}\n     */\n    function animate$1(timings) {\n        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        return animate$2(timings, styles);\n    }\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} steps\n     * @return {?}\n     */\n    function group$1(steps) {\n        return group$2(steps);\n    }\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} steps\n     * @return {?}\n     */\n    function sequence$1(steps) {\n        return sequence$2(steps);\n    }\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} tokens\n     * @return {?}\n     */\n    function style$1(tokens) {\n        return style$2(tokens);\n    }\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} name\n     * @param {?} styles\n     * @return {?}\n     */\n    function state$1(name, styles) {\n        return state$2(name, styles);\n    }\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} steps\n     * @return {?}\n     */\n    function keyframes$1(steps) {\n        return keyframes$2(steps);\n    }\n    /**\n     * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\n     * @param {?} stateChangeExpr\n     * @param {?} steps\n     * @return {?}\n     */\n    function transition$1(stateChangeExpr, steps) {\n        return transition$2(stateChangeExpr, steps);\n    }\n\n    exports.createPlatform = createPlatform;\n    exports.assertPlatform = assertPlatform;\n    exports.destroyPlatform = destroyPlatform;\n    exports.getPlatform = getPlatform;\n    exports.PlatformRef = PlatformRef;\n    exports.ApplicationRef = ApplicationRef;\n    exports.enableProdMode = enableProdMode;\n    exports.isDevMode = isDevMode;\n    exports.createPlatformFactory = createPlatformFactory;\n    exports.NgProbeToken = NgProbeToken;\n    exports.APP_ID = APP_ID;\n    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n    exports.PLATFORM_ID = PLATFORM_ID;\n    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n    exports.APP_INITIALIZER = APP_INITIALIZER;\n    exports.ApplicationInitStatus = ApplicationInitStatus;\n    exports.DebugElement = DebugElement;\n    exports.DebugNode = DebugNode;\n    exports.asNativeElements = asNativeElements;\n    exports.getDebugNode = getDebugNode;\n    exports.Testability = Testability;\n    exports.TestabilityRegistry = TestabilityRegistry;\n    exports.setTestabilityGetter = setTestabilityGetter;\n    exports.TRANSLATIONS = TRANSLATIONS;\n    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n    exports.LOCALE_ID = LOCALE_ID;\n    exports.MissingTranslationStrategy = MissingTranslationStrategy;\n    exports.ApplicationModule = ApplicationModule;\n    exports.wtfCreateScope = wtfCreateScope;\n    exports.wtfLeave = wtfLeave;\n    exports.wtfStartTimeRange = wtfStartTimeRange;\n    exports.wtfEndTimeRange = wtfEndTimeRange;\n    exports.Type = Type;\n    exports.EventEmitter = EventEmitter;\n    exports.ErrorHandler = ErrorHandler;\n    exports.AnimationPlayer = AnimationPlayer;\n    exports.AnimationStyles = AnimationStyles;\n    exports.AnimationKeyframe = AnimationKeyframe;\n    exports.Sanitizer = Sanitizer;\n    exports.SecurityContext = SecurityContext;\n    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n    exports.Attribute = Attribute;\n    exports.ContentChild = ContentChild;\n    exports.ContentChildren = ContentChildren;\n    exports.Query = Query;\n    exports.ViewChild = ViewChild;\n    exports.ViewChildren = ViewChildren;\n    exports.Component = Component;\n    exports.Directive = Directive;\n    exports.HostBinding = HostBinding;\n    exports.HostListener = HostListener;\n    exports.Input = Input;\n    exports.Output = Output;\n    exports.Pipe = Pipe;\n    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n    exports.NgModule = NgModule;\n    exports.ViewEncapsulation = ViewEncapsulation;\n    exports.Version = Version;\n    exports.VERSION = VERSION;\n    exports.Class = Class;\n    exports.forwardRef = forwardRef;\n    exports.resolveForwardRef = resolveForwardRef;\n    exports.Injector = Injector;\n    exports.ReflectiveInjector = ReflectiveInjector;\n    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n    exports.ReflectiveKey = ReflectiveKey;\n    exports.InjectionToken = InjectionToken;\n    exports.OpaqueToken = OpaqueToken;\n    exports.Inject = Inject;\n    exports.Optional = Optional;\n    exports.Injectable = Injectable;\n    exports.Self = Self;\n    exports.SkipSelf = SkipSelf;\n    exports.Host = Host;\n    exports.NgZone = NgZone;\n    exports.RenderComponentType = RenderComponentType;\n    exports.Renderer = RendererV1;\n    exports.RendererFactoryV2 = RendererFactoryV2;\n    exports.RendererV2 = RendererV2;\n    exports.RootRenderer = RootRenderer;\n    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n    exports.Compiler = Compiler;\n    exports.CompilerFactory = CompilerFactory;\n    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n    exports.ComponentFactory = ComponentFactory;\n    exports.ComponentRef = ComponentRef;\n    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n    exports.ElementRef = ElementRef;\n    exports.NgModuleFactory = NgModuleFactory;\n    exports.NgModuleRef = NgModuleRef;\n    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n    exports.getModuleFactory = getModuleFactory;\n    exports.QueryList = QueryList;\n    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n    exports.TemplateRef = TemplateRef;\n    exports.ViewContainerRef = ViewContainerRef;\n    exports.EmbeddedViewRef = EmbeddedViewRef;\n    exports.ViewRef = ViewRef;\n    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;\n    exports.ChangeDetectorRef = ChangeDetectorRef;\n    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n    exports.IterableDiffers = IterableDiffers;\n    exports.KeyValueDiffers = KeyValueDiffers;\n    exports.SimpleChange = SimpleChange;\n    exports.WrappedValue = WrappedValue;\n    exports.platformCore = platformCore;\n    exports.ɵANY_STATE = ANY_STATE;\n    exports.ɵDEFAULT_STATE = DEFAULT_STATE;\n    exports.ɵEMPTY_STATE = EMPTY_STATE;\n    exports.ɵFILL_STYLE_FLAG = FILL_STYLE_FLAG;\n    exports.ɵAnimationGroupPlayer = AnimationGroupPlayer;\n    exports.ɵAnimationKeyframe = AnimationKeyframe;\n    exports.ɵAnimationPlayer = AnimationPlayer;\n    exports.ɵNoOpAnimationPlayer = NoOpAnimationPlayer;\n    exports.ɵAnimationSequencePlayer = AnimationSequencePlayer;\n    exports.ɵbalanceAnimationKeyframes = balanceAnimationKeyframes;\n    exports.ɵclearStyles = clearStyles;\n    exports.ɵcollectAndResolveStyles = collectAndResolveStyles;\n    exports.ɵflattenStyles = flattenStyles;\n    exports.ɵprepareFinalAnimationStyles = prepareFinalAnimationStyles;\n    exports.ɵrenderStyles = renderStyles;\n    exports.ɵAnimationStyles = AnimationStyles;\n    exports.ɵAnimationTransition = AnimationTransition;\n    exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;\n    exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;\n    exports.ɵValueUnwrapper = ValueUnwrapper;\n    exports.ɵdevModeEqual = devModeEqual;\n    exports.ɵChangeDetectorStatus = ChangeDetectorStatus;\n    exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;\n    exports.ɵConsole = Console;\n    exports.ɵDebugDomRootRenderer = DebugDomRootRenderer;\n    exports.ɵERROR_COMPONENT_TYPE = ERROR_COMPONENT_TYPE;\n    exports.ɵComponentFactory = ComponentFactory;\n    exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;\n    exports.ɵDebugContext = DebugContext$1;\n    exports.ɵStaticNodeDebugInfo = StaticNodeDebugInfo;\n    exports.ɵAppView = AppView;\n    exports.ɵDebugAppView = DebugAppView;\n    exports.ɵViewContainer = ViewContainer;\n    exports.ɵViewType = ViewType;\n    exports.ɵLIFECYCLE_HOOKS_VALUES = LIFECYCLE_HOOKS_VALUES;\n    exports.ɵLifecycleHooks = LifecycleHooks;\n    exports.ɵViewMetadata = ViewMetadata;\n    exports.ɵReflector = Reflector;\n    exports.ɵreflector = reflector;\n    exports.ɵReflectionCapabilities = ReflectionCapabilities;\n    exports.ɵReflectorReader = ReflectorReader;\n    exports.ɵRenderDebugInfo = RenderDebugInfo;\n    exports.ɵmakeDecorator = makeDecorator;\n    exports.ɵisObservable = isObservable;\n    exports.ɵisPromise = isPromise;\n    exports.ɵComponentRef_ = ComponentRef_;\n    exports.ɵNgModuleInjector = NgModuleInjector;\n    exports.ɵregisterModuleFactory = registerModuleFactory;\n    exports.ɵTemplateRef_ = TemplateRef_;\n    exports.ɵEMPTY_ARRAY = EMPTY_ARRAY;\n    exports.ɵEMPTY_INLINE_ARRAY = EMPTY_INLINE_ARRAY;\n    exports.ɵEMPTY_MAP = EMPTY_MAP;\n    exports.ɵInlineArray16 = InlineArray16;\n    exports.ɵInlineArray2 = InlineArray2;\n    exports.ɵInlineArray4 = InlineArray4;\n    exports.ɵInlineArray8 = InlineArray8;\n    exports.ɵInlineArrayDynamic = InlineArrayDynamic;\n    exports.ɵViewUtils = ViewUtils;\n    exports.ɵcastByValue = castByValue;\n    exports.ɵcheckBinding = checkBinding;\n    exports.ɵcheckBindingChange = checkBindingChange;\n    exports.ɵcheckRenderAttribute = checkRenderAttribute;\n    exports.ɵcheckRenderClass = checkRenderClass;\n    exports.ɵcheckRenderProperty = checkRenderProperty;\n    exports.ɵcheckRenderStyle = checkRenderStyle;\n    exports.ɵcheckRenderText = checkRenderText;\n    exports.ɵcreateRenderComponentType = createRenderComponentType;\n    exports.ɵcreateRenderElement = createRenderElement;\n    exports.ɵgetComponentFactoryViewClass = getComponentFactoryViewClass;\n    exports.ɵinlineInterpolate = inlineInterpolate;\n    exports.ɵinterpolate = interpolate;\n    exports.ɵnoop = noop;\n    exports.ɵpureProxy1 = pureProxy1;\n    exports.ɵpureProxy10 = pureProxy10;\n    exports.ɵpureProxy2 = pureProxy2;\n    exports.ɵpureProxy3 = pureProxy3;\n    exports.ɵpureProxy4 = pureProxy4;\n    exports.ɵpureProxy5 = pureProxy5;\n    exports.ɵpureProxy6 = pureProxy6;\n    exports.ɵpureProxy7 = pureProxy7;\n    exports.ɵpureProxy8 = pureProxy8;\n    exports.ɵpureProxy9 = pureProxy9;\n    exports.ɵselectOrCreateRenderHostElement = selectOrCreateRenderHostElement;\n    exports.ɵsetBindingDebugInfo = setBindingDebugInfo;\n    exports.ɵsetBindingDebugInfoForChanges = setBindingDebugInfoForChanges;\n    exports.ɵsubscribeToRenderElement = subscribeToRenderElement;\n    exports.ɵArgumentType = ArgumentType;\n    exports.ɵBindingType = BindingType;\n    exports.ɵDepFlags = DepFlags;\n    exports.ɵNodeFlags = NodeFlags;\n    exports.ɵProviderType = ProviderType;\n    exports.ɵQueryBindingType = QueryBindingType;\n    exports.ɵQueryValueType = QueryValueType;\n    exports.ɵViewFlags = ViewFlags;\n    exports.ɵanchorDef = anchorDef;\n    exports.ɵcreateComponentFactory = createComponentFactory;\n    exports.ɵcreateRendererTypeV2 = createRendererTypeV2;\n    exports.ɵdirectiveDef = directiveDef;\n    exports.ɵelementDef = elementDef;\n    exports.ɵelementEventFullName = elementEventFullName;\n    exports.ɵngContentDef = ngContentDef;\n    exports.ɵnodeValue = nodeValue;\n    exports.ɵpipeDef = pipeDef;\n    exports.ɵproviderDef = providerDef;\n    exports.ɵpureArrayDef = pureArrayDef;\n    exports.ɵpureObjectDef = pureObjectDef;\n    exports.ɵpurePipeDef = purePipeDef;\n    exports.ɵqueryDef = queryDef;\n    exports.ɵtextDef = textDef;\n    exports.ɵunwrapValue = unwrapValue;\n    exports.ɵviewDef = viewDef;\n    exports.AUTO_STYLE = AUTO_STYLE$1;\n    exports.trigger = trigger$1;\n    exports.animate = animate$1;\n    exports.group = group$1;\n    exports.sequence = sequence$1;\n    exports.style = style$1;\n    exports.state = state$1;\n    exports.keyframes = keyframes$1;\n    exports.transition = transition$1;\n    exports.ɵz = AnimationQueue;\n    exports.ɵbc = animate$2;\n    exports.ɵbd = group$2;\n    exports.ɵbh = keyframes$2;\n    exports.ɵbe = sequence$2;\n    exports.ɵbg = state$2;\n    exports.ɵbf = style$2;\n    exports.ɵbi = transition$2;\n    exports.ɵbb = trigger$2;\n    exports.ɵp = _initViewEngine;\n    exports.ɵm = _iterableDiffersFactory;\n    exports.ɵn = _keyValueDiffersFactory;\n    exports.ɵo = _localeFactory;\n    exports.ɵf = ApplicationRef_;\n    exports.ɵg = _appIdRandomProviderFactory;\n    exports.ɵh = defaultIterableDiffers;\n    exports.ɵi = defaultKeyValueDiffers;\n    exports.ɵk = DefaultIterableDifferFactory;\n    exports.ɵl = DefaultKeyValueDifferFactory;\n    exports.ɵc = ReflectiveInjector_;\n    exports.ɵd = ReflectiveDependency;\n    exports.ɵe = resolveReflectiveProviders;\n    exports.ɵj = isBlank;\n    exports.ɵq = wtfEnabled;\n    exports.ɵs = createScope;\n    exports.ɵr = detectWTF;\n    exports.ɵv = endTimeRange;\n    exports.ɵt = leave;\n    exports.ɵu = startTimeRange;\n    exports.ɵa = makeParamDecorator;\n    exports.ɵb = makePropDecorator;\n    exports.ɵx = _def;\n    exports.ɵy = NodeType;\n});\n"},71:function(e,n){e.exports="(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define('@angular/platform-browser-dynamic', ['exports', '@angular/compiler', '@angular/core', '@angular/common', '@angular/platform-browser'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('@angular/compiler'), require('@angular/core'), require('@angular/common'), require('@angular/platform-browser'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.ng.compiler, global.ng.core, global.ng.common, global.ng.platformBrowser);\n        global.ng = global.ng || {};\n        global.ng.platformBrowserDynamic = mod.exports;\n    }\n})(this, function (exports, _compiler, _core, _common, _platformBrowser) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.ɵResourceLoaderImpl = exports.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = exports.VERSION = exports.platformBrowserDynamic = exports.RESOURCE_CACHE_PROVIDER = undefined;\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var ResourceLoaderImpl = function (_ResourceLoader) {\n        _inherits(ResourceLoaderImpl, _ResourceLoader);\n\n        function ResourceLoaderImpl() {\n            _classCallCheck(this, ResourceLoaderImpl);\n\n            return _possibleConstructorReturn(this, (ResourceLoaderImpl.__proto__ || Object.getPrototypeOf(ResourceLoaderImpl)).apply(this, arguments));\n        }\n\n        _createClass(ResourceLoaderImpl, [{\n            key: 'get',\n            value: function get(url) {\n                var resolve = void 0;\n                var reject = void 0;\n                var promise = new Promise(function (res, rej) {\n                    resolve = res;\n                    reject = rej;\n                });\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', url, true);\n                xhr.responseType = 'text';\n                xhr.onload = function () {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n                    // by IE10)\n                    var response = xhr.response || xhr.responseText;\n                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                    var status = xhr.status === 1223 ? 204 : xhr.status;\n                    // fix status code when it is 0 (0 status is undocumented).\n                    // Occurs when accessing file resources or on Android 4.1 stock browser\n                    // while retrieving files from application cache.\n                    if (status === 0) {\n                        status = response ? 200 : 0;\n                    }\n                    if (200 <= status && status <= 300) {\n                        resolve(response);\n                    } else {\n                        reject('Failed to load ' + url);\n                    }\n                };\n                xhr.onerror = function () {\n                    reject('Failed to load ' + url);\n                };\n                xhr.send();\n                return promise;\n            }\n        }]);\n\n        return ResourceLoaderImpl;\n    }(_compiler.ResourceLoader);\n\n    ResourceLoaderImpl.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    ResourceLoaderImpl.ctorParameters = function () {\n        return [];\n    };\n\n    var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [_platformBrowser.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, {\n        provide: _core.COMPILER_OPTIONS,\n        useValue: { providers: [{ provide: _compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },\n        multi: true\n    }, { provide: _core.PLATFORM_ID, useValue: _common.ɵPLATFORM_BROWSER_ID }];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope = void 0;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        } else {\n            globalScope = global;\n        }\n    } else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var _global = globalScope;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    _global.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n\n    /**\n     * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n     * ResourceLoader.\n     *\n     * The template cache needs to be built and loaded into window.$templateCache\n     * via a separate mechanism.\n     */\n\n    var CachedResourceLoader = function (_ResourceLoader2) {\n        _inherits(CachedResourceLoader, _ResourceLoader2);\n\n        function CachedResourceLoader() {\n            _classCallCheck(this, CachedResourceLoader);\n\n            var _this2 = _possibleConstructorReturn(this, (CachedResourceLoader.__proto__ || Object.getPrototypeOf(CachedResourceLoader)).call(this));\n\n            _this2._cache = _global.$templateCache;\n            if (_this2._cache == null) {\n                throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\n            }\n            return _this2;\n        }\n\n        _createClass(CachedResourceLoader, [{\n            key: 'get',\n            value: function get(url) {\n                if (this._cache.hasOwnProperty(url)) {\n                    return Promise.resolve(this._cache[url]);\n                } else {\n                    return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);\n                }\n            }\n        }]);\n\n        return CachedResourceLoader;\n    }(_compiler.ResourceLoader);\n\n    /**\n     * @stable\n     */\n    var VERSION = new _core.Version('4.0.0-rc.1');\n\n    /**\n     * @experimental\n     */\n    var RESOURCE_CACHE_PROVIDER = [{ provide: _compiler.ResourceLoader, useClass: CachedResourceLoader }];\n    /**\n     * @stable\n     */\n    var platformBrowserDynamic = (0, _core.createPlatformFactory)(_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n    exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;\n    exports.platformBrowserDynamic = platformBrowserDynamic;\n    exports.VERSION = VERSION;\n    exports.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS;\n    exports.ɵResourceLoaderImpl = ResourceLoaderImpl;\n});\n"},72:function(e,n){e.exports="(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define('@angular/platform-browser', ['exports', '@angular/common', '@angular/core'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('@angular/common'), require('@angular/core'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.ng.common, global.ng.core);\n        global.ng = global.ng || {};\n        global.ng.platformBrowser = mod.exports;\n    }\n})(this, function (exports, _common, _core) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.ɵf = exports.ɵe = exports.ɵd = exports.ɵg = exports.ɵh = exports.ɵi = exports.ɵa = exports.ɵc = exports.ɵb = exports.ɵWebAnimationsDriver = exports.ɵSharedStylesHost = exports.ɵDomSharedStylesHost = exports.ɵKeyEventsPlugin = exports.ɵHammerGesturesPlugin = exports.ɵDomEventsPlugin = exports.ɵsplitNamespace = exports.ɵshimHostAttribute = exports.ɵshimContentAttribute = exports.ɵisNamespaced = exports.ɵflattenStyles = exports.ɵNAMESPACE_URIS = exports.ɵDomRootRenderer_ = exports.ɵDomRootRenderer = exports.ɵDomRendererFactoryV2 = exports.ɵsetRootDomAdapter = exports.ɵgetDOM = exports.ɵDomAdapter = exports.ɵELEMENT_PROBE_PROVIDERS = exports.ɵBrowserGetTestability = exports.ɵTRANSITION_ID = exports.ɵBrowserPlatformLocation = exports.ɵBrowserDomAdapter = exports.ɵinitDomAdapter = exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = exports.ɵBROWSER_SANITIZATION_PROVIDERS = exports.VERSION = exports.DomSanitizer = exports.HammerGestureConfig = exports.HAMMER_GESTURE_CONFIG = exports.EventManager = exports.EVENT_MANAGER_PLUGINS = exports.DOCUMENT = exports.NgProbeToken = exports.By = exports.AnimationDriver = exports.enableDebugTools = exports.disableDebugTools = exports.Title = exports.Meta = exports.platformBrowser = exports.BrowserModule = undefined;\n\n    var core = _interopRequireWildcard(_core);\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};\n\n            if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                }\n            }\n\n            newObj.default = obj;\n            return newObj;\n        }\n    }\n\n    var _get = function get(object, property, receiver) {\n        if (object === null) object = Function.prototype;\n        var desc = Object.getOwnPropertyDescriptor(object, property);\n\n        if (desc === undefined) {\n            var parent = Object.getPrototypeOf(object);\n\n            if (parent === null) {\n                return undefined;\n            } else {\n                return get(parent, property, receiver);\n            }\n        } else if (\"value\" in desc) {\n            return desc.value;\n        } else {\n            var getter = desc.get;\n\n            if (getter === undefined) {\n                return undefined;\n            }\n\n            return getter.call(receiver);\n        }\n    };\n\n    var _slicedToArray = function () {\n        function sliceIterator(arr, i) {\n            var _arr = [];\n            var _n = true;\n            var _d = false;\n            var _e = undefined;\n\n            try {\n                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                    _arr.push(_s.value);\n\n                    if (i && _arr.length === i) break;\n                }\n            } catch (err) {\n                _d = true;\n                _e = err;\n            } finally {\n                try {\n                    if (!_n && _i[\"return\"]) _i[\"return\"]();\n                } finally {\n                    if (_d) throw _e;\n                }\n            }\n\n            return _arr;\n        }\n\n        return function (arr, i) {\n            if (Array.isArray(arr)) {\n                return arr;\n            } else if (Symbol.iterator in Object(arr)) {\n                return sliceIterator(arr, i);\n            } else {\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n            }\n        };\n    }();\n\n    function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n            return arr2;\n        } else {\n            return Array.from(arr);\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var NoOpAnimationDriver = function () {\n        function NoOpAnimationDriver() {\n            _classCallCheck(this, NoOpAnimationDriver);\n        }\n\n        _createClass(NoOpAnimationDriver, [{\n            key: 'animate',\n            value: function animate(element, startingStyles, keyframes, duration, delay, easing) {\n                var previousPlayers = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n\n                return new _core.ɵNoOpAnimationPlayer();\n            }\n        }]);\n\n        return NoOpAnimationDriver;\n    }();\n\n    var AnimationDriver = function () {\n        function AnimationDriver() {\n            _classCallCheck(this, AnimationDriver);\n        }\n\n        _createClass(AnimationDriver, [{\n            key: 'animate',\n            value: function animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {}\n        }]);\n\n        return AnimationDriver;\n    }();\n\n    AnimationDriver.NOOP = new NoOpAnimationDriver();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */globalScope = void 0;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        } else {\n            globalScope = global;\n        }\n    } else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var /** @type {?} */global$1 = globalScope;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return '' + token.overriddenName;\n        }\n        if (token.name) {\n            return '' + token.name;\n        }\n        var /** @type {?} */res = token.toString();\n        var /** @type {?} */newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n    /**\n     * @param {?} global\n     * @param {?} path\n     * @param {?} value\n     * @return {?}\n     */\n    function setValueOnPath(global, path, value) {\n        var /** @type {?} */parts = path.split('.');\n        var /** @type {?} */obj = global;\n        while (parts.length > 1) {\n            var /** @type {?} */name = parts.shift();\n            if (obj.hasOwnProperty(name) && obj[name] != null) {\n                obj = obj[name];\n            } else {\n                obj = obj[name] = {};\n            }\n        }\n        if (obj === undefined || obj === null) {\n            obj = {};\n        }\n        obj[parts.shift()] = value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */_DOM = null;\n    /**\n     * @return {?}\n     */\n    function getDOM() {\n        return _DOM;\n    }\n    /**\n     * @param {?} adapter\n     * @return {?}\n     */\n    function setRootDomAdapter(adapter) {\n        if (!_DOM) {\n            _DOM = adapter;\n        }\n    }\n    /**\n     * Provides DOM operations in an environment-agnostic way.\n     *\n     * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n     * can introduce XSS risks.\n     * @abstract\n     */\n\n    var DomAdapter = function () {\n        function DomAdapter() {\n            _classCallCheck(this, DomAdapter);\n\n            this.resourceLoaderType = null;\n        }\n        /**\n         * @abstract\n         * @param {?} element\n         * @param {?} name\n         * @return {?}\n         */\n\n\n        _createClass(DomAdapter, [{\n            key: 'hasProperty',\n            value: function hasProperty(element, name) {}\n        }, {\n            key: 'setProperty',\n            value: function setProperty(el, name, value) {}\n        }, {\n            key: 'getProperty',\n            value: function getProperty(el, name) {}\n        }, {\n            key: 'invoke',\n            value: function invoke(el, methodName, args) {}\n        }, {\n            key: 'logError',\n            value: function logError(error) {}\n        }, {\n            key: 'log',\n            value: function log(error) {}\n        }, {\n            key: 'logGroup',\n            value: function logGroup(error) {}\n        }, {\n            key: 'logGroupEnd',\n            value: function logGroupEnd() {}\n        }, {\n            key: 'parse',\n            value: function parse(templateHtml) {}\n        }, {\n            key: 'querySelector',\n            value: function querySelector(el, selector) {}\n        }, {\n            key: 'querySelectorAll',\n            value: function querySelectorAll(el, selector) {}\n        }, {\n            key: 'on',\n            value: function on(el, evt, listener) {}\n        }, {\n            key: 'onAndCancel',\n            value: function onAndCancel(el, evt, listener) {}\n        }, {\n            key: 'dispatchEvent',\n            value: function dispatchEvent(el, evt) {}\n        }, {\n            key: 'createMouseEvent',\n            value: function createMouseEvent(eventType) {}\n        }, {\n            key: 'createEvent',\n            value: function createEvent(eventType) {}\n        }, {\n            key: 'preventDefault',\n            value: function preventDefault(evt) {}\n        }, {\n            key: 'isPrevented',\n            value: function isPrevented(evt) {}\n        }, {\n            key: 'getInnerHTML',\n            value: function getInnerHTML(el) {}\n        }, {\n            key: 'getTemplateContent',\n            value: function getTemplateContent(el) {}\n        }, {\n            key: 'getOuterHTML',\n            value: function getOuterHTML(el) {}\n        }, {\n            key: 'nodeName',\n            value: function nodeName(node) {}\n        }, {\n            key: 'nodeValue',\n            value: function nodeValue(node) {}\n        }, {\n            key: 'type',\n            value: function type(node) {}\n        }, {\n            key: 'content',\n            value: function content(node) {}\n        }, {\n            key: 'firstChild',\n            value: function firstChild(el) {}\n        }, {\n            key: 'nextSibling',\n            value: function nextSibling(el) {}\n        }, {\n            key: 'parentElement',\n            value: function parentElement(el) {}\n        }, {\n            key: 'childNodes',\n            value: function childNodes(el) {}\n        }, {\n            key: 'childNodesAsList',\n            value: function childNodesAsList(el) {}\n        }, {\n            key: 'clearNodes',\n            value: function clearNodes(el) {}\n        }, {\n            key: 'appendChild',\n            value: function appendChild(el, node) {}\n        }, {\n            key: 'removeChild',\n            value: function removeChild(el, node) {}\n        }, {\n            key: 'replaceChild',\n            value: function replaceChild(el, newNode, oldNode) {}\n        }, {\n            key: 'remove',\n            value: function remove(el) {}\n        }, {\n            key: 'insertBefore',\n            value: function insertBefore(parent, ref, node) {}\n        }, {\n            key: 'insertAllBefore',\n            value: function insertAllBefore(parent, ref, nodes) {}\n        }, {\n            key: 'insertAfter',\n            value: function insertAfter(parent, el, node) {}\n        }, {\n            key: 'setInnerHTML',\n            value: function setInnerHTML(el, value) {}\n        }, {\n            key: 'getText',\n            value: function getText(el) {}\n        }, {\n            key: 'setText',\n            value: function setText(el, value) {}\n        }, {\n            key: 'getValue',\n            value: function getValue(el) {}\n        }, {\n            key: 'setValue',\n            value: function setValue(el, value) {}\n        }, {\n            key: 'getChecked',\n            value: function getChecked(el) {}\n        }, {\n            key: 'setChecked',\n            value: function setChecked(el, value) {}\n        }, {\n            key: 'createComment',\n            value: function createComment(text) {}\n        }, {\n            key: 'createTemplate',\n            value: function createTemplate(html) {}\n        }, {\n            key: 'createElement',\n            value: function createElement(tagName, doc) {}\n        }, {\n            key: 'createElementNS',\n            value: function createElementNS(ns, tagName, doc) {}\n        }, {\n            key: 'createTextNode',\n            value: function createTextNode(text, doc) {}\n        }, {\n            key: 'createScriptTag',\n            value: function createScriptTag(attrName, attrValue, doc) {}\n        }, {\n            key: 'createStyleElement',\n            value: function createStyleElement(css, doc) {}\n        }, {\n            key: 'createShadowRoot',\n            value: function createShadowRoot(el) {}\n        }, {\n            key: 'getShadowRoot',\n            value: function getShadowRoot(el) {}\n        }, {\n            key: 'getHost',\n            value: function getHost(el) {}\n        }, {\n            key: 'getDistributedNodes',\n            value: function getDistributedNodes(el) {}\n        }, {\n            key: 'clone',\n            value: function clone( /*<T extends Node>*/node) {}\n        }, {\n            key: 'getElementsByClassName',\n            value: function getElementsByClassName(element, name) {}\n        }, {\n            key: 'getElementsByTagName',\n            value: function getElementsByTagName(element, name) {}\n        }, {\n            key: 'classList',\n            value: function classList(element) {}\n        }, {\n            key: 'addClass',\n            value: function addClass(element, className) {}\n        }, {\n            key: 'removeClass',\n            value: function removeClass(element, className) {}\n        }, {\n            key: 'hasClass',\n            value: function hasClass(element, className) {}\n        }, {\n            key: 'setStyle',\n            value: function setStyle(element, styleName, styleValue) {}\n        }, {\n            key: 'removeStyle',\n            value: function removeStyle(element, styleName) {}\n        }, {\n            key: 'getStyle',\n            value: function getStyle(element, styleName) {}\n        }, {\n            key: 'hasStyle',\n            value: function hasStyle(element, styleName, styleValue) {}\n        }, {\n            key: 'tagName',\n            value: function tagName(element) {}\n        }, {\n            key: 'attributeMap',\n            value: function attributeMap(element) {}\n        }, {\n            key: 'hasAttribute',\n            value: function hasAttribute(element, attribute) {}\n        }, {\n            key: 'hasAttributeNS',\n            value: function hasAttributeNS(element, ns, attribute) {}\n        }, {\n            key: 'getAttribute',\n            value: function getAttribute(element, attribute) {}\n        }, {\n            key: 'getAttributeNS',\n            value: function getAttributeNS(element, ns, attribute) {}\n        }, {\n            key: 'setAttribute',\n            value: function setAttribute(element, name, value) {}\n        }, {\n            key: 'setAttributeNS',\n            value: function setAttributeNS(element, ns, name, value) {}\n        }, {\n            key: 'removeAttribute',\n            value: function removeAttribute(element, attribute) {}\n        }, {\n            key: 'removeAttributeNS',\n            value: function removeAttributeNS(element, ns, attribute) {}\n        }, {\n            key: 'templateAwareRoot',\n            value: function templateAwareRoot(el) {}\n        }, {\n            key: 'createHtmlDocument',\n            value: function createHtmlDocument() {}\n        }, {\n            key: 'getBoundingClientRect',\n            value: function getBoundingClientRect(el) {}\n        }, {\n            key: 'getTitle',\n            value: function getTitle(doc) {}\n        }, {\n            key: 'setTitle',\n            value: function setTitle(doc, newTitle) {}\n        }, {\n            key: 'elementMatches',\n            value: function elementMatches(n, selector) {}\n        }, {\n            key: 'isTemplateElement',\n            value: function isTemplateElement(el) {}\n        }, {\n            key: 'isTextNode',\n            value: function isTextNode(node) {}\n        }, {\n            key: 'isCommentNode',\n            value: function isCommentNode(node) {}\n        }, {\n            key: 'isElementNode',\n            value: function isElementNode(node) {}\n        }, {\n            key: 'hasShadowRoot',\n            value: function hasShadowRoot(node) {}\n        }, {\n            key: 'isShadowRoot',\n            value: function isShadowRoot(node) {}\n        }, {\n            key: 'importIntoDoc',\n            value: function importIntoDoc( /*<T extends Node>*/node) {}\n        }, {\n            key: 'adoptNode',\n            value: function adoptNode( /*<T extends Node>*/node) {}\n        }, {\n            key: 'getHref',\n            value: function getHref(element) {}\n        }, {\n            key: 'getEventKey',\n            value: function getEventKey(event) {}\n        }, {\n            key: 'resolveAndSetHref',\n            value: function resolveAndSetHref(element, baseUrl, href) {}\n        }, {\n            key: 'supportsDOMEvents',\n            value: function supportsDOMEvents() {}\n        }, {\n            key: 'supportsNativeShadowDOM',\n            value: function supportsNativeShadowDOM() {}\n        }, {\n            key: 'getGlobalEventTarget',\n            value: function getGlobalEventTarget(doc, target) {}\n        }, {\n            key: 'getHistory',\n            value: function getHistory() {}\n        }, {\n            key: 'getLocation',\n            value: function getLocation() {}\n        }, {\n            key: 'getBaseHref',\n            value: function getBaseHref(doc) {}\n        }, {\n            key: 'resetBaseElement',\n            value: function resetBaseElement() {}\n        }, {\n            key: 'getUserAgent',\n            value: function getUserAgent() {}\n        }, {\n            key: 'setData',\n            value: function setData(element, name, value) {}\n        }, {\n            key: 'getComputedStyle',\n            value: function getComputedStyle(element) {}\n        }, {\n            key: 'getData',\n            value: function getData(element, name) {}\n        }, {\n            key: 'setGlobalVar',\n            value: function setGlobalVar(name, value) {}\n        }, {\n            key: 'supportsWebAnimation',\n            value: function supportsWebAnimation() {}\n        }, {\n            key: 'performanceNow',\n            value: function performanceNow() {}\n        }, {\n            key: 'getAnimationPrefix',\n            value: function getAnimationPrefix() {}\n        }, {\n            key: 'getTransitionEnd',\n            value: function getTransitionEnd() {}\n        }, {\n            key: 'supportsAnimation',\n            value: function supportsAnimation() {}\n        }, {\n            key: 'supportsCookies',\n            value: function supportsCookies() {}\n        }, {\n            key: 'getCookie',\n            value: function getCookie(name) {}\n        }, {\n            key: 'setCookie',\n            value: function setCookie(name, value) {}\n        }, {\n            key: 'attrToPropMap',\n            get: function get() {\n                return this._attrToPropMap;\n            },\n            set: function set(value) {\n                this._attrToPropMap = value;\n            }\n        }]);\n\n        return DomAdapter;\n    }();\n\n    var WebAnimationsPlayer = function () {\n        /**\n         * @param {?} element\n         * @param {?} keyframes\n         * @param {?} options\n         * @param {?=} previousPlayers\n         */\n        function WebAnimationsPlayer(element, keyframes, options) {\n            var _this = this;\n\n            var previousPlayers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n            _classCallCheck(this, WebAnimationsPlayer);\n\n            this.element = element;\n            this.keyframes = keyframes;\n            this.options = options;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._onDestroyFns = [];\n            this._initialized = false;\n            this._finished = false;\n            this._started = false;\n            this._destroyed = false;\n            this.parentPlayer = null;\n            this._duration = options['duration'];\n            this.previousStyles = {};\n            previousPlayers.forEach(function (player) {\n                var styles = player._captureStyles();\n                Object.keys(styles).forEach(function (prop) {\n                    return _this.previousStyles[prop] = styles[prop];\n                });\n            });\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(WebAnimationsPlayer, [{\n            key: '_onFinish',\n            value: function _onFinish() {\n                if (!this._finished) {\n                    this._finished = true;\n                    this._onDoneFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDoneFns = [];\n                }\n            }\n        }, {\n            key: 'init',\n            value: function init() {\n                var _this2 = this;\n\n                if (this._initialized) return;\n                this._initialized = true;\n                var /** @type {?} */keyframes = this.keyframes.map(function (styles) {\n                    var /** @type {?} */formattedKeyframe = {};\n                    Object.keys(styles).forEach(function (prop, index) {\n                        var /** @type {?} */value = styles[prop];\n                        if (value == _core.AUTO_STYLE) {\n                            value = _computeStyle(_this2.element, prop);\n                        }\n                        if (value != undefined) {\n                            formattedKeyframe[prop] = value;\n                        }\n                    });\n                    return formattedKeyframe;\n                });\n                var /** @type {?} */previousStyleProps = Object.keys(this.previousStyles);\n                if (previousStyleProps.length) {\n                    var /** @type {?} */startingKeyframe = keyframes[0];\n                    var /** @type {?} */missingStyleProps = [];\n                    previousStyleProps.forEach(function (prop) {\n                        if (!isPresent(startingKeyframe[prop])) {\n                            missingStyleProps.push(prop);\n                        }\n                        startingKeyframe[prop] = _this2.previousStyles[prop];\n                    });\n                    if (missingStyleProps.length) {\n                        var i;\n\n                        (function () {\n                            var /** @type {?} */self = _this2;\n                            // tslint:disable-next-line\n\n                            var _loop = function _loop() {\n                                var /** @type {?} */kf = keyframes[i];\n                                // tslint:disable-next-line\n                                missingStyleProps.forEach(function (prop) {\n                                    kf[prop] = _computeStyle(self.element, prop);\n                                });\n                            };\n\n                            for ( /** @type {?} */i = 1; i < keyframes.length; i++) {\n                                _loop();\n                            }\n                        })();\n                    }\n                }\n                this._player = this._triggerWebAnimation(this.element, keyframes, this.options);\n                this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);\n                // this is required so that the player doesn't start to animate right away\n                this._resetDomPlayerState();\n                this._player.addEventListener('finish', function () {\n                    return _this2._onFinish();\n                });\n            }\n        }, {\n            key: '_triggerWebAnimation',\n            value: function _triggerWebAnimation(element, keyframes, options) {\n                // jscompiler doesn't seem to know animate is a native property because it's not fully\n                // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n                return element['animate'](keyframes, options);\n            }\n        }, {\n            key: 'onStart',\n            value: function onStart(fn) {\n                this._onStartFns.push(fn);\n            }\n        }, {\n            key: 'onDone',\n            value: function onDone(fn) {\n                this._onDoneFns.push(fn);\n            }\n        }, {\n            key: 'onDestroy',\n            value: function onDestroy(fn) {\n                this._onDestroyFns.push(fn);\n            }\n        }, {\n            key: 'play',\n            value: function play() {\n                this.init();\n                if (!this.hasStarted()) {\n                    this._onStartFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onStartFns = [];\n                    this._started = true;\n                }\n                this._player.play();\n            }\n        }, {\n            key: 'pause',\n            value: function pause() {\n                this.init();\n                this._player.pause();\n            }\n        }, {\n            key: 'finish',\n            value: function finish() {\n                this.init();\n                this._onFinish();\n                this._player.finish();\n            }\n        }, {\n            key: 'reset',\n            value: function reset() {\n                this._resetDomPlayerState();\n                this._destroyed = false;\n                this._finished = false;\n                this._started = false;\n            }\n        }, {\n            key: '_resetDomPlayerState',\n            value: function _resetDomPlayerState() {\n                if (this._player) {\n                    this._player.cancel();\n                }\n            }\n        }, {\n            key: 'restart',\n            value: function restart() {\n                this.reset();\n                this.play();\n            }\n        }, {\n            key: 'hasStarted',\n            value: function hasStarted() {\n                return this._started;\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                if (!this._destroyed) {\n                    this._resetDomPlayerState();\n                    this._onFinish();\n                    this._destroyed = true;\n                    this._onDestroyFns.forEach(function (fn) {\n                        return fn();\n                    });\n                    this._onDestroyFns = [];\n                }\n            }\n        }, {\n            key: 'setPosition',\n            value: function setPosition(p) {\n                this._player.currentTime = p * this.totalTime;\n            }\n        }, {\n            key: 'getPosition',\n            value: function getPosition() {\n                return this._player.currentTime / this.totalTime;\n            }\n        }, {\n            key: '_captureStyles',\n            value: function _captureStyles() {\n                var _this3 = this;\n\n                var /** @type {?} */styles = {};\n                if (this.hasStarted()) {\n                    Object.keys(this._finalKeyframe).forEach(function (prop) {\n                        if (prop != 'offset') {\n                            styles[prop] = _this3._finished ? _this3._finalKeyframe[prop] : _computeStyle(_this3.element, prop);\n                        }\n                    });\n                }\n                return styles;\n            }\n        }, {\n            key: 'domPlayer',\n            get: function get() {\n                return this._player;\n            }\n        }, {\n            key: 'totalTime',\n            get: function get() {\n                return this._duration;\n            }\n        }]);\n\n        return WebAnimationsPlayer;\n    }();\n\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @return {?}\n     */\n    function _computeStyle(element, prop) {\n        return getDOM().getComputedStyle(element)[prop];\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    function _copyKeyframeStyles(styles) {\n        var /** @type {?} */newStyles = {};\n        Object.keys(styles).forEach(function (prop) {\n            if (prop != 'offset') {\n                newStyles[prop] = styles[prop];\n            }\n        });\n        return newStyles;\n    }\n\n    var WebAnimationsDriver = function () {\n        function WebAnimationsDriver() {\n            _classCallCheck(this, WebAnimationsDriver);\n        }\n\n        _createClass(WebAnimationsDriver, [{\n            key: 'animate',\n            value: function animate(element, startingStyles, keyframes, duration, delay, easing) {\n                var previousPlayers = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n\n                var /** @type {?} */formattedSteps = [];\n                var /** @type {?} */startingStyleLookup = {};\n                if (isPresent(startingStyles)) {\n                    startingStyleLookup = _populateStyles(startingStyles, {});\n                }\n                keyframes.forEach(function (keyframe) {\n                    var /** @type {?} */data = _populateStyles(keyframe.styles, startingStyleLookup);\n                    data['offset'] = Math.max(0, Math.min(1, keyframe.offset));\n                    formattedSteps.push(data);\n                });\n                // Styling passed into element.animate() must always be balanced.\n                // The special cases below can occur if only style() calls exist\n                // within an animation or when a style() calls are used prior\n                // to a group() animation being issued or if the renderer is\n                // invoked by the user directly.\n                if (formattedSteps.length == 0) {\n                    formattedSteps = [startingStyleLookup, startingStyleLookup];\n                } else if (formattedSteps.length == 1) {\n                    var /** @type {?} */start = startingStyleLookup;\n                    var /** @type {?} */end = formattedSteps[0];\n                    end['offset'] = null;\n                    formattedSteps = [start, end];\n                }\n                var /** @type {?} */playerOptions = {\n                    'duration': duration,\n                    'delay': delay,\n                    'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`\n                };\n                // we check for this to avoid having a null|undefined value be present\n                // for the easing (which results in an error for certain browsers #9752)\n                if (easing) {\n                    playerOptions['easing'] = easing;\n                }\n                // there may be a chance a NoOp player is returned depending\n                // on when the previous animation was cancelled\n                previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);\n                return new WebAnimationsPlayer(element, formattedSteps, playerOptions, /** @type {?} */previousPlayers);\n            }\n        }]);\n\n        return WebAnimationsDriver;\n    }();\n\n    /**\n     * @param {?} styles\n     * @param {?} defaultStyles\n     * @return {?}\n     */\n    function _populateStyles(styles, defaultStyles) {\n        var /** @type {?} */data = {};\n        styles.styles.forEach(function (entry) {\n            Object.keys(entry).forEach(function (prop) {\n                data[prop] = entry[prop];\n            });\n        });\n        Object.keys(defaultStyles).forEach(function (prop) {\n            if (!isPresent(data[prop])) {\n                data[prop] = defaultStyles[prop];\n            }\n        });\n        return data;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    function filterWebAnimationPlayerFn(player) {\n        return player instanceof WebAnimationsPlayer;\n    }\n\n    /**\n     * Provides DOM operations in any browser environment.\n     *\n     * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n     * can introduce XSS risks.\n     * @abstract\n     */\n\n    var GenericBrowserDomAdapter = function (_DomAdapter) {\n        _inherits(GenericBrowserDomAdapter, _DomAdapter);\n\n        function GenericBrowserDomAdapter() {\n            _classCallCheck(this, GenericBrowserDomAdapter);\n\n            var _this4 = _possibleConstructorReturn(this, (GenericBrowserDomAdapter.__proto__ || Object.getPrototypeOf(GenericBrowserDomAdapter)).call(this));\n\n            _this4._animationPrefix = null;\n            _this4._transitionEnd = null;\n            try {\n                var element = _this4.createElement('div', document);\n                if (isPresent(_this4.getStyle(element, 'animationName'))) {\n                    _this4._animationPrefix = '';\n                } else {\n                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                    for (var i = 0; i < domPrefixes.length; i++) {\n                        if (isPresent(_this4.getStyle(element, domPrefixes[i] + 'AnimationName'))) {\n                            _this4._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                            break;\n                        }\n                    }\n                }\n                var transEndEventNames = {\n                    WebkitTransition: 'webkitTransitionEnd',\n                    MozTransition: 'transitionend',\n                    OTransition: 'oTransitionEnd otransitionend',\n                    transition: 'transitionend'\n                };\n                Object.keys(transEndEventNames).forEach(function (key) {\n                    if (isPresent(_this4.getStyle(element, key))) {\n                        _this4._transitionEnd = transEndEventNames[key];\n                    }\n                });\n            } catch (e) {\n                _this4._animationPrefix = null;\n                _this4._transitionEnd = null;\n            }\n            return _this4;\n        }\n        /**\n         * @param {?} el\n         * @return {?}\n         */\n\n\n        _createClass(GenericBrowserDomAdapter, [{\n            key: 'getDistributedNodes',\n            value: function getDistributedNodes(el) {\n                return el.getDistributedNodes();\n            }\n        }, {\n            key: 'resolveAndSetHref',\n            value: function resolveAndSetHref(el, baseUrl, href) {\n                el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n            }\n        }, {\n            key: 'supportsDOMEvents',\n            value: function supportsDOMEvents() {\n                return true;\n            }\n        }, {\n            key: 'supportsNativeShadowDOM',\n            value: function supportsNativeShadowDOM() {\n                return typeof document.body.createShadowRoot === 'function';\n            }\n        }, {\n            key: 'getAnimationPrefix',\n            value: function getAnimationPrefix() {\n                return this._animationPrefix ? this._animationPrefix : '';\n            }\n        }, {\n            key: 'getTransitionEnd',\n            value: function getTransitionEnd() {\n                return this._transitionEnd ? this._transitionEnd : '';\n            }\n        }, {\n            key: 'supportsAnimation',\n            value: function supportsAnimation() {\n                return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);\n            }\n        }]);\n\n        return GenericBrowserDomAdapter;\n    }(DomAdapter);\n\n    var /** @type {?} */_attrToPropMap = {\n        'class': 'className',\n        'innerHtml': 'innerHTML',\n        'readonly': 'readOnly',\n        'tabindex': 'tabIndex'\n    };\n    var /** @type {?} */DOM_KEY_LOCATION_NUMPAD = 3;\n    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey\n    var /** @type {?} */_keyMap = {\n        // The following values are here for cross-browser compatibility and to match the W3C standard\n        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n        '\\b': 'Backspace',\n        '\\t': 'Tab',\n        '\\x7F': 'Delete',\n        '\\x1B': 'Escape',\n        'Del': 'Delete',\n        'Esc': 'Escape',\n        'Left': 'ArrowLeft',\n        'Right': 'ArrowRight',\n        'Up': 'ArrowUp',\n        'Down': 'ArrowDown',\n        'Menu': 'ContextMenu',\n        'Scroll': 'ScrollLock',\n        'Win': 'OS'\n    };\n    // There is a bug in Chrome for numeric keypad keys:\n    // https://code.google.com/p/chromium/issues/detail?id=155654\n    // 1, 2, 3 ... are reported as A, B, C ...\n    var /** @type {?} */_chromeNumKeyPadMap = {\n        'A': '1',\n        'B': '2',\n        'C': '3',\n        'D': '4',\n        'E': '5',\n        'F': '6',\n        'G': '7',\n        'H': '8',\n        'I': '9',\n        'J': '*',\n        'K': '+',\n        'M': '-',\n        'N': '.',\n        'O': '/',\n        '\\x60': '0',\n        '\\x90': 'NumLock'\n    };\n\n    var BrowserDomAdapter = function (_GenericBrowserDomAda) {\n        _inherits(BrowserDomAdapter, _GenericBrowserDomAda);\n\n        function BrowserDomAdapter() {\n            _classCallCheck(this, BrowserDomAdapter);\n\n            return _possibleConstructorReturn(this, (BrowserDomAdapter.__proto__ || Object.getPrototypeOf(BrowserDomAdapter)).apply(this, arguments));\n        }\n\n        _createClass(BrowserDomAdapter, [{\n            key: 'parse',\n            value: function parse(templateHtml) {\n                throw new Error('parse not implemented');\n            }\n        }, {\n            key: 'hasProperty',\n            value: function hasProperty(element, name) {\n                return name in element;\n            }\n        }, {\n            key: 'setProperty',\n            value: function setProperty(el, name, value) {\n                el[name] = value;\n            }\n        }, {\n            key: 'getProperty',\n            value: function getProperty(el, name) {\n                return el[name];\n            }\n        }, {\n            key: 'invoke',\n            value: function invoke(el, methodName, args) {\n                el[methodName].apply(el, _toConsumableArray(args));\n            }\n        }, {\n            key: 'logError',\n            value: function logError(error) {\n                if (window.console) {\n                    if (console.error) {\n                        console.error(error);\n                    } else {\n                        console.log(error);\n                    }\n                }\n            }\n        }, {\n            key: 'log',\n            value: function log(error) {\n                if (window.console) {\n                    window.console.log && window.console.log(error);\n                }\n            }\n        }, {\n            key: 'logGroup',\n            value: function logGroup(error) {\n                if (window.console) {\n                    window.console.group && window.console.group(error);\n                }\n            }\n        }, {\n            key: 'logGroupEnd',\n            value: function logGroupEnd() {\n                if (window.console) {\n                    window.console.groupEnd && window.console.groupEnd();\n                }\n            }\n        }, {\n            key: 'querySelector',\n            value: function querySelector(el, selector) {\n                return el.querySelector(selector);\n            }\n        }, {\n            key: 'querySelectorAll',\n            value: function querySelectorAll(el, selector) {\n                return el.querySelectorAll(selector);\n            }\n        }, {\n            key: 'on',\n            value: function on(el, evt, listener) {\n                el.addEventListener(evt, listener, false);\n            }\n        }, {\n            key: 'onAndCancel',\n            value: function onAndCancel(el, evt, listener) {\n                el.addEventListener(evt, listener, false);\n                // Needed to follow Dart's subscription semantic, until fix of\n                // https://code.google.com/p/dart/issues/detail?id=17406\n                return function () {\n                    el.removeEventListener(evt, listener, false);\n                };\n            }\n        }, {\n            key: 'dispatchEvent',\n            value: function dispatchEvent(el, evt) {\n                el.dispatchEvent(evt);\n            }\n        }, {\n            key: 'createMouseEvent',\n            value: function createMouseEvent(eventType) {\n                var /** @type {?} */evt = document.createEvent('MouseEvent');\n                evt.initEvent(eventType, true, true);\n                return evt;\n            }\n        }, {\n            key: 'createEvent',\n            value: function createEvent(eventType) {\n                var /** @type {?} */evt = document.createEvent('Event');\n                evt.initEvent(eventType, true, true);\n                return evt;\n            }\n        }, {\n            key: 'preventDefault',\n            value: function preventDefault(evt) {\n                evt.preventDefault();\n                evt.returnValue = false;\n            }\n        }, {\n            key: 'isPrevented',\n            value: function isPrevented(evt) {\n                return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;\n            }\n        }, {\n            key: 'getInnerHTML',\n            value: function getInnerHTML(el) {\n                return el.innerHTML;\n            }\n        }, {\n            key: 'getTemplateContent',\n            value: function getTemplateContent(el) {\n                return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;\n            }\n        }, {\n            key: 'getOuterHTML',\n            value: function getOuterHTML(el) {\n                return el.outerHTML;\n            }\n        }, {\n            key: 'nodeName',\n            value: function nodeName(node) {\n                return node.nodeName;\n            }\n        }, {\n            key: 'nodeValue',\n            value: function nodeValue(node) {\n                return node.nodeValue;\n            }\n        }, {\n            key: 'type',\n            value: function type(node) {\n                return node.type;\n            }\n        }, {\n            key: 'content',\n            value: function content(node) {\n                if (this.hasProperty(node, 'content')) {\n                    return node.content;\n                } else {\n                    return node;\n                }\n            }\n        }, {\n            key: 'firstChild',\n            value: function firstChild(el) {\n                return el.firstChild;\n            }\n        }, {\n            key: 'nextSibling',\n            value: function nextSibling(el) {\n                return el.nextSibling;\n            }\n        }, {\n            key: 'parentElement',\n            value: function parentElement(el) {\n                return el.parentNode;\n            }\n        }, {\n            key: 'childNodes',\n            value: function childNodes(el) {\n                return el.childNodes;\n            }\n        }, {\n            key: 'childNodesAsList',\n            value: function childNodesAsList(el) {\n                var /** @type {?} */childNodes = el.childNodes;\n                var /** @type {?} */res = new Array(childNodes.length);\n                for (var /** @type {?} */i = 0; i < childNodes.length; i++) {\n                    res[i] = childNodes[i];\n                }\n                return res;\n            }\n        }, {\n            key: 'clearNodes',\n            value: function clearNodes(el) {\n                while (el.firstChild) {\n                    el.removeChild(el.firstChild);\n                }\n            }\n        }, {\n            key: 'appendChild',\n            value: function appendChild(el, node) {\n                el.appendChild(node);\n            }\n        }, {\n            key: 'removeChild',\n            value: function removeChild(el, node) {\n                el.removeChild(node);\n            }\n        }, {\n            key: 'replaceChild',\n            value: function replaceChild(el, newChild, oldChild) {\n                el.replaceChild(newChild, oldChild);\n            }\n        }, {\n            key: 'remove',\n            value: function remove(node) {\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                return node;\n            }\n        }, {\n            key: 'insertBefore',\n            value: function insertBefore(parent, ref, node) {\n                parent.insertBefore(node, ref);\n            }\n        }, {\n            key: 'insertAllBefore',\n            value: function insertAllBefore(parent, ref, nodes) {\n                nodes.forEach(function (n) {\n                    return parent.insertBefore(n, ref);\n                });\n            }\n        }, {\n            key: 'insertAfter',\n            value: function insertAfter(parent, ref, node) {\n                parent.insertBefore(node, ref.nextSibling);\n            }\n        }, {\n            key: 'setInnerHTML',\n            value: function setInnerHTML(el, value) {\n                el.innerHTML = value;\n            }\n        }, {\n            key: 'getText',\n            value: function getText(el) {\n                return el.textContent;\n            }\n        }, {\n            key: 'setText',\n            value: function setText(el, value) {\n                el.textContent = value;\n            }\n        }, {\n            key: 'getValue',\n            value: function getValue(el) {\n                return el.value;\n            }\n        }, {\n            key: 'setValue',\n            value: function setValue(el, value) {\n                el.value = value;\n            }\n        }, {\n            key: 'getChecked',\n            value: function getChecked(el) {\n                return el.checked;\n            }\n        }, {\n            key: 'setChecked',\n            value: function setChecked(el, value) {\n                el.checked = value;\n            }\n        }, {\n            key: 'createComment',\n            value: function createComment(text) {\n                return document.createComment(text);\n            }\n        }, {\n            key: 'createTemplate',\n            value: function createTemplate(html) {\n                var /** @type {?} */t = document.createElement('template');\n                t.innerHTML = html;\n                return t;\n            }\n        }, {\n            key: 'createElement',\n            value: function createElement(tagName) {\n                var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n                return doc.createElement(tagName);\n            }\n        }, {\n            key: 'createElementNS',\n            value: function createElementNS(ns, tagName) {\n                var doc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n\n                return doc.createElementNS(ns, tagName);\n            }\n        }, {\n            key: 'createTextNode',\n            value: function createTextNode(text) {\n                var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n                return doc.createTextNode(text);\n            }\n        }, {\n            key: 'createScriptTag',\n            value: function createScriptTag(attrName, attrValue) {\n                var doc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n\n                var /** @type {?} */el = doc.createElement('SCRIPT');\n                el.setAttribute(attrName, attrValue);\n                return el;\n            }\n        }, {\n            key: 'createStyleElement',\n            value: function createStyleElement(css) {\n                var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n                var /** @type {?} */style = doc.createElement('style');\n                this.appendChild(style, this.createTextNode(css));\n                return style;\n            }\n        }, {\n            key: 'createShadowRoot',\n            value: function createShadowRoot(el) {\n                return el.createShadowRoot();\n            }\n        }, {\n            key: 'getShadowRoot',\n            value: function getShadowRoot(el) {\n                return el.shadowRoot;\n            }\n        }, {\n            key: 'getHost',\n            value: function getHost(el) {\n                return el.host;\n            }\n        }, {\n            key: 'clone',\n            value: function clone(node) {\n                return node.cloneNode(true);\n            }\n        }, {\n            key: 'getElementsByClassName',\n            value: function getElementsByClassName(element, name) {\n                return element.getElementsByClassName(name);\n            }\n        }, {\n            key: 'getElementsByTagName',\n            value: function getElementsByTagName(element, name) {\n                return element.getElementsByTagName(name);\n            }\n        }, {\n            key: 'classList',\n            value: function classList(element) {\n                return Array.prototype.slice.call(element.classList, 0);\n            }\n        }, {\n            key: 'addClass',\n            value: function addClass(element, className) {\n                element.classList.add(className);\n            }\n        }, {\n            key: 'removeClass',\n            value: function removeClass(element, className) {\n                element.classList.remove(className);\n            }\n        }, {\n            key: 'hasClass',\n            value: function hasClass(element, className) {\n                return element.classList.contains(className);\n            }\n        }, {\n            key: 'setStyle',\n            value: function setStyle(element, styleName, styleValue) {\n                element.style[styleName] = styleValue;\n            }\n        }, {\n            key: 'removeStyle',\n            value: function removeStyle(element, stylename) {\n                // IE requires '' instead of null\n                // see https://github.com/angular/angular/issues/7916\n                element.style[stylename] = '';\n            }\n        }, {\n            key: 'getStyle',\n            value: function getStyle(element, stylename) {\n                return element.style[stylename];\n            }\n        }, {\n            key: 'hasStyle',\n            value: function hasStyle(element, styleName) {\n                var styleValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                var /** @type {?} */value = this.getStyle(element, styleName) || '';\n                return styleValue ? value == styleValue : value.length > 0;\n            }\n        }, {\n            key: 'tagName',\n            value: function tagName(element) {\n                return element.tagName;\n            }\n        }, {\n            key: 'attributeMap',\n            value: function attributeMap(element) {\n                var /** @type {?} */res = new Map();\n                var /** @type {?} */elAttrs = element.attributes;\n                for (var /** @type {?} */i = 0; i < elAttrs.length; i++) {\n                    var /** @type {?} */attrib = elAttrs[i];\n                    res.set(attrib.name, attrib.value);\n                }\n                return res;\n            }\n        }, {\n            key: 'hasAttribute',\n            value: function hasAttribute(element, attribute) {\n                return element.hasAttribute(attribute);\n            }\n        }, {\n            key: 'hasAttributeNS',\n            value: function hasAttributeNS(element, ns, attribute) {\n                return element.hasAttributeNS(ns, attribute);\n            }\n        }, {\n            key: 'getAttribute',\n            value: function getAttribute(element, attribute) {\n                return element.getAttribute(attribute);\n            }\n        }, {\n            key: 'getAttributeNS',\n            value: function getAttributeNS(element, ns, name) {\n                return element.getAttributeNS(ns, name);\n            }\n        }, {\n            key: 'setAttribute',\n            value: function setAttribute(element, name, value) {\n                element.setAttribute(name, value);\n            }\n        }, {\n            key: 'setAttributeNS',\n            value: function setAttributeNS(element, ns, name, value) {\n                element.setAttributeNS(ns, name, value);\n            }\n        }, {\n            key: 'removeAttribute',\n            value: function removeAttribute(element, attribute) {\n                element.removeAttribute(attribute);\n            }\n        }, {\n            key: 'removeAttributeNS',\n            value: function removeAttributeNS(element, ns, name) {\n                element.removeAttributeNS(ns, name);\n            }\n        }, {\n            key: 'templateAwareRoot',\n            value: function templateAwareRoot(el) {\n                return this.isTemplateElement(el) ? this.content(el) : el;\n            }\n        }, {\n            key: 'createHtmlDocument',\n            value: function createHtmlDocument() {\n                return document.implementation.createHTMLDocument('fakeTitle');\n            }\n        }, {\n            key: 'getBoundingClientRect',\n            value: function getBoundingClientRect(el) {\n                try {\n                    return el.getBoundingClientRect();\n                } catch (e) {\n                    return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n                }\n            }\n        }, {\n            key: 'getTitle',\n            value: function getTitle(doc) {\n                return document.title;\n            }\n        }, {\n            key: 'setTitle',\n            value: function setTitle(doc, newTitle) {\n                document.title = newTitle || '';\n            }\n        }, {\n            key: 'elementMatches',\n            value: function elementMatches(n, selector) {\n                if (n instanceof HTMLElement) {\n                    return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n                }\n                return false;\n            }\n        }, {\n            key: 'isTemplateElement',\n            value: function isTemplateElement(el) {\n                return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';\n            }\n        }, {\n            key: 'isTextNode',\n            value: function isTextNode(node) {\n                return node.nodeType === Node.TEXT_NODE;\n            }\n        }, {\n            key: 'isCommentNode',\n            value: function isCommentNode(node) {\n                return node.nodeType === Node.COMMENT_NODE;\n            }\n        }, {\n            key: 'isElementNode',\n            value: function isElementNode(node) {\n                return node.nodeType === Node.ELEMENT_NODE;\n            }\n        }, {\n            key: 'hasShadowRoot',\n            value: function hasShadowRoot(node) {\n                return isPresent(node.shadowRoot) && node instanceof HTMLElement;\n            }\n        }, {\n            key: 'isShadowRoot',\n            value: function isShadowRoot(node) {\n                return node instanceof DocumentFragment;\n            }\n        }, {\n            key: 'importIntoDoc',\n            value: function importIntoDoc(node) {\n                return document.importNode(this.templateAwareRoot(node), true);\n            }\n        }, {\n            key: 'adoptNode',\n            value: function adoptNode(node) {\n                return document.adoptNode(node);\n            }\n        }, {\n            key: 'getHref',\n            value: function getHref(el) {\n                return el.href;\n            }\n        }, {\n            key: 'getEventKey',\n            value: function getEventKey(event) {\n                var /** @type {?} */key = event.key;\n                if (isBlank(key)) {\n                    key = event.keyIdentifier;\n                    // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n                    // Safari cf\n                    // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n                    if (isBlank(key)) {\n                        return 'Unidentified';\n                    }\n                    if (key.startsWith('U+')) {\n                        key = String.fromCharCode(parseInt(key.substring(2), 16));\n                        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                            // There is a bug in Chrome for numeric keypad keys:\n                            // https://code.google.com/p/chromium/issues/detail?id=155654\n                            // 1, 2, 3 ... are reported as A, B, C ...\n                            key = _chromeNumKeyPadMap[key];\n                        }\n                    }\n                }\n                return _keyMap[key] || key;\n            }\n        }, {\n            key: 'getGlobalEventTarget',\n            value: function getGlobalEventTarget(doc, target) {\n                if (target === 'window') {\n                    return window;\n                }\n                if (target === 'document') {\n                    return document;\n                }\n                if (target === 'body') {\n                    return document.body;\n                }\n            }\n        }, {\n            key: 'getHistory',\n            value: function getHistory() {\n                return window.history;\n            }\n        }, {\n            key: 'getLocation',\n            value: function getLocation() {\n                return window.location;\n            }\n        }, {\n            key: 'getBaseHref',\n            value: function getBaseHref(doc) {\n                var /** @type {?} */href = getBaseElementHref();\n                return isBlank(href) ? null : relativePath(href);\n            }\n        }, {\n            key: 'resetBaseElement',\n            value: function resetBaseElement() {\n                baseElement = null;\n            }\n        }, {\n            key: 'getUserAgent',\n            value: function getUserAgent() {\n                return window.navigator.userAgent;\n            }\n        }, {\n            key: 'setData',\n            value: function setData(element, name, value) {\n                this.setAttribute(element, 'data-' + name, value);\n            }\n        }, {\n            key: 'getData',\n            value: function getData(element, name) {\n                return this.getAttribute(element, 'data-' + name);\n            }\n        }, {\n            key: 'getComputedStyle',\n            value: function (_getComputedStyle) {\n                function getComputedStyle(_x4) {\n                    return _getComputedStyle.apply(this, arguments);\n                }\n\n                getComputedStyle.toString = function () {\n                    return _getComputedStyle.toString();\n                };\n\n                return getComputedStyle;\n            }(function (element) {\n                return getComputedStyle(element);\n            })\n        }, {\n            key: 'setGlobalVar',\n            value: function setGlobalVar(path, value) {\n                setValueOnPath(global$1, path, value);\n            }\n        }, {\n            key: 'supportsWebAnimation',\n            value: function supportsWebAnimation() {\n                return typeof Element.prototype['animate'] === 'function';\n            }\n        }, {\n            key: 'performanceNow',\n            value: function performanceNow() {\n                // performance.now() is not available in all browsers, see\n                // http://caniuse.com/#search=performance.now\n                return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();\n            }\n        }, {\n            key: 'supportsCookies',\n            value: function supportsCookies() {\n                return true;\n            }\n        }, {\n            key: 'getCookie',\n            value: function getCookie(name) {\n                return parseCookieValue(document.cookie, name);\n            }\n        }, {\n            key: 'setCookie',\n            value: function setCookie(name, value) {\n                // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n                // not clear other cookies.\n                document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n            }\n        }, {\n            key: 'attrToPropMap',\n            get: function get() {\n                return _attrToPropMap;\n            }\n        }], [{\n            key: 'makeCurrent',\n            value: function makeCurrent() {\n                setRootDomAdapter(new BrowserDomAdapter());\n            }\n        }]);\n\n        return BrowserDomAdapter;\n    }(GenericBrowserDomAdapter);\n\n    var /** @type {?} */baseElement = null;\n    /**\n     * @return {?}\n     */\n    function getBaseElementHref() {\n        if (!baseElement) {\n            baseElement = document.querySelector('base');\n            if (!baseElement) {\n                return null;\n            }\n        }\n        return baseElement.getAttribute('href');\n    }\n    // based on urlUtils.js in AngularJS 1\n    var /** @type {?} */urlParsingNode = void 0;\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function relativePath(url) {\n        if (!urlParsingNode) {\n            urlParsingNode = document.createElement('a');\n        }\n        urlParsingNode.setAttribute('href', url);\n        return urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;\n    }\n    /**\n     * @param {?} cookieStr\n     * @param {?} name\n     * @return {?}\n     */\n    function parseCookieValue(cookieStr, name) {\n        name = encodeURIComponent(name);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = cookieStr.split(';')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var cookie = _step.value;\n\n                var /** @type {?} */eqIndex = cookie.indexOf('=');\n\n                var _ref = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],\n                    _ref2 = _slicedToArray(_ref, 2),\n                    cookieName = _ref2[0],\n                    cookieValue = _ref2[1];\n\n                if (cookieName.trim() === name) {\n                    return decodeURIComponent(cookieValue);\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n     *\n     * Note: Document might not be available in the Application Context when Application and Rendering\n     * Contexts are not the same (e.g. when running the application into a Web Worker).\n     *\n     * @stable\n     */\n    var /** @type {?} */DOCUMENT = new _core.InjectionToken('DocumentToken');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     * @return {?}\n     */\n    function supportsState() {\n        return !!window.history.pushState;\n    }\n\n    /**\n     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n     * This class should not be used directly by an application developer. Instead, use\n     * {\\@link Location}.\n     */\n\n    var BrowserPlatformLocation = function (_PlatformLocation) {\n        _inherits(BrowserPlatformLocation, _PlatformLocation);\n\n        /**\n         * @param {?} _doc\n         */\n        function BrowserPlatformLocation(_doc) {\n            _classCallCheck(this, BrowserPlatformLocation);\n\n            var _this6 = _possibleConstructorReturn(this, (BrowserPlatformLocation.__proto__ || Object.getPrototypeOf(BrowserPlatformLocation)).call(this));\n\n            _this6._doc = _doc;\n            _this6._init();\n            return _this6;\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n\n\n        _createClass(BrowserPlatformLocation, [{\n            key: '_init',\n            value: function _init() {\n                this._location = getDOM().getLocation();\n                this._history = getDOM().getHistory();\n            }\n        }, {\n            key: 'getBaseHrefFromDOM',\n            value: function getBaseHrefFromDOM() {\n                return getDOM().getBaseHref(this._doc);\n            }\n        }, {\n            key: 'onPopState',\n            value: function onPopState(fn) {\n                getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n            }\n        }, {\n            key: 'onHashChange',\n            value: function onHashChange(fn) {\n                getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n            }\n        }, {\n            key: 'pushState',\n            value: function pushState(state, title, url) {\n                if (supportsState()) {\n                    this._history.pushState(state, title, url);\n                } else {\n                    this._location.hash = url;\n                }\n            }\n        }, {\n            key: 'replaceState',\n            value: function replaceState(state, title, url) {\n                if (supportsState()) {\n                    this._history.replaceState(state, title, url);\n                } else {\n                    this._location.hash = url;\n                }\n            }\n        }, {\n            key: 'forward',\n            value: function forward() {\n                this._history.forward();\n            }\n        }, {\n            key: 'back',\n            value: function back() {\n                this._history.back();\n            }\n        }, {\n            key: 'location',\n            get: function get() {\n                return this._location;\n            }\n        }, {\n            key: 'pathname',\n            get: function get() {\n                return this._location.pathname;\n            },\n            set: function set(newPath) {\n                this._location.pathname = newPath;\n            }\n        }, {\n            key: 'search',\n            get: function get() {\n                return this._location.search;\n            }\n        }, {\n            key: 'hash',\n            get: function get() {\n                return this._location.hash;\n            }\n        }]);\n\n        return BrowserPlatformLocation;\n    }(_common.PlatformLocation);\n\n    BrowserPlatformLocation.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    BrowserPlatformLocation.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }];\n    };\n\n    /**\n     * A service that can be used to get and add meta tags.\n     *\n     * \\@experimental\n     */\n\n    var Meta = function () {\n        /**\n         * @param {?} _doc\n         */\n        function Meta(_doc) {\n            _classCallCheck(this, Meta);\n\n            this._doc = _doc;\n            this._dom = getDOM();\n        }\n        /**\n         * @param {?} tag\n         * @param {?=} forceCreation\n         * @return {?}\n         */\n\n\n        _createClass(Meta, [{\n            key: 'addTag',\n            value: function addTag(tag) {\n                var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n                if (!tag) return null;\n                return this._getOrCreateElement(tag, forceCreation);\n            }\n        }, {\n            key: 'addTags',\n            value: function addTags(tags) {\n                var _this7 = this;\n\n                var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n                if (!tags) return [];\n                return tags.reduce(function (result, tag) {\n                    if (tag) {\n                        result.push(_this7._getOrCreateElement(tag, forceCreation));\n                    }\n                    return result;\n                }, []);\n            }\n        }, {\n            key: 'getTag',\n            value: function getTag(attrSelector) {\n                if (!attrSelector) return null;\n                return this._dom.querySelector(this._doc, 'meta[' + attrSelector + ']');\n            }\n        }, {\n            key: 'getTags',\n            value: function getTags(attrSelector) {\n                if (!attrSelector) return [];\n                var /** @type {?} */list /*NodeList*/ = this._dom.querySelectorAll(this._doc, 'meta[' + attrSelector + ']');\n                return list ? [].slice.call(list) : [];\n            }\n        }, {\n            key: 'updateTag',\n            value: function updateTag(tag, selector) {\n                if (!tag) return null;\n                selector = selector || this._parseSelector(tag);\n                var /** @type {?} */meta = this.getTag(selector);\n                if (meta) {\n                    return this._setMetaElementAttributes(tag, meta);\n                }\n                return this._getOrCreateElement(tag, true);\n            }\n        }, {\n            key: 'removeTag',\n            value: function removeTag(attrSelector) {\n                this.removeTagElement(this.getTag(attrSelector));\n            }\n        }, {\n            key: 'removeTagElement',\n            value: function removeTagElement(meta) {\n                if (meta) {\n                    this._dom.remove(meta);\n                }\n            }\n        }, {\n            key: '_getOrCreateElement',\n            value: function _getOrCreateElement(meta) {\n                var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n                if (!forceCreation) {\n                    var /** @type {?} */selector = this._parseSelector(meta);\n                    var /** @type {?} */elem = this.getTag(selector);\n                    // It's allowed to have multiple elements with the same name so it's not enough to\n                    // just check that element with the same name already present on the page. We also need to\n                    // check if element has tag attributes\n                    if (elem && this._containsAttributes(meta, elem)) return elem;\n                }\n                var /** @type {?} */element = this._dom.createElement('meta');\n                this._setMetaElementAttributes(meta, element);\n                var /** @type {?} */head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n                this._dom.appendChild(head, element);\n                return element;\n            }\n        }, {\n            key: '_setMetaElementAttributes',\n            value: function _setMetaElementAttributes(tag, el) {\n                var _this8 = this;\n\n                Object.keys(tag).forEach(function (prop) {\n                    return _this8._dom.setAttribute(el, prop, tag[prop]);\n                });\n                return el;\n            }\n        }, {\n            key: '_parseSelector',\n            value: function _parseSelector(tag) {\n                var /** @type {?} */attr = tag.name ? 'name' : 'property';\n                return attr + '=\"' + tag[attr] + '\"';\n            }\n        }, {\n            key: '_containsAttributes',\n            value: function _containsAttributes(tag, elem) {\n                var _this9 = this;\n\n                return Object.keys(tag).every(function (key) {\n                    return _this9._dom.getAttribute(elem, key) === tag[key];\n                });\n            }\n        }]);\n\n        return Meta;\n    }();\n\n    Meta.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    Meta.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }];\n    };\n\n    /**\n     * An id that identifies a particular application being bootstrapped, that should\n     * match across the client/server boundary.\n     */\n    var /** @type {?} */TRANSITION_ID = new _core.InjectionToken('TRANSITION_ID');\n    /**\n     * @param {?} transitionId\n     * @param {?} document\n     * @return {?}\n     */\n    function bootstrapListenerFactory(transitionId, document) {\n        var /** @type {?} */factory = function factory() {\n            var /** @type {?} */dom = getDOM();\n            var /** @type {?} */styles = Array.prototype.slice.apply(dom.querySelectorAll(document, 'style[ng-transition]'));\n            styles.filter(function (el) {\n                return dom.getAttribute(el, 'ng-transition') === transitionId;\n            }).forEach(function (el) {\n                return dom.remove(el);\n            });\n        };\n        return factory;\n    }\n    var /** @type {?} */SERVER_TRANSITION_PROVIDERS = [{\n        provide: _core.APP_INITIALIZER,\n        useFactory: bootstrapListenerFactory,\n        deps: [TRANSITION_ID, DOCUMENT],\n        multi: true\n    }];\n\n    var BrowserGetTestability = function () {\n        function BrowserGetTestability() {\n            _classCallCheck(this, BrowserGetTestability);\n        }\n\n        _createClass(BrowserGetTestability, [{\n            key: 'addToWindow',\n            value: function addToWindow(registry) {\n                global$1.getAngularTestability = function (elem) {\n                    var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                    var /** @type {?} */testability = registry.findTestabilityInTree(elem, findInAncestors);\n                    if (testability == null) {\n                        throw new Error('Could not find testability for element.');\n                    }\n                    return testability;\n                };\n                global$1.getAllAngularTestabilities = function () {\n                    return registry.getAllTestabilities();\n                };\n                global$1.getAllAngularRootElements = function () {\n                    return registry.getAllRootElements();\n                };\n                var /** @type {?} */whenAllStable = function whenAllStable(callback /** TODO #9100 */) {\n                    var /** @type {?} */testabilities = global$1.getAllAngularTestabilities();\n                    var /** @type {?} */count = testabilities.length;\n                    var /** @type {?} */didWork = false;\n                    var /** @type {?} */decrement = function decrement(didWork_ /** TODO #9100 */) {\n                        didWork = didWork || didWork_;\n                        count--;\n                        if (count == 0) {\n                            callback(didWork);\n                        }\n                    };\n                    testabilities.forEach(function (testability /** TODO #9100 */) {\n                        testability.whenStable(decrement);\n                    });\n                };\n                if (!global$1['frameworkStabilizers']) {\n                    global$1['frameworkStabilizers'] = [];\n                }\n                global$1['frameworkStabilizers'].push(whenAllStable);\n            }\n        }, {\n            key: 'findTestabilityInTree',\n            value: function findTestabilityInTree(registry, elem, findInAncestors) {\n                if (elem == null) {\n                    return null;\n                }\n                var /** @type {?} */t = registry.getTestability(elem);\n                if (isPresent(t)) {\n                    return t;\n                } else if (!findInAncestors) {\n                    return null;\n                }\n                if (getDOM().isShadowRoot(elem)) {\n                    return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n                }\n                return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n            }\n        }], [{\n            key: 'init',\n            value: function init() {\n                (0, _core.setTestabilityGetter)(new BrowserGetTestability());\n            }\n        }]);\n\n        return BrowserGetTestability;\n    }();\n\n    var Title = function () {\n        /**\n         * @param {?} _doc\n         */\n        function Title(_doc) {\n            _classCallCheck(this, Title);\n\n            this._doc = _doc;\n        }\n        /**\n         * Get the title of the current HTML document.\n         * @return {?}\n         */\n\n\n        _createClass(Title, [{\n            key: 'getTitle',\n            value: function getTitle() {\n                return getDOM().getTitle(this._doc);\n            }\n        }, {\n            key: 'setTitle',\n            value: function setTitle(newTitle) {\n                getDOM().setTitle(this._doc, newTitle);\n            }\n        }]);\n\n        return Title;\n    }();\n\n    Title.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    Title.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }];\n    };\n\n    /**\n     * Wraps Javascript Objects\n     */\n\n    var StringMapWrapper = function () {\n        function StringMapWrapper() {\n            _classCallCheck(this, StringMapWrapper);\n        }\n\n        _createClass(StringMapWrapper, null, [{\n            key: 'merge',\n            value: function merge(m1, m2) {\n                var /** @type {?} */m = {};\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = Object.keys(m1)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var k = _step2.value;\n\n                        m[k] = m1[k];\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = Object.keys(m2)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var _k = _step3.value;\n\n                        m[_k] = m2[_k];\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n\n                return m;\n            }\n        }, {\n            key: 'equals',\n            value: function equals(m1, m2) {\n                var /** @type {?} */k1 = Object.keys(m1);\n                var /** @type {?} */k2 = Object.keys(m2);\n                if (k1.length != k2.length) {\n                    return false;\n                }\n                for (var /** @type {?} */i = 0; i < k1.length; i++) {\n                    var /** @type {?} */key = k1[i];\n                    if (m1[key] !== m2[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }]);\n\n        return StringMapWrapper;\n    }();\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */EVENT_MANAGER_PLUGINS = new _core.InjectionToken('EventManagerPlugins');\n    /**\n     * \\@stable\n     */\n\n    var EventManager = function () {\n        /**\n         * @param {?} plugins\n         * @param {?} _zone\n         */\n        function EventManager(plugins, _zone) {\n            var _this10 = this;\n\n            _classCallCheck(this, EventManager);\n\n            this._zone = _zone;\n            this._eventNameToPlugin = new Map();\n            plugins.forEach(function (p) {\n                return p.manager = _this10;\n            });\n            this._plugins = plugins.slice().reverse();\n        }\n        /**\n         * @param {?} element\n         * @param {?} eventName\n         * @param {?} handler\n         * @return {?}\n         */\n\n\n        _createClass(EventManager, [{\n            key: 'addEventListener',\n            value: function addEventListener(element, eventName, handler) {\n                var /** @type {?} */plugin = this._findPluginFor(eventName);\n                return plugin.addEventListener(element, eventName, handler);\n            }\n        }, {\n            key: 'addGlobalEventListener',\n            value: function addGlobalEventListener(target, eventName, handler) {\n                var /** @type {?} */plugin = this._findPluginFor(eventName);\n                return plugin.addGlobalEventListener(target, eventName, handler);\n            }\n        }, {\n            key: 'getZone',\n            value: function getZone() {\n                return this._zone;\n            }\n        }, {\n            key: '_findPluginFor',\n            value: function _findPluginFor(eventName) {\n                var /** @type {?} */plugin = this._eventNameToPlugin.get(eventName);\n                if (plugin) {\n                    return plugin;\n                }\n                var /** @type {?} */plugins = this._plugins;\n                for (var /** @type {?} */i = 0; i < plugins.length; i++) {\n                    var /** @type {?} */_plugin = plugins[i];\n                    if (_plugin.supports(eventName)) {\n                        this._eventNameToPlugin.set(eventName, _plugin);\n                        return _plugin;\n                    }\n                }\n                throw new Error('No event manager plugin found for event ' + eventName);\n            }\n        }]);\n\n        return EventManager;\n    }();\n\n    EventManager.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    EventManager.ctorParameters = function () {\n        return [{ type: Array, decorators: [{ type: _core.Inject, args: [EVENT_MANAGER_PLUGINS] }] }, { type: _core.NgZone }];\n    };\n    /**\n     * @abstract\n     */\n\n    var EventManagerPlugin = function () {\n        /**\n         * @param {?} _doc\n         */\n        function EventManagerPlugin(_doc) {\n            _classCallCheck(this, EventManagerPlugin);\n\n            this._doc = _doc;\n        }\n        /**\n         * @abstract\n         * @param {?} eventName\n         * @return {?}\n         */\n\n\n        _createClass(EventManagerPlugin, [{\n            key: 'supports',\n            value: function supports(eventName) {}\n        }, {\n            key: 'addEventListener',\n            value: function addEventListener(element, eventName, handler) {}\n        }, {\n            key: 'addGlobalEventListener',\n            value: function addGlobalEventListener(element, eventName, handler) {\n                var /** @type {?} */target = getDOM().getGlobalEventTarget(this._doc, element);\n                if (!target) {\n                    throw new Error('Unsupported event target ' + target + ' for event ' + eventName);\n                }\n                return this.addEventListener(target, eventName, handler);\n            }\n        }]);\n\n        return EventManagerPlugin;\n    }();\n\n    var SharedStylesHost = function () {\n        function SharedStylesHost() {\n            _classCallCheck(this, SharedStylesHost);\n\n            /** @internal */\n            this._stylesSet = new Set();\n        }\n        /**\n         * @param {?} styles\n         * @return {?}\n         */\n\n\n        _createClass(SharedStylesHost, [{\n            key: 'addStyles',\n            value: function addStyles(styles) {\n                var _this11 = this;\n\n                var /** @type {?} */additions = new Set();\n                styles.forEach(function (style) {\n                    if (!_this11._stylesSet.has(style)) {\n                        _this11._stylesSet.add(style);\n                        additions.add(style);\n                    }\n                });\n                this.onStylesAdded(additions);\n            }\n        }, {\n            key: 'onStylesAdded',\n            value: function onStylesAdded(additions) {}\n        }, {\n            key: 'getAllStyles',\n            value: function getAllStyles() {\n                return Array.from(this._stylesSet);\n            }\n        }]);\n\n        return SharedStylesHost;\n    }();\n\n    SharedStylesHost.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    SharedStylesHost.ctorParameters = function () {\n        return [];\n    };\n\n    var DomSharedStylesHost = function (_SharedStylesHost) {\n        _inherits(DomSharedStylesHost, _SharedStylesHost);\n\n        /**\n         * @param {?} _doc\n         */\n        function DomSharedStylesHost(_doc) {\n            _classCallCheck(this, DomSharedStylesHost);\n\n            var _this12 = _possibleConstructorReturn(this, (DomSharedStylesHost.__proto__ || Object.getPrototypeOf(DomSharedStylesHost)).call(this));\n\n            _this12._doc = _doc;\n            _this12._hostNodes = new Set();\n            _this12._styleNodes = new Set();\n            _this12._hostNodes.add(_doc.head);\n            return _this12;\n        }\n        /**\n         * @param {?} styles\n         * @param {?} host\n         * @return {?}\n         */\n\n\n        _createClass(DomSharedStylesHost, [{\n            key: '_addStylesToHost',\n            value: function _addStylesToHost(styles, host) {\n                var _this13 = this;\n\n                styles.forEach(function (style) {\n                    var /** @type {?} */styleEl = _this13._doc.createElement('style');\n                    styleEl.textContent = style;\n                    _this13._styleNodes.add(host.appendChild(styleEl));\n                });\n            }\n        }, {\n            key: 'addHost',\n            value: function addHost(hostNode) {\n                this._addStylesToHost(this._stylesSet, hostNode);\n                this._hostNodes.add(hostNode);\n            }\n        }, {\n            key: 'removeHost',\n            value: function removeHost(hostNode) {\n                this._hostNodes.delete(hostNode);\n            }\n        }, {\n            key: 'onStylesAdded',\n            value: function onStylesAdded(additions) {\n                var _this14 = this;\n\n                this._hostNodes.forEach(function (hostNode) {\n                    return _this14._addStylesToHost(additions, hostNode);\n                });\n            }\n        }, {\n            key: 'ngOnDestroy',\n            value: function ngOnDestroy() {\n                this._styleNodes.forEach(function (styleNode) {\n                    return getDOM().remove(styleNode);\n                });\n            }\n        }]);\n\n        return DomSharedStylesHost;\n    }(SharedStylesHost);\n\n    DomSharedStylesHost.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    DomSharedStylesHost.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }];\n    };\n\n    var /** @type {?} */NAMESPACE_URIS = {\n        'xlink': 'http://www.w3.org/1999/xlink',\n        'svg': 'http://www.w3.org/2000/svg',\n        'xhtml': 'http://www.w3.org/1999/xhtml',\n        'xml': 'http://www.w3.org/XML/1998/namespace'\n    };\n    var /** @type {?} */TEMPLATE_COMMENT_TEXT = 'template bindings={}';\n    var /** @type {?} */TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;\n    /**\n     * @abstract\n     */\n\n    var DomRootRenderer = function () {\n        /**\n         * @param {?} document\n         * @param {?} eventManager\n         * @param {?} sharedStylesHost\n         * @param {?} animationDriver\n         * @param {?} appId\n         */\n        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {\n            _classCallCheck(this, DomRootRenderer);\n\n            this.document = document;\n            this.eventManager = eventManager;\n            this.sharedStylesHost = sharedStylesHost;\n            this.animationDriver = animationDriver;\n            this.appId = appId;\n            this.registeredComponents = new Map();\n        }\n        /**\n         * @param {?} componentProto\n         * @return {?}\n         */\n\n\n        _createClass(DomRootRenderer, [{\n            key: 'renderComponent',\n            value: function renderComponent(componentProto) {\n                var /** @type {?} */renderer = this.registeredComponents.get(componentProto.id);\n                if (!renderer) {\n                    renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + '-' + componentProto.id);\n                    this.registeredComponents.set(componentProto.id, renderer);\n                }\n                return renderer;\n            }\n        }]);\n\n        return DomRootRenderer;\n    }();\n\n    var DomRootRenderer_ = function (_DomRootRenderer) {\n        _inherits(DomRootRenderer_, _DomRootRenderer);\n\n        /**\n         * @param {?} _document\n         * @param {?} _eventManager\n         * @param {?} sharedStylesHost\n         * @param {?} animationDriver\n         * @param {?} appId\n         */\n        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {\n            _classCallCheck(this, DomRootRenderer_);\n\n            var _this15 = _possibleConstructorReturn(this, (DomRootRenderer_.__proto__ || Object.getPrototypeOf(DomRootRenderer_)).call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId));\n\n            throw new Error('RootRenderer is no longer supported. Please use the `RendererFactoryV2` instead!');\n            return _this15;\n        }\n\n        return DomRootRenderer_;\n    }(DomRootRenderer);\n\n    DomRootRenderer_.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    DomRootRenderer_.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }, { type: EventManager }, { type: DomSharedStylesHost }, { type: AnimationDriver }, { type: undefined, decorators: [{ type: _core.Inject, args: [_core.APP_ID] }] }];\n    };\n    var /** @type {?} */DIRECT_DOM_RENDERER = {\n        remove: function remove(node) {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        },\n        appendChild: function appendChild(node, parent) {\n            parent.appendChild(node);\n        },\n        insertBefore: function insertBefore(node, refNode) {\n            refNode.parentNode.insertBefore(node, refNode);\n        },\n        nextSibling: function nextSibling(node) {\n            return node.nextSibling;\n        },\n        parentElement: function parentElement(node) {\n            return node.parentNode;\n        }\n    };\n\n    var DomRenderer = function () {\n        /**\n         * @param {?} _rootRenderer\n         * @param {?} componentProto\n         * @param {?} _animationDriver\n         * @param {?} styleShimId\n         */\n        function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {\n            _classCallCheck(this, DomRenderer);\n\n            this._rootRenderer = _rootRenderer;\n            this.componentProto = componentProto;\n            this._animationDriver = _animationDriver;\n            this.directRenderer = DIRECT_DOM_RENDERER;\n            this._styles = flattenStyles(styleShimId, componentProto.styles, []);\n            if (componentProto.encapsulation !== _core.ViewEncapsulation.Native) {\n                this._rootRenderer.sharedStylesHost.addStyles(this._styles);\n            }\n            if (this.componentProto.encapsulation === _core.ViewEncapsulation.Emulated) {\n                this._contentAttr = shimContentAttribute(styleShimId);\n                this._hostAttr = shimHostAttribute(styleShimId);\n            } else {\n                this._contentAttr = null;\n                this._hostAttr = null;\n            }\n        }\n        /**\n         * @param {?} selectorOrNode\n         * @param {?} debugInfo\n         * @return {?}\n         */\n\n\n        _createClass(DomRenderer, [{\n            key: 'selectRootElement',\n            value: function selectRootElement(selectorOrNode, debugInfo) {\n                var /** @type {?} */el = void 0;\n                if (typeof selectorOrNode === 'string') {\n                    el = this._rootRenderer.document.querySelector(selectorOrNode);\n                    if (!el) {\n                        throw new Error('The selector \"' + selectorOrNode + '\" did not match any elements');\n                    }\n                } else {\n                    el = selectorOrNode;\n                }\n                while (el.firstChild) {\n                    el.removeChild(el.firstChild);\n                }\n                return el;\n            }\n        }, {\n            key: 'createElement',\n            value: function createElement(parent, name, debugInfo) {\n                var /** @type {?} */el = void 0;\n                if (isNamespaced(name)) {\n                    var /** @type {?} */nsAndName = splitNamespace(name);\n                    el = document.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]);\n                } else {\n                    el = document.createElement(name);\n                }\n                if (this._contentAttr) {\n                    el.setAttribute(this._contentAttr, '');\n                }\n                if (parent) {\n                    parent.appendChild(el);\n                }\n                return el;\n            }\n        }, {\n            key: 'createViewRoot',\n            value: function createViewRoot(hostElement) {\n                var /** @type {?} */nodesParent = void 0;\n                if (this.componentProto.encapsulation === _core.ViewEncapsulation.Native) {\n                    nodesParent = hostElement.createShadowRoot();\n                    this._rootRenderer.sharedStylesHost.addHost(nodesParent);\n                    for (var /** @type {?} */i = 0; i < this._styles.length; i++) {\n                        var /** @type {?} */styleEl = document.createElement('style');\n                        styleEl.textContent = this._styles[i];\n                        nodesParent.appendChild(styleEl);\n                    }\n                } else {\n                    if (this._hostAttr) {\n                        hostElement.setAttribute(this._hostAttr, '');\n                    }\n                    nodesParent = hostElement;\n                }\n                return nodesParent;\n            }\n        }, {\n            key: 'createTemplateAnchor',\n            value: function createTemplateAnchor(parentElement, debugInfo) {\n                var /** @type {?} */comment = document.createComment(TEMPLATE_COMMENT_TEXT);\n                if (parentElement) {\n                    parentElement.appendChild(comment);\n                }\n                return comment;\n            }\n        }, {\n            key: 'createText',\n            value: function createText(parentElement, value, debugInfo) {\n                var /** @type {?} */node = document.createTextNode(value);\n                if (parentElement) {\n                    parentElement.appendChild(node);\n                }\n                return node;\n            }\n        }, {\n            key: 'projectNodes',\n            value: function projectNodes(parentElement, nodes) {\n                if (!parentElement) return;\n                appendNodes(parentElement, nodes);\n            }\n        }, {\n            key: 'attachViewAfter',\n            value: function attachViewAfter(node, viewRootNodes) {\n                moveNodesAfterSibling(node, viewRootNodes);\n            }\n        }, {\n            key: 'detachView',\n            value: function detachView(viewRootNodes) {\n                for (var /** @type {?} */i = 0; i < viewRootNodes.length; i++) {\n                    var /** @type {?} */node = viewRootNodes[i];\n                    if (node.parentNode) {\n                        node.parentNode.removeChild(node);\n                    }\n                }\n            }\n        }, {\n            key: 'destroyView',\n            value: function destroyView(hostElement, viewAllNodes) {\n                if (this.componentProto.encapsulation === _core.ViewEncapsulation.Native && hostElement) {\n                    this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot);\n                }\n            }\n        }, {\n            key: 'listen',\n            value: function listen(renderElement, name, callback) {\n                return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));\n            }\n        }, {\n            key: 'listenGlobal',\n            value: function listenGlobal(target, name, callback) {\n                return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));\n            }\n        }, {\n            key: 'setElementProperty',\n            value: function setElementProperty(renderElement, propertyName, propertyValue) {\n                renderElement[propertyName] = propertyValue;\n            }\n        }, {\n            key: 'setElementAttribute',\n            value: function setElementAttribute(renderElement, attributeName, attributeValue) {\n                var /** @type {?} */attrNs = void 0;\n                var /** @type {?} */attrNameWithoutNs = attributeName;\n                if (isNamespaced(attributeName)) {\n                    var /** @type {?} */nsAndName = splitNamespace(attributeName);\n                    attrNameWithoutNs = nsAndName[1];\n                    attributeName = nsAndName[0] + ':' + nsAndName[1];\n                    attrNs = NAMESPACE_URIS[nsAndName[0]];\n                }\n                if (isPresent(attributeValue)) {\n                    if (attrNs) {\n                        renderElement.setAttributeNS(attrNs, attributeName, attributeValue);\n                    } else {\n                        renderElement.setAttribute(attributeName, attributeValue);\n                    }\n                } else {\n                    if (isPresent(attrNs)) {\n                        renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);\n                    } else {\n                        renderElement.removeAttribute(attributeName);\n                    }\n                }\n            }\n        }, {\n            key: 'setBindingDebugInfo',\n            value: function setBindingDebugInfo(renderElement, propertyName, propertyValue) {\n                if (renderElement.nodeType === Node.COMMENT_NODE) {\n                    var /** @type {?} */existingBindings = renderElement.nodeValue.replace(/\\n/g, '').match(TEMPLATE_BINDINGS_EXP);\n                    var /** @type {?} */parsedBindings = JSON.parse(existingBindings[1]);\n                    parsedBindings[propertyName] = propertyValue;\n                    renderElement.nodeValue = TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));\n                } else {\n                    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n                    propertyName = propertyName.replace(/\\$/g, '_');\n                    this.setElementAttribute(renderElement, propertyName, propertyValue);\n                }\n            }\n        }, {\n            key: 'setElementClass',\n            value: function setElementClass(renderElement, className, isAdd) {\n                if (isAdd) {\n                    renderElement.classList.add(className);\n                } else {\n                    renderElement.classList.remove(className);\n                }\n            }\n        }, {\n            key: 'setElementStyle',\n            value: function setElementStyle(renderElement, styleName, styleValue) {\n                if (isPresent(styleValue)) {\n                    renderElement.style[styleName] = stringify(styleValue);\n                } else {\n                    // IE requires '' instead of null\n                    // see https://github.com/angular/angular/issues/7916\n                    renderElement.style[styleName] = '';\n                }\n            }\n        }, {\n            key: 'invokeElementMethod',\n            value: function invokeElementMethod(renderElement, methodName, args) {\n                renderElement[methodName].apply(renderElement, args);\n            }\n        }, {\n            key: 'setText',\n            value: function setText(renderNode, text) {\n                renderNode.nodeValue = text;\n            }\n        }, {\n            key: 'animate',\n            value: function animate(element, startingStyles, keyframes, duration, delay, easing) {\n                var previousPlayers = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n\n                if (this._rootRenderer.document.body.contains(element)) {\n                    return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);\n                }\n                return new _core.ɵNoOpAnimationPlayer();\n            }\n        }]);\n\n        return DomRenderer;\n    }();\n\n    /**\n     * @param {?} sibling\n     * @param {?} nodes\n     * @return {?}\n     */\n    function moveNodesAfterSibling(sibling, nodes) {\n        var /** @type {?} */parent = sibling.parentNode;\n        if (nodes.length > 0 && parent) {\n            var /** @type {?} */nextSibling = sibling.nextSibling;\n            if (nextSibling) {\n                for (var /** @type {?} */i = 0; i < nodes.length; i++) {\n                    parent.insertBefore(nodes[i], nextSibling);\n                }\n            } else {\n                for (var /** @type {?} */_i = 0; _i < nodes.length; _i++) {\n                    parent.appendChild(nodes[_i]);\n                }\n            }\n        }\n    }\n    /**\n     * @param {?} parent\n     * @param {?} nodes\n     * @return {?}\n     */\n    function appendNodes(parent, nodes) {\n        for (var /** @type {?} */i = 0; i < nodes.length; i++) {\n            parent.appendChild(nodes[i]);\n        }\n    }\n    /**\n     * @param {?} eventHandler\n     * @return {?}\n     */\n    function decoratePreventDefault(eventHandler) {\n        return function (event) {\n            var /** @type {?} */allowDefaultBehavior = eventHandler(event);\n            if (allowDefaultBehavior === false) {\n                // TODO(tbosch): move preventDefault into event plugins...\n                event.preventDefault();\n                event.returnValue = false;\n            }\n        };\n    }\n    var /** @type {?} */COMPONENT_REGEX = /%COMP%/g;\n    var /** @type {?} */COMPONENT_VARIABLE = '%COMP%';\n    var /** @type {?} */HOST_ATTR = '_nghost-' + COMPONENT_VARIABLE;\n    var /** @type {?} */CONTENT_ATTR = '_ngcontent-' + COMPONENT_VARIABLE;\n    /**\n     * @param {?} componentShortId\n     * @return {?}\n     */\n    function shimContentAttribute(componentShortId) {\n        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n    }\n    /**\n     * @param {?} componentShortId\n     * @return {?}\n     */\n    function shimHostAttribute(componentShortId) {\n        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n    }\n    /**\n     * @param {?} compId\n     * @param {?} styles\n     * @param {?} target\n     * @return {?}\n     */\n    function flattenStyles(compId, styles, target) {\n        for (var /** @type {?} */i = 0; i < styles.length; i++) {\n            var /** @type {?} */style = styles[i];\n            if (Array.isArray(style)) {\n                flattenStyles(compId, style, target);\n            } else {\n                style = style.replace(COMPONENT_REGEX, compId);\n                target.push(style);\n            }\n        }\n        return target;\n    }\n    var /** @type {?} */NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    function isNamespaced(name) {\n        return name[0] === ':';\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    function splitNamespace(name) {\n        var /** @type {?} */match = name.match(NS_PREFIX_RE);\n        return [match[1], match[2]];\n    }\n\n    var DomRendererFactoryV2 = function () {\n        /**\n         * @param {?} eventManager\n         * @param {?} sharedStylesHost\n         */\n        function DomRendererFactoryV2(eventManager, sharedStylesHost) {\n            _classCallCheck(this, DomRendererFactoryV2);\n\n            this.eventManager = eventManager;\n            this.sharedStylesHost = sharedStylesHost;\n            this.rendererByCompId = new Map();\n            this.defaultRenderer = new DefaultDomRendererV2(eventManager);\n        }\n\n        _createClass(DomRendererFactoryV2, [{\n            key: 'createRenderer',\n            value: function createRenderer(element, type) {\n                if (!element || !type) {\n                    return this.defaultRenderer;\n                }\n                switch (type.encapsulation) {\n                    case _core.ViewEncapsulation.Emulated:\n                        {\n                            var /** @type {?} */renderer = this.rendererByCompId.get(type.id);\n                            if (!renderer) {\n                                renderer = new EmulatedEncapsulationDomRendererV2(this.eventManager, this.sharedStylesHost, type);\n                                this.rendererByCompId.set(type.id, renderer);\n                            }\n                            renderer.applyToHost(element);\n                            return renderer;\n                        }\n                    case _core.ViewEncapsulation.Native:\n                        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n                    default:\n                        {\n                            if (!this.rendererByCompId.has(type.id)) {\n                                var /** @type {?} */styles = flattenStyles(type.id, type.styles, []);\n                                this.sharedStylesHost.addStyles(styles);\n                                this.rendererByCompId.set(type.id, this.defaultRenderer);\n                            }\n                            return this.defaultRenderer;\n                        }\n                }\n            }\n        }]);\n\n        return DomRendererFactoryV2;\n    }();\n\n    DomRendererFactoryV2.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    DomRendererFactoryV2.ctorParameters = function () {\n        return [{ type: EventManager }, { type: DomSharedStylesHost }];\n    };\n\n    var DefaultDomRendererV2 = function () {\n        /**\n         * @param {?} eventManager\n         */\n        function DefaultDomRendererV2(eventManager) {\n            _classCallCheck(this, DefaultDomRendererV2);\n\n            this.eventManager = eventManager;\n            this.data = Object.create(null);\n        }\n        /**\n         * @return {?}\n         */\n\n\n        _createClass(DefaultDomRendererV2, [{\n            key: 'destroy',\n            value: function destroy() {}\n        }, {\n            key: 'createElement',\n            value: function createElement(name, namespace) {\n                if (namespace) {\n                    return document.createElementNS(NAMESPACE_URIS[namespace], name);\n                }\n                return document.createElement(name);\n            }\n        }, {\n            key: 'createComment',\n            value: function createComment(value) {\n                return document.createComment(value);\n            }\n        }, {\n            key: 'createText',\n            value: function createText(value) {\n                return document.createTextNode(value);\n            }\n        }, {\n            key: 'appendChild',\n            value: function appendChild(parent, newChild) {\n                parent.appendChild(newChild);\n            }\n        }, {\n            key: 'insertBefore',\n            value: function insertBefore(parent, newChild, refChild) {\n                if (parent) {\n                    parent.insertBefore(newChild, refChild);\n                }\n            }\n        }, {\n            key: 'removeChild',\n            value: function removeChild(parent, oldChild) {\n                if (parent) {\n                    parent.removeChild(oldChild);\n                }\n            }\n        }, {\n            key: 'selectRootElement',\n            value: function selectRootElement(selectorOrNode) {\n                var /** @type {?} */el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;\n                if (!el) {\n                    throw new Error('The selector \"' + selectorOrNode + '\" did not match any elements');\n                }\n                el.textContent = '';\n                return el;\n            }\n        }, {\n            key: 'parentNode',\n            value: function parentNode(node) {\n                return node.parentNode;\n            }\n        }, {\n            key: 'nextSibling',\n            value: function nextSibling(node) {\n                return node.nextSibling;\n            }\n        }, {\n            key: 'setAttribute',\n            value: function setAttribute(el, name, value, namespace) {\n                if (namespace) {\n                    el.setAttributeNS(NAMESPACE_URIS[namespace], namespace + ':' + name, value);\n                } else {\n                    el.setAttribute(name, value);\n                }\n            }\n        }, {\n            key: 'removeAttribute',\n            value: function removeAttribute(el, name, namespace) {\n                if (namespace) {\n                    el.removeAttributeNS(NAMESPACE_URIS[namespace], name);\n                } else {\n                    el.removeAttribute(name);\n                }\n            }\n        }, {\n            key: 'addClass',\n            value: function addClass(el, name) {\n                el.classList.add(name);\n            }\n        }, {\n            key: 'removeClass',\n            value: function removeClass(el, name) {\n                el.classList.remove(name);\n            }\n        }, {\n            key: 'setStyle',\n            value: function setStyle(el, style, value, hasVendorPrefix, hasImportant) {\n                if (hasVendorPrefix || hasImportant) {\n                    el.style.setProperty(style, value, hasImportant ? 'important' : '');\n                } else {\n                    el.style[style] = value;\n                }\n            }\n        }, {\n            key: 'removeStyle',\n            value: function removeStyle(el, style, hasVendorPrefix) {\n                if (hasVendorPrefix) {\n                    el.style.removeProperty(style);\n                } else {\n                    // IE requires '' instead of null\n                    // see https://github.com/angular/angular/issues/7916\n                    el.style[style] = '';\n                }\n            }\n        }, {\n            key: 'setProperty',\n            value: function setProperty(el, name, value) {\n                el[name] = value;\n            }\n        }, {\n            key: 'setValue',\n            value: function setValue(node, value) {\n                node.nodeValue = value;\n            }\n        }, {\n            key: 'listen',\n            value: function listen(target, event, callback) {\n                if (typeof target === 'string') {\n                    return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));\n                }\n                return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));\n            }\n        }]);\n\n        return DefaultDomRendererV2;\n    }();\n\n    var EmulatedEncapsulationDomRendererV2 = function (_DefaultDomRendererV) {\n        _inherits(EmulatedEncapsulationDomRendererV2, _DefaultDomRendererV);\n\n        /**\n         * @param {?} eventManager\n         * @param {?} sharedStylesHost\n         * @param {?} component\n         */\n        function EmulatedEncapsulationDomRendererV2(eventManager, sharedStylesHost, component) {\n            _classCallCheck(this, EmulatedEncapsulationDomRendererV2);\n\n            var _this16 = _possibleConstructorReturn(this, (EmulatedEncapsulationDomRendererV2.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2)).call(this, eventManager));\n\n            _this16.component = component;\n            var styles = flattenStyles(component.id, component.styles, []);\n            sharedStylesHost.addStyles(styles);\n            _this16.contentAttr = shimContentAttribute(component.id);\n            _this16.hostAttr = shimHostAttribute(component.id);\n            return _this16;\n        }\n        /**\n         * @param {?} element\n         * @return {?}\n         */\n\n\n        _createClass(EmulatedEncapsulationDomRendererV2, [{\n            key: 'applyToHost',\n            value: function applyToHost(element) {\n                _get(EmulatedEncapsulationDomRendererV2.prototype.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype), 'setAttribute', this).call(this, element, this.hostAttr, '');\n            }\n        }, {\n            key: 'createElement',\n            value: function createElement(parent, name) {\n                var /** @type {?} */el = _get(EmulatedEncapsulationDomRendererV2.prototype.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype), 'createElement', this).call(this, parent, name);\n                _get(EmulatedEncapsulationDomRendererV2.prototype.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype), 'setAttribute', this).call(this, el, this.contentAttr, '');\n                return el;\n            }\n        }]);\n\n        return EmulatedEncapsulationDomRendererV2;\n    }(DefaultDomRendererV2);\n\n    var ShadowDomRenderer = function (_DefaultDomRendererV2) {\n        _inherits(ShadowDomRenderer, _DefaultDomRendererV2);\n\n        /**\n         * @param {?} eventManager\n         * @param {?} sharedStylesHost\n         * @param {?} hostEl\n         * @param {?} component\n         */\n        function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {\n            _classCallCheck(this, ShadowDomRenderer);\n\n            var _this17 = _possibleConstructorReturn(this, (ShadowDomRenderer.__proto__ || Object.getPrototypeOf(ShadowDomRenderer)).call(this, eventManager));\n\n            _this17.sharedStylesHost = sharedStylesHost;\n            _this17.hostEl = hostEl;\n            _this17.component = component;\n            _this17.shadowRoot = hostEl.createShadowRoot();\n            _this17.sharedStylesHost.addHost(_this17.shadowRoot);\n            var styles = flattenStyles(component.id, component.styles, []);\n            for (var i = 0; i < styles.length; i++) {\n                var styleEl = document.createElement('style');\n                styleEl.textContent = styles[i];\n                _this17.shadowRoot.appendChild(styleEl);\n            }\n            return _this17;\n        }\n        /**\n         * @param {?} node\n         * @return {?}\n         */\n\n\n        _createClass(ShadowDomRenderer, [{\n            key: 'nodeOrShadowRoot',\n            value: function nodeOrShadowRoot(node) {\n                return node === this.hostEl ? this.shadowRoot : node;\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.sharedStylesHost.removeHost(this.shadowRoot);\n            }\n        }, {\n            key: 'appendChild',\n            value: function appendChild(parent, newChild) {\n                return _get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'appendChild', this).call(this, this.nodeOrShadowRoot(parent), newChild);\n            }\n        }, {\n            key: 'insertBefore',\n            value: function insertBefore(parent, newChild, refChild) {\n                return _get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'insertBefore', this).call(this, this.nodeOrShadowRoot(parent), newChild, refChild);\n            }\n        }, {\n            key: 'removeChild',\n            value: function removeChild(parent, oldChild) {\n                return _get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'removeChild', this).call(this, this.nodeOrShadowRoot(parent), oldChild);\n            }\n        }, {\n            key: 'parentNode',\n            value: function parentNode(node) {\n                return this.nodeOrShadowRoot(_get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'parentNode', this).call(this, this.nodeOrShadowRoot(node)));\n            }\n        }]);\n\n        return ShadowDomRenderer;\n    }(DefaultDomRendererV2);\n\n    var /** @type {?} */CORE_TOKENS = {\n        'ApplicationRef': core.ApplicationRef,\n        'NgZone': core.NgZone\n    };\n    var /** @type {?} */INSPECT_GLOBAL_NAME = 'ng.probe';\n    var /** @type {?} */CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';\n    /**\n     * Returns a {\\@link DebugElement} for the given native DOM element, or\n     * null if the given native element does not have an Angular view associated\n     * with it.\n     * @param {?} element\n     * @return {?}\n     */\n    function inspectNativeElement(element) {\n        return core.getDebugNode(element);\n    }\n    /**\n     * Deprecated. Use the one from '\\@angular/core'.\n     * @deprecated\n     */\n\n    var NgProbeToken =\n    /**\n     * @param {?} name\n     * @param {?} token\n     */\n    function NgProbeToken(name, token) {\n        _classCallCheck(this, NgProbeToken);\n\n        this.name = name;\n        this.token = token;\n    };\n\n    /**\n     * @param {?} rootRenderer\n     * @param {?} extraTokens\n     * @param {?} coreTokens\n     * @return {?}\n     */\n    function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) {\n        return core.isDevMode() ? _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) : rootRenderer;\n    }\n    /**\n     * @param {?} rootRenderer\n     * @param {?} extraTokens\n     * @return {?}\n     */\n    function _createRootRenderer(rootRenderer, extraTokens) {\n        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));\n        return new core.ɵDebugDomRootRenderer(rootRenderer);\n    }\n    /**\n     * @param {?} tokens\n     * @return {?}\n     */\n    function _ngProbeTokensToMap(tokens) {\n        return tokens.reduce(function (prev, t) {\n            return prev[t.name] = t.token, prev;\n        }, {});\n    }\n    /**\n     * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n     */\n    var /** @type {?} */ELEMENT_PROBE_PROVIDERS = [{\n        provide: core.RootRenderer,\n        useFactory: _createConditionalRootRenderer,\n        deps: [DomRootRenderer, [NgProbeToken, new core.Optional()], [core.NgProbeToken, new core.Optional()]]\n    }];\n\n    var DomEventsPlugin = function (_EventManagerPlugin) {\n        _inherits(DomEventsPlugin, _EventManagerPlugin);\n\n        /**\n         * @param {?} doc\n         */\n        function DomEventsPlugin(doc) {\n            _classCallCheck(this, DomEventsPlugin);\n\n            return _possibleConstructorReturn(this, (DomEventsPlugin.__proto__ || Object.getPrototypeOf(DomEventsPlugin)).call(this, doc));\n        }\n        /**\n         * @param {?} eventName\n         * @return {?}\n         */\n\n\n        _createClass(DomEventsPlugin, [{\n            key: 'supports',\n            value: function supports(eventName) {\n                return true;\n            }\n        }, {\n            key: 'addEventListener',\n            value: function addEventListener(element, eventName, handler) {\n                element.addEventListener(eventName, /** @type {?} */handler, false);\n                return function () {\n                    return element.removeEventListener(eventName, /** @type {?} */handler, false);\n                };\n            }\n        }]);\n\n        return DomEventsPlugin;\n    }(EventManagerPlugin);\n\n    DomEventsPlugin.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    DomEventsPlugin.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }];\n    };\n\n    var /** @type {?} */EVENT_NAMES = {\n        // pan\n        'pan': true,\n        'panstart': true,\n        'panmove': true,\n        'panend': true,\n        'pancancel': true,\n        'panleft': true,\n        'panright': true,\n        'panup': true,\n        'pandown': true,\n        // pinch\n        'pinch': true,\n        'pinchstart': true,\n        'pinchmove': true,\n        'pinchend': true,\n        'pinchcancel': true,\n        'pinchin': true,\n        'pinchout': true,\n        // press\n        'press': true,\n        'pressup': true,\n        // rotate\n        'rotate': true,\n        'rotatestart': true,\n        'rotatemove': true,\n        'rotateend': true,\n        'rotatecancel': true,\n        // swipe\n        'swipe': true,\n        'swipeleft': true,\n        'swiperight': true,\n        'swipeup': true,\n        'swipedown': true,\n        // tap\n        'tap': true\n    };\n    /**\n     * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure\n     * Hammer gestures.\n     *\n     * @experimental\n     */\n    var /** @type {?} */HAMMER_GESTURE_CONFIG = new _core.InjectionToken('HammerGestureConfig');\n    /**\n     * \\@experimental\n     */\n\n    var HammerGestureConfig = function () {\n        function HammerGestureConfig() {\n            _classCallCheck(this, HammerGestureConfig);\n\n            this.events = [];\n            this.overrides = {};\n        }\n        /**\n         * @param {?} element\n         * @return {?}\n         */\n\n\n        _createClass(HammerGestureConfig, [{\n            key: 'buildHammer',\n            value: function buildHammer(element) {\n                var /** @type {?} */mc = new Hammer(element);\n                mc.get('pinch').set({ enable: true });\n                mc.get('rotate').set({ enable: true });\n                for (var /** @type {?} */eventName in this.overrides) {\n                    mc.get(eventName).set(this.overrides[eventName]);\n                }\n                return mc;\n            }\n        }]);\n\n        return HammerGestureConfig;\n    }();\n\n    HammerGestureConfig.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    HammerGestureConfig.ctorParameters = function () {\n        return [];\n    };\n\n    var HammerGesturesPlugin = function (_EventManagerPlugin2) {\n        _inherits(HammerGesturesPlugin, _EventManagerPlugin2);\n\n        /**\n         * @param {?} doc\n         * @param {?} _config\n         */\n        function HammerGesturesPlugin(doc, _config) {\n            _classCallCheck(this, HammerGesturesPlugin);\n\n            var _this19 = _possibleConstructorReturn(this, (HammerGesturesPlugin.__proto__ || Object.getPrototypeOf(HammerGesturesPlugin)).call(this, doc));\n\n            _this19._config = _config;\n            return _this19;\n        }\n        /**\n         * @param {?} eventName\n         * @return {?}\n         */\n\n\n        _createClass(HammerGesturesPlugin, [{\n            key: 'supports',\n            value: function supports(eventName) {\n                if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n                    return false;\n                }\n                if (!window.Hammer) {\n                    throw new Error('Hammer.js is not loaded, can not bind ' + eventName + ' event');\n                }\n                return true;\n            }\n        }, {\n            key: 'addEventListener',\n            value: function addEventListener(element, eventName, handler) {\n                var _this20 = this;\n\n                var /** @type {?} */zone = this.manager.getZone();\n                eventName = eventName.toLowerCase();\n                return zone.runOutsideAngular(function () {\n                    // Creating the manager bind events, must be done outside of angular\n                    var /** @type {?} */mc = _this20._config.buildHammer(element);\n                    var /** @type {?} */callback = function callback(eventObj) {\n                        zone.runGuarded(function () {\n                            handler(eventObj);\n                        });\n                    };\n                    mc.on(eventName, callback);\n                    return function () {\n                        return mc.off(eventName, callback);\n                    };\n                });\n            }\n        }, {\n            key: 'isCustomEvent',\n            value: function isCustomEvent(eventName) {\n                return this._config.events.indexOf(eventName) > -1;\n            }\n        }]);\n\n        return HammerGesturesPlugin;\n    }(EventManagerPlugin);\n\n    HammerGesturesPlugin.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    HammerGesturesPlugin.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }, { type: HammerGestureConfig, decorators: [{ type: _core.Inject, args: [HAMMER_GESTURE_CONFIG] }] }];\n    };\n\n    var /** @type {?} */MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n    var /** @type {?} */MODIFIER_KEY_GETTERS = {\n        'alt': function alt(event) {\n            return event.altKey;\n        },\n        'control': function control(event) {\n            return event.ctrlKey;\n        },\n        'meta': function meta(event) {\n            return event.metaKey;\n        },\n        'shift': function shift(event) {\n            return event.shiftKey;\n        }\n    };\n    /**\n     * \\@experimental\n     */\n\n    var KeyEventsPlugin = function (_EventManagerPlugin3) {\n        _inherits(KeyEventsPlugin, _EventManagerPlugin3);\n\n        /**\n         * @param {?} doc\n         */\n        function KeyEventsPlugin(doc) {\n            _classCallCheck(this, KeyEventsPlugin);\n\n            return _possibleConstructorReturn(this, (KeyEventsPlugin.__proto__ || Object.getPrototypeOf(KeyEventsPlugin)).call(this, doc));\n        }\n        /**\n         * @param {?} eventName\n         * @return {?}\n         */\n\n\n        _createClass(KeyEventsPlugin, [{\n            key: 'supports',\n            value: function supports(eventName) {\n                return KeyEventsPlugin.parseEventName(eventName) != null;\n            }\n        }, {\n            key: 'addEventListener',\n            value: function addEventListener(element, eventName, handler) {\n                var /** @type {?} */parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n                var /** @type {?} */outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n                return this.manager.getZone().runOutsideAngular(function () {\n                    return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n                });\n            }\n        }], [{\n            key: 'parseEventName',\n            value: function parseEventName(eventName) {\n                var /** @type {?} */parts = eventName.toLowerCase().split('.');\n                var /** @type {?} */domEventName = parts.shift();\n                if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n                    return null;\n                }\n                var /** @type {?} */key = KeyEventsPlugin._normalizeKey(parts.pop());\n                var /** @type {?} */fullKey = '';\n                MODIFIER_KEYS.forEach(function (modifierName) {\n                    var /** @type {?} */index = parts.indexOf(modifierName);\n                    if (index > -1) {\n                        parts.splice(index, 1);\n                        fullKey += modifierName + '.';\n                    }\n                });\n                fullKey += key;\n                if (parts.length != 0 || key.length === 0) {\n                    // returning null instead of throwing to let another plugin process the event\n                    return null;\n                }\n                var /** @type {?} */result = {};\n                result['domEventName'] = domEventName;\n                result['fullKey'] = fullKey;\n                return result;\n            }\n        }, {\n            key: 'getEventFullKey',\n            value: function getEventFullKey(event) {\n                var /** @type {?} */fullKey = '';\n                var /** @type {?} */key = getDOM().getEventKey(event);\n                key = key.toLowerCase();\n                if (key === ' ') {\n                    key = 'space'; // for readability\n                } else if (key === '.') {\n                    key = 'dot'; // because '.' is used as a separator in event names\n                }\n                MODIFIER_KEYS.forEach(function (modifierName) {\n                    if (modifierName != key) {\n                        var /** @type {?} */modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                        if (modifierGetter(event)) {\n                            fullKey += modifierName + '.';\n                        }\n                    }\n                });\n                fullKey += key;\n                return fullKey;\n            }\n        }, {\n            key: 'eventCallback',\n            value: function eventCallback(fullKey, handler, zone) {\n                return function (event /** TODO #9100 */) {\n                    if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n                        zone.runGuarded(function () {\n                            return handler(event);\n                        });\n                    }\n                };\n            }\n        }, {\n            key: '_normalizeKey',\n            value: function _normalizeKey(keyName) {\n                // TODO: switch to a Map if the mapping grows too much\n                switch (keyName) {\n                    case 'esc':\n                        return 'escape';\n                    default:\n                        return keyName;\n                }\n            }\n        }]);\n\n        return KeyEventsPlugin;\n    }(EventManagerPlugin);\n\n    KeyEventsPlugin.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    KeyEventsPlugin.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }];\n    };\n\n    /**\n     * A pattern that recognizes a commonly useful subset of URLs that are safe.\n     *\n     * This regular expression matches a subset of URLs that will not cause script\n     * execution if used in URL context within a HTML document. Specifically, this\n     * regular expression matches if (comment from here on and regex copied from\n     * Soy's EscapingConventions):\n     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n     * (2) or no protocol.  A protocol must be followed by a colon. The below\n     *     allows that by allowing colons only after one of the characters [/?#].\n     *     A colon after a hash (#) must be in the fragment.\n     *     Otherwise, a colon after a (?) must be in a query.\n     *     Otherwise, a colon after a single solidus (/) must be in a path.\n     *     Otherwise, a colon after a double solidus (//) must be in the authority\n     *     (before port).\n     *\n     * The pattern disallows &, used in HTML entity declarations before\n     * one of the characters in [/?#]. This disallows HTML entities used in the\n     * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n     * It also disallows HTML entities in the first path part of a relative path,\n     * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n     * that. More importantly, it disallows masking of a colon,\n     * e.g. \"javascript&#58;...\".\n     *\n     * This regular expression was taken from the Closure sanitization library.\n     */\n    var /** @type {?} */SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */\n    var /** @type {?} */DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function sanitizeUrl(url) {\n        url = String(url);\n        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n        if ((0, _core.isDevMode)()) {\n            getDOM().log('WARNING: sanitizing unsafe URL value ' + url + ' (see http://g.co/ng/security#xss)');\n        }\n        return 'unsafe:' + url;\n    }\n    /**\n     * @param {?} srcset\n     * @return {?}\n     */\n    function sanitizeSrcset(srcset) {\n        srcset = String(srcset);\n        return srcset.split(',').map(function (srcset) {\n            return sanitizeUrl(srcset.trim());\n        }).join(', ');\n    }\n\n    /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */\n    var /** @type {?} */inertElement = null;\n    /** Lazily initialized to make sure the DOM adapter gets set before use. */\n    var /** @type {?} */DOM = null;\n    /**\n     * Returns an HTML element that is guaranteed to not execute code when creating elements in it.\n     * @return {?}\n     */\n    function getInertElement() {\n        if (inertElement) return inertElement;\n        DOM = getDOM();\n        // Prefer using <template> element if supported.\n        var /** @type {?} */templateEl = DOM.createElement('template');\n        if ('content' in templateEl) return templateEl;\n        var /** @type {?} */doc = DOM.createHtmlDocument();\n        inertElement = DOM.querySelector(doc, 'body');\n        if (inertElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so we\n            // need to create one.\n            var /** @type {?} */html = DOM.createElement('html', doc);\n            inertElement = DOM.createElement('body', doc);\n            DOM.appendChild(html, inertElement);\n            DOM.appendChild(doc, html);\n        }\n        return inertElement;\n    }\n    /**\n     * @param {?} tags\n     * @return {?}\n     */\n    function tagSet(tags) {\n        var /** @type {?} */res = {};\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n            for (var _iterator4 = tags.split(',')[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var t = _step4.value;\n\n                res[t] = true;\n            }\n        } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                    _iterator4.return();\n                }\n            } finally {\n                if (_didIteratorError4) {\n                    throw _iteratorError4;\n                }\n            }\n        }\n\n        return res;\n    }\n    /**\n     * @param {...?} sets\n     * @return {?}\n     */\n    function merge() {\n        var /** @type {?} */res = {};\n\n        for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {\n            sets[_key] = arguments[_key];\n        }\n\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n            for (var _iterator5 = sets[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var s = _step5.value;\n\n                for (var /** @type {?} */v in s) {\n                    if (s.hasOwnProperty(v)) res[v] = true;\n                }\n            }\n        } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                    _iterator5.return();\n                }\n            } finally {\n                if (_didIteratorError5) {\n                    throw _iteratorError5;\n                }\n            }\n        }\n\n        return res;\n    }\n    // Good source of info about elements and attributes\n    // http://dev.w3.org/html5/spec/Overview.html#semantics\n    // http://simon.html5.org/html-elements\n    // Safe Void Elements - HTML5\n    // http://dev.w3.org/html5/spec/Overview.html#void-elements\n    var /** @type {?} */VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n    // Elements that you can, intentionally, leave open (and which close themselves)\n    // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n    var /** @type {?} */OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n    var /** @type {?} */OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n    var /** @type {?} */OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n    // Safe Block Elements - HTML5\n    var /** @type {?} */BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n    // Inline Elements - HTML5\n    var /** @type {?} */INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n    var /** @type {?} */VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n    // Attributes that have href and hence need to be sanitized\n    var /** @type {?} */URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n    // Attributes that have special href set hence need to be sanitized\n    var /** @type {?} */SRCSET_ATTRS = tagSet('srcset');\n    var /** @type {?} */HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');\n    // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security\n    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n    // innerHTML is required, SVG attributes should be added here.\n    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n    // can be sanitized, but they increase security surface area without a legitimate use case, so they\n    // are left out here.\n    var /** @type {?} */VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n    /**\n     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n     * attributes.\n     */\n\n    var SanitizingHtmlSerializer = function () {\n        function SanitizingHtmlSerializer() {\n            _classCallCheck(this, SanitizingHtmlSerializer);\n\n            this.sanitizedSomething = false;\n            this.buf = [];\n        }\n        /**\n         * @param {?} el\n         * @return {?}\n         */\n\n\n        _createClass(SanitizingHtmlSerializer, [{\n            key: 'sanitizeChildren',\n            value: function sanitizeChildren(el) {\n                // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n                // However this code never accesses properties off of `document` before deleting its contents\n                // again, so it shouldn't be vulnerable to DOM clobbering.\n                var /** @type {?} */current = el.firstChild;\n                while (current) {\n                    if (DOM.isElementNode(current)) {\n                        this.startElement( /** @type {?} */current);\n                    } else if (DOM.isTextNode(current)) {\n                        this.chars(DOM.nodeValue(current));\n                    } else {\n                        // Strip non-element, non-text nodes.\n                        this.sanitizedSomething = true;\n                    }\n                    if (DOM.firstChild(current)) {\n                        current = DOM.firstChild(current);\n                        continue;\n                    }\n                    while (current) {\n                        // Leaving the element. Walk up and to the right, closing tags as we go.\n                        if (DOM.isElementNode(current)) {\n                            this.endElement( /** @type {?} */current);\n                        }\n                        if (DOM.nextSibling(current)) {\n                            current = DOM.nextSibling(current);\n                            break;\n                        }\n                        current = DOM.parentElement(current);\n                    }\n                }\n                return this.buf.join('');\n            }\n        }, {\n            key: 'startElement',\n            value: function startElement(element) {\n                var _this22 = this;\n\n                var /** @type {?} */tagName = DOM.nodeName(element).toLowerCase();\n                if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                    this.sanitizedSomething = true;\n                    return;\n                }\n                this.buf.push('<');\n                this.buf.push(tagName);\n                DOM.attributeMap(element).forEach(function (value, attrName) {\n                    var /** @type {?} */lower = attrName.toLowerCase();\n                    if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                        _this22.sanitizedSomething = true;\n                        return;\n                    }\n                    // TODO(martinprobst): Special case image URIs for data:image/...\n                    if (URI_ATTRS[lower]) value = sanitizeUrl(value);\n                    if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n                    _this22.buf.push(' ');\n                    _this22.buf.push(attrName);\n                    _this22.buf.push('=\"');\n                    _this22.buf.push(encodeEntities(value));\n                    _this22.buf.push('\"');\n                });\n                this.buf.push('>');\n            }\n        }, {\n            key: 'endElement',\n            value: function endElement(current) {\n                var /** @type {?} */tagName = DOM.nodeName(current).toLowerCase();\n                if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n                    this.buf.push('</');\n                    this.buf.push(tagName);\n                    this.buf.push('>');\n                }\n            }\n        }, {\n            key: 'chars',\n            value: function chars(_chars /** TODO #9100 */) {\n                this.buf.push(encodeEntities(_chars));\n            }\n        }]);\n\n        return SanitizingHtmlSerializer;\n    }();\n\n    // Regular Expressions for parsing tags and attributes\n    var /** @type {?} */SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n    // ! to ~ is the ASCII range.\n    var /** @type {?} */NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n    /**\n     * Escapes all potentially dangerous characters, so that the\n     * resulting string can be safely inserted into attribute or\n     * element text.\n     * @param {?} value\n     * @return {?}\n     */\n    function encodeEntities(value) {\n        return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n            var /** @type {?} */hi = match.charCodeAt(0);\n            var /** @type {?} */low = match.charCodeAt(1);\n            return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';\n        }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n            return '&#' + match.charCodeAt(0) + ';';\n        }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    function stripCustomNsAttrs(el) {\n        DOM.attributeMap(el).forEach(function (_, attrName) {\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                DOM.removeAttribute(el, attrName);\n            }\n        });\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n            for (var _iterator6 = DOM.childNodesAsList(el)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var n = _step6.value;\n\n                if (DOM.isElementNode(n)) stripCustomNsAttrs( /** @type {?} */n);\n            }\n        } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                }\n            } finally {\n                if (_didIteratorError6) {\n                    throw _iteratorError6;\n                }\n            }\n        }\n    }\n    /**\n     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n     * the DOM in a browser environment.\n     * @param {?} defaultDoc\n     * @param {?} unsafeHtmlInput\n     * @return {?}\n     */\n    function sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n        try {\n            var /** @type {?} */containerEl = getInertElement();\n            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n            var /** @type {?} */unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n            var /** @type {?} */mXSSAttempts = 5;\n            var /** @type {?} */parsedHtml = unsafeHtml;\n            do {\n                if (mXSSAttempts === 0) {\n                    throw new Error('Failed to sanitize html because the input is unstable');\n                }\n                mXSSAttempts--;\n                unsafeHtml = parsedHtml;\n                DOM.setInnerHTML(containerEl, unsafeHtml);\n                if (defaultDoc.documentMode) {\n                    // strip custom-namespaced attributes on IE<=11\n                    stripCustomNsAttrs(containerEl);\n                }\n                parsedHtml = DOM.getInnerHTML(containerEl);\n            } while (unsafeHtml !== parsedHtml);\n            var /** @type {?} */sanitizer = new SanitizingHtmlSerializer();\n            var /** @type {?} */safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\n            // Clear out the body element.\n            var /** @type {?} */parent = DOM.getTemplateContent(containerEl) || containerEl;\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n                for (var _iterator7 = DOM.childNodesAsList(parent)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var child = _step7.value;\n\n                    DOM.removeChild(parent, child);\n                }\n            } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                        _iterator7.return();\n                    }\n                } finally {\n                    if (_didIteratorError7) {\n                        throw _iteratorError7;\n                    }\n                }\n            }\n\n            if ((0, _core.isDevMode)() && sanitizer.sanitizedSomething) {\n                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n            }\n            return safeHtml;\n        } catch (e) {\n            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n            inertElement = null;\n            throw e;\n        }\n    }\n\n    /**\n     * Regular expression for safe style values.\n     *\n     * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n     *\n     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n     * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n     * of XSS.\n     *\n     * The function expression checks only for XSS safety, not for CSS validity.\n     *\n     * This regular expression was taken from the Closure sanitization library, and augmented for\n     * transformation values.\n     */\n    var /** @type {?} */VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n    var /** @type {?} */TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n    var /** @type {?} */COLOR_FNS = '(?:rgb|hsl)a?';\n    var /** @type {?} */GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n    var /** @type {?} */CSS3_FNS = '(?:calc|attr)';\n    var /** @type {?} */FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n    var /** @type {?} */SAFE_STYLE_VALUE = new RegExp('^(' + VALUES + '|' + ('(?:' + TRANSFORMATION_FNS + '|' + COLOR_FNS + '|' + GRADIENTS + '|' + CSS3_FNS + ')') + (FN_ARGS + ')$'), 'g');\n    /**\n     * Matches a `url(...)` value with an arbitrary argument as long as it does\n     * not contain parentheses.\n     *\n     * The URL value still needs to be sanitized separately.\n     *\n     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n     * by observing whether scroll bars are displayed, or character ranges used by a font face\n     * definition.\n     *\n     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n     * binding a URL value without further cooperation from the page will cause an information leak, and\n     * if so, it is just a leak, not a full blown XSS vulnerability.\n     *\n     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n     * code is permissive and allows URLs that sanitize otherwise.\n     */\n    var /** @type {?} */URL_RE = /^url\\(([^)]+)\\)$/;\n    /**\n     * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n     * that neither escape (\\) nor any other character that could result in\n     * breaking out of a string parsing context are allowed;\n     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n     *\n     * This code was taken from the Closure sanitization library.\n     * @param {?} value\n     * @return {?}\n     */\n    function hasBalancedQuotes(value) {\n        var /** @type {?} */outsideSingle = true;\n        var /** @type {?} */outsideDouble = true;\n        for (var /** @type {?} */i = 0; i < value.length; i++) {\n            var /** @type {?} */c = value.charAt(i);\n            if (c === '\\'' && outsideDouble) {\n                outsideSingle = !outsideSingle;\n            } else if (c === '\"' && outsideSingle) {\n                outsideDouble = !outsideDouble;\n            }\n        }\n        return outsideSingle && outsideDouble;\n    }\n    /**\n     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n     * value) and returns a value that is safe to use in a browser environment.\n     * @param {?} value\n     * @return {?}\n     */\n    function sanitizeStyle(value) {\n        value = String(value).trim(); // Make sure it's actually a string.\n        if (!value) return '';\n        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n        // reasoning behind this.\n        var /** @type {?} */urlMatch = value.match(URL_RE);\n        if (urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n            return value; // Safe style values.\n        }\n        if ((0, _core.isDevMode)()) {\n            getDOM().log('WARNING: sanitizing unsafe style value ' + value + ' (see http://g.co/ng/security#xss).');\n        }\n        return 'unsafe';\n    }\n\n    /**\n     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n     * values to be safe to use in the different DOM contexts.\n     *\n     * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n     * the website.\n     *\n     * In specific situations, it might be necessary to disable sanitization, for example if the\n     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n     * methods, and then binding to that value from the template.\n     *\n     * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n     * Cross Site Scripting (XSS) security bug!\n     *\n     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n     * close as possible to the source of the value, to make it easy to verify no security bug is\n     * created by its use.\n     *\n     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n     * code. The sanitizer leaves safe values intact.\n     *\n     * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n     * sanitization for the value passed in. Carefully check and audit all values and code paths going\n     * into this call. Make sure any user data is appropriately escaped for this security context.\n     * For more detail, see the [Security Guide](http://g.co/ng/security).\n     *\n     * \\@stable\n     * @abstract\n     */\n\n    var DomSanitizer = function () {\n        function DomSanitizer() {\n            _classCallCheck(this, DomSanitizer);\n        }\n\n        _createClass(DomSanitizer, [{\n            key: 'sanitize',\n            value: function sanitize(context, value) {}\n        }, {\n            key: 'bypassSecurityTrustHtml',\n            value: function bypassSecurityTrustHtml(value) {}\n        }, {\n            key: 'bypassSecurityTrustStyle',\n            value: function bypassSecurityTrustStyle(value) {}\n        }, {\n            key: 'bypassSecurityTrustScript',\n            value: function bypassSecurityTrustScript(value) {}\n        }, {\n            key: 'bypassSecurityTrustUrl',\n            value: function bypassSecurityTrustUrl(value) {}\n        }, {\n            key: 'bypassSecurityTrustResourceUrl',\n            value: function bypassSecurityTrustResourceUrl(value) {}\n        }]);\n\n        return DomSanitizer;\n    }();\n\n    var DomSanitizerImpl = function (_DomSanitizer) {\n        _inherits(DomSanitizerImpl, _DomSanitizer);\n\n        /**\n         * @param {?} _doc\n         */\n        function DomSanitizerImpl(_doc) {\n            _classCallCheck(this, DomSanitizerImpl);\n\n            var _this23 = _possibleConstructorReturn(this, (DomSanitizerImpl.__proto__ || Object.getPrototypeOf(DomSanitizerImpl)).call(this));\n\n            _this23._doc = _doc;\n            return _this23;\n        }\n        /**\n         * @param {?} ctx\n         * @param {?} value\n         * @return {?}\n         */\n\n\n        _createClass(DomSanitizerImpl, [{\n            key: 'sanitize',\n            value: function sanitize(ctx, value) {\n                if (value == null) return null;\n                switch (ctx) {\n                    case _core.SecurityContext.NONE:\n                        return value;\n                    case _core.SecurityContext.HTML:\n                        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n                        this.checkNotSafeValue(value, 'HTML');\n                        return sanitizeHtml(this._doc, String(value));\n                    case _core.SecurityContext.STYLE:\n                        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n                        this.checkNotSafeValue(value, 'Style');\n                        return sanitizeStyle(value);\n                    case _core.SecurityContext.SCRIPT:\n                        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n                        this.checkNotSafeValue(value, 'Script');\n                        throw new Error('unsafe value used in a script context');\n                    case _core.SecurityContext.URL:\n                        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                            // Allow resource URLs in URL contexts, they are strictly more trusted.\n                            return value.changingThisBreaksApplicationSecurity;\n                        }\n                        this.checkNotSafeValue(value, 'URL');\n                        return sanitizeUrl(String(value));\n                    case _core.SecurityContext.RESOURCE_URL:\n                        if (value instanceof SafeResourceUrlImpl) {\n                            return value.changingThisBreaksApplicationSecurity;\n                        }\n                        this.checkNotSafeValue(value, 'ResourceURL');\n                        throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n                    default:\n                        throw new Error('Unexpected SecurityContext ' + ctx + ' (see http://g.co/ng/security#xss)');\n                }\n            }\n        }, {\n            key: 'checkNotSafeValue',\n            value: function checkNotSafeValue(value, expectedType) {\n                if (value instanceof SafeValueImpl) {\n                    throw new Error('Required a safe ' + expectedType + ', got a ' + value.getTypeName() + ' ' + '(see http://g.co/ng/security#xss)');\n                }\n            }\n        }, {\n            key: 'bypassSecurityTrustHtml',\n            value: function bypassSecurityTrustHtml(value) {\n                return new SafeHtmlImpl(value);\n            }\n        }, {\n            key: 'bypassSecurityTrustStyle',\n            value: function bypassSecurityTrustStyle(value) {\n                return new SafeStyleImpl(value);\n            }\n        }, {\n            key: 'bypassSecurityTrustScript',\n            value: function bypassSecurityTrustScript(value) {\n                return new SafeScriptImpl(value);\n            }\n        }, {\n            key: 'bypassSecurityTrustUrl',\n            value: function bypassSecurityTrustUrl(value) {\n                return new SafeUrlImpl(value);\n            }\n        }, {\n            key: 'bypassSecurityTrustResourceUrl',\n            value: function bypassSecurityTrustResourceUrl(value) {\n                return new SafeResourceUrlImpl(value);\n            }\n        }]);\n\n        return DomSanitizerImpl;\n    }(DomSanitizer);\n\n    DomSanitizerImpl.decorators = [{ type: _core.Injectable }];\n    /** @nocollapse */\n    DomSanitizerImpl.ctorParameters = function () {\n        return [{ type: undefined, decorators: [{ type: _core.Inject, args: [DOCUMENT] }] }];\n    };\n    /**\n     * @abstract\n     */\n\n    var SafeValueImpl = function () {\n        /**\n         * @param {?} changingThisBreaksApplicationSecurity\n         */\n        function SafeValueImpl(changingThisBreaksApplicationSecurity) {\n            _classCallCheck(this, SafeValueImpl);\n\n            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n            // empty\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n\n\n        _createClass(SafeValueImpl, [{\n            key: 'getTypeName',\n            value: function getTypeName() {}\n        }, {\n            key: 'toString',\n            value: function toString() {\n                return 'SafeValue must use [property]=binding: ' + this.changingThisBreaksApplicationSecurity + ' (see http://g.co/ng/security#xss)';\n            }\n        }]);\n\n        return SafeValueImpl;\n    }();\n\n    var SafeHtmlImpl = function (_SafeValueImpl) {\n        _inherits(SafeHtmlImpl, _SafeValueImpl);\n\n        function SafeHtmlImpl() {\n            _classCallCheck(this, SafeHtmlImpl);\n\n            return _possibleConstructorReturn(this, (SafeHtmlImpl.__proto__ || Object.getPrototypeOf(SafeHtmlImpl)).apply(this, arguments));\n        }\n\n        _createClass(SafeHtmlImpl, [{\n            key: 'getTypeName',\n            value: function getTypeName() {\n                return 'HTML';\n            }\n        }]);\n\n        return SafeHtmlImpl;\n    }(SafeValueImpl);\n\n    var SafeStyleImpl = function (_SafeValueImpl2) {\n        _inherits(SafeStyleImpl, _SafeValueImpl2);\n\n        function SafeStyleImpl() {\n            _classCallCheck(this, SafeStyleImpl);\n\n            return _possibleConstructorReturn(this, (SafeStyleImpl.__proto__ || Object.getPrototypeOf(SafeStyleImpl)).apply(this, arguments));\n        }\n\n        _createClass(SafeStyleImpl, [{\n            key: 'getTypeName',\n            value: function getTypeName() {\n                return 'Style';\n            }\n        }]);\n\n        return SafeStyleImpl;\n    }(SafeValueImpl);\n\n    var SafeScriptImpl = function (_SafeValueImpl3) {\n        _inherits(SafeScriptImpl, _SafeValueImpl3);\n\n        function SafeScriptImpl() {\n            _classCallCheck(this, SafeScriptImpl);\n\n            return _possibleConstructorReturn(this, (SafeScriptImpl.__proto__ || Object.getPrototypeOf(SafeScriptImpl)).apply(this, arguments));\n        }\n\n        _createClass(SafeScriptImpl, [{\n            key: 'getTypeName',\n            value: function getTypeName() {\n                return 'Script';\n            }\n        }]);\n\n        return SafeScriptImpl;\n    }(SafeValueImpl);\n\n    var SafeUrlImpl = function (_SafeValueImpl4) {\n        _inherits(SafeUrlImpl, _SafeValueImpl4);\n\n        function SafeUrlImpl() {\n            _classCallCheck(this, SafeUrlImpl);\n\n            return _possibleConstructorReturn(this, (SafeUrlImpl.__proto__ || Object.getPrototypeOf(SafeUrlImpl)).apply(this, arguments));\n        }\n\n        _createClass(SafeUrlImpl, [{\n            key: 'getTypeName',\n            value: function getTypeName() {\n                return 'URL';\n            }\n        }]);\n\n        return SafeUrlImpl;\n    }(SafeValueImpl);\n\n    var SafeResourceUrlImpl = function (_SafeValueImpl5) {\n        _inherits(SafeResourceUrlImpl, _SafeValueImpl5);\n\n        function SafeResourceUrlImpl() {\n            _classCallCheck(this, SafeResourceUrlImpl);\n\n            return _possibleConstructorReturn(this, (SafeResourceUrlImpl.__proto__ || Object.getPrototypeOf(SafeResourceUrlImpl)).apply(this, arguments));\n        }\n\n        _createClass(SafeResourceUrlImpl, [{\n            key: 'getTypeName',\n            value: function getTypeName() {\n                return 'ResourceURL';\n            }\n        }]);\n\n        return SafeResourceUrlImpl;\n    }(SafeValueImpl);\n\n    var /** @type {?} */INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{ provide: _core.PLATFORM_ID, useValue: _common.ɵPLATFORM_BROWSER_ID }, { provide: _core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true }, { provide: _common.PlatformLocation, useClass: BrowserPlatformLocation }, { provide: DOCUMENT, useFactory: _document, deps: [] }];\n    /**\n     * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n     * Attacker-controlled data introduced by an unsanitized provider could expose your\n     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n     * @experimental\n     */\n    var /** @type {?} */BROWSER_SANITIZATION_PROVIDERS = [{ provide: _core.Sanitizer, useExisting: DomSanitizer }, { provide: DomSanitizer, useClass: DomSanitizerImpl }];\n    /**\n     * @stable\n     */\n    var /** @type {?} */platformBrowser = (0, _core.createPlatformFactory)(_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n    /**\n     * @return {?}\n     */\n    function initDomAdapter() {\n        BrowserDomAdapter.makeCurrent();\n        BrowserGetTestability.init();\n    }\n    /**\n     * @return {?}\n     */\n    function errorHandler() {\n        return new _core.ErrorHandler();\n    }\n    /**\n     * @return {?}\n     */\n    function _document() {\n        return document;\n    }\n    /**\n     * @return {?}\n     */\n    function _resolveDefaultAnimationDriver() {\n        if (getDOM().supportsWebAnimation()) {\n            return new WebAnimationsDriver();\n        }\n        return AnimationDriver.NOOP;\n    }\n    /**\n     * The ng module for the browser.\n     *\n     * \\@stable\n     */\n\n    var BrowserModule = function () {\n        /**\n         * @param {?} parentModule\n         */\n        function BrowserModule(parentModule) {\n            _classCallCheck(this, BrowserModule);\n\n            if (parentModule) {\n                throw new Error('BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.');\n            }\n        }\n        /**\n         * Configures a browser-based application to transition from a server-rendered app, if\n         * one is present on the page. The specified parameters must include an application id,\n         * which must match between the client and server applications.\n         *\n         * \\@experimental\n         * @param {?} params\n         * @return {?}\n         */\n\n\n        _createClass(BrowserModule, null, [{\n            key: 'withServerTransition',\n            value: function withServerTransition(params) {\n                return {\n                    ngModule: BrowserModule,\n                    providers: [{ provide: _core.APP_ID, useValue: params.appId }, { provide: TRANSITION_ID, useExisting: _core.APP_ID }, SERVER_TRANSITION_PROVIDERS]\n                };\n            }\n        }]);\n\n        return BrowserModule;\n    }();\n\n    BrowserModule.decorators = [{ type: _core.NgModule, args: [{\n            providers: [BROWSER_SANITIZATION_PROVIDERS, { provide: _core.ErrorHandler, useFactory: errorHandler, deps: [] }, { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true }, { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true }, { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true }, { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig }, { provide: DomRootRenderer, useClass: DomRootRenderer_ }, { provide: _core.RootRenderer, useExisting: DomRootRenderer }, DomRendererFactoryV2, { provide: _core.RendererFactoryV2, useExisting: DomRendererFactoryV2 }, { provide: SharedStylesHost, useExisting: DomSharedStylesHost }, { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost, _core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Meta, Title],\n            exports: [_common.CommonModule, _core.ApplicationModule]\n        }] }];\n    /** @nocollapse */\n    BrowserModule.ctorParameters = function () {\n        return [{ type: BrowserModule, decorators: [{ type: _core.Optional }, { type: _core.SkipSelf }] }];\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * JS version of browser APIs. This library can only run in the browser.\n     */\n    var /** @type {?} */win = typeof window !== 'undefined' && window || {};\n\n    var ChangeDetectionPerfRecord =\n    /**\n     * @param {?} msPerTick\n     * @param {?} numTicks\n     */\n    function ChangeDetectionPerfRecord(msPerTick, numTicks) {\n        _classCallCheck(this, ChangeDetectionPerfRecord);\n\n        this.msPerTick = msPerTick;\n        this.numTicks = numTicks;\n    };\n\n    var AngularProfiler = function () {\n        /**\n         * @param {?} ref\n         */\n        function AngularProfiler(ref) {\n            _classCallCheck(this, AngularProfiler);\n\n            this.appRef = ref.injector.get(_core.ApplicationRef);\n        }\n        /**\n         * Exercises change detection in a loop and then prints the average amount of\n         * time in milliseconds how long a single round of change detection takes for\n         * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n         * of 500 milliseconds.\n         *\n         * Optionally, a user may pass a `config` parameter containing a map of\n         * options. Supported options are:\n         *\n         * `record` (boolean) - causes the profiler to record a CPU profile while\n         * it exercises the change detector. Example:\n         *\n         * ```\n         * ng.profiler.timeChangeDetection({record: true})\n         * ```\n         * @param {?} config\n         * @return {?}\n         */\n\n\n        _createClass(AngularProfiler, [{\n            key: 'timeChangeDetection',\n            value: function timeChangeDetection(config) {\n                var /** @type {?} */record = config && config['record'];\n                var /** @type {?} */profileName = 'Change Detection';\n                // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n                var /** @type {?} */isProfilerAvailable = isPresent(win.console.profile);\n                if (record && isProfilerAvailable) {\n                    win.console.profile(profileName);\n                }\n                var /** @type {?} */start = getDOM().performanceNow();\n                var /** @type {?} */numTicks = 0;\n                while (numTicks < 5 || getDOM().performanceNow() - start < 500) {\n                    this.appRef.tick();\n                    numTicks++;\n                }\n                var /** @type {?} */end = getDOM().performanceNow();\n                if (record && isProfilerAvailable) {\n                    // need to cast to <any> because type checker thinks there's no argument\n                    // while in fact there is:\n                    //\n                    // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n                    win.console.profileEnd(profileName);\n                }\n                var /** @type {?} */msPerTick = (end - start) / numTicks;\n                win.console.log('ran ' + numTicks + ' change detection cycles');\n                win.console.log(msPerTick.toFixed(2) + ' ms per check');\n                return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n            }\n        }]);\n\n        return AngularProfiler;\n    }();\n\n    var /** @type {?} */PROFILER_GLOBAL_NAME = 'ng.profiler';\n    /**\n     * Enabled Angular debug tools that are accessible via your browser's\n     * developer console.\n     *\n     * Usage:\n     *\n     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n     * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n     *    then hit Enter.\n     *\n     * \\@experimental All debugging apis are currently experimental.\n     * @param {?} ref\n     * @return {?}\n     */\n    function enableDebugTools(ref) {\n        getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n        return ref;\n    }\n    /**\n     * Disables Angular tools.\n     *\n     * \\@experimental All debugging apis are currently experimental.\n     * @return {?}\n     */\n    function disableDebugTools() {\n        getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, null);\n    }\n\n    /**\n     * Predicates for use with {\\@link DebugElement}'s query functions.\n     *\n     * \\@experimental All debugging apis are currently experimental.\n     */\n\n    var By = function () {\n        function By() {\n            _classCallCheck(this, By);\n        }\n\n        _createClass(By, null, [{\n            key: 'all',\n            value: function all() {\n                return function (debugElement) {\n                    return true;\n                };\n            }\n        }, {\n            key: 'css',\n            value: function css(selector) {\n                return function (debugElement) {\n                    return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;\n                };\n            }\n        }, {\n            key: 'directive',\n            value: function directive(type) {\n                return function (debugElement) {\n                    return debugElement.providerTokens.indexOf(type) !== -1;\n                };\n            }\n        }]);\n\n        return By;\n    }();\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */VERSION = new _core.Version('4.0.0-rc.1');\n\n    exports.BrowserModule = BrowserModule;\n    exports.platformBrowser = platformBrowser;\n    exports.Meta = Meta;\n    exports.Title = Title;\n    exports.disableDebugTools = disableDebugTools;\n    exports.enableDebugTools = enableDebugTools;\n    exports.AnimationDriver = AnimationDriver;\n    exports.By = By;\n    exports.NgProbeToken = NgProbeToken;\n    exports.DOCUMENT = DOCUMENT;\n    exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;\n    exports.EventManager = EventManager;\n    exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;\n    exports.HammerGestureConfig = HammerGestureConfig;\n    exports.DomSanitizer = DomSanitizer;\n    exports.VERSION = VERSION;\n    exports.ɵBROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS;\n    exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = INTERNAL_BROWSER_PLATFORM_PROVIDERS;\n    exports.ɵinitDomAdapter = initDomAdapter;\n    exports.ɵBrowserDomAdapter = BrowserDomAdapter;\n    exports.ɵBrowserPlatformLocation = BrowserPlatformLocation;\n    exports.ɵTRANSITION_ID = TRANSITION_ID;\n    exports.ɵBrowserGetTestability = BrowserGetTestability;\n    exports.ɵELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS;\n    exports.ɵDomAdapter = DomAdapter;\n    exports.ɵgetDOM = getDOM;\n    exports.ɵsetRootDomAdapter = setRootDomAdapter;\n    exports.ɵDomRendererFactoryV2 = DomRendererFactoryV2;\n    exports.ɵDomRootRenderer = DomRootRenderer;\n    exports.ɵDomRootRenderer_ = DomRootRenderer_;\n    exports.ɵNAMESPACE_URIS = NAMESPACE_URIS;\n    exports.ɵflattenStyles = flattenStyles;\n    exports.ɵisNamespaced = isNamespaced;\n    exports.ɵshimContentAttribute = shimContentAttribute;\n    exports.ɵshimHostAttribute = shimHostAttribute;\n    exports.ɵsplitNamespace = splitNamespace;\n    exports.ɵDomEventsPlugin = DomEventsPlugin;\n    exports.ɵHammerGesturesPlugin = HammerGesturesPlugin;\n    exports.ɵKeyEventsPlugin = KeyEventsPlugin;\n    exports.ɵDomSharedStylesHost = DomSharedStylesHost;\n    exports.ɵSharedStylesHost = SharedStylesHost;\n    exports.ɵWebAnimationsDriver = WebAnimationsDriver;\n    exports.ɵb = _document;\n    exports.ɵc = _resolveDefaultAnimationDriver;\n    exports.ɵa = errorHandler;\n    exports.ɵi = GenericBrowserDomAdapter;\n    exports.ɵh = SERVER_TRANSITION_PROVIDERS;\n    exports.ɵg = bootstrapListenerFactory;\n    exports.ɵd = _createConditionalRootRenderer;\n    exports.ɵe = EventManagerPlugin;\n    exports.ɵf = DomSanitizerImpl;\n});\n"}});
//# sourceMappingURL=angular.bundle.map